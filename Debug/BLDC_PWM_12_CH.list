
BLDC_PWM_12_CH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cac  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006e84  08006e84  00016e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ec4  08006ec4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006ec4  08006ec4  00016ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ecc  08006ecc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ecc  08006ecc  00016ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ed0  08006ed0  00016ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006ed4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  2000000c  08006ee0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08006ee0  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014093  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002642  00000000  00000000  00034112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001240  00000000  00000000  00036758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e49  00000000  00000000  00037998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026a79  00000000  00000000  000387e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001507f  00000000  00000000  0005f25a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000feea0  00000000  00000000  000742d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004d08  00000000  00000000  0017317c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00177e84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006e6c 	.word	0x08006e6c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006e6c 	.word	0x08006e6c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b098      	sub	sp, #96	; 0x60
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f002 fa8a 	bl	8002a32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f9b3 	bl	8000888 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 fd0f 	bl	8000f44 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000526:	f000 fa35 	bl	8000994 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 800052a:	f000 fac9 	bl	8000ac0 <MX_TIM1_Init>
  MX_DAC1_Init();
 800052e:	f000 f9f7 	bl	8000920 <MX_DAC1_Init>
  MX_USART1_UART_Init();
 8000532:	f000 fa79 	bl	8000a28 <MX_USART1_UART_Init>
  MX_TIM8_Init();
 8000536:	f000 fc4d 	bl	8000dd4 <MX_TIM8_Init>
  MX_TIM2_Init();
 800053a:	f000 fb79 	bl	8000c30 <MX_TIM2_Init>
  MX_TIM3_Init();
 800053e:	f000 fbf1 	bl	8000d24 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000542:	2100      	movs	r1, #0
 8000544:	48a6      	ldr	r0, [pc, #664]	; (80007e0 <main+0x2cc>)
 8000546:	f004 f905 	bl	8004754 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800054a:	2104      	movs	r1, #4
 800054c:	48a4      	ldr	r0, [pc, #656]	; (80007e0 <main+0x2cc>)
 800054e:	f004 f901 	bl	8004754 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000552:	2108      	movs	r1, #8
 8000554:	48a2      	ldr	r0, [pc, #648]	; (80007e0 <main+0x2cc>)
 8000556:	f004 f8fd 	bl	8004754 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800055a:	210c      	movs	r1, #12
 800055c:	48a0      	ldr	r0, [pc, #640]	; (80007e0 <main+0x2cc>)
 800055e:	f004 f8f9 	bl	8004754 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000562:	2100      	movs	r1, #0
 8000564:	489f      	ldr	r0, [pc, #636]	; (80007e4 <main+0x2d0>)
 8000566:	f004 f8f5 	bl	8004754 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800056a:	2104      	movs	r1, #4
 800056c:	489d      	ldr	r0, [pc, #628]	; (80007e4 <main+0x2d0>)
 800056e:	f004 f8f1 	bl	8004754 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000572:	2108      	movs	r1, #8
 8000574:	489b      	ldr	r0, [pc, #620]	; (80007e4 <main+0x2d0>)
 8000576:	f004 f8ed 	bl	8004754 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800057a:	210c      	movs	r1, #12
 800057c:	4899      	ldr	r0, [pc, #612]	; (80007e4 <main+0x2d0>)
 800057e:	f004 f8e9 	bl	8004754 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000582:	2100      	movs	r1, #0
 8000584:	4898      	ldr	r0, [pc, #608]	; (80007e8 <main+0x2d4>)
 8000586:	f004 f8e5 	bl	8004754 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 800058a:	2104      	movs	r1, #4
 800058c:	4896      	ldr	r0, [pc, #600]	; (80007e8 <main+0x2d4>)
 800058e:	f004 f8e1 	bl	8004754 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8000592:	2108      	movs	r1, #8
 8000594:	4894      	ldr	r0, [pc, #592]	; (80007e8 <main+0x2d4>)
 8000596:	f004 f8dd 	bl	8004754 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 800059a:	210c      	movs	r1, #12
 800059c:	4892      	ldr	r0, [pc, #584]	; (80007e8 <main+0x2d4>)
 800059e:	f004 f8d9 	bl	8004754 <HAL_TIM_PWM_Start>


  PWM1 = 0;
 80005a2:	4b92      	ldr	r3, [pc, #584]	; (80007ec <main+0x2d8>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	801a      	strh	r2, [r3, #0]
  PWM2 = 0;
 80005a8:	4b91      	ldr	r3, [pc, #580]	; (80007f0 <main+0x2dc>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	801a      	strh	r2, [r3, #0]
  PWM3 = 0;
 80005ae:	4b91      	ldr	r3, [pc, #580]	; (80007f4 <main+0x2e0>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	801a      	strh	r2, [r3, #0]
  PWM4 = 0;
 80005b4:	4b90      	ldr	r3, [pc, #576]	; (80007f8 <main+0x2e4>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	801a      	strh	r2, [r3, #0]
//  TIM8->CCR3 = 2048;
//  TIM8->CCR4 = 2048;
  uint32_t timer;
  uint32_t time;

  uint8_t currentState = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
		InverterX(2) - low switches are on, high switches are off
		InverterX(3) - 120 deg. commutation with PWM
		InverterX(4) - 120 deg. commutation without PWM
		*/

		time = HAL_GetTick();
 80005c0:	f002 fa9c 	bl	8002afc <HAL_GetTick>
 80005c4:	6578      	str	r0, [r7, #84]	; 0x54

		switch (currentState)
 80005c6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80005ca:	2b08      	cmp	r3, #8
 80005cc:	d8f8      	bhi.n	80005c0 <main+0xac>
 80005ce:	a201      	add	r2, pc, #4	; (adr r2, 80005d4 <main+0xc0>)
 80005d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005d4:	080005f9 	.word	0x080005f9
 80005d8:	08000627 	.word	0x08000627
 80005dc:	0800068f 	.word	0x0800068f
 80005e0:	080006bf 	.word	0x080006bf
 80005e4:	08000723 	.word	0x08000723
 80005e8:	08000753 	.word	0x08000753
 80005ec:	080007b1 	.word	0x080007b1
 80005f0:	080007fd 	.word	0x080007fd
 80005f4:	0800085f 	.word	0x0800085f
		{
		case 0:
			Inverter1(1);
 80005f8:	2001      	movs	r0, #1
 80005fa:	f001 f9fb 	bl	80019f4 <Inverter1>
			Inverter2(1);
 80005fe:	2001      	movs	r0, #1
 8000600:	f001 fc88 	bl	8001f14 <Inverter2>
			Inverter3(1);
 8000604:	2001      	movs	r0, #1
 8000606:	f001 fb3d 	bl	8001c84 <Inverter3>
			Inverter4(1);
 800060a:	2001      	movs	r0, #1
 800060c:	f001 fdee 	bl	80021ec <Inverter4>
			if (time >= 2000)
 8000610:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000612:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000616:	f0c0 812f 	bcc.w	8000878 <main+0x364>
			{
				stateOffTime[0] = time;
 800061a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800061c:	607b      	str	r3, [r7, #4]
				currentState = 1;
 800061e:	2301      	movs	r3, #1
 8000620:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

			}


			break;
 8000624:	e128      	b.n	8000878 <main+0x364>
		case 1:
			if (time >= timer)
 8000626:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000628:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800062a:	429a      	cmp	r2, r3
 800062c:	d30f      	bcc.n	800064e <main+0x13a>
			{
				timer = time + 20;
 800062e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000630:	3314      	adds	r3, #20
 8000632:	65fb      	str	r3, [r7, #92]	; 0x5c
				PWM1 += 10;
 8000634:	4b6d      	ldr	r3, [pc, #436]	; (80007ec <main+0x2d8>)
 8000636:	881b      	ldrh	r3, [r3, #0]
 8000638:	b29b      	uxth	r3, r3
 800063a:	330a      	adds	r3, #10
 800063c:	b29a      	uxth	r2, r3
 800063e:	4b6b      	ldr	r3, [pc, #428]	; (80007ec <main+0x2d8>)
 8000640:	801a      	strh	r2, [r3, #0]
				PWM2 += 10;
 8000642:	4b6b      	ldr	r3, [pc, #428]	; (80007f0 <main+0x2dc>)
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	330a      	adds	r3, #10
 8000648:	b29a      	uxth	r2, r3
 800064a:	4b69      	ldr	r3, [pc, #420]	; (80007f0 <main+0x2dc>)
 800064c:	801a      	strh	r2, [r3, #0]
			}

			if (PWM1 > 4095)
 800064e:	4b67      	ldr	r3, [pc, #412]	; (80007ec <main+0x2d8>)
 8000650:	881b      	ldrh	r3, [r3, #0]
 8000652:	b29b      	uxth	r3, r3
 8000654:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000658:	d30c      	bcc.n	8000674 <main+0x160>
			{
				PWM1 = 4095;
 800065a:	4b64      	ldr	r3, [pc, #400]	; (80007ec <main+0x2d8>)
 800065c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000660:	801a      	strh	r2, [r3, #0]
				PWM2 = 4095;
 8000662:	4b63      	ldr	r3, [pc, #396]	; (80007f0 <main+0x2dc>)
 8000664:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000668:	801a      	strh	r2, [r3, #0]
				currentState = 2;
 800066a:	2302      	movs	r3, #2
 800066c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
				stateOffTime[1] = time;
 8000670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000672:	60bb      	str	r3, [r7, #8]
			}
//			PWM1 = 2000;
//			PWM2 = 2000;

			Inverter1(3);
 8000674:	2003      	movs	r0, #3
 8000676:	f001 f9bd 	bl	80019f4 <Inverter1>
			Inverter2(3);
 800067a:	2003      	movs	r0, #3
 800067c:	f001 fc4a 	bl	8001f14 <Inverter2>
			Inverter3(2);
 8000680:	2002      	movs	r0, #2
 8000682:	f001 faff 	bl	8001c84 <Inverter3>
			Inverter4(2);
 8000686:	2002      	movs	r0, #2
 8000688:	f001 fdb0 	bl	80021ec <Inverter4>
			break;
 800068c:	e0f6      	b.n	800087c <main+0x368>

		case 2:

			if ((time -stateOffTime[1]) >=4000)
 800068e:	68bb      	ldr	r3, [r7, #8]
 8000690:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000692:	1ad3      	subs	r3, r2, r3
 8000694:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000698:	d304      	bcc.n	80006a4 <main+0x190>
			{
				currentState = 3;
 800069a:	2303      	movs	r3, #3
 800069c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
				stateOffTime[2] = time;
 80006a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80006a2:	60fb      	str	r3, [r7, #12]
			}

			Inverter1(4);
 80006a4:	2004      	movs	r0, #4
 80006a6:	f001 f9a5 	bl	80019f4 <Inverter1>
			Inverter2(1);
 80006aa:	2001      	movs	r0, #1
 80006ac:	f001 fc32 	bl	8001f14 <Inverter2>
			Inverter3(2);
 80006b0:	2002      	movs	r0, #2
 80006b2:	f001 fae7 	bl	8001c84 <Inverter3>
			Inverter4(1);
 80006b6:	2001      	movs	r0, #1
 80006b8:	f001 fd98 	bl	80021ec <Inverter4>
			break;
 80006bc:	e0de      	b.n	800087c <main+0x368>

		case 3:
			if (time >= timer)
 80006be:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80006c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d30e      	bcc.n	80006e4 <main+0x1d0>
			{
				timer = time + 20;
 80006c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80006c8:	3314      	adds	r3, #20
 80006ca:	65fb      	str	r3, [r7, #92]	; 0x5c
				PWM3 += 10;
 80006cc:	4b49      	ldr	r3, [pc, #292]	; (80007f4 <main+0x2e0>)
 80006ce:	881b      	ldrh	r3, [r3, #0]
 80006d0:	330a      	adds	r3, #10
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	4b47      	ldr	r3, [pc, #284]	; (80007f4 <main+0x2e0>)
 80006d6:	801a      	strh	r2, [r3, #0]
				PWM4 += 10;
 80006d8:	4b47      	ldr	r3, [pc, #284]	; (80007f8 <main+0x2e4>)
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	330a      	adds	r3, #10
 80006de:	b29a      	uxth	r2, r3
 80006e0:	4b45      	ldr	r3, [pc, #276]	; (80007f8 <main+0x2e4>)
 80006e2:	801a      	strh	r2, [r3, #0]
			}

			if (PWM3 > 4095)
 80006e4:	4b43      	ldr	r3, [pc, #268]	; (80007f4 <main+0x2e0>)
 80006e6:	881b      	ldrh	r3, [r3, #0]
 80006e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006ec:	d30c      	bcc.n	8000708 <main+0x1f4>
			{
				PWM3 = 4095;
 80006ee:	4b41      	ldr	r3, [pc, #260]	; (80007f4 <main+0x2e0>)
 80006f0:	f640 72ff 	movw	r2, #4095	; 0xfff
 80006f4:	801a      	strh	r2, [r3, #0]
				PWM4 = 4095;
 80006f6:	4b40      	ldr	r3, [pc, #256]	; (80007f8 <main+0x2e4>)
 80006f8:	f640 72ff 	movw	r2, #4095	; 0xfff
 80006fc:	801a      	strh	r2, [r3, #0]
				currentState = 4;
 80006fe:	2304      	movs	r3, #4
 8000700:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
				stateOffTime[3] = time;
 8000704:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000706:	613b      	str	r3, [r7, #16]
			}
//			PWM1 = 2000;
//			PWM2 = 2000;

			Inverter1(4);
 8000708:	2004      	movs	r0, #4
 800070a:	f001 f973 	bl	80019f4 <Inverter1>
			Inverter2(4);
 800070e:	2004      	movs	r0, #4
 8000710:	f001 fc00 	bl	8001f14 <Inverter2>
			Inverter3(3);
 8000714:	2003      	movs	r0, #3
 8000716:	f001 fab5 	bl	8001c84 <Inverter3>
			Inverter4(3);
 800071a:	2003      	movs	r0, #3
 800071c:	f001 fd66 	bl	80021ec <Inverter4>
			break;
 8000720:	e0ac      	b.n	800087c <main+0x368>

		case 4:
		if ((time -stateOffTime[3]) >=4000)
 8000722:	693b      	ldr	r3, [r7, #16]
 8000724:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000726:	1ad3      	subs	r3, r2, r3
 8000728:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800072c:	d304      	bcc.n	8000738 <main+0x224>
		{
			currentState = 5;
 800072e:	2305      	movs	r3, #5
 8000730:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			stateOffTime[2] = time;
 8000734:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000736:	60fb      	str	r3, [r7, #12]
		}

		Inverter1(4);
 8000738:	2004      	movs	r0, #4
 800073a:	f001 f95b 	bl	80019f4 <Inverter1>
		Inverter2(1);
 800073e:	2001      	movs	r0, #1
 8000740:	f001 fbe8 	bl	8001f14 <Inverter2>
		Inverter3(4);
 8000744:	2004      	movs	r0, #4
 8000746:	f001 fa9d 	bl	8001c84 <Inverter3>
		Inverter4(1);
 800074a:	2001      	movs	r0, #1
 800074c:	f001 fd4e 	bl	80021ec <Inverter4>
		break;
 8000750:	e094      	b.n	800087c <main+0x368>

		case 5:
			if (time >= timer)
 8000752:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000756:	429a      	cmp	r2, r3
 8000758:	d30e      	bcc.n	8000778 <main+0x264>
			{
				timer = time + 20;
 800075a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800075c:	3314      	adds	r3, #20
 800075e:	65fb      	str	r3, [r7, #92]	; 0x5c
				PWM3 -= 10;
 8000760:	4b24      	ldr	r3, [pc, #144]	; (80007f4 <main+0x2e0>)
 8000762:	881b      	ldrh	r3, [r3, #0]
 8000764:	3b0a      	subs	r3, #10
 8000766:	b29a      	uxth	r2, r3
 8000768:	4b22      	ldr	r3, [pc, #136]	; (80007f4 <main+0x2e0>)
 800076a:	801a      	strh	r2, [r3, #0]
				PWM4 -= 10;
 800076c:	4b22      	ldr	r3, [pc, #136]	; (80007f8 <main+0x2e4>)
 800076e:	881b      	ldrh	r3, [r3, #0]
 8000770:	3b0a      	subs	r3, #10
 8000772:	b29a      	uxth	r2, r3
 8000774:	4b20      	ldr	r3, [pc, #128]	; (80007f8 <main+0x2e4>)
 8000776:	801a      	strh	r2, [r3, #0]
			}

			if (PWM3 < 10)
 8000778:	4b1e      	ldr	r3, [pc, #120]	; (80007f4 <main+0x2e0>)
 800077a:	881b      	ldrh	r3, [r3, #0]
 800077c:	2b09      	cmp	r3, #9
 800077e:	d80a      	bhi.n	8000796 <main+0x282>
			{
				PWM3 = 0;
 8000780:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <main+0x2e0>)
 8000782:	2200      	movs	r2, #0
 8000784:	801a      	strh	r2, [r3, #0]
				PWM4 = 0;
 8000786:	4b1c      	ldr	r3, [pc, #112]	; (80007f8 <main+0x2e4>)
 8000788:	2200      	movs	r2, #0
 800078a:	801a      	strh	r2, [r3, #0]
				currentState = 6;
 800078c:	2306      	movs	r3, #6
 800078e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
				stateOffTime[5] = time;
 8000792:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000794:	61bb      	str	r3, [r7, #24]
			}
//			PWM1 = 2000;
//			PWM2 = 2000;

			Inverter1(4);
 8000796:	2004      	movs	r0, #4
 8000798:	f001 f92c 	bl	80019f4 <Inverter1>
			Inverter2(4);
 800079c:	2004      	movs	r0, #4
 800079e:	f001 fbb9 	bl	8001f14 <Inverter2>
			Inverter3(3);
 80007a2:	2003      	movs	r0, #3
 80007a4:	f001 fa6e 	bl	8001c84 <Inverter3>
			Inverter4(3);
 80007a8:	2003      	movs	r0, #3
 80007aa:	f001 fd1f 	bl	80021ec <Inverter4>
			break;
 80007ae:	e065      	b.n	800087c <main+0x368>

		case 6:
			if ((time -stateOffTime[5]) >=4000)
 80007b0:	69bb      	ldr	r3, [r7, #24]
 80007b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80007ba:	d304      	bcc.n	80007c6 <main+0x2b2>
			{
				currentState = 7;
 80007bc:	2307      	movs	r3, #7
 80007be:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
				stateOffTime[6] = time;
 80007c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80007c4:	61fb      	str	r3, [r7, #28]
			}

			Inverter1(4);
 80007c6:	2004      	movs	r0, #4
 80007c8:	f001 f914 	bl	80019f4 <Inverter1>
			Inverter2(1);
 80007cc:	2001      	movs	r0, #1
 80007ce:	f001 fba1 	bl	8001f14 <Inverter2>
			Inverter3(2);
 80007d2:	2002      	movs	r0, #2
 80007d4:	f001 fa56 	bl	8001c84 <Inverter3>
			Inverter4(1);
 80007d8:	2001      	movs	r0, #1
 80007da:	f001 fd07 	bl	80021ec <Inverter4>
			break;
 80007de:	e04d      	b.n	800087c <main+0x368>
 80007e0:	2000015c 	.word	0x2000015c
 80007e4:	200001a8 	.word	0x200001a8
 80007e8:	20000240 	.word	0x20000240
 80007ec:	2000028c 	.word	0x2000028c
 80007f0:	2000028e 	.word	0x2000028e
 80007f4:	20000290 	.word	0x20000290
 80007f8:	20000292 	.word	0x20000292

		case 7:
			if (time >= timer)
 80007fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80007fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000800:	429a      	cmp	r2, r3
 8000802:	d30f      	bcc.n	8000824 <main+0x310>
			{
				timer = time + 20;
 8000804:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000806:	3314      	adds	r3, #20
 8000808:	65fb      	str	r3, [r7, #92]	; 0x5c
				PWM1 = PWM1 - 10;
 800080a:	4b1d      	ldr	r3, [pc, #116]	; (8000880 <main+0x36c>)
 800080c:	881b      	ldrh	r3, [r3, #0]
 800080e:	b29b      	uxth	r3, r3
 8000810:	3b0a      	subs	r3, #10
 8000812:	b29a      	uxth	r2, r3
 8000814:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <main+0x36c>)
 8000816:	801a      	strh	r2, [r3, #0]
				PWM2 -= 10;
 8000818:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <main+0x370>)
 800081a:	881b      	ldrh	r3, [r3, #0]
 800081c:	3b0a      	subs	r3, #10
 800081e:	b29a      	uxth	r2, r3
 8000820:	4b18      	ldr	r3, [pc, #96]	; (8000884 <main+0x370>)
 8000822:	801a      	strh	r2, [r3, #0]
			}

			if (PWM1 < 10)
 8000824:	4b16      	ldr	r3, [pc, #88]	; (8000880 <main+0x36c>)
 8000826:	881b      	ldrh	r3, [r3, #0]
 8000828:	b29b      	uxth	r3, r3
 800082a:	2b09      	cmp	r3, #9
 800082c:	d80a      	bhi.n	8000844 <main+0x330>
			{
				PWM1 = 0;
 800082e:	4b14      	ldr	r3, [pc, #80]	; (8000880 <main+0x36c>)
 8000830:	2200      	movs	r2, #0
 8000832:	801a      	strh	r2, [r3, #0]
				PWM2 = 0;
 8000834:	4b13      	ldr	r3, [pc, #76]	; (8000884 <main+0x370>)
 8000836:	2200      	movs	r2, #0
 8000838:	801a      	strh	r2, [r3, #0]
				currentState = 8;
 800083a:	2308      	movs	r3, #8
 800083c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
				stateOffTime[7] = time;
 8000840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000842:	623b      	str	r3, [r7, #32]
			}

			Inverter1(3);
 8000844:	2003      	movs	r0, #3
 8000846:	f001 f8d5 	bl	80019f4 <Inverter1>
			Inverter2(3);
 800084a:	2003      	movs	r0, #3
 800084c:	f001 fb62 	bl	8001f14 <Inverter2>
			Inverter3(2);
 8000850:	2002      	movs	r0, #2
 8000852:	f001 fa17 	bl	8001c84 <Inverter3>
			Inverter4(2);
 8000856:	2002      	movs	r0, #2
 8000858:	f001 fcc8 	bl	80021ec <Inverter4>
			break;
 800085c:	e00e      	b.n	800087c <main+0x368>

		case 8:
			Inverter1(1);
 800085e:	2001      	movs	r0, #1
 8000860:	f001 f8c8 	bl	80019f4 <Inverter1>
			Inverter2(1);
 8000864:	2001      	movs	r0, #1
 8000866:	f001 fb55 	bl	8001f14 <Inverter2>
			Inverter3(1);
 800086a:	2001      	movs	r0, #1
 800086c:	f001 fa0a 	bl	8001c84 <Inverter3>
			Inverter4(1);
 8000870:	2001      	movs	r0, #1
 8000872:	f001 fcbb 	bl	80021ec <Inverter4>
 8000876:	e6a3      	b.n	80005c0 <main+0xac>
			break;
 8000878:	bf00      	nop
 800087a:	e6a1      	b.n	80005c0 <main+0xac>
		time = HAL_GetTick();
 800087c:	e6a0      	b.n	80005c0 <main+0xac>
 800087e:	bf00      	nop
 8000880:	2000028c 	.word	0x2000028c
 8000884:	2000028e 	.word	0x2000028e

08000888 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b094      	sub	sp, #80	; 0x50
 800088c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800088e:	f107 0318 	add.w	r3, r7, #24
 8000892:	2238      	movs	r2, #56	; 0x38
 8000894:	2100      	movs	r1, #0
 8000896:	4618      	mov	r0, r3
 8000898:	f006 fabc 	bl	8006e14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
 80008a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80008aa:	2000      	movs	r0, #0
 80008ac:	f002 fec4 	bl	8003638 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b0:	2302      	movs	r3, #2
 80008b2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ba:	2340      	movs	r3, #64	; 0x40
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008be:	2302      	movs	r3, #2
 80008c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008c2:	2302      	movs	r3, #2
 80008c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80008c6:	2304      	movs	r3, #4
 80008c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80008ca:	2355      	movs	r3, #85	; 0x55
 80008cc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008ce:	2302      	movs	r3, #2
 80008d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008d2:	2302      	movs	r3, #2
 80008d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008d6:	2302      	movs	r3, #2
 80008d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008da:	f107 0318 	add.w	r3, r7, #24
 80008de:	4618      	mov	r0, r3
 80008e0:	f002 ff5e 	bl	80037a0 <HAL_RCC_OscConfig>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <SystemClock_Config+0x66>
  {
    Error_Handler();
 80008ea:	f001 fdeb 	bl	80024c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ee:	230f      	movs	r3, #15
 80008f0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f2:	2303      	movs	r3, #3
 80008f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	2104      	movs	r1, #4
 8000906:	4618      	mov	r0, r3
 8000908:	f003 fa62 	bl	8003dd0 <HAL_RCC_ClockConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000912:	f001 fdd7 	bl	80024c4 <Error_Handler>
  }
}
 8000916:	bf00      	nop
 8000918:	3750      	adds	r7, #80	; 0x50
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
	...

08000920 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08c      	sub	sp, #48	; 0x30
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000926:	463b      	mov	r3, r7
 8000928:	2230      	movs	r2, #48	; 0x30
 800092a:	2100      	movs	r1, #0
 800092c:	4618      	mov	r0, r3
 800092e:	f006 fa71 	bl	8006e14 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000932:	4b16      	ldr	r3, [pc, #88]	; (800098c <MX_DAC1_Init+0x6c>)
 8000934:	4a16      	ldr	r2, [pc, #88]	; (8000990 <MX_DAC1_Init+0x70>)
 8000936:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000938:	4814      	ldr	r0, [pc, #80]	; (800098c <MX_DAC1_Init+0x6c>)
 800093a:	f002 fa1c 	bl	8002d76 <HAL_DAC_Init>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000944:	f001 fdbe 	bl	80024c4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000948:	2302      	movs	r3, #2
 800094a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800094c:	2300      	movs	r3, #0
 800094e:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000950:	2300      	movs	r3, #0
 8000952:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000954:	2300      	movs	r3, #0
 8000956:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000958:	2300      	movs	r3, #0
 800095a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800095c:	2300      	movs	r3, #0
 800095e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000964:	2301      	movs	r3, #1
 8000966:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800096c:	463b      	mov	r3, r7
 800096e:	2200      	movs	r2, #0
 8000970:	4619      	mov	r1, r3
 8000972:	4806      	ldr	r0, [pc, #24]	; (800098c <MX_DAC1_Init+0x6c>)
 8000974:	f002 fa22 	bl	8002dbc <HAL_DAC_ConfigChannel>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 800097e:	f001 fda1 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000982:	bf00      	nop
 8000984:	3730      	adds	r7, #48	; 0x30
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	20000028 	.word	0x20000028
 8000990:	50000800 	.word	0x50000800

08000994 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000998:	4b20      	ldr	r3, [pc, #128]	; (8000a1c <MX_LPUART1_UART_Init+0x88>)
 800099a:	4a21      	ldr	r2, [pc, #132]	; (8000a20 <MX_LPUART1_UART_Init+0x8c>)
 800099c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 800099e:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <MX_LPUART1_UART_Init+0x88>)
 80009a0:	4a20      	ldr	r2, [pc, #128]	; (8000a24 <MX_LPUART1_UART_Init+0x90>)
 80009a2:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009a4:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <MX_LPUART1_UART_Init+0x88>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80009aa:	4b1c      	ldr	r3, [pc, #112]	; (8000a1c <MX_LPUART1_UART_Init+0x88>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80009b0:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <MX_LPUART1_UART_Init+0x88>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80009b6:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <MX_LPUART1_UART_Init+0x88>)
 80009b8:	220c      	movs	r2, #12
 80009ba:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009bc:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <MX_LPUART1_UART_Init+0x88>)
 80009be:	2200      	movs	r2, #0
 80009c0:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c2:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <MX_LPUART1_UART_Init+0x88>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009c8:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MX_LPUART1_UART_Init+0x88>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009ce:	4b13      	ldr	r3, [pc, #76]	; (8000a1c <MX_LPUART1_UART_Init+0x88>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80009d4:	4811      	ldr	r0, [pc, #68]	; (8000a1c <MX_LPUART1_UART_Init+0x88>)
 80009d6:	f005 f81b 	bl	8005a10 <HAL_UART_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 80009e0:	f001 fd70 	bl	80024c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e4:	2100      	movs	r1, #0
 80009e6:	480d      	ldr	r0, [pc, #52]	; (8000a1c <MX_LPUART1_UART_Init+0x88>)
 80009e8:	f006 f949 	bl	8006c7e <HAL_UARTEx_SetTxFifoThreshold>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 80009f2:	f001 fd67 	bl	80024c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f6:	2100      	movs	r1, #0
 80009f8:	4808      	ldr	r0, [pc, #32]	; (8000a1c <MX_LPUART1_UART_Init+0x88>)
 80009fa:	f006 f97e 	bl	8006cfa <HAL_UARTEx_SetRxFifoThreshold>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000a04:	f001 fd5e 	bl	80024c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000a08:	4804      	ldr	r0, [pc, #16]	; (8000a1c <MX_LPUART1_UART_Init+0x88>)
 8000a0a:	f006 f8ff 	bl	8006c0c <HAL_UARTEx_DisableFifoMode>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000a14:	f001 fd56 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	2000003c 	.word	0x2000003c
 8000a20:	40008000 	.word	0x40008000
 8000a24:	00033324 	.word	0x00033324

08000a28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a2c:	4b22      	ldr	r3, [pc, #136]	; (8000ab8 <MX_USART1_UART_Init+0x90>)
 8000a2e:	4a23      	ldr	r2, [pc, #140]	; (8000abc <MX_USART1_UART_Init+0x94>)
 8000a30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a32:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <MX_USART1_UART_Init+0x90>)
 8000a34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3a:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <MX_USART1_UART_Init+0x90>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a40:	4b1d      	ldr	r3, [pc, #116]	; (8000ab8 <MX_USART1_UART_Init+0x90>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a46:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <MX_USART1_UART_Init+0x90>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <MX_USART1_UART_Init+0x90>)
 8000a4e:	220c      	movs	r2, #12
 8000a50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a52:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <MX_USART1_UART_Init+0x90>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a58:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <MX_USART1_UART_Init+0x90>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a5e:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <MX_USART1_UART_Init+0x90>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <MX_USART1_UART_Init+0x90>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a6a:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <MX_USART1_UART_Init+0x90>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a70:	4811      	ldr	r0, [pc, #68]	; (8000ab8 <MX_USART1_UART_Init+0x90>)
 8000a72:	f004 ffcd 	bl	8005a10 <HAL_UART_Init>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a7c:	f001 fd22 	bl	80024c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a80:	2100      	movs	r1, #0
 8000a82:	480d      	ldr	r0, [pc, #52]	; (8000ab8 <MX_USART1_UART_Init+0x90>)
 8000a84:	f006 f8fb 	bl	8006c7e <HAL_UARTEx_SetTxFifoThreshold>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a8e:	f001 fd19 	bl	80024c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a92:	2100      	movs	r1, #0
 8000a94:	4808      	ldr	r0, [pc, #32]	; (8000ab8 <MX_USART1_UART_Init+0x90>)
 8000a96:	f006 f930 	bl	8006cfa <HAL_UARTEx_SetRxFifoThreshold>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000aa0:	f001 fd10 	bl	80024c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000aa4:	4804      	ldr	r0, [pc, #16]	; (8000ab8 <MX_USART1_UART_Init+0x90>)
 8000aa6:	f006 f8b1 	bl	8006c0c <HAL_UARTEx_DisableFifoMode>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ab0:	f001 fd08 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	200000cc 	.word	0x200000cc
 8000abc:	40013800 	.word	0x40013800

08000ac0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b098      	sub	sp, #96	; 0x60
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ac6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ad2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]
 8000ae2:	615a      	str	r2, [r3, #20]
 8000ae4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2234      	movs	r2, #52	; 0x34
 8000aea:	2100      	movs	r1, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f006 f991 	bl	8006e14 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000af2:	4b4d      	ldr	r3, [pc, #308]	; (8000c28 <MX_TIM1_Init+0x168>)
 8000af4:	4a4d      	ldr	r2, [pc, #308]	; (8000c2c <MX_TIM1_Init+0x16c>)
 8000af6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000af8:	4b4b      	ldr	r3, [pc, #300]	; (8000c28 <MX_TIM1_Init+0x168>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000afe:	4b4a      	ldr	r3, [pc, #296]	; (8000c28 <MX_TIM1_Init+0x168>)
 8000b00:	2220      	movs	r2, #32
 8000b02:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4095;
 8000b04:	4b48      	ldr	r3, [pc, #288]	; (8000c28 <MX_TIM1_Init+0x168>)
 8000b06:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b0a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0c:	4b46      	ldr	r3, [pc, #280]	; (8000c28 <MX_TIM1_Init+0x168>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b12:	4b45      	ldr	r3, [pc, #276]	; (8000c28 <MX_TIM1_Init+0x168>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b18:	4b43      	ldr	r3, [pc, #268]	; (8000c28 <MX_TIM1_Init+0x168>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b1e:	4842      	ldr	r0, [pc, #264]	; (8000c28 <MX_TIM1_Init+0x168>)
 8000b20:	f003 fdc0 	bl	80046a4 <HAL_TIM_PWM_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000b2a:	f001 fccb 	bl	80024c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b32:	2300      	movs	r3, #0
 8000b34:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4839      	ldr	r0, [pc, #228]	; (8000c28 <MX_TIM1_Init+0x168>)
 8000b42:	f004 fdd7 	bl	80056f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b4c:	f001 fcba 	bl	80024c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b50:	2360      	movs	r3, #96	; 0x60
 8000b52:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000b54:	2300      	movs	r3, #0
 8000b56:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b64:	2300      	movs	r3, #0
 8000b66:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b70:	2200      	movs	r2, #0
 8000b72:	4619      	mov	r1, r3
 8000b74:	482c      	ldr	r0, [pc, #176]	; (8000c28 <MX_TIM1_Init+0x168>)
 8000b76:	f004 f87f 	bl	8004c78 <HAL_TIM_PWM_ConfigChannel>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000b80:	f001 fca0 	bl	80024c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b88:	2204      	movs	r2, #4
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4826      	ldr	r0, [pc, #152]	; (8000c28 <MX_TIM1_Init+0x168>)
 8000b8e:	f004 f873 	bl	8004c78 <HAL_TIM_PWM_ConfigChannel>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000b98:	f001 fc94 	bl	80024c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ba0:	2208      	movs	r2, #8
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4820      	ldr	r0, [pc, #128]	; (8000c28 <MX_TIM1_Init+0x168>)
 8000ba6:	f004 f867 	bl	8004c78 <HAL_TIM_PWM_ConfigChannel>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000bb0:	f001 fc88 	bl	80024c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bb4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bb8:	220c      	movs	r2, #12
 8000bba:	4619      	mov	r1, r3
 8000bbc:	481a      	ldr	r0, [pc, #104]	; (8000c28 <MX_TIM1_Init+0x168>)
 8000bbe:	f004 f85b 	bl	8004c78 <HAL_TIM_PWM_ConfigChannel>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000bc8:	f001 fc7c 	bl	80024c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000be0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000bea:	2300      	movs	r3, #0
 8000bec:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	4619      	mov	r1, r3
 8000c08:	4807      	ldr	r0, [pc, #28]	; (8000c28 <MX_TIM1_Init+0x168>)
 8000c0a:	f004 fe09 	bl	8005820 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8000c14:	f001 fc56 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c18:	4803      	ldr	r0, [pc, #12]	; (8000c28 <MX_TIM1_Init+0x168>)
 8000c1a:	f001 fdbb 	bl	8002794 <HAL_TIM_MspPostInit>

}
 8000c1e:	bf00      	nop
 8000c20:	3760      	adds	r7, #96	; 0x60
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	2000015c 	.word	0x2000015c
 8000c2c:	40012c00 	.word	0x40012c00

08000c30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c36:	f107 031c 	add.w	r3, r7, #28
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c42:	463b      	mov	r3, r7
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
 8000c50:	615a      	str	r2, [r3, #20]
 8000c52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c54:	4b32      	ldr	r3, [pc, #200]	; (8000d20 <MX_TIM2_Init+0xf0>)
 8000c56:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c5c:	4b30      	ldr	r3, [pc, #192]	; (8000d20 <MX_TIM2_Init+0xf0>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000c62:	4b2f      	ldr	r3, [pc, #188]	; (8000d20 <MX_TIM2_Init+0xf0>)
 8000c64:	2220      	movs	r2, #32
 8000c66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4095;
 8000c68:	4b2d      	ldr	r3, [pc, #180]	; (8000d20 <MX_TIM2_Init+0xf0>)
 8000c6a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000c6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c70:	4b2b      	ldr	r3, [pc, #172]	; (8000d20 <MX_TIM2_Init+0xf0>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c76:	4b2a      	ldr	r3, [pc, #168]	; (8000d20 <MX_TIM2_Init+0xf0>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c7c:	4828      	ldr	r0, [pc, #160]	; (8000d20 <MX_TIM2_Init+0xf0>)
 8000c7e:	f003 fd11 	bl	80046a4 <HAL_TIM_PWM_Init>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000c88:	f001 fc1c 	bl	80024c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c94:	f107 031c 	add.w	r3, r7, #28
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4821      	ldr	r0, [pc, #132]	; (8000d20 <MX_TIM2_Init+0xf0>)
 8000c9c:	f004 fd2a 	bl	80056f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000ca6:	f001 fc0d 	bl	80024c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000caa:	2360      	movs	r3, #96	; 0x60
 8000cac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cba:	463b      	mov	r3, r7
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4817      	ldr	r0, [pc, #92]	; (8000d20 <MX_TIM2_Init+0xf0>)
 8000cc2:	f003 ffd9 	bl	8004c78 <HAL_TIM_PWM_ConfigChannel>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000ccc:	f001 fbfa 	bl	80024c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cd0:	463b      	mov	r3, r7
 8000cd2:	2204      	movs	r2, #4
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4812      	ldr	r0, [pc, #72]	; (8000d20 <MX_TIM2_Init+0xf0>)
 8000cd8:	f003 ffce 	bl	8004c78 <HAL_TIM_PWM_ConfigChannel>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000ce2:	f001 fbef 	bl	80024c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ce6:	463b      	mov	r3, r7
 8000ce8:	2208      	movs	r2, #8
 8000cea:	4619      	mov	r1, r3
 8000cec:	480c      	ldr	r0, [pc, #48]	; (8000d20 <MX_TIM2_Init+0xf0>)
 8000cee:	f003 ffc3 	bl	8004c78 <HAL_TIM_PWM_ConfigChannel>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000cf8:	f001 fbe4 	bl	80024c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cfc:	463b      	mov	r3, r7
 8000cfe:	220c      	movs	r2, #12
 8000d00:	4619      	mov	r1, r3
 8000d02:	4807      	ldr	r0, [pc, #28]	; (8000d20 <MX_TIM2_Init+0xf0>)
 8000d04:	f003 ffb8 	bl	8004c78 <HAL_TIM_PWM_ConfigChannel>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d001      	beq.n	8000d12 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8000d0e:	f001 fbd9 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d12:	4803      	ldr	r0, [pc, #12]	; (8000d20 <MX_TIM2_Init+0xf0>)
 8000d14:	f001 fd3e 	bl	8002794 <HAL_TIM_MspPostInit>

}
 8000d18:	bf00      	nop
 8000d1a:	3728      	adds	r7, #40	; 0x28
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	200001a8 	.word	0x200001a8

08000d24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	; 0x28
 8000d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d2a:	f107 031c 	add.w	r3, r7, #28
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d36:	463b      	mov	r3, r7
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
 8000d44:	615a      	str	r2, [r3, #20]
 8000d46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d48:	4b20      	ldr	r3, [pc, #128]	; (8000dcc <MX_TIM3_Init+0xa8>)
 8000d4a:	4a21      	ldr	r2, [pc, #132]	; (8000dd0 <MX_TIM3_Init+0xac>)
 8000d4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5;
 8000d4e:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <MX_TIM3_Init+0xa8>)
 8000d50:	2205      	movs	r2, #5
 8000d52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d54:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <MX_TIM3_Init+0xa8>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d5a:	4b1c      	ldr	r3, [pc, #112]	; (8000dcc <MX_TIM3_Init+0xa8>)
 8000d5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d60:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d62:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <MX_TIM3_Init+0xa8>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d68:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <MX_TIM3_Init+0xa8>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d6e:	4817      	ldr	r0, [pc, #92]	; (8000dcc <MX_TIM3_Init+0xa8>)
 8000d70:	f003 fc98 	bl	80046a4 <HAL_TIM_PWM_Init>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000d7a:	f001 fba3 	bl	80024c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d86:	f107 031c 	add.w	r3, r7, #28
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	480f      	ldr	r0, [pc, #60]	; (8000dcc <MX_TIM3_Init+0xa8>)
 8000d8e:	f004 fcb1 	bl	80056f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000d98:	f001 fb94 	bl	80024c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d9c:	2360      	movs	r3, #96	; 0x60
 8000d9e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 16000;
 8000da0:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8000da4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000da6:	2300      	movs	r3, #0
 8000da8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dae:	463b      	mov	r3, r7
 8000db0:	2200      	movs	r2, #0
 8000db2:	4619      	mov	r1, r3
 8000db4:	4805      	ldr	r0, [pc, #20]	; (8000dcc <MX_TIM3_Init+0xa8>)
 8000db6:	f003 ff5f 	bl	8004c78 <HAL_TIM_PWM_ConfigChannel>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000dc0:	f001 fb80 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000dc4:	bf00      	nop
 8000dc6:	3728      	adds	r7, #40	; 0x28
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	200001f4 	.word	0x200001f4
 8000dd0:	40000400 	.word	0x40000400

08000dd4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b098      	sub	sp, #96	; 0x60
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dda:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000de6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
 8000df4:	611a      	str	r2, [r3, #16]
 8000df6:	615a      	str	r2, [r3, #20]
 8000df8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	2234      	movs	r2, #52	; 0x34
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f006 f807 	bl	8006e14 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000e06:	4b4d      	ldr	r3, [pc, #308]	; (8000f3c <MX_TIM8_Init+0x168>)
 8000e08:	4a4d      	ldr	r2, [pc, #308]	; (8000f40 <MX_TIM8_Init+0x16c>)
 8000e0a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000e0c:	4b4b      	ldr	r3, [pc, #300]	; (8000f3c <MX_TIM8_Init+0x168>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000e12:	4b4a      	ldr	r3, [pc, #296]	; (8000f3c <MX_TIM8_Init+0x168>)
 8000e14:	2220      	movs	r2, #32
 8000e16:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 4095;
 8000e18:	4b48      	ldr	r3, [pc, #288]	; (8000f3c <MX_TIM8_Init+0x168>)
 8000e1a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000e1e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e20:	4b46      	ldr	r3, [pc, #280]	; (8000f3c <MX_TIM8_Init+0x168>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000e26:	4b45      	ldr	r3, [pc, #276]	; (8000f3c <MX_TIM8_Init+0x168>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e2c:	4b43      	ldr	r3, [pc, #268]	; (8000f3c <MX_TIM8_Init+0x168>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000e32:	4842      	ldr	r0, [pc, #264]	; (8000f3c <MX_TIM8_Init+0x168>)
 8000e34:	f003 fc36 	bl	80046a4 <HAL_TIM_PWM_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000e3e:	f001 fb41 	bl	80024c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e42:	2300      	movs	r3, #0
 8000e44:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e46:	2300      	movs	r3, #0
 8000e48:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e4e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e52:	4619      	mov	r1, r3
 8000e54:	4839      	ldr	r0, [pc, #228]	; (8000f3c <MX_TIM8_Init+0x168>)
 8000e56:	f004 fc4d 	bl	80056f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000e60:	f001 fb30 	bl	80024c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e64:	2360      	movs	r3, #96	; 0x60
 8000e66:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e70:	2300      	movs	r3, #0
 8000e72:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e74:	2300      	movs	r3, #0
 8000e76:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e80:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e84:	2200      	movs	r2, #0
 8000e86:	4619      	mov	r1, r3
 8000e88:	482c      	ldr	r0, [pc, #176]	; (8000f3c <MX_TIM8_Init+0x168>)
 8000e8a:	f003 fef5 	bl	8004c78 <HAL_TIM_PWM_ConfigChannel>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000e94:	f001 fb16 	bl	80024c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e9c:	2204      	movs	r2, #4
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4826      	ldr	r0, [pc, #152]	; (8000f3c <MX_TIM8_Init+0x168>)
 8000ea2:	f003 fee9 	bl	8004c78 <HAL_TIM_PWM_ConfigChannel>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8000eac:	f001 fb0a 	bl	80024c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000eb0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000eb4:	2208      	movs	r2, #8
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4820      	ldr	r0, [pc, #128]	; (8000f3c <MX_TIM8_Init+0x168>)
 8000eba:	f003 fedd 	bl	8004c78 <HAL_TIM_PWM_ConfigChannel>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8000ec4:	f001 fafe 	bl	80024c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ec8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ecc:	220c      	movs	r2, #12
 8000ece:	4619      	mov	r1, r3
 8000ed0:	481a      	ldr	r0, [pc, #104]	; (8000f3c <MX_TIM8_Init+0x168>)
 8000ed2:	f003 fed1 	bl	8004c78 <HAL_TIM_PWM_ConfigChannel>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM8_Init+0x10c>
  {
    Error_Handler();
 8000edc:	f001 faf2 	bl	80024c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ef4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ef8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000efe:	2300      	movs	r3, #0
 8000f00:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f02:	2300      	movs	r3, #0
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000f10:	2300      	movs	r3, #0
 8000f12:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f14:	2300      	movs	r3, #0
 8000f16:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4807      	ldr	r0, [pc, #28]	; (8000f3c <MX_TIM8_Init+0x168>)
 8000f1e:	f004 fc7f 	bl	8005820 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <MX_TIM8_Init+0x158>
  {
    Error_Handler();
 8000f28:	f001 facc 	bl	80024c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000f2c:	4803      	ldr	r0, [pc, #12]	; (8000f3c <MX_TIM8_Init+0x168>)
 8000f2e:	f001 fc31 	bl	8002794 <HAL_TIM_MspPostInit>

}
 8000f32:	bf00      	nop
 8000f34:	3760      	adds	r7, #96	; 0x60
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000240 	.word	0x20000240
 8000f40:	40013400 	.word	0x40013400

08000f44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08a      	sub	sp, #40	; 0x28
 8000f48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4a:	f107 0314 	add.w	r3, r7, #20
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
 8000f58:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5a:	4b47      	ldr	r3, [pc, #284]	; (8001078 <MX_GPIO_Init+0x134>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f5e:	4a46      	ldr	r2, [pc, #280]	; (8001078 <MX_GPIO_Init+0x134>)
 8000f60:	f043 0304 	orr.w	r3, r3, #4
 8000f64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f66:	4b44      	ldr	r3, [pc, #272]	; (8001078 <MX_GPIO_Init+0x134>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6a:	f003 0304 	and.w	r3, r3, #4
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f72:	4b41      	ldr	r3, [pc, #260]	; (8001078 <MX_GPIO_Init+0x134>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f76:	4a40      	ldr	r2, [pc, #256]	; (8001078 <MX_GPIO_Init+0x134>)
 8000f78:	f043 0320 	orr.w	r3, r3, #32
 8000f7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f7e:	4b3e      	ldr	r3, [pc, #248]	; (8001078 <MX_GPIO_Init+0x134>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	f003 0320 	and.w	r3, r3, #32
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8a:	4b3b      	ldr	r3, [pc, #236]	; (8001078 <MX_GPIO_Init+0x134>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	4a3a      	ldr	r2, [pc, #232]	; (8001078 <MX_GPIO_Init+0x134>)
 8000f90:	f043 0301 	orr.w	r3, r3, #1
 8000f94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f96:	4b38      	ldr	r3, [pc, #224]	; (8001078 <MX_GPIO_Init+0x134>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa2:	4b35      	ldr	r3, [pc, #212]	; (8001078 <MX_GPIO_Init+0x134>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	4a34      	ldr	r2, [pc, #208]	; (8001078 <MX_GPIO_Init+0x134>)
 8000fa8:	f043 0302 	orr.w	r3, r3, #2
 8000fac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fae:	4b32      	ldr	r3, [pc, #200]	; (8001078 <MX_GPIO_Init+0x134>)
 8000fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb2:	f003 0302 	and.w	r3, r3, #2
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SD_A_3_Pin|SD_B_3_Pin|SD_C_3_Pin|SD_A_4_Pin
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f44f 51cf 	mov.w	r1, #6624	; 0x19e0
 8000fc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc4:	f002 fafc 	bl	80035c0 <HAL_GPIO_WritePin>
                          |SD_B_4_Pin|SD_C_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_B_1_Pin|SD_C_1_Pin|SD_A_1_Pin|Toggle_pin_Pin
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f24e 4107 	movw	r1, #58375	; 0xe407
 8000fce:	482b      	ldr	r0, [pc, #172]	; (800107c <MX_GPIO_Init+0x138>)
 8000fd0:	f002 faf6 	bl	80035c0 <HAL_GPIO_WritePin>
                          |SD_A_2_Pin|SD_B_2_Pin|SD_C_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fda:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4825      	ldr	r0, [pc, #148]	; (8001080 <MX_GPIO_Init+0x13c>)
 8000fec:	f002 f94e 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_A_3_Pin SD_B_3_Pin SD_C_3_Pin SD_A_4_Pin
                           SD_B_4_Pin SD_C_4_Pin */
  GPIO_InitStruct.Pin = SD_A_3_Pin|SD_B_3_Pin|SD_C_3_Pin|SD_A_4_Pin
 8000ff0:	f44f 53cf 	mov.w	r3, #6624	; 0x19e0
 8000ff4:	617b      	str	r3, [r7, #20]
                          |SD_B_4_Pin|SD_C_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001002:	f107 0314 	add.w	r3, r7, #20
 8001006:	4619      	mov	r1, r3
 8001008:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800100c:	f002 f93e 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_B_1_Pin SD_C_1_Pin SD_A_1_Pin Toggle_pin_Pin
                           SD_A_2_Pin SD_B_2_Pin SD_C_2_Pin */
  GPIO_InitStruct.Pin = SD_B_1_Pin|SD_C_1_Pin|SD_A_1_Pin|Toggle_pin_Pin
 8001010:	f24e 4307 	movw	r3, #58375	; 0xe407
 8001014:	617b      	str	r3, [r7, #20]
                          |SD_A_2_Pin|SD_B_2_Pin|SD_C_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001016:	2301      	movs	r3, #1
 8001018:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2300      	movs	r3, #0
 8001020:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	4619      	mov	r1, r3
 8001028:	4814      	ldr	r0, [pc, #80]	; (800107c <MX_GPIO_Init+0x138>)
 800102a:	f002 f92f 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pins : HS4_Pin HS5_Pin HS6_Pin */
  GPIO_InitStruct.Pin = HS4_Pin|HS5_Pin|HS6_Pin;
 800102e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001032:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001034:	2300      	movs	r3, #0
 8001036:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001038:	2302      	movs	r3, #2
 800103a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	4619      	mov	r1, r3
 8001042:	480f      	ldr	r0, [pc, #60]	; (8001080 <MX_GPIO_Init+0x13c>)
 8001044:	f002 f922 	bl	800328c <HAL_GPIO_Init>

  /*Configure GPIO pins : HS1_Pin HS2_Pin HS3_Pin */
  GPIO_InitStruct.Pin = HS1_Pin|HS2_Pin|HS3_Pin;
 8001048:	2370      	movs	r3, #112	; 0x70
 800104a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800104c:	2300      	movs	r3, #0
 800104e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001050:	2302      	movs	r3, #2
 8001052:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	4619      	mov	r1, r3
 800105a:	4808      	ldr	r0, [pc, #32]	; (800107c <MX_GPIO_Init+0x138>)
 800105c:	f002 f916 	bl	800328c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001060:	2200      	movs	r2, #0
 8001062:	2100      	movs	r1, #0
 8001064:	2028      	movs	r0, #40	; 0x28
 8001066:	f001 fe52 	bl	8002d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800106a:	2028      	movs	r0, #40	; 0x28
 800106c:	f001 fe69 	bl	8002d42 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001070:	bf00      	nop
 8001072:	3728      	adds	r7, #40	; 0x28
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	40021000 	.word	0x40021000
 800107c:	48000400 	.word	0x48000400
 8001080:	48000800 	.word	0x48000800

08001084 <state0_inv1>:

//void HAL_TIM_PWM_PulseFinishedCallback (TIM_HandleTypeDef * htim){
//HAL_GPIO_TogglePin (GPIOB, Toggle_pin_Pin);
//}

void state0_inv1() {
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0

	IN_A_1 = 0;
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <state0_inv1+0x38>)
 800108a:	2200      	movs	r2, #0
 800108c:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_1;
 800108e:	2201      	movs	r2, #1
 8001090:	2104      	movs	r1, #4
 8001092:	480b      	ldr	r0, [pc, #44]	; (80010c0 <state0_inv1+0x3c>)
 8001094:	f002 fa94 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_B_1 = 0;
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <state0_inv1+0x38>)
 800109a:	2200      	movs	r2, #0
 800109c:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_1;
 800109e:	2201      	movs	r2, #1
 80010a0:	2101      	movs	r1, #1
 80010a2:	4807      	ldr	r0, [pc, #28]	; (80010c0 <state0_inv1+0x3c>)
 80010a4:	f002 fa8c 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_C_1 = 0;
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <state0_inv1+0x38>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_1;
 80010ae:	2201      	movs	r2, #1
 80010b0:	2102      	movs	r1, #2
 80010b2:	4803      	ldr	r0, [pc, #12]	; (80010c0 <state0_inv1+0x3c>)
 80010b4:	f002 fa84 	bl	80035c0 <HAL_GPIO_WritePin>

}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40012c00 	.word	0x40012c00
 80010c0:	48000400 	.word	0x48000400

080010c4 <state1_inv1>:

void state1_inv1() {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0

	IN_A_1 = 0;
 80010c8:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <state1_inv1+0x3c>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	635a      	str	r2, [r3, #52]	; 0x34
	RESET_SD_A_1;
 80010ce:	2200      	movs	r2, #0
 80010d0:	2104      	movs	r1, #4
 80010d2:	480c      	ldr	r0, [pc, #48]	; (8001104 <state1_inv1+0x40>)
 80010d4:	f002 fa74 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_B_1 = PWM1;
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <state1_inv1+0x44>)
 80010da:	881b      	ldrh	r3, [r3, #0]
 80010dc:	b29a      	uxth	r2, r3
 80010de:	4b08      	ldr	r3, [pc, #32]	; (8001100 <state1_inv1+0x3c>)
 80010e0:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_1;
 80010e2:	2201      	movs	r2, #1
 80010e4:	2101      	movs	r1, #1
 80010e6:	4807      	ldr	r0, [pc, #28]	; (8001104 <state1_inv1+0x40>)
 80010e8:	f002 fa6a 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_C_1 = 0;
 80010ec:	4b04      	ldr	r3, [pc, #16]	; (8001100 <state1_inv1+0x3c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_1;
 80010f2:	2201      	movs	r2, #1
 80010f4:	2102      	movs	r1, #2
 80010f6:	4803      	ldr	r0, [pc, #12]	; (8001104 <state1_inv1+0x40>)
 80010f8:	f002 fa62 	bl	80035c0 <HAL_GPIO_WritePin>
//		TIM1->CCR2 = PWM1;
//		TIM1->CCR3 = PWM1;
//    	HAL_GPIO_WritePin(GPIOB, SD_A_1_Pin, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(GPIOB, SD_B_1_Pin, GPIO_PIN_SET);
//		HAL_GPIO_WritePin(GPIOB, SD_C_1_Pin, GPIO_PIN_RESET);
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40012c00 	.word	0x40012c00
 8001104:	48000400 	.word	0x48000400
 8001108:	2000028c 	.word	0x2000028c

0800110c <state2_inv1>:
void state2_inv1() {
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0

	IN_A_1 = PWM1;
 8001110:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <state2_inv1+0x3c>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	b29a      	uxth	r2, r3
 8001116:	4b0d      	ldr	r3, [pc, #52]	; (800114c <state2_inv1+0x40>)
 8001118:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_1;
 800111a:	2201      	movs	r2, #1
 800111c:	2104      	movs	r1, #4
 800111e:	480c      	ldr	r0, [pc, #48]	; (8001150 <state2_inv1+0x44>)
 8001120:	f002 fa4e 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_B_1 = 0;
 8001124:	4b09      	ldr	r3, [pc, #36]	; (800114c <state2_inv1+0x40>)
 8001126:	2200      	movs	r2, #0
 8001128:	639a      	str	r2, [r3, #56]	; 0x38
	RESET_SD_B_1;
 800112a:	2200      	movs	r2, #0
 800112c:	2101      	movs	r1, #1
 800112e:	4808      	ldr	r0, [pc, #32]	; (8001150 <state2_inv1+0x44>)
 8001130:	f002 fa46 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_C_1 = 0;
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <state2_inv1+0x40>)
 8001136:	2200      	movs	r2, #0
 8001138:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_1;
 800113a:	2201      	movs	r2, #1
 800113c:	2102      	movs	r1, #2
 800113e:	4804      	ldr	r0, [pc, #16]	; (8001150 <state2_inv1+0x44>)
 8001140:	f002 fa3e 	bl	80035c0 <HAL_GPIO_WritePin>
//		TIM1->CCR2 = 0;
//		TIM1->CCR3 = PWM1;
//    	HAL_GPIO_WritePin(GPIOB, SD_A_1_Pin, GPIO_PIN_SET);
//		HAL_GPIO_WritePin(GPIOB, SD_B_1_Pin, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(GPIOB, SD_C_1_Pin, GPIO_PIN_RESET);
}
 8001144:	bf00      	nop
 8001146:	bd80      	pop	{r7, pc}
 8001148:	2000028c 	.word	0x2000028c
 800114c:	40012c00 	.word	0x40012c00
 8001150:	48000400 	.word	0x48000400

08001154 <state3_inv1>:

void state3_inv1() {
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0

	IN_A_1 = PWM1;
 8001158:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <state3_inv1+0x3c>)
 800115a:	881b      	ldrh	r3, [r3, #0]
 800115c:	b29a      	uxth	r2, r3
 800115e:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <state3_inv1+0x40>)
 8001160:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_1;
 8001162:	2201      	movs	r2, #1
 8001164:	2104      	movs	r1, #4
 8001166:	480c      	ldr	r0, [pc, #48]	; (8001198 <state3_inv1+0x44>)
 8001168:	f002 fa2a 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_B_1 = 0;
 800116c:	4b09      	ldr	r3, [pc, #36]	; (8001194 <state3_inv1+0x40>)
 800116e:	2200      	movs	r2, #0
 8001170:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_1;
 8001172:	2201      	movs	r2, #1
 8001174:	2101      	movs	r1, #1
 8001176:	4808      	ldr	r0, [pc, #32]	; (8001198 <state3_inv1+0x44>)
 8001178:	f002 fa22 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_C_1 = 0;
 800117c:	4b05      	ldr	r3, [pc, #20]	; (8001194 <state3_inv1+0x40>)
 800117e:	2200      	movs	r2, #0
 8001180:	63da      	str	r2, [r3, #60]	; 0x3c
	RESET_SD_C_1;
 8001182:	2200      	movs	r2, #0
 8001184:	2102      	movs	r1, #2
 8001186:	4804      	ldr	r0, [pc, #16]	; (8001198 <state3_inv1+0x44>)
 8001188:	f002 fa1a 	bl	80035c0 <HAL_GPIO_WritePin>
//		TIM1->CCR2 = PWM1;
//		TIM1->CCR3 = 0;
//    	HAL_GPIO_WritePin(GPIOB, SD_A_1_Pin, GPIO_PIN_SET);
//		HAL_GPIO_WritePin(GPIOB, SD_B_1_Pin, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(GPIOB, SD_C_1_Pin, GPIO_PIN_RESET);
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}
 8001190:	2000028c 	.word	0x2000028c
 8001194:	40012c00 	.word	0x40012c00
 8001198:	48000400 	.word	0x48000400

0800119c <state4_inv1>:

void state4_inv1() {
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0

	IN_A_1 = 0;
 80011a0:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <state4_inv1+0x3c>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	635a      	str	r2, [r3, #52]	; 0x34
	RESET_SD_A_1;
 80011a6:	2200      	movs	r2, #0
 80011a8:	2104      	movs	r1, #4
 80011aa:	480c      	ldr	r0, [pc, #48]	; (80011dc <state4_inv1+0x40>)
 80011ac:	f002 fa08 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_B_1 = 0;
 80011b0:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <state4_inv1+0x3c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_1;
 80011b6:	2201      	movs	r2, #1
 80011b8:	2101      	movs	r1, #1
 80011ba:	4808      	ldr	r0, [pc, #32]	; (80011dc <state4_inv1+0x40>)
 80011bc:	f002 fa00 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_C_1 = PWM1;
 80011c0:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <state4_inv1+0x44>)
 80011c2:	881b      	ldrh	r3, [r3, #0]
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <state4_inv1+0x3c>)
 80011c8:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_1;
 80011ca:	2201      	movs	r2, #1
 80011cc:	2102      	movs	r1, #2
 80011ce:	4803      	ldr	r0, [pc, #12]	; (80011dc <state4_inv1+0x40>)
 80011d0:	f002 f9f6 	bl	80035c0 <HAL_GPIO_WritePin>
//		TIM1->CCR2 = PWM1;
//		TIM1->CCR3 = PWM1;
//    	HAL_GPIO_WritePin(GPIOB, SD_A_1_Pin, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(GPIOB, SD_B_1_Pin, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(GPIOB, SD_C_1_Pin, GPIO_PIN_SET);
}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40012c00 	.word	0x40012c00
 80011dc:	48000400 	.word	0x48000400
 80011e0:	2000028c 	.word	0x2000028c

080011e4 <state5_inv1>:

void state5_inv1() {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0

	IN_A_1 = 0;
 80011e8:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <state5_inv1+0x3c>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_1;
 80011ee:	2201      	movs	r2, #1
 80011f0:	2104      	movs	r1, #4
 80011f2:	480c      	ldr	r0, [pc, #48]	; (8001224 <state5_inv1+0x40>)
 80011f4:	f002 f9e4 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_B_1 = 0;
 80011f8:	4b09      	ldr	r3, [pc, #36]	; (8001220 <state5_inv1+0x3c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	639a      	str	r2, [r3, #56]	; 0x38
	RESET_SD_B_1;
 80011fe:	2200      	movs	r2, #0
 8001200:	2101      	movs	r1, #1
 8001202:	4808      	ldr	r0, [pc, #32]	; (8001224 <state5_inv1+0x40>)
 8001204:	f002 f9dc 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_C_1 = PWM1;
 8001208:	4b07      	ldr	r3, [pc, #28]	; (8001228 <state5_inv1+0x44>)
 800120a:	881b      	ldrh	r3, [r3, #0]
 800120c:	b29a      	uxth	r2, r3
 800120e:	4b04      	ldr	r3, [pc, #16]	; (8001220 <state5_inv1+0x3c>)
 8001210:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_1;
 8001212:	2201      	movs	r2, #1
 8001214:	2102      	movs	r1, #2
 8001216:	4803      	ldr	r0, [pc, #12]	; (8001224 <state5_inv1+0x40>)
 8001218:	f002 f9d2 	bl	80035c0 <HAL_GPIO_WritePin>
//	TIM1->CCR2 = 0;
//	TIM1->CCR3 = PWM1;
//	HAL_GPIO_WritePin(GPIOB, SD_A_1_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(GPIOB, SD_B_1_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(GPIOB, SD_C_1_Pin, GPIO_PIN_SET);
}
 800121c:	bf00      	nop
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40012c00 	.word	0x40012c00
 8001224:	48000400 	.word	0x48000400
 8001228:	2000028c 	.word	0x2000028c

0800122c <state6_inv1>:

void state6_inv1() {
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0

	IN_A_1 = 0;
 8001230:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <state6_inv1+0x3c>)
 8001232:	2200      	movs	r2, #0
 8001234:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_1;
 8001236:	2201      	movs	r2, #1
 8001238:	2104      	movs	r1, #4
 800123a:	480c      	ldr	r0, [pc, #48]	; (800126c <state6_inv1+0x40>)
 800123c:	f002 f9c0 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_B_1 = PWM1;
 8001240:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <state6_inv1+0x44>)
 8001242:	881b      	ldrh	r3, [r3, #0]
 8001244:	b29a      	uxth	r2, r3
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <state6_inv1+0x3c>)
 8001248:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_1;
 800124a:	2201      	movs	r2, #1
 800124c:	2101      	movs	r1, #1
 800124e:	4807      	ldr	r0, [pc, #28]	; (800126c <state6_inv1+0x40>)
 8001250:	f002 f9b6 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_C_1 = 0;
 8001254:	4b04      	ldr	r3, [pc, #16]	; (8001268 <state6_inv1+0x3c>)
 8001256:	2200      	movs	r2, #0
 8001258:	63da      	str	r2, [r3, #60]	; 0x3c
	RESET_SD_C_1;
 800125a:	2200      	movs	r2, #0
 800125c:	2102      	movs	r1, #2
 800125e:	4803      	ldr	r0, [pc, #12]	; (800126c <state6_inv1+0x40>)
 8001260:	f002 f9ae 	bl	80035c0 <HAL_GPIO_WritePin>
//		TIM1->CCR2 = PWM1;
//		TIM1->CCR3 = 0;
//    	HAL_GPIO_WritePin(GPIOB, SD_A_1_Pin, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(GPIOB, SD_B_1_Pin, GPIO_PIN_SET);
//		HAL_GPIO_WritePin(GPIOB, SD_C_1_Pin, GPIO_PIN_RESET);
}
 8001264:	bf00      	nop
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40012c00 	.word	0x40012c00
 800126c:	48000400 	.word	0x48000400
 8001270:	2000028c 	.word	0x2000028c

08001274 <stateOff_inv1>:

void stateOff_inv1() {
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0

	IN_A_1 = 0;
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <stateOff_inv1+0x38>)
 800127a:	2200      	movs	r2, #0
 800127c:	635a      	str	r2, [r3, #52]	; 0x34
	RESET_SD_A_1;
 800127e:	2200      	movs	r2, #0
 8001280:	2104      	movs	r1, #4
 8001282:	480b      	ldr	r0, [pc, #44]	; (80012b0 <stateOff_inv1+0x3c>)
 8001284:	f002 f99c 	bl	80035c0 <HAL_GPIO_WritePin>


	IN_B_1 = 0;
 8001288:	4b08      	ldr	r3, [pc, #32]	; (80012ac <stateOff_inv1+0x38>)
 800128a:	2200      	movs	r2, #0
 800128c:	639a      	str	r2, [r3, #56]	; 0x38
	RESET_SD_B_1;
 800128e:	2200      	movs	r2, #0
 8001290:	2101      	movs	r1, #1
 8001292:	4807      	ldr	r0, [pc, #28]	; (80012b0 <stateOff_inv1+0x3c>)
 8001294:	f002 f994 	bl	80035c0 <HAL_GPIO_WritePin>


	IN_C_1 = 0;
 8001298:	4b04      	ldr	r3, [pc, #16]	; (80012ac <stateOff_inv1+0x38>)
 800129a:	2200      	movs	r2, #0
 800129c:	63da      	str	r2, [r3, #60]	; 0x3c
	RESET_SD_C_1;
 800129e:	2200      	movs	r2, #0
 80012a0:	2102      	movs	r1, #2
 80012a2:	4803      	ldr	r0, [pc, #12]	; (80012b0 <stateOff_inv1+0x3c>)
 80012a4:	f002 f98c 	bl	80035c0 <HAL_GPIO_WritePin>

}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40012c00 	.word	0x40012c00
 80012b0:	48000400 	.word	0x48000400

080012b4 <state0_inv2>:


//Inverter 2
void state0_inv2() {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
	IN_A_2 = 0;
 80012b8:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <state0_inv2+0x40>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_2;
 80012be:	2201      	movs	r2, #1
 80012c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012c4:	480c      	ldr	r0, [pc, #48]	; (80012f8 <state0_inv2+0x44>)
 80012c6:	f002 f97b 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_B_2 = 0;
 80012ca:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <state0_inv2+0x40>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_2;
 80012d0:	2201      	movs	r2, #1
 80012d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012d6:	4808      	ldr	r0, [pc, #32]	; (80012f8 <state0_inv2+0x44>)
 80012d8:	f002 f972 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_C_2 = 0;
 80012dc:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <state0_inv2+0x40>)
 80012de:	2200      	movs	r2, #0
 80012e0:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_2;
 80012e2:	2201      	movs	r2, #1
 80012e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012e8:	4803      	ldr	r0, [pc, #12]	; (80012f8 <state0_inv2+0x44>)
 80012ea:	f002 f969 	bl	80035c0 <HAL_GPIO_WritePin>
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40013400 	.word	0x40013400
 80012f8:	48000400 	.word	0x48000400

080012fc <state1_inv2>:


void state1_inv2() {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
	IN_A_2 = 0;
 8001300:	4b0e      	ldr	r3, [pc, #56]	; (800133c <state1_inv2+0x40>)
 8001302:	2200      	movs	r2, #0
 8001304:	635a      	str	r2, [r3, #52]	; 0x34
	RESET_SD_A_2;
 8001306:	2200      	movs	r2, #0
 8001308:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800130c:	480c      	ldr	r0, [pc, #48]	; (8001340 <state1_inv2+0x44>)
 800130e:	f002 f957 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_B_2 = PWM2;
 8001312:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <state1_inv2+0x48>)
 8001314:	881a      	ldrh	r2, [r3, #0]
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <state1_inv2+0x40>)
 8001318:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_2;
 800131a:	2201      	movs	r2, #1
 800131c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001320:	4807      	ldr	r0, [pc, #28]	; (8001340 <state1_inv2+0x44>)
 8001322:	f002 f94d 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_C_2 = 0;
 8001326:	4b05      	ldr	r3, [pc, #20]	; (800133c <state1_inv2+0x40>)
 8001328:	2200      	movs	r2, #0
 800132a:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_2;
 800132c:	2201      	movs	r2, #1
 800132e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001332:	4803      	ldr	r0, [pc, #12]	; (8001340 <state1_inv2+0x44>)
 8001334:	f002 f944 	bl	80035c0 <HAL_GPIO_WritePin>
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40013400 	.word	0x40013400
 8001340:	48000400 	.word	0x48000400
 8001344:	2000028e 	.word	0x2000028e

08001348 <state2_inv2>:
void state2_inv2() {
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
	IN_A_2 = PWM2;
 800134c:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <state2_inv2+0x40>)
 800134e:	881a      	ldrh	r2, [r3, #0]
 8001350:	4b0e      	ldr	r3, [pc, #56]	; (800138c <state2_inv2+0x44>)
 8001352:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_2;
 8001354:	2201      	movs	r2, #1
 8001356:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800135a:	480d      	ldr	r0, [pc, #52]	; (8001390 <state2_inv2+0x48>)
 800135c:	f002 f930 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_B_2 = 0;
 8001360:	4b0a      	ldr	r3, [pc, #40]	; (800138c <state2_inv2+0x44>)
 8001362:	2200      	movs	r2, #0
 8001364:	639a      	str	r2, [r3, #56]	; 0x38
	RESET_SD_B_2;
 8001366:	2200      	movs	r2, #0
 8001368:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800136c:	4808      	ldr	r0, [pc, #32]	; (8001390 <state2_inv2+0x48>)
 800136e:	f002 f927 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_C_2 = 0;
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <state2_inv2+0x44>)
 8001374:	2200      	movs	r2, #0
 8001376:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_2;
 8001378:	2201      	movs	r2, #1
 800137a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800137e:	4804      	ldr	r0, [pc, #16]	; (8001390 <state2_inv2+0x48>)
 8001380:	f002 f91e 	bl	80035c0 <HAL_GPIO_WritePin>
}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	2000028e 	.word	0x2000028e
 800138c:	40013400 	.word	0x40013400
 8001390:	48000400 	.word	0x48000400

08001394 <state3_inv2>:
void state3_inv2() {
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
	IN_A_2 = PWM2;
 8001398:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <state3_inv2+0x40>)
 800139a:	881a      	ldrh	r2, [r3, #0]
 800139c:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <state3_inv2+0x44>)
 800139e:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_2;
 80013a0:	2201      	movs	r2, #1
 80013a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013a6:	480d      	ldr	r0, [pc, #52]	; (80013dc <state3_inv2+0x48>)
 80013a8:	f002 f90a 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_B_2 = 0;
 80013ac:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <state3_inv2+0x44>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_2;
 80013b2:	2201      	movs	r2, #1
 80013b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013b8:	4808      	ldr	r0, [pc, #32]	; (80013dc <state3_inv2+0x48>)
 80013ba:	f002 f901 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_C_2 = 0;
 80013be:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <state3_inv2+0x44>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	63da      	str	r2, [r3, #60]	; 0x3c
	RESET_SD_C_2;
 80013c4:	2200      	movs	r2, #0
 80013c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013ca:	4804      	ldr	r0, [pc, #16]	; (80013dc <state3_inv2+0x48>)
 80013cc:	f002 f8f8 	bl	80035c0 <HAL_GPIO_WritePin>
}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	2000028e 	.word	0x2000028e
 80013d8:	40013400 	.word	0x40013400
 80013dc:	48000400 	.word	0x48000400

080013e0 <state4_inv2>:
void state4_inv2() {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
	IN_A_2 = 0;
 80013e4:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <state4_inv2+0x40>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	635a      	str	r2, [r3, #52]	; 0x34
	RESET_SD_A_2;
 80013ea:	2200      	movs	r2, #0
 80013ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013f0:	480c      	ldr	r0, [pc, #48]	; (8001424 <state4_inv2+0x44>)
 80013f2:	f002 f8e5 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_B_2 = 0;
 80013f6:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <state4_inv2+0x40>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_2;
 80013fc:	2201      	movs	r2, #1
 80013fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001402:	4808      	ldr	r0, [pc, #32]	; (8001424 <state4_inv2+0x44>)
 8001404:	f002 f8dc 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_C_2 = PWM2;
 8001408:	4b07      	ldr	r3, [pc, #28]	; (8001428 <state4_inv2+0x48>)
 800140a:	881a      	ldrh	r2, [r3, #0]
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <state4_inv2+0x40>)
 800140e:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_2;
 8001410:	2201      	movs	r2, #1
 8001412:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001416:	4803      	ldr	r0, [pc, #12]	; (8001424 <state4_inv2+0x44>)
 8001418:	f002 f8d2 	bl	80035c0 <HAL_GPIO_WritePin>
}
 800141c:	bf00      	nop
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40013400 	.word	0x40013400
 8001424:	48000400 	.word	0x48000400
 8001428:	2000028e 	.word	0x2000028e

0800142c <state5_inv2>:
void state5_inv2() {
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
	IN_A_2 = 0;
 8001430:	4b0e      	ldr	r3, [pc, #56]	; (800146c <state5_inv2+0x40>)
 8001432:	2200      	movs	r2, #0
 8001434:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_2;
 8001436:	2201      	movs	r2, #1
 8001438:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800143c:	480c      	ldr	r0, [pc, #48]	; (8001470 <state5_inv2+0x44>)
 800143e:	f002 f8bf 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_B_2 = 0;
 8001442:	4b0a      	ldr	r3, [pc, #40]	; (800146c <state5_inv2+0x40>)
 8001444:	2200      	movs	r2, #0
 8001446:	639a      	str	r2, [r3, #56]	; 0x38
	RESET_SD_B_2;
 8001448:	2200      	movs	r2, #0
 800144a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800144e:	4808      	ldr	r0, [pc, #32]	; (8001470 <state5_inv2+0x44>)
 8001450:	f002 f8b6 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_C_2 = PWM2;
 8001454:	4b07      	ldr	r3, [pc, #28]	; (8001474 <state5_inv2+0x48>)
 8001456:	881a      	ldrh	r2, [r3, #0]
 8001458:	4b04      	ldr	r3, [pc, #16]	; (800146c <state5_inv2+0x40>)
 800145a:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_2;
 800145c:	2201      	movs	r2, #1
 800145e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001462:	4803      	ldr	r0, [pc, #12]	; (8001470 <state5_inv2+0x44>)
 8001464:	f002 f8ac 	bl	80035c0 <HAL_GPIO_WritePin>
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40013400 	.word	0x40013400
 8001470:	48000400 	.word	0x48000400
 8001474:	2000028e 	.word	0x2000028e

08001478 <state6_inv2>:
void state6_inv2() {
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
	IN_A_2 = 0;
 800147c:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <state6_inv2+0x40>)
 800147e:	2200      	movs	r2, #0
 8001480:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_2;
 8001482:	2201      	movs	r2, #1
 8001484:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001488:	480c      	ldr	r0, [pc, #48]	; (80014bc <state6_inv2+0x44>)
 800148a:	f002 f899 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_B_2 = PWM2;
 800148e:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <state6_inv2+0x48>)
 8001490:	881a      	ldrh	r2, [r3, #0]
 8001492:	4b09      	ldr	r3, [pc, #36]	; (80014b8 <state6_inv2+0x40>)
 8001494:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_2;
 8001496:	2201      	movs	r2, #1
 8001498:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800149c:	4807      	ldr	r0, [pc, #28]	; (80014bc <state6_inv2+0x44>)
 800149e:	f002 f88f 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_C_2 = 0;
 80014a2:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <state6_inv2+0x40>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	63da      	str	r2, [r3, #60]	; 0x3c
	RESET_SD_C_2;
 80014a8:	2200      	movs	r2, #0
 80014aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014ae:	4803      	ldr	r0, [pc, #12]	; (80014bc <state6_inv2+0x44>)
 80014b0:	f002 f886 	bl	80035c0 <HAL_GPIO_WritePin>
}
 80014b4:	bf00      	nop
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	40013400 	.word	0x40013400
 80014bc:	48000400 	.word	0x48000400
 80014c0:	2000028e 	.word	0x2000028e

080014c4 <stateOff_inv2>:

void stateOff_inv2() {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
	IN_A_2 = 0;
 80014c8:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <stateOff_inv2+0x40>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	635a      	str	r2, [r3, #52]	; 0x34
	RESET_SD_A_2;
 80014ce:	2200      	movs	r2, #0
 80014d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014d4:	480c      	ldr	r0, [pc, #48]	; (8001508 <stateOff_inv2+0x44>)
 80014d6:	f002 f873 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_B_2 = 0;
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <stateOff_inv2+0x40>)
 80014dc:	2200      	movs	r2, #0
 80014de:	639a      	str	r2, [r3, #56]	; 0x38
	RESET_SD_B_2;
 80014e0:	2200      	movs	r2, #0
 80014e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014e6:	4808      	ldr	r0, [pc, #32]	; (8001508 <stateOff_inv2+0x44>)
 80014e8:	f002 f86a 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_C_2 = 0;
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <stateOff_inv2+0x40>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	63da      	str	r2, [r3, #60]	; 0x3c
	RESET_SD_C_2;
 80014f2:	2200      	movs	r2, #0
 80014f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014f8:	4803      	ldr	r0, [pc, #12]	; (8001508 <stateOff_inv2+0x44>)
 80014fa:	f002 f861 	bl	80035c0 <HAL_GPIO_WritePin>
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40013400 	.word	0x40013400
 8001508:	48000400 	.word	0x48000400

0800150c <state0_inv3>:

//Inverter 3
void state0_inv3() {
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
	IN_A_3 = 0;
 8001510:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001514:	2200      	movs	r2, #0
 8001516:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_3;
 8001518:	2201      	movs	r2, #1
 800151a:	2120      	movs	r1, #32
 800151c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001520:	f002 f84e 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_B_3 = 0;
 8001524:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001528:	2200      	movs	r2, #0
 800152a:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_3;
 800152c:	2201      	movs	r2, #1
 800152e:	2140      	movs	r1, #64	; 0x40
 8001530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001534:	f002 f844 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_C_3 = 0;
 8001538:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800153c:	2200      	movs	r2, #0
 800153e:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_3;
 8001540:	2201      	movs	r2, #1
 8001542:	2180      	movs	r1, #128	; 0x80
 8001544:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001548:	f002 f83a 	bl	80035c0 <HAL_GPIO_WritePin>
}
 800154c:	bf00      	nop
 800154e:	bd80      	pop	{r7, pc}

08001550 <state1_inv3>:

void state1_inv3() {
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
	IN_A_3 = 0;
 8001554:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001558:	2200      	movs	r2, #0
 800155a:	635a      	str	r2, [r3, #52]	; 0x34
	RESET_SD_A_3;
 800155c:	2200      	movs	r2, #0
 800155e:	2120      	movs	r1, #32
 8001560:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001564:	f002 f82c 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_B_3 = 0;
 8001568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800156c:	2200      	movs	r2, #0
 800156e:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_3;
 8001570:	2201      	movs	r2, #1
 8001572:	2140      	movs	r1, #64	; 0x40
 8001574:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001578:	f002 f822 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_C_3 = PWM3;
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <state1_inv3+0x48>)
 800157e:	881a      	ldrh	r2, [r3, #0]
 8001580:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001584:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_3;
 8001586:	2201      	movs	r2, #1
 8001588:	2180      	movs	r1, #128	; 0x80
 800158a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800158e:	f002 f817 	bl	80035c0 <HAL_GPIO_WritePin>
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000290 	.word	0x20000290

0800159c <state2_inv3>:
void state2_inv3() {
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
	IN_A_3 = 0;
 80015a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015a4:	2200      	movs	r2, #0
 80015a6:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_3;
 80015a8:	2201      	movs	r2, #1
 80015aa:	2120      	movs	r1, #32
 80015ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b0:	f002 f806 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_B_3 = 0;
 80015b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015b8:	2200      	movs	r2, #0
 80015ba:	639a      	str	r2, [r3, #56]	; 0x38
	RESET_SD_B_3;
 80015bc:	2200      	movs	r2, #0
 80015be:	2140      	movs	r1, #64	; 0x40
 80015c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c4:	f001 fffc 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_C_3 = PWM3;
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <state2_inv3+0x48>)
 80015ca:	881a      	ldrh	r2, [r3, #0]
 80015cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015d0:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_3;
 80015d2:	2201      	movs	r2, #1
 80015d4:	2180      	movs	r1, #128	; 0x80
 80015d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015da:	f001 fff1 	bl	80035c0 <HAL_GPIO_WritePin>
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000290 	.word	0x20000290

080015e8 <state3_inv3>:
void state3_inv3() {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	af00      	add	r7, sp, #0
	IN_A_3 = 0;
 80015ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015f0:	2200      	movs	r2, #0
 80015f2:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_3;
 80015f4:	2201      	movs	r2, #1
 80015f6:	2120      	movs	r1, #32
 80015f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015fc:	f001 ffe0 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_B_3 = PWM3;
 8001600:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <state3_inv3+0x48>)
 8001602:	881a      	ldrh	r2, [r3, #0]
 8001604:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001608:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_3;
 800160a:	2201      	movs	r2, #1
 800160c:	2140      	movs	r1, #64	; 0x40
 800160e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001612:	f001 ffd5 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_C_3 = 0;
 8001616:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800161a:	2200      	movs	r2, #0
 800161c:	63da      	str	r2, [r3, #60]	; 0x3c
	RESET_SD_C_3;
 800161e:	2200      	movs	r2, #0
 8001620:	2180      	movs	r1, #128	; 0x80
 8001622:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001626:	f001 ffcb 	bl	80035c0 <HAL_GPIO_WritePin>
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20000290 	.word	0x20000290

08001634 <state4_inv3>:
void state4_inv3() {
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
	IN_A_3 = 0;
 8001638:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800163c:	2200      	movs	r2, #0
 800163e:	635a      	str	r2, [r3, #52]	; 0x34
	RESET_SD_A_3;
 8001640:	2200      	movs	r2, #0
 8001642:	2120      	movs	r1, #32
 8001644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001648:	f001 ffba 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_B_3 = PWM3;
 800164c:	4b0b      	ldr	r3, [pc, #44]	; (800167c <state4_inv3+0x48>)
 800164e:	881a      	ldrh	r2, [r3, #0]
 8001650:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001654:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_3;
 8001656:	2201      	movs	r2, #1
 8001658:	2140      	movs	r1, #64	; 0x40
 800165a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800165e:	f001 ffaf 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_C_3 = 0;
 8001662:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001666:	2200      	movs	r2, #0
 8001668:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_3;
 800166a:	2201      	movs	r2, #1
 800166c:	2180      	movs	r1, #128	; 0x80
 800166e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001672:	f001 ffa5 	bl	80035c0 <HAL_GPIO_WritePin>
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000290 	.word	0x20000290

08001680 <state5_inv3>:
void state5_inv3() {
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
	IN_A_3 = PWM3;
 8001684:	4b10      	ldr	r3, [pc, #64]	; (80016c8 <state5_inv3+0x48>)
 8001686:	881a      	ldrh	r2, [r3, #0]
 8001688:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800168c:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_3;
 800168e:	2201      	movs	r2, #1
 8001690:	2120      	movs	r1, #32
 8001692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001696:	f001 ff93 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_B_3 = 0;
 800169a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800169e:	2200      	movs	r2, #0
 80016a0:	639a      	str	r2, [r3, #56]	; 0x38
	RESET_SD_B_3;
 80016a2:	2200      	movs	r2, #0
 80016a4:	2140      	movs	r1, #64	; 0x40
 80016a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016aa:	f001 ff89 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_C_3 = 0;
 80016ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016b2:	2200      	movs	r2, #0
 80016b4:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_3;
 80016b6:	2201      	movs	r2, #1
 80016b8:	2180      	movs	r1, #128	; 0x80
 80016ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016be:	f001 ff7f 	bl	80035c0 <HAL_GPIO_WritePin>
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000290 	.word	0x20000290

080016cc <state6_inv3>:
void state6_inv3() {
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
	IN_A_3 = PWM3;
 80016d0:	4b10      	ldr	r3, [pc, #64]	; (8001714 <state6_inv3+0x48>)
 80016d2:	881a      	ldrh	r2, [r3, #0]
 80016d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016d8:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_3;
 80016da:	2201      	movs	r2, #1
 80016dc:	2120      	movs	r1, #32
 80016de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e2:	f001 ff6d 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_B_3 = 0;
 80016e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016ea:	2200      	movs	r2, #0
 80016ec:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_3;
 80016ee:	2201      	movs	r2, #1
 80016f0:	2140      	movs	r1, #64	; 0x40
 80016f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f6:	f001 ff63 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_C_3 = 0;
 80016fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016fe:	2200      	movs	r2, #0
 8001700:	63da      	str	r2, [r3, #60]	; 0x3c
	RESET_SD_C_3;
 8001702:	2200      	movs	r2, #0
 8001704:	2180      	movs	r1, #128	; 0x80
 8001706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800170a:	f001 ff59 	bl	80035c0 <HAL_GPIO_WritePin>
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000290 	.word	0x20000290

08001718 <stateOff_inv3>:

void stateOff_inv3() {
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
	IN_A_3 = 0;
 800171c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001720:	2200      	movs	r2, #0
 8001722:	635a      	str	r2, [r3, #52]	; 0x34
	RESET_SD_A_3;
 8001724:	2200      	movs	r2, #0
 8001726:	2120      	movs	r1, #32
 8001728:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800172c:	f001 ff48 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_B_3 = 0;
 8001730:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001734:	2200      	movs	r2, #0
 8001736:	639a      	str	r2, [r3, #56]	; 0x38
	RESET_SD_B_3;
 8001738:	2200      	movs	r2, #0
 800173a:	2140      	movs	r1, #64	; 0x40
 800173c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001740:	f001 ff3e 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_C_3 = 0;
 8001744:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001748:	2200      	movs	r2, #0
 800174a:	63da      	str	r2, [r3, #60]	; 0x3c
	RESET_SD_C_3;
 800174c:	2200      	movs	r2, #0
 800174e:	2180      	movs	r1, #128	; 0x80
 8001750:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001754:	f001 ff34 	bl	80035c0 <HAL_GPIO_WritePin>
}
 8001758:	bf00      	nop
 800175a:	bd80      	pop	{r7, pc}

0800175c <state0_inv4>:


	//Inverter 4
void state0_inv4() {
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
	IN_A_4 = 0;
 8001760:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <state0_inv4+0x48>)
 8001762:	2200      	movs	r2, #0
 8001764:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_A_4;
 8001766:	2201      	movs	r2, #1
 8001768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800176c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001770:	f001 ff26 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_B_4 = 0;
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <state0_inv4+0x4c>)
 8001776:	2200      	movs	r2, #0
 8001778:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_B_4;
 800177a:	2201      	movs	r2, #1
 800177c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001784:	f001 ff1c 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_C_4 = 0;
 8001788:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800178c:	2200      	movs	r2, #0
 800178e:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_C_4;
 8001790:	2201      	movs	r2, #1
 8001792:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179a:	f001 ff11 	bl	80035c0 <HAL_GPIO_WritePin>
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40012c00 	.word	0x40012c00
 80017a8:	40013400 	.word	0x40013400

080017ac <state1_inv4>:

void state1_inv4() {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
	IN_A_4 = 0;
 80017b0:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <state1_inv4+0x48>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	641a      	str	r2, [r3, #64]	; 0x40
	RESET_SD_A_4;
 80017b6:	2200      	movs	r2, #0
 80017b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c0:	f001 fefe 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_B_4 = 0;
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <state1_inv4+0x4c>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_B_4;
 80017ca:	2201      	movs	r2, #1
 80017cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d4:	f001 fef4 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_C_4 = PWM4;
 80017d8:	4b08      	ldr	r3, [pc, #32]	; (80017fc <state1_inv4+0x50>)
 80017da:	881a      	ldrh	r2, [r3, #0]
 80017dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017e0:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_C_4;
 80017e2:	2201      	movs	r2, #1
 80017e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ec:	f001 fee8 	bl	80035c0 <HAL_GPIO_WritePin>
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40012c00 	.word	0x40012c00
 80017f8:	40013400 	.word	0x40013400
 80017fc:	20000292 	.word	0x20000292

08001800 <state2_inv4>:
void state2_inv4() {
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
	IN_A_4 = 0;
 8001804:	4b10      	ldr	r3, [pc, #64]	; (8001848 <state2_inv4+0x48>)
 8001806:	2200      	movs	r2, #0
 8001808:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_A_4;
 800180a:	2201      	movs	r2, #1
 800180c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001814:	f001 fed4 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_B_4 = 0;
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <state2_inv4+0x4c>)
 800181a:	2200      	movs	r2, #0
 800181c:	641a      	str	r2, [r3, #64]	; 0x40
	RESET_SD_B_4;
 800181e:	2200      	movs	r2, #0
 8001820:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001828:	f001 feca 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_C_4 = PWM4;
 800182c:	4b08      	ldr	r3, [pc, #32]	; (8001850 <state2_inv4+0x50>)
 800182e:	881a      	ldrh	r2, [r3, #0]
 8001830:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001834:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_C_4;
 8001836:	2201      	movs	r2, #1
 8001838:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800183c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001840:	f001 febe 	bl	80035c0 <HAL_GPIO_WritePin>
}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40012c00 	.word	0x40012c00
 800184c:	40013400 	.word	0x40013400
 8001850:	20000292 	.word	0x20000292

08001854 <state3_inv4>:
void state3_inv4() {
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
	IN_A_4 = 0;
 8001858:	4b10      	ldr	r3, [pc, #64]	; (800189c <state3_inv4+0x48>)
 800185a:	2200      	movs	r2, #0
 800185c:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_A_4;
 800185e:	2201      	movs	r2, #1
 8001860:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001864:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001868:	f001 feaa 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_B_4 = PWM4;
 800186c:	4b0c      	ldr	r3, [pc, #48]	; (80018a0 <state3_inv4+0x4c>)
 800186e:	881a      	ldrh	r2, [r3, #0]
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <state3_inv4+0x50>)
 8001872:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_B_4;
 8001874:	2201      	movs	r2, #1
 8001876:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800187a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800187e:	f001 fe9f 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_C_4 = 0;
 8001882:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001886:	2200      	movs	r2, #0
 8001888:	641a      	str	r2, [r3, #64]	; 0x40
	RESET_SD_C_4;
 800188a:	2200      	movs	r2, #0
 800188c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001894:	f001 fe94 	bl	80035c0 <HAL_GPIO_WritePin>
}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40012c00 	.word	0x40012c00
 80018a0:	20000292 	.word	0x20000292
 80018a4:	40013400 	.word	0x40013400

080018a8 <state4_inv4>:
void state4_inv4() {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
	IN_A_4 = 0;
 80018ac:	4b10      	ldr	r3, [pc, #64]	; (80018f0 <state4_inv4+0x48>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	641a      	str	r2, [r3, #64]	; 0x40
	RESET_SD_A_4;
 80018b2:	2200      	movs	r2, #0
 80018b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018bc:	f001 fe80 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_B_4 = PWM4;
 80018c0:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <state4_inv4+0x4c>)
 80018c2:	881a      	ldrh	r2, [r3, #0]
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <state4_inv4+0x50>)
 80018c6:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_B_4;
 80018c8:	2201      	movs	r2, #1
 80018ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d2:	f001 fe75 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_C_4 = 0;
 80018d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018da:	2200      	movs	r2, #0
 80018dc:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_C_4;
 80018de:	2201      	movs	r2, #1
 80018e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018e8:	f001 fe6a 	bl	80035c0 <HAL_GPIO_WritePin>
}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	40012c00 	.word	0x40012c00
 80018f4:	20000292 	.word	0x20000292
 80018f8:	40013400 	.word	0x40013400

080018fc <state5_inv4>:
void state5_inv4() {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
	IN_A_4 = PWM4;
 8001900:	4b10      	ldr	r3, [pc, #64]	; (8001944 <state5_inv4+0x48>)
 8001902:	881a      	ldrh	r2, [r3, #0]
 8001904:	4b10      	ldr	r3, [pc, #64]	; (8001948 <state5_inv4+0x4c>)
 8001906:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_A_4;
 8001908:	2201      	movs	r2, #1
 800190a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800190e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001912:	f001 fe55 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_B_4 = 0;
 8001916:	4b0d      	ldr	r3, [pc, #52]	; (800194c <state5_inv4+0x50>)
 8001918:	2200      	movs	r2, #0
 800191a:	641a      	str	r2, [r3, #64]	; 0x40
	RESET_SD_B_4;
 800191c:	2200      	movs	r2, #0
 800191e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001922:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001926:	f001 fe4b 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_C_4 = 0;
 800192a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800192e:	2200      	movs	r2, #0
 8001930:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_C_4;
 8001932:	2201      	movs	r2, #1
 8001934:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001938:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800193c:	f001 fe40 	bl	80035c0 <HAL_GPIO_WritePin>
}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}
 8001944:	20000292 	.word	0x20000292
 8001948:	40012c00 	.word	0x40012c00
 800194c:	40013400 	.word	0x40013400

08001950 <state6_inv4>:
void state6_inv4() {
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0

	IN_A_4 = PWM4;
 8001954:	4b10      	ldr	r3, [pc, #64]	; (8001998 <state6_inv4+0x48>)
 8001956:	881a      	ldrh	r2, [r3, #0]
 8001958:	4b10      	ldr	r3, [pc, #64]	; (800199c <state6_inv4+0x4c>)
 800195a:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_A_4;
 800195c:	2201      	movs	r2, #1
 800195e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001962:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001966:	f001 fe2b 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_B_4 = 0;
 800196a:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <state6_inv4+0x50>)
 800196c:	2200      	movs	r2, #0
 800196e:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_B_4;
 8001970:	2201      	movs	r2, #1
 8001972:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001976:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800197a:	f001 fe21 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_C_4 = 0;
 800197e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001982:	2200      	movs	r2, #0
 8001984:	641a      	str	r2, [r3, #64]	; 0x40
	RESET_SD_C_4;
 8001986:	2200      	movs	r2, #0
 8001988:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800198c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001990:	f001 fe16 	bl	80035c0 <HAL_GPIO_WritePin>
}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000292 	.word	0x20000292
 800199c:	40012c00 	.word	0x40012c00
 80019a0:	40013400 	.word	0x40013400

080019a4 <stateOff_inv4>:

void stateOff_inv4() {
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0

	IN_A_4 = 0;
 80019a8:	4b10      	ldr	r3, [pc, #64]	; (80019ec <stateOff_inv4+0x48>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	641a      	str	r2, [r3, #64]	; 0x40
	RESET_SD_A_4;
 80019ae:	2200      	movs	r2, #0
 80019b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019b8:	f001 fe02 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_B_4 = 0;
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <stateOff_inv4+0x4c>)
 80019be:	2200      	movs	r2, #0
 80019c0:	641a      	str	r2, [r3, #64]	; 0x40
	RESET_SD_B_4;
 80019c2:	2200      	movs	r2, #0
 80019c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019cc:	f001 fdf8 	bl	80035c0 <HAL_GPIO_WritePin>

	IN_C_4 = 0;
 80019d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019d4:	2200      	movs	r2, #0
 80019d6:	641a      	str	r2, [r3, #64]	; 0x40
	RESET_SD_C_4;
 80019d8:	2200      	movs	r2, #0
 80019da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019e2:	f001 fded 	bl	80035c0 <HAL_GPIO_WritePin>
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40012c00 	.word	0x40012c00
 80019f0:	40013400 	.word	0x40013400

080019f4 <Inverter1>:
		state6_inv2();
		state6_inv4();
	}
}

void Inverter1(uint8_t inv_mode) {
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	71fb      	strb	r3, [r7, #7]
	inv_mode == 2- low switches are on, high switches are off
	inv_mode == 3- 120 deg. commutation with PWM
	inv_mode == 4- 120 deg. commutation without PWM
	*/

	if (inv_mode == 1) {
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d102      	bne.n	8001a0a <Inverter1+0x16>
		stateOff_inv1();
 8001a04:	f7ff fc36 	bl	8001274 <stateOff_inv1>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
			state6_inv1();
		}
	}
}
 8001a08:	e134      	b.n	8001c74 <Inverter1+0x280>
	else if (inv_mode == 2) {
 8001a0a:	79fb      	ldrb	r3, [r7, #7]
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d102      	bne.n	8001a16 <Inverter1+0x22>
		state0_inv1();
 8001a10:	f7ff fb38 	bl	8001084 <state0_inv1>
}
 8001a14:	e12e      	b.n	8001c74 <Inverter1+0x280>
	else if (inv_mode == 3) {
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	2b03      	cmp	r3, #3
 8001a1a:	f040 8093 	bne.w	8001b44 <Inverter1+0x150>
		if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin) && HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001a1e:	2110      	movs	r1, #16
 8001a20:	4896      	ldr	r0, [pc, #600]	; (8001c7c <Inverter1+0x288>)
 8001a22:	f001 fdb5 	bl	8003590 <HAL_GPIO_ReadPin>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d010      	beq.n	8001a4e <Inverter1+0x5a>
 8001a2c:	2120      	movs	r1, #32
 8001a2e:	4893      	ldr	r0, [pc, #588]	; (8001c7c <Inverter1+0x288>)
 8001a30:	f001 fdae 	bl	8003590 <HAL_GPIO_ReadPin>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d009      	beq.n	8001a4e <Inverter1+0x5a>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001a3a:	2140      	movs	r1, #64	; 0x40
 8001a3c:	488f      	ldr	r0, [pc, #572]	; (8001c7c <Inverter1+0x288>)
 8001a3e:	f001 fda7 	bl	8003590 <HAL_GPIO_ReadPin>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d102      	bne.n	8001a4e <Inverter1+0x5a>
			state1_inv1();
 8001a48:	f7ff fb3c 	bl	80010c4 <state1_inv1>
 8001a4c:	e112      	b.n	8001c74 <Inverter1+0x280>
		else if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001a4e:	2110      	movs	r1, #16
 8001a50:	488a      	ldr	r0, [pc, #552]	; (8001c7c <Inverter1+0x288>)
 8001a52:	f001 fd9d 	bl	8003590 <HAL_GPIO_ReadPin>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d010      	beq.n	8001a7e <Inverter1+0x8a>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001a5c:	2120      	movs	r1, #32
 8001a5e:	4887      	ldr	r0, [pc, #540]	; (8001c7c <Inverter1+0x288>)
 8001a60:	f001 fd96 	bl	8003590 <HAL_GPIO_ReadPin>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d109      	bne.n	8001a7e <Inverter1+0x8a>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001a6a:	2140      	movs	r1, #64	; 0x40
 8001a6c:	4883      	ldr	r0, [pc, #524]	; (8001c7c <Inverter1+0x288>)
 8001a6e:	f001 fd8f 	bl	8003590 <HAL_GPIO_ReadPin>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d102      	bne.n	8001a7e <Inverter1+0x8a>
			state2_inv1();
 8001a78:	f7ff fb48 	bl	800110c <state2_inv1>
 8001a7c:	e0fa      	b.n	8001c74 <Inverter1+0x280>
		else if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001a7e:	2110      	movs	r1, #16
 8001a80:	487e      	ldr	r0, [pc, #504]	; (8001c7c <Inverter1+0x288>)
 8001a82:	f001 fd85 	bl	8003590 <HAL_GPIO_ReadPin>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d010      	beq.n	8001aae <Inverter1+0xba>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001a8c:	2120      	movs	r1, #32
 8001a8e:	487b      	ldr	r0, [pc, #492]	; (8001c7c <Inverter1+0x288>)
 8001a90:	f001 fd7e 	bl	8003590 <HAL_GPIO_ReadPin>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d109      	bne.n	8001aae <Inverter1+0xba>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001a9a:	2140      	movs	r1, #64	; 0x40
 8001a9c:	4877      	ldr	r0, [pc, #476]	; (8001c7c <Inverter1+0x288>)
 8001a9e:	f001 fd77 	bl	8003590 <HAL_GPIO_ReadPin>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d002      	beq.n	8001aae <Inverter1+0xba>
			state3_inv1();
 8001aa8:	f7ff fb54 	bl	8001154 <state3_inv1>
 8001aac:	e0e2      	b.n	8001c74 <Inverter1+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001aae:	2110      	movs	r1, #16
 8001ab0:	4872      	ldr	r0, [pc, #456]	; (8001c7c <Inverter1+0x288>)
 8001ab2:	f001 fd6d 	bl	8003590 <HAL_GPIO_ReadPin>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d110      	bne.n	8001ade <Inverter1+0xea>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001abc:	2120      	movs	r1, #32
 8001abe:	486f      	ldr	r0, [pc, #444]	; (8001c7c <Inverter1+0x288>)
 8001ac0:	f001 fd66 	bl	8003590 <HAL_GPIO_ReadPin>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d109      	bne.n	8001ade <Inverter1+0xea>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001aca:	2140      	movs	r1, #64	; 0x40
 8001acc:	486b      	ldr	r0, [pc, #428]	; (8001c7c <Inverter1+0x288>)
 8001ace:	f001 fd5f 	bl	8003590 <HAL_GPIO_ReadPin>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d002      	beq.n	8001ade <Inverter1+0xea>
			state4_inv1();
 8001ad8:	f7ff fb60 	bl	800119c <state4_inv1>
 8001adc:	e0ca      	b.n	8001c74 <Inverter1+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001ade:	2110      	movs	r1, #16
 8001ae0:	4866      	ldr	r0, [pc, #408]	; (8001c7c <Inverter1+0x288>)
 8001ae2:	f001 fd55 	bl	8003590 <HAL_GPIO_ReadPin>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d110      	bne.n	8001b0e <Inverter1+0x11a>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001aec:	2120      	movs	r1, #32
 8001aee:	4863      	ldr	r0, [pc, #396]	; (8001c7c <Inverter1+0x288>)
 8001af0:	f001 fd4e 	bl	8003590 <HAL_GPIO_ReadPin>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d009      	beq.n	8001b0e <Inverter1+0x11a>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001afa:	2140      	movs	r1, #64	; 0x40
 8001afc:	485f      	ldr	r0, [pc, #380]	; (8001c7c <Inverter1+0x288>)
 8001afe:	f001 fd47 	bl	8003590 <HAL_GPIO_ReadPin>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d002      	beq.n	8001b0e <Inverter1+0x11a>
			state5_inv1();
 8001b08:	f7ff fb6c 	bl	80011e4 <state5_inv1>
 8001b0c:	e0b2      	b.n	8001c74 <Inverter1+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001b0e:	2110      	movs	r1, #16
 8001b10:	485a      	ldr	r0, [pc, #360]	; (8001c7c <Inverter1+0x288>)
 8001b12:	f001 fd3d 	bl	8003590 <HAL_GPIO_ReadPin>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f040 80ab 	bne.w	8001c74 <Inverter1+0x280>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001b1e:	2120      	movs	r1, #32
 8001b20:	4856      	ldr	r0, [pc, #344]	; (8001c7c <Inverter1+0x288>)
 8001b22:	f001 fd35 	bl	8003590 <HAL_GPIO_ReadPin>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f000 80a3 	beq.w	8001c74 <Inverter1+0x280>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001b2e:	2140      	movs	r1, #64	; 0x40
 8001b30:	4852      	ldr	r0, [pc, #328]	; (8001c7c <Inverter1+0x288>)
 8001b32:	f001 fd2d 	bl	8003590 <HAL_GPIO_ReadPin>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f040 809b 	bne.w	8001c74 <Inverter1+0x280>
			state6_inv1();
 8001b3e:	f7ff fb75 	bl	800122c <state6_inv1>
}
 8001b42:	e097      	b.n	8001c74 <Inverter1+0x280>
		else if (inv_mode == 4) {
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	f040 8094 	bne.w	8001c74 <Inverter1+0x280>
			PWM1= 4095;
 8001b4c:	4b4c      	ldr	r3, [pc, #304]	; (8001c80 <Inverter1+0x28c>)
 8001b4e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001b52:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin) && HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001b54:	2110      	movs	r1, #16
 8001b56:	4849      	ldr	r0, [pc, #292]	; (8001c7c <Inverter1+0x288>)
 8001b58:	f001 fd1a 	bl	8003590 <HAL_GPIO_ReadPin>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d010      	beq.n	8001b84 <Inverter1+0x190>
 8001b62:	2120      	movs	r1, #32
 8001b64:	4845      	ldr	r0, [pc, #276]	; (8001c7c <Inverter1+0x288>)
 8001b66:	f001 fd13 	bl	8003590 <HAL_GPIO_ReadPin>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d009      	beq.n	8001b84 <Inverter1+0x190>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001b70:	2140      	movs	r1, #64	; 0x40
 8001b72:	4842      	ldr	r0, [pc, #264]	; (8001c7c <Inverter1+0x288>)
 8001b74:	f001 fd0c 	bl	8003590 <HAL_GPIO_ReadPin>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d102      	bne.n	8001b84 <Inverter1+0x190>
			state1_inv1();
 8001b7e:	f7ff faa1 	bl	80010c4 <state1_inv1>
 8001b82:	e077      	b.n	8001c74 <Inverter1+0x280>
		else if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001b84:	2110      	movs	r1, #16
 8001b86:	483d      	ldr	r0, [pc, #244]	; (8001c7c <Inverter1+0x288>)
 8001b88:	f001 fd02 	bl	8003590 <HAL_GPIO_ReadPin>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d010      	beq.n	8001bb4 <Inverter1+0x1c0>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001b92:	2120      	movs	r1, #32
 8001b94:	4839      	ldr	r0, [pc, #228]	; (8001c7c <Inverter1+0x288>)
 8001b96:	f001 fcfb 	bl	8003590 <HAL_GPIO_ReadPin>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d109      	bne.n	8001bb4 <Inverter1+0x1c0>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001ba0:	2140      	movs	r1, #64	; 0x40
 8001ba2:	4836      	ldr	r0, [pc, #216]	; (8001c7c <Inverter1+0x288>)
 8001ba4:	f001 fcf4 	bl	8003590 <HAL_GPIO_ReadPin>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d102      	bne.n	8001bb4 <Inverter1+0x1c0>
			state2_inv1();
 8001bae:	f7ff faad 	bl	800110c <state2_inv1>
 8001bb2:	e05f      	b.n	8001c74 <Inverter1+0x280>
		else if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001bb4:	2110      	movs	r1, #16
 8001bb6:	4831      	ldr	r0, [pc, #196]	; (8001c7c <Inverter1+0x288>)
 8001bb8:	f001 fcea 	bl	8003590 <HAL_GPIO_ReadPin>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d010      	beq.n	8001be4 <Inverter1+0x1f0>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001bc2:	2120      	movs	r1, #32
 8001bc4:	482d      	ldr	r0, [pc, #180]	; (8001c7c <Inverter1+0x288>)
 8001bc6:	f001 fce3 	bl	8003590 <HAL_GPIO_ReadPin>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d109      	bne.n	8001be4 <Inverter1+0x1f0>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001bd0:	2140      	movs	r1, #64	; 0x40
 8001bd2:	482a      	ldr	r0, [pc, #168]	; (8001c7c <Inverter1+0x288>)
 8001bd4:	f001 fcdc 	bl	8003590 <HAL_GPIO_ReadPin>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d002      	beq.n	8001be4 <Inverter1+0x1f0>
			state3_inv1();
 8001bde:	f7ff fab9 	bl	8001154 <state3_inv1>
 8001be2:	e047      	b.n	8001c74 <Inverter1+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001be4:	2110      	movs	r1, #16
 8001be6:	4825      	ldr	r0, [pc, #148]	; (8001c7c <Inverter1+0x288>)
 8001be8:	f001 fcd2 	bl	8003590 <HAL_GPIO_ReadPin>
 8001bec:	4603      	mov	r3, r0
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d110      	bne.n	8001c14 <Inverter1+0x220>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001bf2:	2120      	movs	r1, #32
 8001bf4:	4821      	ldr	r0, [pc, #132]	; (8001c7c <Inverter1+0x288>)
 8001bf6:	f001 fccb 	bl	8003590 <HAL_GPIO_ReadPin>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d109      	bne.n	8001c14 <Inverter1+0x220>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001c00:	2140      	movs	r1, #64	; 0x40
 8001c02:	481e      	ldr	r0, [pc, #120]	; (8001c7c <Inverter1+0x288>)
 8001c04:	f001 fcc4 	bl	8003590 <HAL_GPIO_ReadPin>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d002      	beq.n	8001c14 <Inverter1+0x220>
			state4_inv1();
 8001c0e:	f7ff fac5 	bl	800119c <state4_inv1>
 8001c12:	e02f      	b.n	8001c74 <Inverter1+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001c14:	2110      	movs	r1, #16
 8001c16:	4819      	ldr	r0, [pc, #100]	; (8001c7c <Inverter1+0x288>)
 8001c18:	f001 fcba 	bl	8003590 <HAL_GPIO_ReadPin>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d110      	bne.n	8001c44 <Inverter1+0x250>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001c22:	2120      	movs	r1, #32
 8001c24:	4815      	ldr	r0, [pc, #84]	; (8001c7c <Inverter1+0x288>)
 8001c26:	f001 fcb3 	bl	8003590 <HAL_GPIO_ReadPin>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d009      	beq.n	8001c44 <Inverter1+0x250>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001c30:	2140      	movs	r1, #64	; 0x40
 8001c32:	4812      	ldr	r0, [pc, #72]	; (8001c7c <Inverter1+0x288>)
 8001c34:	f001 fcac 	bl	8003590 <HAL_GPIO_ReadPin>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d002      	beq.n	8001c44 <Inverter1+0x250>
			state5_inv1();
 8001c3e:	f7ff fad1 	bl	80011e4 <state5_inv1>
 8001c42:	e017      	b.n	8001c74 <Inverter1+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001c44:	2110      	movs	r1, #16
 8001c46:	480d      	ldr	r0, [pc, #52]	; (8001c7c <Inverter1+0x288>)
 8001c48:	f001 fca2 	bl	8003590 <HAL_GPIO_ReadPin>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d110      	bne.n	8001c74 <Inverter1+0x280>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001c52:	2120      	movs	r1, #32
 8001c54:	4809      	ldr	r0, [pc, #36]	; (8001c7c <Inverter1+0x288>)
 8001c56:	f001 fc9b 	bl	8003590 <HAL_GPIO_ReadPin>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d009      	beq.n	8001c74 <Inverter1+0x280>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001c60:	2140      	movs	r1, #64	; 0x40
 8001c62:	4806      	ldr	r0, [pc, #24]	; (8001c7c <Inverter1+0x288>)
 8001c64:	f001 fc94 	bl	8003590 <HAL_GPIO_ReadPin>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d102      	bne.n	8001c74 <Inverter1+0x280>
			state6_inv1();
 8001c6e:	f7ff fadd 	bl	800122c <state6_inv1>
}
 8001c72:	e7ff      	b.n	8001c74 <Inverter1+0x280>
 8001c74:	bf00      	nop
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	48000400 	.word	0x48000400
 8001c80:	2000028c 	.word	0x2000028c

08001c84 <Inverter3>:
void Inverter3(uint8_t inv_mode) {
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	71fb      	strb	r3, [r7, #7]
	if (inv_mode == 1) {
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d102      	bne.n	8001c9a <Inverter3+0x16>
		stateOff_inv3();
 8001c94:	f7ff fd40 	bl	8001718 <stateOff_inv3>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
			state6_inv3();
		}
	}
}
 8001c98:	e134      	b.n	8001f04 <Inverter3+0x280>
	else if (inv_mode == 2) {
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	2b02      	cmp	r3, #2
 8001c9e:	d102      	bne.n	8001ca6 <Inverter3+0x22>
		state0_inv3();
 8001ca0:	f7ff fc34 	bl	800150c <state0_inv3>
}
 8001ca4:	e12e      	b.n	8001f04 <Inverter3+0x280>
	else if (inv_mode == 3) {
 8001ca6:	79fb      	ldrb	r3, [r7, #7]
 8001ca8:	2b03      	cmp	r3, #3
 8001caa:	f040 8093 	bne.w	8001dd4 <Inverter3+0x150>
		if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin) && HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001cae:	2110      	movs	r1, #16
 8001cb0:	4896      	ldr	r0, [pc, #600]	; (8001f0c <Inverter3+0x288>)
 8001cb2:	f001 fc6d 	bl	8003590 <HAL_GPIO_ReadPin>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d010      	beq.n	8001cde <Inverter3+0x5a>
 8001cbc:	2120      	movs	r1, #32
 8001cbe:	4893      	ldr	r0, [pc, #588]	; (8001f0c <Inverter3+0x288>)
 8001cc0:	f001 fc66 	bl	8003590 <HAL_GPIO_ReadPin>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d009      	beq.n	8001cde <Inverter3+0x5a>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001cca:	2140      	movs	r1, #64	; 0x40
 8001ccc:	488f      	ldr	r0, [pc, #572]	; (8001f0c <Inverter3+0x288>)
 8001cce:	f001 fc5f 	bl	8003590 <HAL_GPIO_ReadPin>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d102      	bne.n	8001cde <Inverter3+0x5a>
			state1_inv3();
 8001cd8:	f7ff fc3a 	bl	8001550 <state1_inv3>
 8001cdc:	e112      	b.n	8001f04 <Inverter3+0x280>
		else if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001cde:	2110      	movs	r1, #16
 8001ce0:	488a      	ldr	r0, [pc, #552]	; (8001f0c <Inverter3+0x288>)
 8001ce2:	f001 fc55 	bl	8003590 <HAL_GPIO_ReadPin>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d010      	beq.n	8001d0e <Inverter3+0x8a>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001cec:	2120      	movs	r1, #32
 8001cee:	4887      	ldr	r0, [pc, #540]	; (8001f0c <Inverter3+0x288>)
 8001cf0:	f001 fc4e 	bl	8003590 <HAL_GPIO_ReadPin>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d109      	bne.n	8001d0e <Inverter3+0x8a>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001cfa:	2140      	movs	r1, #64	; 0x40
 8001cfc:	4883      	ldr	r0, [pc, #524]	; (8001f0c <Inverter3+0x288>)
 8001cfe:	f001 fc47 	bl	8003590 <HAL_GPIO_ReadPin>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d102      	bne.n	8001d0e <Inverter3+0x8a>
			state2_inv3();
 8001d08:	f7ff fc48 	bl	800159c <state2_inv3>
 8001d0c:	e0fa      	b.n	8001f04 <Inverter3+0x280>
		else if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001d0e:	2110      	movs	r1, #16
 8001d10:	487e      	ldr	r0, [pc, #504]	; (8001f0c <Inverter3+0x288>)
 8001d12:	f001 fc3d 	bl	8003590 <HAL_GPIO_ReadPin>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d010      	beq.n	8001d3e <Inverter3+0xba>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001d1c:	2120      	movs	r1, #32
 8001d1e:	487b      	ldr	r0, [pc, #492]	; (8001f0c <Inverter3+0x288>)
 8001d20:	f001 fc36 	bl	8003590 <HAL_GPIO_ReadPin>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d109      	bne.n	8001d3e <Inverter3+0xba>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001d2a:	2140      	movs	r1, #64	; 0x40
 8001d2c:	4877      	ldr	r0, [pc, #476]	; (8001f0c <Inverter3+0x288>)
 8001d2e:	f001 fc2f 	bl	8003590 <HAL_GPIO_ReadPin>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d002      	beq.n	8001d3e <Inverter3+0xba>
			state3_inv3();
 8001d38:	f7ff fc56 	bl	80015e8 <state3_inv3>
 8001d3c:	e0e2      	b.n	8001f04 <Inverter3+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001d3e:	2110      	movs	r1, #16
 8001d40:	4872      	ldr	r0, [pc, #456]	; (8001f0c <Inverter3+0x288>)
 8001d42:	f001 fc25 	bl	8003590 <HAL_GPIO_ReadPin>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d110      	bne.n	8001d6e <Inverter3+0xea>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001d4c:	2120      	movs	r1, #32
 8001d4e:	486f      	ldr	r0, [pc, #444]	; (8001f0c <Inverter3+0x288>)
 8001d50:	f001 fc1e 	bl	8003590 <HAL_GPIO_ReadPin>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d109      	bne.n	8001d6e <Inverter3+0xea>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001d5a:	2140      	movs	r1, #64	; 0x40
 8001d5c:	486b      	ldr	r0, [pc, #428]	; (8001f0c <Inverter3+0x288>)
 8001d5e:	f001 fc17 	bl	8003590 <HAL_GPIO_ReadPin>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d002      	beq.n	8001d6e <Inverter3+0xea>
			state4_inv3();
 8001d68:	f7ff fc64 	bl	8001634 <state4_inv3>
 8001d6c:	e0ca      	b.n	8001f04 <Inverter3+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001d6e:	2110      	movs	r1, #16
 8001d70:	4866      	ldr	r0, [pc, #408]	; (8001f0c <Inverter3+0x288>)
 8001d72:	f001 fc0d 	bl	8003590 <HAL_GPIO_ReadPin>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d110      	bne.n	8001d9e <Inverter3+0x11a>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001d7c:	2120      	movs	r1, #32
 8001d7e:	4863      	ldr	r0, [pc, #396]	; (8001f0c <Inverter3+0x288>)
 8001d80:	f001 fc06 	bl	8003590 <HAL_GPIO_ReadPin>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d009      	beq.n	8001d9e <Inverter3+0x11a>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001d8a:	2140      	movs	r1, #64	; 0x40
 8001d8c:	485f      	ldr	r0, [pc, #380]	; (8001f0c <Inverter3+0x288>)
 8001d8e:	f001 fbff 	bl	8003590 <HAL_GPIO_ReadPin>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d002      	beq.n	8001d9e <Inverter3+0x11a>
			state5_inv3();
 8001d98:	f7ff fc72 	bl	8001680 <state5_inv3>
 8001d9c:	e0b2      	b.n	8001f04 <Inverter3+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001d9e:	2110      	movs	r1, #16
 8001da0:	485a      	ldr	r0, [pc, #360]	; (8001f0c <Inverter3+0x288>)
 8001da2:	f001 fbf5 	bl	8003590 <HAL_GPIO_ReadPin>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	f040 80ab 	bne.w	8001f04 <Inverter3+0x280>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001dae:	2120      	movs	r1, #32
 8001db0:	4856      	ldr	r0, [pc, #344]	; (8001f0c <Inverter3+0x288>)
 8001db2:	f001 fbed 	bl	8003590 <HAL_GPIO_ReadPin>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 80a3 	beq.w	8001f04 <Inverter3+0x280>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001dbe:	2140      	movs	r1, #64	; 0x40
 8001dc0:	4852      	ldr	r0, [pc, #328]	; (8001f0c <Inverter3+0x288>)
 8001dc2:	f001 fbe5 	bl	8003590 <HAL_GPIO_ReadPin>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	f040 809b 	bne.w	8001f04 <Inverter3+0x280>
			state6_inv3();
 8001dce:	f7ff fc7d 	bl	80016cc <state6_inv3>
}
 8001dd2:	e097      	b.n	8001f04 <Inverter3+0x280>
		else if (inv_mode == 4) {
 8001dd4:	79fb      	ldrb	r3, [r7, #7]
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	f040 8094 	bne.w	8001f04 <Inverter3+0x280>
			PWM3 = 4095;
 8001ddc:	4b4c      	ldr	r3, [pc, #304]	; (8001f10 <Inverter3+0x28c>)
 8001dde:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001de2:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin) && HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001de4:	2110      	movs	r1, #16
 8001de6:	4849      	ldr	r0, [pc, #292]	; (8001f0c <Inverter3+0x288>)
 8001de8:	f001 fbd2 	bl	8003590 <HAL_GPIO_ReadPin>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d010      	beq.n	8001e14 <Inverter3+0x190>
 8001df2:	2120      	movs	r1, #32
 8001df4:	4845      	ldr	r0, [pc, #276]	; (8001f0c <Inverter3+0x288>)
 8001df6:	f001 fbcb 	bl	8003590 <HAL_GPIO_ReadPin>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d009      	beq.n	8001e14 <Inverter3+0x190>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001e00:	2140      	movs	r1, #64	; 0x40
 8001e02:	4842      	ldr	r0, [pc, #264]	; (8001f0c <Inverter3+0x288>)
 8001e04:	f001 fbc4 	bl	8003590 <HAL_GPIO_ReadPin>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d102      	bne.n	8001e14 <Inverter3+0x190>
			state1_inv3();
 8001e0e:	f7ff fb9f 	bl	8001550 <state1_inv3>
 8001e12:	e077      	b.n	8001f04 <Inverter3+0x280>
		else if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001e14:	2110      	movs	r1, #16
 8001e16:	483d      	ldr	r0, [pc, #244]	; (8001f0c <Inverter3+0x288>)
 8001e18:	f001 fbba 	bl	8003590 <HAL_GPIO_ReadPin>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d010      	beq.n	8001e44 <Inverter3+0x1c0>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001e22:	2120      	movs	r1, #32
 8001e24:	4839      	ldr	r0, [pc, #228]	; (8001f0c <Inverter3+0x288>)
 8001e26:	f001 fbb3 	bl	8003590 <HAL_GPIO_ReadPin>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d109      	bne.n	8001e44 <Inverter3+0x1c0>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001e30:	2140      	movs	r1, #64	; 0x40
 8001e32:	4836      	ldr	r0, [pc, #216]	; (8001f0c <Inverter3+0x288>)
 8001e34:	f001 fbac 	bl	8003590 <HAL_GPIO_ReadPin>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d102      	bne.n	8001e44 <Inverter3+0x1c0>
			state2_inv3();
 8001e3e:	f7ff fbad 	bl	800159c <state2_inv3>
 8001e42:	e05f      	b.n	8001f04 <Inverter3+0x280>
		else if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001e44:	2110      	movs	r1, #16
 8001e46:	4831      	ldr	r0, [pc, #196]	; (8001f0c <Inverter3+0x288>)
 8001e48:	f001 fba2 	bl	8003590 <HAL_GPIO_ReadPin>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d010      	beq.n	8001e74 <Inverter3+0x1f0>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001e52:	2120      	movs	r1, #32
 8001e54:	482d      	ldr	r0, [pc, #180]	; (8001f0c <Inverter3+0x288>)
 8001e56:	f001 fb9b 	bl	8003590 <HAL_GPIO_ReadPin>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d109      	bne.n	8001e74 <Inverter3+0x1f0>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001e60:	2140      	movs	r1, #64	; 0x40
 8001e62:	482a      	ldr	r0, [pc, #168]	; (8001f0c <Inverter3+0x288>)
 8001e64:	f001 fb94 	bl	8003590 <HAL_GPIO_ReadPin>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d002      	beq.n	8001e74 <Inverter3+0x1f0>
			state3_inv3();
 8001e6e:	f7ff fbbb 	bl	80015e8 <state3_inv3>
 8001e72:	e047      	b.n	8001f04 <Inverter3+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001e74:	2110      	movs	r1, #16
 8001e76:	4825      	ldr	r0, [pc, #148]	; (8001f0c <Inverter3+0x288>)
 8001e78:	f001 fb8a 	bl	8003590 <HAL_GPIO_ReadPin>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d110      	bne.n	8001ea4 <Inverter3+0x220>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001e82:	2120      	movs	r1, #32
 8001e84:	4821      	ldr	r0, [pc, #132]	; (8001f0c <Inverter3+0x288>)
 8001e86:	f001 fb83 	bl	8003590 <HAL_GPIO_ReadPin>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d109      	bne.n	8001ea4 <Inverter3+0x220>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001e90:	2140      	movs	r1, #64	; 0x40
 8001e92:	481e      	ldr	r0, [pc, #120]	; (8001f0c <Inverter3+0x288>)
 8001e94:	f001 fb7c 	bl	8003590 <HAL_GPIO_ReadPin>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d002      	beq.n	8001ea4 <Inverter3+0x220>
			state4_inv3();
 8001e9e:	f7ff fbc9 	bl	8001634 <state4_inv3>
 8001ea2:	e02f      	b.n	8001f04 <Inverter3+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001ea4:	2110      	movs	r1, #16
 8001ea6:	4819      	ldr	r0, [pc, #100]	; (8001f0c <Inverter3+0x288>)
 8001ea8:	f001 fb72 	bl	8003590 <HAL_GPIO_ReadPin>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d110      	bne.n	8001ed4 <Inverter3+0x250>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001eb2:	2120      	movs	r1, #32
 8001eb4:	4815      	ldr	r0, [pc, #84]	; (8001f0c <Inverter3+0x288>)
 8001eb6:	f001 fb6b 	bl	8003590 <HAL_GPIO_ReadPin>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d009      	beq.n	8001ed4 <Inverter3+0x250>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001ec0:	2140      	movs	r1, #64	; 0x40
 8001ec2:	4812      	ldr	r0, [pc, #72]	; (8001f0c <Inverter3+0x288>)
 8001ec4:	f001 fb64 	bl	8003590 <HAL_GPIO_ReadPin>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d002      	beq.n	8001ed4 <Inverter3+0x250>
			state5_inv3();
 8001ece:	f7ff fbd7 	bl	8001680 <state5_inv3>
 8001ed2:	e017      	b.n	8001f04 <Inverter3+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001ed4:	2110      	movs	r1, #16
 8001ed6:	480d      	ldr	r0, [pc, #52]	; (8001f0c <Inverter3+0x288>)
 8001ed8:	f001 fb5a 	bl	8003590 <HAL_GPIO_ReadPin>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d110      	bne.n	8001f04 <Inverter3+0x280>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001ee2:	2120      	movs	r1, #32
 8001ee4:	4809      	ldr	r0, [pc, #36]	; (8001f0c <Inverter3+0x288>)
 8001ee6:	f001 fb53 	bl	8003590 <HAL_GPIO_ReadPin>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d009      	beq.n	8001f04 <Inverter3+0x280>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001ef0:	2140      	movs	r1, #64	; 0x40
 8001ef2:	4806      	ldr	r0, [pc, #24]	; (8001f0c <Inverter3+0x288>)
 8001ef4:	f001 fb4c 	bl	8003590 <HAL_GPIO_ReadPin>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d102      	bne.n	8001f04 <Inverter3+0x280>
			state6_inv3();
 8001efe:	f7ff fbe5 	bl	80016cc <state6_inv3>
}
 8001f02:	e7ff      	b.n	8001f04 <Inverter3+0x280>
 8001f04:	bf00      	nop
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	48000400 	.word	0x48000400
 8001f10:	20000290 	.word	0x20000290

08001f14 <Inverter2>:
void Inverter2(uint8_t inv_mode) {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	71fb      	strb	r3, [r7, #7]
	if (inv_mode == 1) {
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d102      	bne.n	8001f2a <Inverter2+0x16>
		stateOff_inv2();
 8001f24:	f7ff face 	bl	80014c4 <stateOff_inv2>
				&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
				&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
			state6_inv2();
		}
	}
}
 8001f28:	e158      	b.n	80021dc <Inverter2+0x2c8>
	else if (inv_mode == 2) {
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d102      	bne.n	8001f36 <Inverter2+0x22>
		state0_inv2();
 8001f30:	f7ff f9c0 	bl	80012b4 <state0_inv2>
}
 8001f34:	e152      	b.n	80021dc <Inverter2+0x2c8>
	else if (inv_mode == 3) {
 8001f36:	79fb      	ldrb	r3, [r7, #7]
 8001f38:	2b03      	cmp	r3, #3
 8001f3a:	f040 80a5 	bne.w	8002088 <Inverter2+0x174>
		if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8001f3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f42:	48a8      	ldr	r0, [pc, #672]	; (80021e4 <Inverter2+0x2d0>)
 8001f44:	f001 fb24 	bl	8003590 <HAL_GPIO_ReadPin>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d012      	beq.n	8001f74 <Inverter2+0x60>
					&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8001f4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f52:	48a4      	ldr	r0, [pc, #656]	; (80021e4 <Inverter2+0x2d0>)
 8001f54:	f001 fb1c 	bl	8003590 <HAL_GPIO_ReadPin>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00a      	beq.n	8001f74 <Inverter2+0x60>
					&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8001f5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f62:	48a0      	ldr	r0, [pc, #640]	; (80021e4 <Inverter2+0x2d0>)
 8001f64:	f001 fb14 	bl	8003590 <HAL_GPIO_ReadPin>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d102      	bne.n	8001f74 <Inverter2+0x60>
				state1_inv2();
 8001f6e:	f7ff f9c5 	bl	80012fc <state1_inv2>
 8001f72:	e133      	b.n	80021dc <Inverter2+0x2c8>
			else if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8001f74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f78:	489a      	ldr	r0, [pc, #616]	; (80021e4 <Inverter2+0x2d0>)
 8001f7a:	f001 fb09 	bl	8003590 <HAL_GPIO_ReadPin>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d012      	beq.n	8001faa <Inverter2+0x96>
					&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8001f84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f88:	4896      	ldr	r0, [pc, #600]	; (80021e4 <Inverter2+0x2d0>)
 8001f8a:	f001 fb01 	bl	8003590 <HAL_GPIO_ReadPin>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d10a      	bne.n	8001faa <Inverter2+0x96>
					&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8001f94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f98:	4892      	ldr	r0, [pc, #584]	; (80021e4 <Inverter2+0x2d0>)
 8001f9a:	f001 faf9 	bl	8003590 <HAL_GPIO_ReadPin>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d102      	bne.n	8001faa <Inverter2+0x96>
				state2_inv2();
 8001fa4:	f7ff f9d0 	bl	8001348 <state2_inv2>
 8001fa8:	e118      	b.n	80021dc <Inverter2+0x2c8>
			else if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8001faa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fae:	488d      	ldr	r0, [pc, #564]	; (80021e4 <Inverter2+0x2d0>)
 8001fb0:	f001 faee 	bl	8003590 <HAL_GPIO_ReadPin>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d012      	beq.n	8001fe0 <Inverter2+0xcc>
					&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8001fba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fbe:	4889      	ldr	r0, [pc, #548]	; (80021e4 <Inverter2+0x2d0>)
 8001fc0:	f001 fae6 	bl	8003590 <HAL_GPIO_ReadPin>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d10a      	bne.n	8001fe0 <Inverter2+0xcc>
					&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8001fca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fce:	4885      	ldr	r0, [pc, #532]	; (80021e4 <Inverter2+0x2d0>)
 8001fd0:	f001 fade 	bl	8003590 <HAL_GPIO_ReadPin>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d002      	beq.n	8001fe0 <Inverter2+0xcc>
				state3_inv2();
 8001fda:	f7ff f9db 	bl	8001394 <state3_inv2>
 8001fde:	e0fd      	b.n	80021dc <Inverter2+0x2c8>
			else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8001fe0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fe4:	487f      	ldr	r0, [pc, #508]	; (80021e4 <Inverter2+0x2d0>)
 8001fe6:	f001 fad3 	bl	8003590 <HAL_GPIO_ReadPin>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d112      	bne.n	8002016 <Inverter2+0x102>
					&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8001ff0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ff4:	487b      	ldr	r0, [pc, #492]	; (80021e4 <Inverter2+0x2d0>)
 8001ff6:	f001 facb 	bl	8003590 <HAL_GPIO_ReadPin>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10a      	bne.n	8002016 <Inverter2+0x102>
					&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8002000:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002004:	4877      	ldr	r0, [pc, #476]	; (80021e4 <Inverter2+0x2d0>)
 8002006:	f001 fac3 	bl	8003590 <HAL_GPIO_ReadPin>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d002      	beq.n	8002016 <Inverter2+0x102>
				state4_inv2();
 8002010:	f7ff f9e6 	bl	80013e0 <state4_inv2>
 8002014:	e0e2      	b.n	80021dc <Inverter2+0x2c8>
			else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8002016:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800201a:	4872      	ldr	r0, [pc, #456]	; (80021e4 <Inverter2+0x2d0>)
 800201c:	f001 fab8 	bl	8003590 <HAL_GPIO_ReadPin>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d112      	bne.n	800204c <Inverter2+0x138>
					&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8002026:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800202a:	486e      	ldr	r0, [pc, #440]	; (80021e4 <Inverter2+0x2d0>)
 800202c:	f001 fab0 	bl	8003590 <HAL_GPIO_ReadPin>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00a      	beq.n	800204c <Inverter2+0x138>
					&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8002036:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800203a:	486a      	ldr	r0, [pc, #424]	; (80021e4 <Inverter2+0x2d0>)
 800203c:	f001 faa8 	bl	8003590 <HAL_GPIO_ReadPin>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d002      	beq.n	800204c <Inverter2+0x138>
				state5_inv2();
 8002046:	f7ff f9f1 	bl	800142c <state5_inv2>
 800204a:	e0c7      	b.n	80021dc <Inverter2+0x2c8>
			else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 800204c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002050:	4864      	ldr	r0, [pc, #400]	; (80021e4 <Inverter2+0x2d0>)
 8002052:	f001 fa9d 	bl	8003590 <HAL_GPIO_ReadPin>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	f040 80bf 	bne.w	80021dc <Inverter2+0x2c8>
					&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 800205e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002062:	4860      	ldr	r0, [pc, #384]	; (80021e4 <Inverter2+0x2d0>)
 8002064:	f001 fa94 	bl	8003590 <HAL_GPIO_ReadPin>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	f000 80b6 	beq.w	80021dc <Inverter2+0x2c8>
					&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8002070:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002074:	485b      	ldr	r0, [pc, #364]	; (80021e4 <Inverter2+0x2d0>)
 8002076:	f001 fa8b 	bl	8003590 <HAL_GPIO_ReadPin>
 800207a:	4603      	mov	r3, r0
 800207c:	2b00      	cmp	r3, #0
 800207e:	f040 80ad 	bne.w	80021dc <Inverter2+0x2c8>
				state6_inv2();
 8002082:	f7ff f9f9 	bl	8001478 <state6_inv2>
}
 8002086:	e0a9      	b.n	80021dc <Inverter2+0x2c8>
	else if (inv_mode == 4) {
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	2b04      	cmp	r3, #4
 800208c:	f040 80a6 	bne.w	80021dc <Inverter2+0x2c8>
		PWM2 = 4095;
 8002090:	4b55      	ldr	r3, [pc, #340]	; (80021e8 <Inverter2+0x2d4>)
 8002092:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002096:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin) && HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8002098:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800209c:	4851      	ldr	r0, [pc, #324]	; (80021e4 <Inverter2+0x2d0>)
 800209e:	f001 fa77 	bl	8003590 <HAL_GPIO_ReadPin>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d012      	beq.n	80020ce <Inverter2+0x1ba>
 80020a8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020ac:	484d      	ldr	r0, [pc, #308]	; (80021e4 <Inverter2+0x2d0>)
 80020ae:	f001 fa6f 	bl	8003590 <HAL_GPIO_ReadPin>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d00a      	beq.n	80020ce <Inverter2+0x1ba>
				&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 80020b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020bc:	4849      	ldr	r0, [pc, #292]	; (80021e4 <Inverter2+0x2d0>)
 80020be:	f001 fa67 	bl	8003590 <HAL_GPIO_ReadPin>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d102      	bne.n	80020ce <Inverter2+0x1ba>
			state1_inv2();
 80020c8:	f7ff f918 	bl	80012fc <state1_inv2>
 80020cc:	e086      	b.n	80021dc <Inverter2+0x2c8>
		else if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 80020ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020d2:	4844      	ldr	r0, [pc, #272]	; (80021e4 <Inverter2+0x2d0>)
 80020d4:	f001 fa5c 	bl	8003590 <HAL_GPIO_ReadPin>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d012      	beq.n	8002104 <Inverter2+0x1f0>
				&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 80020de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020e2:	4840      	ldr	r0, [pc, #256]	; (80021e4 <Inverter2+0x2d0>)
 80020e4:	f001 fa54 	bl	8003590 <HAL_GPIO_ReadPin>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10a      	bne.n	8002104 <Inverter2+0x1f0>
				&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 80020ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020f2:	483c      	ldr	r0, [pc, #240]	; (80021e4 <Inverter2+0x2d0>)
 80020f4:	f001 fa4c 	bl	8003590 <HAL_GPIO_ReadPin>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d102      	bne.n	8002104 <Inverter2+0x1f0>
			state2_inv2();
 80020fe:	f7ff f923 	bl	8001348 <state2_inv2>
 8002102:	e06b      	b.n	80021dc <Inverter2+0x2c8>
		else if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8002104:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002108:	4836      	ldr	r0, [pc, #216]	; (80021e4 <Inverter2+0x2d0>)
 800210a:	f001 fa41 	bl	8003590 <HAL_GPIO_ReadPin>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d012      	beq.n	800213a <Inverter2+0x226>
				&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8002114:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002118:	4832      	ldr	r0, [pc, #200]	; (80021e4 <Inverter2+0x2d0>)
 800211a:	f001 fa39 	bl	8003590 <HAL_GPIO_ReadPin>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10a      	bne.n	800213a <Inverter2+0x226>
				&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8002124:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002128:	482e      	ldr	r0, [pc, #184]	; (80021e4 <Inverter2+0x2d0>)
 800212a:	f001 fa31 	bl	8003590 <HAL_GPIO_ReadPin>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d002      	beq.n	800213a <Inverter2+0x226>
			state3_inv2();
 8002134:	f7ff f92e 	bl	8001394 <state3_inv2>
 8002138:	e050      	b.n	80021dc <Inverter2+0x2c8>
		else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 800213a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800213e:	4829      	ldr	r0, [pc, #164]	; (80021e4 <Inverter2+0x2d0>)
 8002140:	f001 fa26 	bl	8003590 <HAL_GPIO_ReadPin>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d112      	bne.n	8002170 <Inverter2+0x25c>
				&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 800214a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800214e:	4825      	ldr	r0, [pc, #148]	; (80021e4 <Inverter2+0x2d0>)
 8002150:	f001 fa1e 	bl	8003590 <HAL_GPIO_ReadPin>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10a      	bne.n	8002170 <Inverter2+0x25c>
				&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 800215a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800215e:	4821      	ldr	r0, [pc, #132]	; (80021e4 <Inverter2+0x2d0>)
 8002160:	f001 fa16 	bl	8003590 <HAL_GPIO_ReadPin>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d002      	beq.n	8002170 <Inverter2+0x25c>
			state4_inv2();
 800216a:	f7ff f939 	bl	80013e0 <state4_inv2>
 800216e:	e035      	b.n	80021dc <Inverter2+0x2c8>
		else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8002170:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002174:	481b      	ldr	r0, [pc, #108]	; (80021e4 <Inverter2+0x2d0>)
 8002176:	f001 fa0b 	bl	8003590 <HAL_GPIO_ReadPin>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d112      	bne.n	80021a6 <Inverter2+0x292>
				&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8002180:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002184:	4817      	ldr	r0, [pc, #92]	; (80021e4 <Inverter2+0x2d0>)
 8002186:	f001 fa03 	bl	8003590 <HAL_GPIO_ReadPin>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00a      	beq.n	80021a6 <Inverter2+0x292>
				&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8002190:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002194:	4813      	ldr	r0, [pc, #76]	; (80021e4 <Inverter2+0x2d0>)
 8002196:	f001 f9fb 	bl	8003590 <HAL_GPIO_ReadPin>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d002      	beq.n	80021a6 <Inverter2+0x292>
			state5_inv2();
 80021a0:	f7ff f944 	bl	800142c <state5_inv2>
 80021a4:	e01a      	b.n	80021dc <Inverter2+0x2c8>
		else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 80021a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021aa:	480e      	ldr	r0, [pc, #56]	; (80021e4 <Inverter2+0x2d0>)
 80021ac:	f001 f9f0 	bl	8003590 <HAL_GPIO_ReadPin>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d112      	bne.n	80021dc <Inverter2+0x2c8>
				&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 80021b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021ba:	480a      	ldr	r0, [pc, #40]	; (80021e4 <Inverter2+0x2d0>)
 80021bc:	f001 f9e8 	bl	8003590 <HAL_GPIO_ReadPin>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00a      	beq.n	80021dc <Inverter2+0x2c8>
				&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 80021c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021ca:	4806      	ldr	r0, [pc, #24]	; (80021e4 <Inverter2+0x2d0>)
 80021cc:	f001 f9e0 	bl	8003590 <HAL_GPIO_ReadPin>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d102      	bne.n	80021dc <Inverter2+0x2c8>
			state6_inv2();
 80021d6:	f7ff f94f 	bl	8001478 <state6_inv2>
}
 80021da:	e7ff      	b.n	80021dc <Inverter2+0x2c8>
 80021dc:	bf00      	nop
 80021de:	3708      	adds	r7, #8
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	48000800 	.word	0x48000800
 80021e8:	2000028e 	.word	0x2000028e

080021ec <Inverter4>:
void Inverter4(uint8_t inv_mode) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	71fb      	strb	r3, [r7, #7]
	if (inv_mode == 1) {
 80021f6:	79fb      	ldrb	r3, [r7, #7]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d102      	bne.n	8002202 <Inverter4+0x16>
		stateOff_inv4();
 80021fc:	f7ff fbd2 	bl	80019a4 <stateOff_inv4>
				&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
				&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
			state6_inv4();
		}
	}
}
 8002200:	e158      	b.n	80024b4 <Inverter4+0x2c8>
	else if (inv_mode == 2) {
 8002202:	79fb      	ldrb	r3, [r7, #7]
 8002204:	2b02      	cmp	r3, #2
 8002206:	d102      	bne.n	800220e <Inverter4+0x22>
		state0_inv4();
 8002208:	f7ff faa8 	bl	800175c <state0_inv4>
}
 800220c:	e152      	b.n	80024b4 <Inverter4+0x2c8>
	else if (inv_mode == 3) {
 800220e:	79fb      	ldrb	r3, [r7, #7]
 8002210:	2b03      	cmp	r3, #3
 8002212:	f040 80a5 	bne.w	8002360 <Inverter4+0x174>
		if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8002216:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800221a:	48a8      	ldr	r0, [pc, #672]	; (80024bc <Inverter4+0x2d0>)
 800221c:	f001 f9b8 	bl	8003590 <HAL_GPIO_ReadPin>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d012      	beq.n	800224c <Inverter4+0x60>
					&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8002226:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800222a:	48a4      	ldr	r0, [pc, #656]	; (80024bc <Inverter4+0x2d0>)
 800222c:	f001 f9b0 	bl	8003590 <HAL_GPIO_ReadPin>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00a      	beq.n	800224c <Inverter4+0x60>
					&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8002236:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800223a:	48a0      	ldr	r0, [pc, #640]	; (80024bc <Inverter4+0x2d0>)
 800223c:	f001 f9a8 	bl	8003590 <HAL_GPIO_ReadPin>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d102      	bne.n	800224c <Inverter4+0x60>
				state1_inv4();
 8002246:	f7ff fab1 	bl	80017ac <state1_inv4>
 800224a:	e133      	b.n	80024b4 <Inverter4+0x2c8>
			else if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 800224c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002250:	489a      	ldr	r0, [pc, #616]	; (80024bc <Inverter4+0x2d0>)
 8002252:	f001 f99d 	bl	8003590 <HAL_GPIO_ReadPin>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d012      	beq.n	8002282 <Inverter4+0x96>
					&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 800225c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002260:	4896      	ldr	r0, [pc, #600]	; (80024bc <Inverter4+0x2d0>)
 8002262:	f001 f995 	bl	8003590 <HAL_GPIO_ReadPin>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10a      	bne.n	8002282 <Inverter4+0x96>
					&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 800226c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002270:	4892      	ldr	r0, [pc, #584]	; (80024bc <Inverter4+0x2d0>)
 8002272:	f001 f98d 	bl	8003590 <HAL_GPIO_ReadPin>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d102      	bne.n	8002282 <Inverter4+0x96>
				state2_inv4();
 800227c:	f7ff fac0 	bl	8001800 <state2_inv4>
 8002280:	e118      	b.n	80024b4 <Inverter4+0x2c8>
			else if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8002282:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002286:	488d      	ldr	r0, [pc, #564]	; (80024bc <Inverter4+0x2d0>)
 8002288:	f001 f982 	bl	8003590 <HAL_GPIO_ReadPin>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d012      	beq.n	80022b8 <Inverter4+0xcc>
					&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8002292:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002296:	4889      	ldr	r0, [pc, #548]	; (80024bc <Inverter4+0x2d0>)
 8002298:	f001 f97a 	bl	8003590 <HAL_GPIO_ReadPin>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10a      	bne.n	80022b8 <Inverter4+0xcc>
					&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 80022a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022a6:	4885      	ldr	r0, [pc, #532]	; (80024bc <Inverter4+0x2d0>)
 80022a8:	f001 f972 	bl	8003590 <HAL_GPIO_ReadPin>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d002      	beq.n	80022b8 <Inverter4+0xcc>
				state3_inv4();
 80022b2:	f7ff facf 	bl	8001854 <state3_inv4>
 80022b6:	e0fd      	b.n	80024b4 <Inverter4+0x2c8>
			else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 80022b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022bc:	487f      	ldr	r0, [pc, #508]	; (80024bc <Inverter4+0x2d0>)
 80022be:	f001 f967 	bl	8003590 <HAL_GPIO_ReadPin>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d112      	bne.n	80022ee <Inverter4+0x102>
					&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 80022c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022cc:	487b      	ldr	r0, [pc, #492]	; (80024bc <Inverter4+0x2d0>)
 80022ce:	f001 f95f 	bl	8003590 <HAL_GPIO_ReadPin>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10a      	bne.n	80022ee <Inverter4+0x102>
					&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 80022d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022dc:	4877      	ldr	r0, [pc, #476]	; (80024bc <Inverter4+0x2d0>)
 80022de:	f001 f957 	bl	8003590 <HAL_GPIO_ReadPin>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d002      	beq.n	80022ee <Inverter4+0x102>
				state4_inv4();
 80022e8:	f7ff fade 	bl	80018a8 <state4_inv4>
 80022ec:	e0e2      	b.n	80024b4 <Inverter4+0x2c8>
			else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 80022ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022f2:	4872      	ldr	r0, [pc, #456]	; (80024bc <Inverter4+0x2d0>)
 80022f4:	f001 f94c 	bl	8003590 <HAL_GPIO_ReadPin>
 80022f8:	4603      	mov	r3, r0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d112      	bne.n	8002324 <Inverter4+0x138>
					&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 80022fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002302:	486e      	ldr	r0, [pc, #440]	; (80024bc <Inverter4+0x2d0>)
 8002304:	f001 f944 	bl	8003590 <HAL_GPIO_ReadPin>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d00a      	beq.n	8002324 <Inverter4+0x138>
					&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 800230e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002312:	486a      	ldr	r0, [pc, #424]	; (80024bc <Inverter4+0x2d0>)
 8002314:	f001 f93c 	bl	8003590 <HAL_GPIO_ReadPin>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d002      	beq.n	8002324 <Inverter4+0x138>
				state5_inv4();
 800231e:	f7ff faed 	bl	80018fc <state5_inv4>
 8002322:	e0c7      	b.n	80024b4 <Inverter4+0x2c8>
			else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8002324:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002328:	4864      	ldr	r0, [pc, #400]	; (80024bc <Inverter4+0x2d0>)
 800232a:	f001 f931 	bl	8003590 <HAL_GPIO_ReadPin>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	f040 80bf 	bne.w	80024b4 <Inverter4+0x2c8>
					&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8002336:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800233a:	4860      	ldr	r0, [pc, #384]	; (80024bc <Inverter4+0x2d0>)
 800233c:	f001 f928 	bl	8003590 <HAL_GPIO_ReadPin>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 80b6 	beq.w	80024b4 <Inverter4+0x2c8>
					&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8002348:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800234c:	485b      	ldr	r0, [pc, #364]	; (80024bc <Inverter4+0x2d0>)
 800234e:	f001 f91f 	bl	8003590 <HAL_GPIO_ReadPin>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	f040 80ad 	bne.w	80024b4 <Inverter4+0x2c8>
				state6_inv4();
 800235a:	f7ff faf9 	bl	8001950 <state6_inv4>
}
 800235e:	e0a9      	b.n	80024b4 <Inverter4+0x2c8>
	else if (inv_mode == 4) {
 8002360:	79fb      	ldrb	r3, [r7, #7]
 8002362:	2b04      	cmp	r3, #4
 8002364:	f040 80a6 	bne.w	80024b4 <Inverter4+0x2c8>
		PWM4 = 4095;
 8002368:	4b55      	ldr	r3, [pc, #340]	; (80024c0 <Inverter4+0x2d4>)
 800236a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800236e:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin) && HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8002370:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002374:	4851      	ldr	r0, [pc, #324]	; (80024bc <Inverter4+0x2d0>)
 8002376:	f001 f90b 	bl	8003590 <HAL_GPIO_ReadPin>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d012      	beq.n	80023a6 <Inverter4+0x1ba>
 8002380:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002384:	484d      	ldr	r0, [pc, #308]	; (80024bc <Inverter4+0x2d0>)
 8002386:	f001 f903 	bl	8003590 <HAL_GPIO_ReadPin>
 800238a:	4603      	mov	r3, r0
 800238c:	2b00      	cmp	r3, #0
 800238e:	d00a      	beq.n	80023a6 <Inverter4+0x1ba>
				&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8002390:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002394:	4849      	ldr	r0, [pc, #292]	; (80024bc <Inverter4+0x2d0>)
 8002396:	f001 f8fb 	bl	8003590 <HAL_GPIO_ReadPin>
 800239a:	4603      	mov	r3, r0
 800239c:	2b00      	cmp	r3, #0
 800239e:	d102      	bne.n	80023a6 <Inverter4+0x1ba>
			state1_inv4();
 80023a0:	f7ff fa04 	bl	80017ac <state1_inv4>
 80023a4:	e086      	b.n	80024b4 <Inverter4+0x2c8>
		else if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 80023a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023aa:	4844      	ldr	r0, [pc, #272]	; (80024bc <Inverter4+0x2d0>)
 80023ac:	f001 f8f0 	bl	8003590 <HAL_GPIO_ReadPin>
 80023b0:	4603      	mov	r3, r0
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d012      	beq.n	80023dc <Inverter4+0x1f0>
				&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 80023b6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023ba:	4840      	ldr	r0, [pc, #256]	; (80024bc <Inverter4+0x2d0>)
 80023bc:	f001 f8e8 	bl	8003590 <HAL_GPIO_ReadPin>
 80023c0:	4603      	mov	r3, r0
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10a      	bne.n	80023dc <Inverter4+0x1f0>
				&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 80023c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023ca:	483c      	ldr	r0, [pc, #240]	; (80024bc <Inverter4+0x2d0>)
 80023cc:	f001 f8e0 	bl	8003590 <HAL_GPIO_ReadPin>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d102      	bne.n	80023dc <Inverter4+0x1f0>
			state2_inv4();
 80023d6:	f7ff fa13 	bl	8001800 <state2_inv4>
 80023da:	e06b      	b.n	80024b4 <Inverter4+0x2c8>
		else if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 80023dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023e0:	4836      	ldr	r0, [pc, #216]	; (80024bc <Inverter4+0x2d0>)
 80023e2:	f001 f8d5 	bl	8003590 <HAL_GPIO_ReadPin>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d012      	beq.n	8002412 <Inverter4+0x226>
				&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 80023ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023f0:	4832      	ldr	r0, [pc, #200]	; (80024bc <Inverter4+0x2d0>)
 80023f2:	f001 f8cd 	bl	8003590 <HAL_GPIO_ReadPin>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10a      	bne.n	8002412 <Inverter4+0x226>
				&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 80023fc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002400:	482e      	ldr	r0, [pc, #184]	; (80024bc <Inverter4+0x2d0>)
 8002402:	f001 f8c5 	bl	8003590 <HAL_GPIO_ReadPin>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d002      	beq.n	8002412 <Inverter4+0x226>
			state3_inv4();
 800240c:	f7ff fa22 	bl	8001854 <state3_inv4>
 8002410:	e050      	b.n	80024b4 <Inverter4+0x2c8>
		else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8002412:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002416:	4829      	ldr	r0, [pc, #164]	; (80024bc <Inverter4+0x2d0>)
 8002418:	f001 f8ba 	bl	8003590 <HAL_GPIO_ReadPin>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d112      	bne.n	8002448 <Inverter4+0x25c>
				&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8002422:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002426:	4825      	ldr	r0, [pc, #148]	; (80024bc <Inverter4+0x2d0>)
 8002428:	f001 f8b2 	bl	8003590 <HAL_GPIO_ReadPin>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10a      	bne.n	8002448 <Inverter4+0x25c>
				&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8002432:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002436:	4821      	ldr	r0, [pc, #132]	; (80024bc <Inverter4+0x2d0>)
 8002438:	f001 f8aa 	bl	8003590 <HAL_GPIO_ReadPin>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d002      	beq.n	8002448 <Inverter4+0x25c>
			state4_inv4();
 8002442:	f7ff fa31 	bl	80018a8 <state4_inv4>
 8002446:	e035      	b.n	80024b4 <Inverter4+0x2c8>
		else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8002448:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800244c:	481b      	ldr	r0, [pc, #108]	; (80024bc <Inverter4+0x2d0>)
 800244e:	f001 f89f 	bl	8003590 <HAL_GPIO_ReadPin>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d112      	bne.n	800247e <Inverter4+0x292>
				&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8002458:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800245c:	4817      	ldr	r0, [pc, #92]	; (80024bc <Inverter4+0x2d0>)
 800245e:	f001 f897 	bl	8003590 <HAL_GPIO_ReadPin>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00a      	beq.n	800247e <Inverter4+0x292>
				&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8002468:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800246c:	4813      	ldr	r0, [pc, #76]	; (80024bc <Inverter4+0x2d0>)
 800246e:	f001 f88f 	bl	8003590 <HAL_GPIO_ReadPin>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d002      	beq.n	800247e <Inverter4+0x292>
			state5_inv4();
 8002478:	f7ff fa40 	bl	80018fc <state5_inv4>
 800247c:	e01a      	b.n	80024b4 <Inverter4+0x2c8>
		else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 800247e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002482:	480e      	ldr	r0, [pc, #56]	; (80024bc <Inverter4+0x2d0>)
 8002484:	f001 f884 	bl	8003590 <HAL_GPIO_ReadPin>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d112      	bne.n	80024b4 <Inverter4+0x2c8>
				&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 800248e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002492:	480a      	ldr	r0, [pc, #40]	; (80024bc <Inverter4+0x2d0>)
 8002494:	f001 f87c 	bl	8003590 <HAL_GPIO_ReadPin>
 8002498:	4603      	mov	r3, r0
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00a      	beq.n	80024b4 <Inverter4+0x2c8>
				&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 800249e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024a2:	4806      	ldr	r0, [pc, #24]	; (80024bc <Inverter4+0x2d0>)
 80024a4:	f001 f874 	bl	8003590 <HAL_GPIO_ReadPin>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d102      	bne.n	80024b4 <Inverter4+0x2c8>
			state6_inv4();
 80024ae:	f7ff fa4f 	bl	8001950 <state6_inv4>
}
 80024b2:	e7ff      	b.n	80024b4 <Inverter4+0x2c8>
 80024b4:	bf00      	nop
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	48000800 	.word	0x48000800
 80024c0:	20000292 	.word	0x20000292

080024c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024c8:	b672      	cpsid	i
}
 80024ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024cc:	e7fe      	b.n	80024cc <Error_Handler+0x8>
	...

080024d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d6:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <HAL_MspInit+0x44>)
 80024d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024da:	4a0e      	ldr	r2, [pc, #56]	; (8002514 <HAL_MspInit+0x44>)
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	6613      	str	r3, [r2, #96]	; 0x60
 80024e2:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <HAL_MspInit+0x44>)
 80024e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024e6:	f003 0301 	and.w	r3, r3, #1
 80024ea:	607b      	str	r3, [r7, #4]
 80024ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024ee:	4b09      	ldr	r3, [pc, #36]	; (8002514 <HAL_MspInit+0x44>)
 80024f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f2:	4a08      	ldr	r2, [pc, #32]	; (8002514 <HAL_MspInit+0x44>)
 80024f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024f8:	6593      	str	r3, [r2, #88]	; 0x58
 80024fa:	4b06      	ldr	r3, [pc, #24]	; (8002514 <HAL_MspInit+0x44>)
 80024fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002502:	603b      	str	r3, [r7, #0]
 8002504:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002506:	f001 f93b 	bl	8003780 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40021000 	.word	0x40021000

08002518 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b08a      	sub	sp, #40	; 0x28
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002520:	f107 0314 	add.w	r3, r7, #20
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]
 800252c:	60da      	str	r2, [r3, #12]
 800252e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a15      	ldr	r2, [pc, #84]	; (800258c <HAL_DAC_MspInit+0x74>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d124      	bne.n	8002584 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800253a:	4b15      	ldr	r3, [pc, #84]	; (8002590 <HAL_DAC_MspInit+0x78>)
 800253c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800253e:	4a14      	ldr	r2, [pc, #80]	; (8002590 <HAL_DAC_MspInit+0x78>)
 8002540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002544:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002546:	4b12      	ldr	r3, [pc, #72]	; (8002590 <HAL_DAC_MspInit+0x78>)
 8002548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800254e:	613b      	str	r3, [r7, #16]
 8002550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002552:	4b0f      	ldr	r3, [pc, #60]	; (8002590 <HAL_DAC_MspInit+0x78>)
 8002554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002556:	4a0e      	ldr	r2, [pc, #56]	; (8002590 <HAL_DAC_MspInit+0x78>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800255e:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <HAL_DAC_MspInit+0x78>)
 8002560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002562:	f003 0301 	and.w	r3, r3, #1
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800256a:	2310      	movs	r3, #16
 800256c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800256e:	2303      	movs	r3, #3
 8002570:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002572:	2300      	movs	r3, #0
 8002574:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002576:	f107 0314 	add.w	r3, r7, #20
 800257a:	4619      	mov	r1, r3
 800257c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002580:	f000 fe84 	bl	800328c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002584:	bf00      	nop
 8002586:	3728      	adds	r7, #40	; 0x28
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	50000800 	.word	0x50000800
 8002590:	40021000 	.word	0x40021000

08002594 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b0a0      	sub	sp, #128	; 0x80
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800259c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	609a      	str	r2, [r3, #8]
 80025a8:	60da      	str	r2, [r3, #12]
 80025aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025ac:	f107 0318 	add.w	r3, r7, #24
 80025b0:	2254      	movs	r2, #84	; 0x54
 80025b2:	2100      	movs	r1, #0
 80025b4:	4618      	mov	r0, r3
 80025b6:	f004 fc2d 	bl	8006e14 <memset>
  if(huart->Instance==LPUART1)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a41      	ldr	r2, [pc, #260]	; (80026c4 <HAL_UART_MspInit+0x130>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d137      	bne.n	8002634 <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80025c4:	2320      	movs	r3, #32
 80025c6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80025c8:	2300      	movs	r3, #0
 80025ca:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025cc:	f107 0318 	add.w	r3, r7, #24
 80025d0:	4618      	mov	r0, r3
 80025d2:	f001 fe19 	bl	8004208 <HAL_RCCEx_PeriphCLKConfig>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80025dc:	f7ff ff72 	bl	80024c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80025e0:	4b39      	ldr	r3, [pc, #228]	; (80026c8 <HAL_UART_MspInit+0x134>)
 80025e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e4:	4a38      	ldr	r2, [pc, #224]	; (80026c8 <HAL_UART_MspInit+0x134>)
 80025e6:	f043 0301 	orr.w	r3, r3, #1
 80025ea:	65d3      	str	r3, [r2, #92]	; 0x5c
 80025ec:	4b36      	ldr	r3, [pc, #216]	; (80026c8 <HAL_UART_MspInit+0x134>)
 80025ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	617b      	str	r3, [r7, #20]
 80025f6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f8:	4b33      	ldr	r3, [pc, #204]	; (80026c8 <HAL_UART_MspInit+0x134>)
 80025fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025fc:	4a32      	ldr	r2, [pc, #200]	; (80026c8 <HAL_UART_MspInit+0x134>)
 80025fe:	f043 0301 	orr.w	r3, r3, #1
 8002602:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002604:	4b30      	ldr	r3, [pc, #192]	; (80026c8 <HAL_UART_MspInit+0x134>)
 8002606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	613b      	str	r3, [r7, #16]
 800260e:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002610:	230c      	movs	r3, #12
 8002612:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002614:	2302      	movs	r3, #2
 8002616:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002618:	2300      	movs	r3, #0
 800261a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261c:	2300      	movs	r3, #0
 800261e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002620:	230c      	movs	r3, #12
 8002622:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002624:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002628:	4619      	mov	r1, r3
 800262a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800262e:	f000 fe2d 	bl	800328c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002632:	e042      	b.n	80026ba <HAL_UART_MspInit+0x126>
  else if(huart->Instance==USART1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a24      	ldr	r2, [pc, #144]	; (80026cc <HAL_UART_MspInit+0x138>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d13d      	bne.n	80026ba <HAL_UART_MspInit+0x126>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800263e:	2301      	movs	r3, #1
 8002640:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002642:	2300      	movs	r3, #0
 8002644:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002646:	f107 0318 	add.w	r3, r7, #24
 800264a:	4618      	mov	r0, r3
 800264c:	f001 fddc 	bl	8004208 <HAL_RCCEx_PeriphCLKConfig>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d001      	beq.n	800265a <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8002656:	f7ff ff35 	bl	80024c4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800265a:	4b1b      	ldr	r3, [pc, #108]	; (80026c8 <HAL_UART_MspInit+0x134>)
 800265c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800265e:	4a1a      	ldr	r2, [pc, #104]	; (80026c8 <HAL_UART_MspInit+0x134>)
 8002660:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002664:	6613      	str	r3, [r2, #96]	; 0x60
 8002666:	4b18      	ldr	r3, [pc, #96]	; (80026c8 <HAL_UART_MspInit+0x134>)
 8002668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800266a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800266e:	60fb      	str	r3, [r7, #12]
 8002670:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002672:	4b15      	ldr	r3, [pc, #84]	; (80026c8 <HAL_UART_MspInit+0x134>)
 8002674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002676:	4a14      	ldr	r2, [pc, #80]	; (80026c8 <HAL_UART_MspInit+0x134>)
 8002678:	f043 0304 	orr.w	r3, r3, #4
 800267c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800267e:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <HAL_UART_MspInit+0x134>)
 8002680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002682:	f003 0304 	and.w	r3, r3, #4
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800268a:	2330      	movs	r3, #48	; 0x30
 800268c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268e:	2302      	movs	r3, #2
 8002690:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002692:	2300      	movs	r3, #0
 8002694:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002696:	2300      	movs	r3, #0
 8002698:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800269a:	2307      	movs	r3, #7
 800269c:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800269e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026a2:	4619      	mov	r1, r3
 80026a4:	480a      	ldr	r0, [pc, #40]	; (80026d0 <HAL_UART_MspInit+0x13c>)
 80026a6:	f000 fdf1 	bl	800328c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80026aa:	2200      	movs	r2, #0
 80026ac:	2100      	movs	r1, #0
 80026ae:	2025      	movs	r0, #37	; 0x25
 80026b0:	f000 fb2d 	bl	8002d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026b4:	2025      	movs	r0, #37	; 0x25
 80026b6:	f000 fb44 	bl	8002d42 <HAL_NVIC_EnableIRQ>
}
 80026ba:	bf00      	nop
 80026bc:	3780      	adds	r7, #128	; 0x80
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	40008000 	.word	0x40008000
 80026c8:	40021000 	.word	0x40021000
 80026cc:	40013800 	.word	0x40013800
 80026d0:	48000800 	.word	0x48000800

080026d4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a28      	ldr	r2, [pc, #160]	; (8002784 <HAL_TIM_PWM_MspInit+0xb0>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d10c      	bne.n	8002700 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026e6:	4b28      	ldr	r3, [pc, #160]	; (8002788 <HAL_TIM_PWM_MspInit+0xb4>)
 80026e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ea:	4a27      	ldr	r2, [pc, #156]	; (8002788 <HAL_TIM_PWM_MspInit+0xb4>)
 80026ec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026f0:	6613      	str	r3, [r2, #96]	; 0x60
 80026f2:	4b25      	ldr	r3, [pc, #148]	; (8002788 <HAL_TIM_PWM_MspInit+0xb4>)
 80026f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80026fe:	e03c      	b.n	800277a <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM2)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002708:	d10c      	bne.n	8002724 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800270a:	4b1f      	ldr	r3, [pc, #124]	; (8002788 <HAL_TIM_PWM_MspInit+0xb4>)
 800270c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270e:	4a1e      	ldr	r2, [pc, #120]	; (8002788 <HAL_TIM_PWM_MspInit+0xb4>)
 8002710:	f043 0301 	orr.w	r3, r3, #1
 8002714:	6593      	str	r3, [r2, #88]	; 0x58
 8002716:	4b1c      	ldr	r3, [pc, #112]	; (8002788 <HAL_TIM_PWM_MspInit+0xb4>)
 8002718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271a:	f003 0301 	and.w	r3, r3, #1
 800271e:	613b      	str	r3, [r7, #16]
 8002720:	693b      	ldr	r3, [r7, #16]
}
 8002722:	e02a      	b.n	800277a <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM3)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a18      	ldr	r2, [pc, #96]	; (800278c <HAL_TIM_PWM_MspInit+0xb8>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d114      	bne.n	8002758 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800272e:	4b16      	ldr	r3, [pc, #88]	; (8002788 <HAL_TIM_PWM_MspInit+0xb4>)
 8002730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002732:	4a15      	ldr	r2, [pc, #84]	; (8002788 <HAL_TIM_PWM_MspInit+0xb4>)
 8002734:	f043 0302 	orr.w	r3, r3, #2
 8002738:	6593      	str	r3, [r2, #88]	; 0x58
 800273a:	4b13      	ldr	r3, [pc, #76]	; (8002788 <HAL_TIM_PWM_MspInit+0xb4>)
 800273c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002746:	2200      	movs	r2, #0
 8002748:	2100      	movs	r1, #0
 800274a:	201d      	movs	r0, #29
 800274c:	f000 fadf 	bl	8002d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002750:	201d      	movs	r0, #29
 8002752:	f000 faf6 	bl	8002d42 <HAL_NVIC_EnableIRQ>
}
 8002756:	e010      	b.n	800277a <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM8)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a0c      	ldr	r2, [pc, #48]	; (8002790 <HAL_TIM_PWM_MspInit+0xbc>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d10b      	bne.n	800277a <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002762:	4b09      	ldr	r3, [pc, #36]	; (8002788 <HAL_TIM_PWM_MspInit+0xb4>)
 8002764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002766:	4a08      	ldr	r2, [pc, #32]	; (8002788 <HAL_TIM_PWM_MspInit+0xb4>)
 8002768:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800276c:	6613      	str	r3, [r2, #96]	; 0x60
 800276e:	4b06      	ldr	r3, [pc, #24]	; (8002788 <HAL_TIM_PWM_MspInit+0xb4>)
 8002770:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002772:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002776:	60bb      	str	r3, [r7, #8]
 8002778:	68bb      	ldr	r3, [r7, #8]
}
 800277a:	bf00      	nop
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	40012c00 	.word	0x40012c00
 8002788:	40021000 	.word	0x40021000
 800278c:	40000400 	.word	0x40000400
 8002790:	40013400 	.word	0x40013400

08002794 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b08c      	sub	sp, #48	; 0x30
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279c:	f107 031c 	add.w	r3, r7, #28
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	605a      	str	r2, [r3, #4]
 80027a6:	609a      	str	r2, [r3, #8]
 80027a8:	60da      	str	r2, [r3, #12]
 80027aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a5a      	ldr	r2, [pc, #360]	; (800291c <HAL_TIM_MspPostInit+0x188>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d13a      	bne.n	800282c <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027b6:	4b5a      	ldr	r3, [pc, #360]	; (8002920 <HAL_TIM_MspPostInit+0x18c>)
 80027b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ba:	4a59      	ldr	r2, [pc, #356]	; (8002920 <HAL_TIM_MspPostInit+0x18c>)
 80027bc:	f043 0304 	orr.w	r3, r3, #4
 80027c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027c2:	4b57      	ldr	r3, [pc, #348]	; (8002920 <HAL_TIM_MspPostInit+0x18c>)
 80027c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	61bb      	str	r3, [r7, #24]
 80027cc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ce:	4b54      	ldr	r3, [pc, #336]	; (8002920 <HAL_TIM_MspPostInit+0x18c>)
 80027d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d2:	4a53      	ldr	r2, [pc, #332]	; (8002920 <HAL_TIM_MspPostInit+0x18c>)
 80027d4:	f043 0301 	orr.w	r3, r3, #1
 80027d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027da:	4b51      	ldr	r3, [pc, #324]	; (8002920 <HAL_TIM_MspPostInit+0x18c>)
 80027dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	617b      	str	r3, [r7, #20]
 80027e4:	697b      	ldr	r3, [r7, #20]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC3     ------> TIM1_CH4
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 80027e6:	230b      	movs	r3, #11
 80027e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ea:	2302      	movs	r3, #2
 80027ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f2:	2300      	movs	r3, #0
 80027f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80027f6:	2302      	movs	r3, #2
 80027f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027fa:	f107 031c 	add.w	r3, r7, #28
 80027fe:	4619      	mov	r1, r3
 8002800:	4848      	ldr	r0, [pc, #288]	; (8002924 <HAL_TIM_MspPostInit+0x190>)
 8002802:	f000 fd43 	bl	800328c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002806:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800280a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280c:	2302      	movs	r3, #2
 800280e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002810:	2300      	movs	r3, #0
 8002812:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002814:	2300      	movs	r3, #0
 8002816:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002818:	2306      	movs	r3, #6
 800281a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800281c:	f107 031c 	add.w	r3, r7, #28
 8002820:	4619      	mov	r1, r3
 8002822:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002826:	f000 fd31 	bl	800328c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800282a:	e073      	b.n	8002914 <HAL_TIM_MspPostInit+0x180>
  else if(htim->Instance==TIM2)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002834:	d14c      	bne.n	80028d0 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002836:	4b3a      	ldr	r3, [pc, #232]	; (8002920 <HAL_TIM_MspPostInit+0x18c>)
 8002838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283a:	4a39      	ldr	r2, [pc, #228]	; (8002920 <HAL_TIM_MspPostInit+0x18c>)
 800283c:	f043 0301 	orr.w	r3, r3, #1
 8002840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002842:	4b37      	ldr	r3, [pc, #220]	; (8002920 <HAL_TIM_MspPostInit+0x18c>)
 8002844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	613b      	str	r3, [r7, #16]
 800284c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800284e:	4b34      	ldr	r3, [pc, #208]	; (8002920 <HAL_TIM_MspPostInit+0x18c>)
 8002850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002852:	4a33      	ldr	r2, [pc, #204]	; (8002920 <HAL_TIM_MspPostInit+0x18c>)
 8002854:	f043 0302 	orr.w	r3, r3, #2
 8002858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800285a:	4b31      	ldr	r3, [pc, #196]	; (8002920 <HAL_TIM_MspPostInit+0x18c>)
 800285c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285e:	f003 0302 	and.w	r3, r3, #2
 8002862:	60fb      	str	r3, [r7, #12]
 8002864:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002866:	2303      	movs	r3, #3
 8002868:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286a:	2302      	movs	r3, #2
 800286c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286e:	2300      	movs	r3, #0
 8002870:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002872:	2300      	movs	r3, #0
 8002874:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002876:	2301      	movs	r3, #1
 8002878:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800287a:	f107 031c 	add.w	r3, r7, #28
 800287e:	4619      	mov	r1, r3
 8002880:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002884:	f000 fd02 	bl	800328c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002888:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800288c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800288e:	2302      	movs	r3, #2
 8002890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002892:	2300      	movs	r3, #0
 8002894:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002896:	2300      	movs	r3, #0
 8002898:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800289a:	2301      	movs	r3, #1
 800289c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800289e:	f107 031c 	add.w	r3, r7, #28
 80028a2:	4619      	mov	r1, r3
 80028a4:	4820      	ldr	r0, [pc, #128]	; (8002928 <HAL_TIM_MspPostInit+0x194>)
 80028a6:	f000 fcf1 	bl	800328c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b0:	2302      	movs	r3, #2
 80028b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b4:	2300      	movs	r3, #0
 80028b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028b8:	2300      	movs	r3, #0
 80028ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 80028bc:	230a      	movs	r3, #10
 80028be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c0:	f107 031c 	add.w	r3, r7, #28
 80028c4:	4619      	mov	r1, r3
 80028c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ca:	f000 fcdf 	bl	800328c <HAL_GPIO_Init>
}
 80028ce:	e021      	b.n	8002914 <HAL_TIM_MspPostInit+0x180>
  else if(htim->Instance==TIM8)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a15      	ldr	r2, [pc, #84]	; (800292c <HAL_TIM_MspPostInit+0x198>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d11c      	bne.n	8002914 <HAL_TIM_MspPostInit+0x180>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028da:	4b11      	ldr	r3, [pc, #68]	; (8002920 <HAL_TIM_MspPostInit+0x18c>)
 80028dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028de:	4a10      	ldr	r2, [pc, #64]	; (8002920 <HAL_TIM_MspPostInit+0x18c>)
 80028e0:	f043 0304 	orr.w	r3, r3, #4
 80028e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028e6:	4b0e      	ldr	r3, [pc, #56]	; (8002920 <HAL_TIM_MspPostInit+0x18c>)
 80028e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ea:	f003 0304 	and.w	r3, r3, #4
 80028ee:	60bb      	str	r3, [r7, #8]
 80028f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80028f2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80028f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f8:	2302      	movs	r3, #2
 80028fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fc:	2300      	movs	r3, #0
 80028fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002900:	2300      	movs	r3, #0
 8002902:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002904:	2304      	movs	r3, #4
 8002906:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002908:	f107 031c 	add.w	r3, r7, #28
 800290c:	4619      	mov	r1, r3
 800290e:	4805      	ldr	r0, [pc, #20]	; (8002924 <HAL_TIM_MspPostInit+0x190>)
 8002910:	f000 fcbc 	bl	800328c <HAL_GPIO_Init>
}
 8002914:	bf00      	nop
 8002916:	3730      	adds	r7, #48	; 0x30
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40012c00 	.word	0x40012c00
 8002920:	40021000 	.word	0x40021000
 8002924:	48000800 	.word	0x48000800
 8002928:	48000400 	.word	0x48000400
 800292c:	40013400 	.word	0x40013400

08002930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002934:	e7fe      	b.n	8002934 <NMI_Handler+0x4>

08002936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002936:	b480      	push	{r7}
 8002938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800293a:	e7fe      	b.n	800293a <HardFault_Handler+0x4>

0800293c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002940:	e7fe      	b.n	8002940 <MemManage_Handler+0x4>

08002942 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002942:	b480      	push	{r7}
 8002944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002946:	e7fe      	b.n	8002946 <BusFault_Handler+0x4>

08002948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800294c:	e7fe      	b.n	800294c <UsageFault_Handler+0x4>

0800294e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800294e:	b480      	push	{r7}
 8002950:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002952:	bf00      	nop
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800296a:	b480      	push	{r7}
 800296c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800296e:	bf00      	nop
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800297c:	f000 f8ac 	bl	8002ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002980:	bf00      	nop
 8002982:	bd80      	pop	{r7, pc}

08002984 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002988:	4802      	ldr	r0, [pc, #8]	; (8002994 <TIM3_IRQHandler+0x10>)
 800298a:	f001 fff5 	bl	8004978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800298e:	bf00      	nop
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	200001f4 	.word	0x200001f4

08002998 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800299c:	4802      	ldr	r0, [pc, #8]	; (80029a8 <USART1_IRQHandler+0x10>)
 800299e:	f003 f887 	bl	8005ab0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029a2:	bf00      	nop
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	200000cc 	.word	0x200000cc

080029ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80029b0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80029b4:	f000 fe1c 	bl	80035f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80029b8:	bf00      	nop
 80029ba:	bd80      	pop	{r7, pc}

080029bc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80029c0:	4b06      	ldr	r3, [pc, #24]	; (80029dc <SystemInit+0x20>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c6:	4a05      	ldr	r2, [pc, #20]	; (80029dc <SystemInit+0x20>)
 80029c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029d0:	bf00      	nop
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	e000ed00 	.word	0xe000ed00

080029e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80029e0:	480d      	ldr	r0, [pc, #52]	; (8002a18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80029e2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029e4:	480d      	ldr	r0, [pc, #52]	; (8002a1c <LoopForever+0x6>)
  ldr r1, =_edata
 80029e6:	490e      	ldr	r1, [pc, #56]	; (8002a20 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029e8:	4a0e      	ldr	r2, [pc, #56]	; (8002a24 <LoopForever+0xe>)
  movs r3, #0
 80029ea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80029ec:	e002      	b.n	80029f4 <LoopCopyDataInit>

080029ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029f2:	3304      	adds	r3, #4

080029f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029f8:	d3f9      	bcc.n	80029ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029fa:	4a0b      	ldr	r2, [pc, #44]	; (8002a28 <LoopForever+0x12>)
  ldr r4, =_ebss
 80029fc:	4c0b      	ldr	r4, [pc, #44]	; (8002a2c <LoopForever+0x16>)
  movs r3, #0
 80029fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a00:	e001      	b.n	8002a06 <LoopFillZerobss>

08002a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a04:	3204      	adds	r2, #4

08002a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a08:	d3fb      	bcc.n	8002a02 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a0a:	f7ff ffd7 	bl	80029bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a0e:	f004 fa09 	bl	8006e24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a12:	f7fd fd7f 	bl	8000514 <main>

08002a16 <LoopForever>:

LoopForever:
    b LoopForever
 8002a16:	e7fe      	b.n	8002a16 <LoopForever>
  ldr   r0, =_estack
 8002a18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a20:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002a24:	08006ed4 	.word	0x08006ed4
  ldr r2, =_sbss
 8002a28:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002a2c:	20000298 	.word	0x20000298

08002a30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a30:	e7fe      	b.n	8002a30 <ADC1_2_IRQHandler>

08002a32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b082      	sub	sp, #8
 8002a36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a3c:	2003      	movs	r0, #3
 8002a3e:	f000 f95b 	bl	8002cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a42:	2000      	movs	r0, #0
 8002a44:	f000 f80e 	bl	8002a64 <HAL_InitTick>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d002      	beq.n	8002a54 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	71fb      	strb	r3, [r7, #7]
 8002a52:	e001      	b.n	8002a58 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a54:	f7ff fd3c 	bl	80024d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a58:	79fb      	ldrb	r3, [r7, #7]

}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002a70:	4b16      	ldr	r3, [pc, #88]	; (8002acc <HAL_InitTick+0x68>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d022      	beq.n	8002abe <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002a78:	4b15      	ldr	r3, [pc, #84]	; (8002ad0 <HAL_InitTick+0x6c>)
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	4b13      	ldr	r3, [pc, #76]	; (8002acc <HAL_InitTick+0x68>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002a84:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 f966 	bl	8002d5e <HAL_SYSTICK_Config>
 8002a92:	4603      	mov	r3, r0
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d10f      	bne.n	8002ab8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2b0f      	cmp	r3, #15
 8002a9c:	d809      	bhi.n	8002ab2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8002aa6:	f000 f932 	bl	8002d0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002aaa:	4a0a      	ldr	r2, [pc, #40]	; (8002ad4 <HAL_InitTick+0x70>)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	e007      	b.n	8002ac2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	73fb      	strb	r3, [r7, #15]
 8002ab6:	e004      	b.n	8002ac2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	73fb      	strb	r3, [r7, #15]
 8002abc:	e001      	b.n	8002ac2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3710      	adds	r7, #16
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	20000008 	.word	0x20000008
 8002ad0:	20000000 	.word	0x20000000
 8002ad4:	20000004 	.word	0x20000004

08002ad8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002adc:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <HAL_IncTick+0x1c>)
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <HAL_IncTick+0x20>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	4a03      	ldr	r2, [pc, #12]	; (8002af4 <HAL_IncTick+0x1c>)
 8002ae8:	6013      	str	r3, [r2, #0]
}
 8002aea:	bf00      	nop
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	20000294 	.word	0x20000294
 8002af8:	20000008 	.word	0x20000008

08002afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  return uwTick;
 8002b00:	4b03      	ldr	r3, [pc, #12]	; (8002b10 <HAL_GetTick+0x14>)
 8002b02:	681b      	ldr	r3, [r3, #0]
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
 8002b0e:	bf00      	nop
 8002b10:	20000294 	.word	0x20000294

08002b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b1c:	f7ff ffee 	bl	8002afc <HAL_GetTick>
 8002b20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b2c:	d004      	beq.n	8002b38 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b2e:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <HAL_Delay+0x40>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	4413      	add	r3, r2
 8002b36:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b38:	bf00      	nop
 8002b3a:	f7ff ffdf 	bl	8002afc <HAL_GetTick>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	429a      	cmp	r2, r3
 8002b48:	d8f7      	bhi.n	8002b3a <HAL_Delay+0x26>
  {
  }
}
 8002b4a:	bf00      	nop
 8002b4c:	bf00      	nop
 8002b4e:	3710      	adds	r7, #16
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	20000008 	.word	0x20000008

08002b58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f003 0307 	and.w	r3, r3, #7
 8002b66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b68:	4b0c      	ldr	r3, [pc, #48]	; (8002b9c <__NVIC_SetPriorityGrouping+0x44>)
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b6e:	68ba      	ldr	r2, [r7, #8]
 8002b70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b74:	4013      	ands	r3, r2
 8002b76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b8a:	4a04      	ldr	r2, [pc, #16]	; (8002b9c <__NVIC_SetPriorityGrouping+0x44>)
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	60d3      	str	r3, [r2, #12]
}
 8002b90:	bf00      	nop
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ba4:	4b04      	ldr	r3, [pc, #16]	; (8002bb8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	0a1b      	lsrs	r3, r3, #8
 8002baa:	f003 0307 	and.w	r3, r3, #7
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	e000ed00 	.word	0xe000ed00

08002bbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	db0b      	blt.n	8002be6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bce:	79fb      	ldrb	r3, [r7, #7]
 8002bd0:	f003 021f 	and.w	r2, r3, #31
 8002bd4:	4907      	ldr	r1, [pc, #28]	; (8002bf4 <__NVIC_EnableIRQ+0x38>)
 8002bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bda:	095b      	lsrs	r3, r3, #5
 8002bdc:	2001      	movs	r0, #1
 8002bde:	fa00 f202 	lsl.w	r2, r0, r2
 8002be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002be6:	bf00      	nop
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	e000e100 	.word	0xe000e100

08002bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	4603      	mov	r3, r0
 8002c00:	6039      	str	r1, [r7, #0]
 8002c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	db0a      	blt.n	8002c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	490c      	ldr	r1, [pc, #48]	; (8002c44 <__NVIC_SetPriority+0x4c>)
 8002c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c16:	0112      	lsls	r2, r2, #4
 8002c18:	b2d2      	uxtb	r2, r2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c20:	e00a      	b.n	8002c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	4908      	ldr	r1, [pc, #32]	; (8002c48 <__NVIC_SetPriority+0x50>)
 8002c28:	79fb      	ldrb	r3, [r7, #7]
 8002c2a:	f003 030f 	and.w	r3, r3, #15
 8002c2e:	3b04      	subs	r3, #4
 8002c30:	0112      	lsls	r2, r2, #4
 8002c32:	b2d2      	uxtb	r2, r2
 8002c34:	440b      	add	r3, r1
 8002c36:	761a      	strb	r2, [r3, #24]
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	e000e100 	.word	0xe000e100
 8002c48:	e000ed00 	.word	0xe000ed00

08002c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b089      	sub	sp, #36	; 0x24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	f1c3 0307 	rsb	r3, r3, #7
 8002c66:	2b04      	cmp	r3, #4
 8002c68:	bf28      	it	cs
 8002c6a:	2304      	movcs	r3, #4
 8002c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c6e:	69fb      	ldr	r3, [r7, #28]
 8002c70:	3304      	adds	r3, #4
 8002c72:	2b06      	cmp	r3, #6
 8002c74:	d902      	bls.n	8002c7c <NVIC_EncodePriority+0x30>
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	3b03      	subs	r3, #3
 8002c7a:	e000      	b.n	8002c7e <NVIC_EncodePriority+0x32>
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c80:	f04f 32ff 	mov.w	r2, #4294967295
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43da      	mvns	r2, r3
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	401a      	ands	r2, r3
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c94:	f04f 31ff 	mov.w	r1, #4294967295
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9e:	43d9      	mvns	r1, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca4:	4313      	orrs	r3, r2
         );
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3724      	adds	r7, #36	; 0x24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
	...

08002cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cc4:	d301      	bcc.n	8002cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e00f      	b.n	8002cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cca:	4a0a      	ldr	r2, [pc, #40]	; (8002cf4 <SysTick_Config+0x40>)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cd2:	210f      	movs	r1, #15
 8002cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cd8:	f7ff ff8e 	bl	8002bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cdc:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <SysTick_Config+0x40>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ce2:	4b04      	ldr	r3, [pc, #16]	; (8002cf4 <SysTick_Config+0x40>)
 8002ce4:	2207      	movs	r2, #7
 8002ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	e000e010 	.word	0xe000e010

08002cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f7ff ff29 	bl	8002b58 <__NVIC_SetPriorityGrouping>
}
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b086      	sub	sp, #24
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	4603      	mov	r3, r0
 8002d16:	60b9      	str	r1, [r7, #8]
 8002d18:	607a      	str	r2, [r7, #4]
 8002d1a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d1c:	f7ff ff40 	bl	8002ba0 <__NVIC_GetPriorityGrouping>
 8002d20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	68b9      	ldr	r1, [r7, #8]
 8002d26:	6978      	ldr	r0, [r7, #20]
 8002d28:	f7ff ff90 	bl	8002c4c <NVIC_EncodePriority>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d32:	4611      	mov	r1, r2
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff ff5f 	bl	8002bf8 <__NVIC_SetPriority>
}
 8002d3a:	bf00      	nop
 8002d3c:	3718      	adds	r7, #24
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	bd80      	pop	{r7, pc}

08002d42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d42:	b580      	push	{r7, lr}
 8002d44:	b082      	sub	sp, #8
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	4603      	mov	r3, r0
 8002d4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff ff33 	bl	8002bbc <__NVIC_EnableIRQ>
}
 8002d56:	bf00      	nop
 8002d58:	3708      	adds	r7, #8
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b082      	sub	sp, #8
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f7ff ffa4 	bl	8002cb4 <SysTick_Config>
 8002d6c:	4603      	mov	r3, r0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b082      	sub	sp, #8
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e014      	b.n	8002db2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	791b      	ldrb	r3, [r3, #4]
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d105      	bne.n	8002d9e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7ff fbbd 	bl	8002518 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2202      	movs	r2, #2
 8002da2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2201      	movs	r2, #1
 8002dae:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3708      	adds	r7, #8
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
	...

08002dbc <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08a      	sub	sp, #40	; 0x28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	795b      	ldrb	r3, [r3, #5]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d101      	bne.n	8002dd4 <HAL_DAC_ConfigChannel+0x18>
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	e192      	b.n	80030fa <HAL_DAC_ConfigChannel+0x33e>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2202      	movs	r2, #2
 8002dde:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d174      	bne.n	8002ed2 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002de8:	f7ff fe88 	bl	8002afc <HAL_GetTick>
 8002dec:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d134      	bne.n	8002e5e <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002df4:	e011      	b.n	8002e1a <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002df6:	f7ff fe81 	bl	8002afc <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d90a      	bls.n	8002e1a <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	f043 0208 	orr.w	r2, r3, #8
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2203      	movs	r2, #3
 8002e14:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e16f      	b.n	80030fa <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1e6      	bne.n	8002df6 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8002e28:	2001      	movs	r0, #1
 8002e2a:	f7ff fe73 	bl	8002b14 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e36:	641a      	str	r2, [r3, #64]	; 0x40
 8002e38:	e01e      	b.n	8002e78 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002e3a:	f7ff fe5f 	bl	8002afc <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d90a      	bls.n	8002e5e <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	f043 0208 	orr.w	r2, r3, #8
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2203      	movs	r2, #3
 8002e58:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e14d      	b.n	80030fa <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	dbe8      	blt.n	8002e3a <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8002e68:	2001      	movs	r0, #1
 8002e6a:	f7ff fe53 	bl	8002b14 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e76:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f003 0310 	and.w	r3, r3, #16
 8002e84:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002e88:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	ea02 0103 	and.w	r1, r2, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f003 0310 	and.w	r3, r3, #16
 8002e9c:	409a      	lsls	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	430a      	orrs	r2, r1
 8002ea4:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f003 0310 	and.w	r3, r3, #16
 8002eb2:	21ff      	movs	r1, #255	; 0xff
 8002eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	ea02 0103 	and.w	r1, r2, r3
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f003 0310 	and.w	r3, r3, #16
 8002ec8:	409a      	lsls	r2, r3
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	69db      	ldr	r3, [r3, #28]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d11d      	bne.n	8002f16 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f003 0310 	and.w	r3, r3, #16
 8002ee8:	221f      	movs	r2, #31
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	6a1b      	ldr	r3, [r3, #32]
 8002efa:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f003 0310 	and.w	r3, r3, #16
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f14:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	f003 0310 	and.w	r3, r3, #16
 8002f24:	2207      	movs	r2, #7
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f2e:	4013      	ands	r3, r2
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	699b      	ldr	r3, [r3, #24]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d102      	bne.n	8002f40 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	623b      	str	r3, [r7, #32]
 8002f3e:	e00f      	b.n	8002f60 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d102      	bne.n	8002f4e <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	623b      	str	r3, [r7, #32]
 8002f4c:	e008      	b.n	8002f60 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d102      	bne.n	8002f5c <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002f56:	2301      	movs	r3, #1
 8002f58:	623b      	str	r3, [r7, #32]
 8002f5a:	e001      	b.n	8002f60 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	695b      	ldr	r3, [r3, #20]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	6a3a      	ldr	r2, [r7, #32]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	f003 0310 	and.w	r3, r3, #16
 8002f76:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f82:	4013      	ands	r3, r2
 8002f84:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	791b      	ldrb	r3, [r3, #4]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d102      	bne.n	8002f94 <HAL_DAC_ConfigChannel+0x1d8>
 8002f8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f92:	e000      	b.n	8002f96 <HAL_DAC_ConfigChannel+0x1da>
 8002f94:	2300      	movs	r3, #0
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f003 0310 	and.w	r3, r3, #16
 8002fa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8002faa:	43db      	mvns	r3, r3
 8002fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fae:	4013      	ands	r3, r2
 8002fb0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	795b      	ldrb	r3, [r3, #5]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d102      	bne.n	8002fc0 <HAL_DAC_ConfigChannel+0x204>
 8002fba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fbe:	e000      	b.n	8002fc2 <HAL_DAC_ConfigChannel+0x206>
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8002fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fca:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002fce:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d114      	bne.n	8003002 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8002fd8:	f001 f898 	bl	800410c <HAL_RCC_GetHCLKFreq>
 8002fdc:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	4a48      	ldr	r2, [pc, #288]	; (8003104 <HAL_DAC_ConfigChannel+0x348>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d904      	bls.n	8002ff0 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8002fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fec:	627b      	str	r3, [r7, #36]	; 0x24
 8002fee:	e00f      	b.n	8003010 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	4a45      	ldr	r2, [pc, #276]	; (8003108 <HAL_DAC_ConfigChannel+0x34c>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d90a      	bls.n	800300e <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8003000:	e006      	b.n	8003010 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003008:	4313      	orrs	r3, r2
 800300a:	627b      	str	r3, [r7, #36]	; 0x24
 800300c:	e000      	b.n	8003010 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800300e:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f003 0310 	and.w	r3, r3, #16
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800301e:	4313      	orrs	r3, r2
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003028:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6819      	ldr	r1, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f003 0310 	and.w	r3, r3, #16
 8003036:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	43da      	mvns	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	400a      	ands	r2, r1
 8003046:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f003 0310 	and.w	r3, r3, #16
 8003056:	f640 72fe 	movw	r2, #4094	; 0xffe
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	43db      	mvns	r3, r3
 8003060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003062:	4013      	ands	r3, r2
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f003 0310 	and.w	r3, r3, #16
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800307a:	4313      	orrs	r3, r2
 800307c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003084:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6819      	ldr	r1, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f003 0310 	and.w	r3, r3, #16
 8003092:	22c0      	movs	r2, #192	; 0xc0
 8003094:	fa02 f303 	lsl.w	r3, r2, r3
 8003098:	43da      	mvns	r2, r3
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	400a      	ands	r2, r1
 80030a0:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	089b      	lsrs	r3, r3, #2
 80030a8:	f003 030f 	and.w	r3, r3, #15
 80030ac:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	089b      	lsrs	r3, r3, #2
 80030b4:	021b      	lsls	r3, r3, #8
 80030b6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80030ba:	69ba      	ldr	r2, [r7, #24]
 80030bc:	4313      	orrs	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	f003 0310 	and.w	r3, r3, #16
 80030cc:	f640 710f 	movw	r1, #3855	; 0xf0f
 80030d0:	fa01 f303 	lsl.w	r3, r1, r3
 80030d4:	43db      	mvns	r3, r3
 80030d6:	ea02 0103 	and.w	r1, r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f003 0310 	and.w	r3, r3, #16
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	409a      	lsls	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2201      	movs	r2, #1
 80030f0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80030f8:	2300      	movs	r3, #0
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3728      	adds	r7, #40	; 0x28
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	09896800 	.word	0x09896800
 8003108:	04c4b400 	.word	0x04c4b400

0800310c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800310c:	b480      	push	{r7}
 800310e:	b085      	sub	sp, #20
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003114:	2300      	movs	r3, #0
 8003116:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d005      	beq.n	8003130 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2204      	movs	r2, #4
 8003128:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	73fb      	strb	r3, [r7, #15]
 800312e:	e037      	b.n	80031a0 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 020e 	bic.w	r2, r2, #14
 800313e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800314a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800314e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f022 0201 	bic.w	r2, r2, #1
 800315e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003164:	f003 021f 	and.w	r2, r3, #31
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316c:	2101      	movs	r1, #1
 800316e:	fa01 f202 	lsl.w	r2, r1, r2
 8003172:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800317c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00c      	beq.n	80031a0 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003190:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003194:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319a:	687a      	ldr	r2, [r7, #4]
 800319c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800319e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3714      	adds	r7, #20
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr

080031be <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031be:	b580      	push	{r7, lr}
 80031c0:	b084      	sub	sp, #16
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031c6:	2300      	movs	r3, #0
 80031c8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d00d      	beq.n	80031f2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2204      	movs	r2, #4
 80031da:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	73fb      	strb	r3, [r7, #15]
 80031f0:	e047      	b.n	8003282 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f022 020e 	bic.w	r2, r2, #14
 8003200:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0201 	bic.w	r2, r2, #1
 8003210:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800321c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003220:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003226:	f003 021f 	and.w	r2, r3, #31
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	2101      	movs	r1, #1
 8003230:	fa01 f202 	lsl.w	r2, r1, r2
 8003234:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800323e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00c      	beq.n	8003262 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003252:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003256:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003260:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	4798      	blx	r3
    }
  }
  return status;
 8003282:	7bfb      	ldrb	r3, [r7, #15]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3710      	adds	r7, #16
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800328c:	b480      	push	{r7}
 800328e:	b087      	sub	sp, #28
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003296:	2300      	movs	r3, #0
 8003298:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800329a:	e15a      	b.n	8003552 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	2101      	movs	r1, #1
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	fa01 f303 	lsl.w	r3, r1, r3
 80032a8:	4013      	ands	r3, r2
 80032aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	f000 814c 	beq.w	800354c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f003 0303 	and.w	r3, r3, #3
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d005      	beq.n	80032cc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d130      	bne.n	800332e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	2203      	movs	r2, #3
 80032d8:	fa02 f303 	lsl.w	r3, r2, r3
 80032dc:	43db      	mvns	r3, r3
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	4013      	ands	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003302:	2201      	movs	r2, #1
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	43db      	mvns	r3, r3
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	4013      	ands	r3, r2
 8003310:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	091b      	lsrs	r3, r3, #4
 8003318:	f003 0201 	and.w	r2, r3, #1
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	fa02 f303 	lsl.w	r3, r2, r3
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	4313      	orrs	r3, r2
 8003326:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	693a      	ldr	r2, [r7, #16]
 800332c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f003 0303 	and.w	r3, r3, #3
 8003336:	2b03      	cmp	r3, #3
 8003338:	d017      	beq.n	800336a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	2203      	movs	r2, #3
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43db      	mvns	r3, r3
 800334c:	693a      	ldr	r2, [r7, #16]
 800334e:	4013      	ands	r3, r2
 8003350:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	689a      	ldr	r2, [r3, #8]
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	4313      	orrs	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d123      	bne.n	80033be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	08da      	lsrs	r2, r3, #3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3208      	adds	r2, #8
 800337e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003382:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f003 0307 	and.w	r3, r3, #7
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	220f      	movs	r2, #15
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	43db      	mvns	r3, r3
 8003394:	693a      	ldr	r2, [r7, #16]
 8003396:	4013      	ands	r3, r2
 8003398:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	691a      	ldr	r2, [r3, #16]
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	693a      	ldr	r2, [r7, #16]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	08da      	lsrs	r2, r3, #3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3208      	adds	r2, #8
 80033b8:	6939      	ldr	r1, [r7, #16]
 80033ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	2203      	movs	r2, #3
 80033ca:	fa02 f303 	lsl.w	r3, r2, r3
 80033ce:	43db      	mvns	r3, r3
 80033d0:	693a      	ldr	r2, [r7, #16]
 80033d2:	4013      	ands	r3, r2
 80033d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f003 0203 	and.w	r2, r3, #3
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	693a      	ldr	r2, [r7, #16]
 80033f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 80a6 	beq.w	800354c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003400:	4b5b      	ldr	r3, [pc, #364]	; (8003570 <HAL_GPIO_Init+0x2e4>)
 8003402:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003404:	4a5a      	ldr	r2, [pc, #360]	; (8003570 <HAL_GPIO_Init+0x2e4>)
 8003406:	f043 0301 	orr.w	r3, r3, #1
 800340a:	6613      	str	r3, [r2, #96]	; 0x60
 800340c:	4b58      	ldr	r3, [pc, #352]	; (8003570 <HAL_GPIO_Init+0x2e4>)
 800340e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003418:	4a56      	ldr	r2, [pc, #344]	; (8003574 <HAL_GPIO_Init+0x2e8>)
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	089b      	lsrs	r3, r3, #2
 800341e:	3302      	adds	r3, #2
 8003420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003424:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f003 0303 	and.w	r3, r3, #3
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	220f      	movs	r2, #15
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	43db      	mvns	r3, r3
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	4013      	ands	r3, r2
 800343a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003442:	d01f      	beq.n	8003484 <HAL_GPIO_Init+0x1f8>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a4c      	ldr	r2, [pc, #304]	; (8003578 <HAL_GPIO_Init+0x2ec>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d019      	beq.n	8003480 <HAL_GPIO_Init+0x1f4>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a4b      	ldr	r2, [pc, #300]	; (800357c <HAL_GPIO_Init+0x2f0>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d013      	beq.n	800347c <HAL_GPIO_Init+0x1f0>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a4a      	ldr	r2, [pc, #296]	; (8003580 <HAL_GPIO_Init+0x2f4>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d00d      	beq.n	8003478 <HAL_GPIO_Init+0x1ec>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a49      	ldr	r2, [pc, #292]	; (8003584 <HAL_GPIO_Init+0x2f8>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d007      	beq.n	8003474 <HAL_GPIO_Init+0x1e8>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a48      	ldr	r2, [pc, #288]	; (8003588 <HAL_GPIO_Init+0x2fc>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d101      	bne.n	8003470 <HAL_GPIO_Init+0x1e4>
 800346c:	2305      	movs	r3, #5
 800346e:	e00a      	b.n	8003486 <HAL_GPIO_Init+0x1fa>
 8003470:	2306      	movs	r3, #6
 8003472:	e008      	b.n	8003486 <HAL_GPIO_Init+0x1fa>
 8003474:	2304      	movs	r3, #4
 8003476:	e006      	b.n	8003486 <HAL_GPIO_Init+0x1fa>
 8003478:	2303      	movs	r3, #3
 800347a:	e004      	b.n	8003486 <HAL_GPIO_Init+0x1fa>
 800347c:	2302      	movs	r3, #2
 800347e:	e002      	b.n	8003486 <HAL_GPIO_Init+0x1fa>
 8003480:	2301      	movs	r3, #1
 8003482:	e000      	b.n	8003486 <HAL_GPIO_Init+0x1fa>
 8003484:	2300      	movs	r3, #0
 8003486:	697a      	ldr	r2, [r7, #20]
 8003488:	f002 0203 	and.w	r2, r2, #3
 800348c:	0092      	lsls	r2, r2, #2
 800348e:	4093      	lsls	r3, r2
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	4313      	orrs	r3, r2
 8003494:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003496:	4937      	ldr	r1, [pc, #220]	; (8003574 <HAL_GPIO_Init+0x2e8>)
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	089b      	lsrs	r3, r3, #2
 800349c:	3302      	adds	r3, #2
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034a4:	4b39      	ldr	r3, [pc, #228]	; (800358c <HAL_GPIO_Init+0x300>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	43db      	mvns	r3, r3
 80034ae:	693a      	ldr	r2, [r7, #16]
 80034b0:	4013      	ands	r3, r2
 80034b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034c8:	4a30      	ldr	r2, [pc, #192]	; (800358c <HAL_GPIO_Init+0x300>)
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034ce:	4b2f      	ldr	r3, [pc, #188]	; (800358c <HAL_GPIO_Init+0x300>)
 80034d0:	68db      	ldr	r3, [r3, #12]
 80034d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	43db      	mvns	r3, r3
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	4013      	ands	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034f2:	4a26      	ldr	r2, [pc, #152]	; (800358c <HAL_GPIO_Init+0x300>)
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80034f8:	4b24      	ldr	r3, [pc, #144]	; (800358c <HAL_GPIO_Init+0x300>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	43db      	mvns	r3, r3
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	4013      	ands	r3, r2
 8003506:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d003      	beq.n	800351c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003514:	693a      	ldr	r2, [r7, #16]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	4313      	orrs	r3, r2
 800351a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800351c:	4a1b      	ldr	r2, [pc, #108]	; (800358c <HAL_GPIO_Init+0x300>)
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003522:	4b1a      	ldr	r3, [pc, #104]	; (800358c <HAL_GPIO_Init+0x300>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	43db      	mvns	r3, r3
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	4013      	ands	r3, r2
 8003530:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	4313      	orrs	r3, r2
 8003544:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003546:	4a11      	ldr	r2, [pc, #68]	; (800358c <HAL_GPIO_Init+0x300>)
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	3301      	adds	r3, #1
 8003550:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	fa22 f303 	lsr.w	r3, r2, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	f47f ae9d 	bne.w	800329c <HAL_GPIO_Init+0x10>
  }
}
 8003562:	bf00      	nop
 8003564:	bf00      	nop
 8003566:	371c      	adds	r7, #28
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr
 8003570:	40021000 	.word	0x40021000
 8003574:	40010000 	.word	0x40010000
 8003578:	48000400 	.word	0x48000400
 800357c:	48000800 	.word	0x48000800
 8003580:	48000c00 	.word	0x48000c00
 8003584:	48001000 	.word	0x48001000
 8003588:	48001400 	.word	0x48001400
 800358c:	40010400 	.word	0x40010400

08003590 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003590:	b480      	push	{r7}
 8003592:	b085      	sub	sp, #20
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	460b      	mov	r3, r1
 800359a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	691a      	ldr	r2, [r3, #16]
 80035a0:	887b      	ldrh	r3, [r7, #2]
 80035a2:	4013      	ands	r3, r2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d002      	beq.n	80035ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035a8:	2301      	movs	r3, #1
 80035aa:	73fb      	strb	r3, [r7, #15]
 80035ac:	e001      	b.n	80035b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035ae:	2300      	movs	r3, #0
 80035b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3714      	adds	r7, #20
 80035b8:	46bd      	mov	sp, r7
 80035ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035be:	4770      	bx	lr

080035c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035c0:	b480      	push	{r7}
 80035c2:	b083      	sub	sp, #12
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	460b      	mov	r3, r1
 80035ca:	807b      	strh	r3, [r7, #2]
 80035cc:	4613      	mov	r3, r2
 80035ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035d0:	787b      	ldrb	r3, [r7, #1]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d003      	beq.n	80035de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035d6:	887a      	ldrh	r2, [r7, #2]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035dc:	e002      	b.n	80035e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035de:	887a      	ldrh	r2, [r7, #2]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80035fa:	4b08      	ldr	r3, [pc, #32]	; (800361c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035fc:	695a      	ldr	r2, [r3, #20]
 80035fe:	88fb      	ldrh	r3, [r7, #6]
 8003600:	4013      	ands	r3, r2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d006      	beq.n	8003614 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003606:	4a05      	ldr	r2, [pc, #20]	; (800361c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003608:	88fb      	ldrh	r3, [r7, #6]
 800360a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800360c:	88fb      	ldrh	r3, [r7, #6]
 800360e:	4618      	mov	r0, r3
 8003610:	f000 f806 	bl	8003620 <HAL_GPIO_EXTI_Callback>
  }
}
 8003614:	bf00      	nop
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	40010400 	.word	0x40010400

08003620 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	4603      	mov	r3, r0
 8003628:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800362a:	bf00      	nop
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
	...

08003638 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d141      	bne.n	80036ca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003646:	4b4b      	ldr	r3, [pc, #300]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800364e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003652:	d131      	bne.n	80036b8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003654:	4b47      	ldr	r3, [pc, #284]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800365a:	4a46      	ldr	r2, [pc, #280]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800365c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003660:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003664:	4b43      	ldr	r3, [pc, #268]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800366c:	4a41      	ldr	r2, [pc, #260]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800366e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003672:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003674:	4b40      	ldr	r3, [pc, #256]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2232      	movs	r2, #50	; 0x32
 800367a:	fb02 f303 	mul.w	r3, r2, r3
 800367e:	4a3f      	ldr	r2, [pc, #252]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003680:	fba2 2303 	umull	r2, r3, r2, r3
 8003684:	0c9b      	lsrs	r3, r3, #18
 8003686:	3301      	adds	r3, #1
 8003688:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800368a:	e002      	b.n	8003692 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	3b01      	subs	r3, #1
 8003690:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003692:	4b38      	ldr	r3, [pc, #224]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800369a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800369e:	d102      	bne.n	80036a6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f2      	bne.n	800368c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036a6:	4b33      	ldr	r3, [pc, #204]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036a8:	695b      	ldr	r3, [r3, #20]
 80036aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b2:	d158      	bne.n	8003766 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e057      	b.n	8003768 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036b8:	4b2e      	ldr	r3, [pc, #184]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036be:	4a2d      	ldr	r2, [pc, #180]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80036c8:	e04d      	b.n	8003766 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036d0:	d141      	bne.n	8003756 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036d2:	4b28      	ldr	r3, [pc, #160]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036de:	d131      	bne.n	8003744 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036e0:	4b24      	ldr	r3, [pc, #144]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036e6:	4a23      	ldr	r2, [pc, #140]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036f0:	4b20      	ldr	r3, [pc, #128]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036f8:	4a1e      	ldr	r2, [pc, #120]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003700:	4b1d      	ldr	r3, [pc, #116]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2232      	movs	r2, #50	; 0x32
 8003706:	fb02 f303 	mul.w	r3, r2, r3
 800370a:	4a1c      	ldr	r2, [pc, #112]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800370c:	fba2 2303 	umull	r2, r3, r2, r3
 8003710:	0c9b      	lsrs	r3, r3, #18
 8003712:	3301      	adds	r3, #1
 8003714:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003716:	e002      	b.n	800371e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	3b01      	subs	r3, #1
 800371c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800371e:	4b15      	ldr	r3, [pc, #84]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800372a:	d102      	bne.n	8003732 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1f2      	bne.n	8003718 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003732:	4b10      	ldr	r3, [pc, #64]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800373a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800373e:	d112      	bne.n	8003766 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e011      	b.n	8003768 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003744:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003746:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800374a:	4a0a      	ldr	r2, [pc, #40]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800374c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003750:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003754:	e007      	b.n	8003766 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003756:	4b07      	ldr	r3, [pc, #28]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800375e:	4a05      	ldr	r2, [pc, #20]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003760:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003764:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	40007000 	.word	0x40007000
 8003778:	20000000 	.word	0x20000000
 800377c:	431bde83 	.word	0x431bde83

08003780 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003780:	b480      	push	{r7}
 8003782:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003784:	4b05      	ldr	r3, [pc, #20]	; (800379c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	4a04      	ldr	r2, [pc, #16]	; (800379c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800378a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800378e:	6093      	str	r3, [r2, #8]
}
 8003790:	bf00      	nop
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	40007000 	.word	0x40007000

080037a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b088      	sub	sp, #32
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e306      	b.n	8003dc0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d075      	beq.n	80038aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037be:	4b97      	ldr	r3, [pc, #604]	; (8003a1c <HAL_RCC_OscConfig+0x27c>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 030c 	and.w	r3, r3, #12
 80037c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037c8:	4b94      	ldr	r3, [pc, #592]	; (8003a1c <HAL_RCC_OscConfig+0x27c>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	f003 0303 	and.w	r3, r3, #3
 80037d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	2b0c      	cmp	r3, #12
 80037d6:	d102      	bne.n	80037de <HAL_RCC_OscConfig+0x3e>
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	2b03      	cmp	r3, #3
 80037dc:	d002      	beq.n	80037e4 <HAL_RCC_OscConfig+0x44>
 80037de:	69bb      	ldr	r3, [r7, #24]
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d10b      	bne.n	80037fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e4:	4b8d      	ldr	r3, [pc, #564]	; (8003a1c <HAL_RCC_OscConfig+0x27c>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d05b      	beq.n	80038a8 <HAL_RCC_OscConfig+0x108>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d157      	bne.n	80038a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e2e1      	b.n	8003dc0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003804:	d106      	bne.n	8003814 <HAL_RCC_OscConfig+0x74>
 8003806:	4b85      	ldr	r3, [pc, #532]	; (8003a1c <HAL_RCC_OscConfig+0x27c>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a84      	ldr	r2, [pc, #528]	; (8003a1c <HAL_RCC_OscConfig+0x27c>)
 800380c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003810:	6013      	str	r3, [r2, #0]
 8003812:	e01d      	b.n	8003850 <HAL_RCC_OscConfig+0xb0>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800381c:	d10c      	bne.n	8003838 <HAL_RCC_OscConfig+0x98>
 800381e:	4b7f      	ldr	r3, [pc, #508]	; (8003a1c <HAL_RCC_OscConfig+0x27c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a7e      	ldr	r2, [pc, #504]	; (8003a1c <HAL_RCC_OscConfig+0x27c>)
 8003824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	4b7c      	ldr	r3, [pc, #496]	; (8003a1c <HAL_RCC_OscConfig+0x27c>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a7b      	ldr	r2, [pc, #492]	; (8003a1c <HAL_RCC_OscConfig+0x27c>)
 8003830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003834:	6013      	str	r3, [r2, #0]
 8003836:	e00b      	b.n	8003850 <HAL_RCC_OscConfig+0xb0>
 8003838:	4b78      	ldr	r3, [pc, #480]	; (8003a1c <HAL_RCC_OscConfig+0x27c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a77      	ldr	r2, [pc, #476]	; (8003a1c <HAL_RCC_OscConfig+0x27c>)
 800383e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003842:	6013      	str	r3, [r2, #0]
 8003844:	4b75      	ldr	r3, [pc, #468]	; (8003a1c <HAL_RCC_OscConfig+0x27c>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a74      	ldr	r2, [pc, #464]	; (8003a1c <HAL_RCC_OscConfig+0x27c>)
 800384a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800384e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d013      	beq.n	8003880 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003858:	f7ff f950 	bl	8002afc <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800385e:	e008      	b.n	8003872 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003860:	f7ff f94c 	bl	8002afc <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b64      	cmp	r3, #100	; 0x64
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e2a6      	b.n	8003dc0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003872:	4b6a      	ldr	r3, [pc, #424]	; (8003a1c <HAL_RCC_OscConfig+0x27c>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d0f0      	beq.n	8003860 <HAL_RCC_OscConfig+0xc0>
 800387e:	e014      	b.n	80038aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003880:	f7ff f93c 	bl	8002afc <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003888:	f7ff f938 	bl	8002afc <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b64      	cmp	r3, #100	; 0x64
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e292      	b.n	8003dc0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800389a:	4b60      	ldr	r3, [pc, #384]	; (8003a1c <HAL_RCC_OscConfig+0x27c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1f0      	bne.n	8003888 <HAL_RCC_OscConfig+0xe8>
 80038a6:	e000      	b.n	80038aa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d075      	beq.n	80039a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038b6:	4b59      	ldr	r3, [pc, #356]	; (8003a1c <HAL_RCC_OscConfig+0x27c>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 030c 	and.w	r3, r3, #12
 80038be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038c0:	4b56      	ldr	r3, [pc, #344]	; (8003a1c <HAL_RCC_OscConfig+0x27c>)
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	f003 0303 	and.w	r3, r3, #3
 80038c8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	2b0c      	cmp	r3, #12
 80038ce:	d102      	bne.n	80038d6 <HAL_RCC_OscConfig+0x136>
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	2b02      	cmp	r3, #2
 80038d4:	d002      	beq.n	80038dc <HAL_RCC_OscConfig+0x13c>
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	2b04      	cmp	r3, #4
 80038da:	d11f      	bne.n	800391c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038dc:	4b4f      	ldr	r3, [pc, #316]	; (8003a1c <HAL_RCC_OscConfig+0x27c>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d005      	beq.n	80038f4 <HAL_RCC_OscConfig+0x154>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e265      	b.n	8003dc0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038f4:	4b49      	ldr	r3, [pc, #292]	; (8003a1c <HAL_RCC_OscConfig+0x27c>)
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	061b      	lsls	r3, r3, #24
 8003902:	4946      	ldr	r1, [pc, #280]	; (8003a1c <HAL_RCC_OscConfig+0x27c>)
 8003904:	4313      	orrs	r3, r2
 8003906:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003908:	4b45      	ldr	r3, [pc, #276]	; (8003a20 <HAL_RCC_OscConfig+0x280>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4618      	mov	r0, r3
 800390e:	f7ff f8a9 	bl	8002a64 <HAL_InitTick>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d043      	beq.n	80039a0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e251      	b.n	8003dc0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d023      	beq.n	800396c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003924:	4b3d      	ldr	r3, [pc, #244]	; (8003a1c <HAL_RCC_OscConfig+0x27c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a3c      	ldr	r2, [pc, #240]	; (8003a1c <HAL_RCC_OscConfig+0x27c>)
 800392a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800392e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003930:	f7ff f8e4 	bl	8002afc <HAL_GetTick>
 8003934:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003936:	e008      	b.n	800394a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003938:	f7ff f8e0 	bl	8002afc <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	2b02      	cmp	r3, #2
 8003944:	d901      	bls.n	800394a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e23a      	b.n	8003dc0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800394a:	4b34      	ldr	r3, [pc, #208]	; (8003a1c <HAL_RCC_OscConfig+0x27c>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003952:	2b00      	cmp	r3, #0
 8003954:	d0f0      	beq.n	8003938 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003956:	4b31      	ldr	r3, [pc, #196]	; (8003a1c <HAL_RCC_OscConfig+0x27c>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	691b      	ldr	r3, [r3, #16]
 8003962:	061b      	lsls	r3, r3, #24
 8003964:	492d      	ldr	r1, [pc, #180]	; (8003a1c <HAL_RCC_OscConfig+0x27c>)
 8003966:	4313      	orrs	r3, r2
 8003968:	604b      	str	r3, [r1, #4]
 800396a:	e01a      	b.n	80039a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800396c:	4b2b      	ldr	r3, [pc, #172]	; (8003a1c <HAL_RCC_OscConfig+0x27c>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a2a      	ldr	r2, [pc, #168]	; (8003a1c <HAL_RCC_OscConfig+0x27c>)
 8003972:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003976:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003978:	f7ff f8c0 	bl	8002afc <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003980:	f7ff f8bc 	bl	8002afc <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e216      	b.n	8003dc0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003992:	4b22      	ldr	r3, [pc, #136]	; (8003a1c <HAL_RCC_OscConfig+0x27c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1f0      	bne.n	8003980 <HAL_RCC_OscConfig+0x1e0>
 800399e:	e000      	b.n	80039a2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d041      	beq.n	8003a32 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	695b      	ldr	r3, [r3, #20]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d01c      	beq.n	80039f0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039b6:	4b19      	ldr	r3, [pc, #100]	; (8003a1c <HAL_RCC_OscConfig+0x27c>)
 80039b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039bc:	4a17      	ldr	r2, [pc, #92]	; (8003a1c <HAL_RCC_OscConfig+0x27c>)
 80039be:	f043 0301 	orr.w	r3, r3, #1
 80039c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c6:	f7ff f899 	bl	8002afc <HAL_GetTick>
 80039ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039cc:	e008      	b.n	80039e0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039ce:	f7ff f895 	bl	8002afc <HAL_GetTick>
 80039d2:	4602      	mov	r2, r0
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	1ad3      	subs	r3, r2, r3
 80039d8:	2b02      	cmp	r3, #2
 80039da:	d901      	bls.n	80039e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039dc:	2303      	movs	r3, #3
 80039de:	e1ef      	b.n	8003dc0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039e0:	4b0e      	ldr	r3, [pc, #56]	; (8003a1c <HAL_RCC_OscConfig+0x27c>)
 80039e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d0ef      	beq.n	80039ce <HAL_RCC_OscConfig+0x22e>
 80039ee:	e020      	b.n	8003a32 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039f0:	4b0a      	ldr	r3, [pc, #40]	; (8003a1c <HAL_RCC_OscConfig+0x27c>)
 80039f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039f6:	4a09      	ldr	r2, [pc, #36]	; (8003a1c <HAL_RCC_OscConfig+0x27c>)
 80039f8:	f023 0301 	bic.w	r3, r3, #1
 80039fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a00:	f7ff f87c 	bl	8002afc <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a06:	e00d      	b.n	8003a24 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a08:	f7ff f878 	bl	8002afc <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d906      	bls.n	8003a24 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e1d2      	b.n	8003dc0 <HAL_RCC_OscConfig+0x620>
 8003a1a:	bf00      	nop
 8003a1c:	40021000 	.word	0x40021000
 8003a20:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a24:	4b8c      	ldr	r3, [pc, #560]	; (8003c58 <HAL_RCC_OscConfig+0x4b8>)
 8003a26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1ea      	bne.n	8003a08 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0304 	and.w	r3, r3, #4
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 80a6 	beq.w	8003b8c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a40:	2300      	movs	r3, #0
 8003a42:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a44:	4b84      	ldr	r3, [pc, #528]	; (8003c58 <HAL_RCC_OscConfig+0x4b8>)
 8003a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <HAL_RCC_OscConfig+0x2b4>
 8003a50:	2301      	movs	r3, #1
 8003a52:	e000      	b.n	8003a56 <HAL_RCC_OscConfig+0x2b6>
 8003a54:	2300      	movs	r3, #0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00d      	beq.n	8003a76 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a5a:	4b7f      	ldr	r3, [pc, #508]	; (8003c58 <HAL_RCC_OscConfig+0x4b8>)
 8003a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5e:	4a7e      	ldr	r2, [pc, #504]	; (8003c58 <HAL_RCC_OscConfig+0x4b8>)
 8003a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a64:	6593      	str	r3, [r2, #88]	; 0x58
 8003a66:	4b7c      	ldr	r3, [pc, #496]	; (8003c58 <HAL_RCC_OscConfig+0x4b8>)
 8003a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a72:	2301      	movs	r3, #1
 8003a74:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a76:	4b79      	ldr	r3, [pc, #484]	; (8003c5c <HAL_RCC_OscConfig+0x4bc>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d118      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a82:	4b76      	ldr	r3, [pc, #472]	; (8003c5c <HAL_RCC_OscConfig+0x4bc>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a75      	ldr	r2, [pc, #468]	; (8003c5c <HAL_RCC_OscConfig+0x4bc>)
 8003a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a8e:	f7ff f835 	bl	8002afc <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a94:	e008      	b.n	8003aa8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a96:	f7ff f831 	bl	8002afc <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	2b02      	cmp	r3, #2
 8003aa2:	d901      	bls.n	8003aa8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003aa4:	2303      	movs	r3, #3
 8003aa6:	e18b      	b.n	8003dc0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aa8:	4b6c      	ldr	r3, [pc, #432]	; (8003c5c <HAL_RCC_OscConfig+0x4bc>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0f0      	beq.n	8003a96 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d108      	bne.n	8003ace <HAL_RCC_OscConfig+0x32e>
 8003abc:	4b66      	ldr	r3, [pc, #408]	; (8003c58 <HAL_RCC_OscConfig+0x4b8>)
 8003abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac2:	4a65      	ldr	r2, [pc, #404]	; (8003c58 <HAL_RCC_OscConfig+0x4b8>)
 8003ac4:	f043 0301 	orr.w	r3, r3, #1
 8003ac8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003acc:	e024      	b.n	8003b18 <HAL_RCC_OscConfig+0x378>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	2b05      	cmp	r3, #5
 8003ad4:	d110      	bne.n	8003af8 <HAL_RCC_OscConfig+0x358>
 8003ad6:	4b60      	ldr	r3, [pc, #384]	; (8003c58 <HAL_RCC_OscConfig+0x4b8>)
 8003ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003adc:	4a5e      	ldr	r2, [pc, #376]	; (8003c58 <HAL_RCC_OscConfig+0x4b8>)
 8003ade:	f043 0304 	orr.w	r3, r3, #4
 8003ae2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ae6:	4b5c      	ldr	r3, [pc, #368]	; (8003c58 <HAL_RCC_OscConfig+0x4b8>)
 8003ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aec:	4a5a      	ldr	r2, [pc, #360]	; (8003c58 <HAL_RCC_OscConfig+0x4b8>)
 8003aee:	f043 0301 	orr.w	r3, r3, #1
 8003af2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003af6:	e00f      	b.n	8003b18 <HAL_RCC_OscConfig+0x378>
 8003af8:	4b57      	ldr	r3, [pc, #348]	; (8003c58 <HAL_RCC_OscConfig+0x4b8>)
 8003afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afe:	4a56      	ldr	r2, [pc, #344]	; (8003c58 <HAL_RCC_OscConfig+0x4b8>)
 8003b00:	f023 0301 	bic.w	r3, r3, #1
 8003b04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b08:	4b53      	ldr	r3, [pc, #332]	; (8003c58 <HAL_RCC_OscConfig+0x4b8>)
 8003b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0e:	4a52      	ldr	r2, [pc, #328]	; (8003c58 <HAL_RCC_OscConfig+0x4b8>)
 8003b10:	f023 0304 	bic.w	r3, r3, #4
 8003b14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d016      	beq.n	8003b4e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b20:	f7fe ffec 	bl	8002afc <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b26:	e00a      	b.n	8003b3e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b28:	f7fe ffe8 	bl	8002afc <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e140      	b.n	8003dc0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b3e:	4b46      	ldr	r3, [pc, #280]	; (8003c58 <HAL_RCC_OscConfig+0x4b8>)
 8003b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d0ed      	beq.n	8003b28 <HAL_RCC_OscConfig+0x388>
 8003b4c:	e015      	b.n	8003b7a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b4e:	f7fe ffd5 	bl	8002afc <HAL_GetTick>
 8003b52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b54:	e00a      	b.n	8003b6c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b56:	f7fe ffd1 	bl	8002afc <HAL_GetTick>
 8003b5a:	4602      	mov	r2, r0
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e129      	b.n	8003dc0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b6c:	4b3a      	ldr	r3, [pc, #232]	; (8003c58 <HAL_RCC_OscConfig+0x4b8>)
 8003b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1ed      	bne.n	8003b56 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b7a:	7ffb      	ldrb	r3, [r7, #31]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d105      	bne.n	8003b8c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b80:	4b35      	ldr	r3, [pc, #212]	; (8003c58 <HAL_RCC_OscConfig+0x4b8>)
 8003b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b84:	4a34      	ldr	r2, [pc, #208]	; (8003c58 <HAL_RCC_OscConfig+0x4b8>)
 8003b86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b8a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0320 	and.w	r3, r3, #32
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d03c      	beq.n	8003c12 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d01c      	beq.n	8003bda <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ba0:	4b2d      	ldr	r3, [pc, #180]	; (8003c58 <HAL_RCC_OscConfig+0x4b8>)
 8003ba2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ba6:	4a2c      	ldr	r2, [pc, #176]	; (8003c58 <HAL_RCC_OscConfig+0x4b8>)
 8003ba8:	f043 0301 	orr.w	r3, r3, #1
 8003bac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb0:	f7fe ffa4 	bl	8002afc <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bb8:	f7fe ffa0 	bl	8002afc <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e0fa      	b.n	8003dc0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bca:	4b23      	ldr	r3, [pc, #140]	; (8003c58 <HAL_RCC_OscConfig+0x4b8>)
 8003bcc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bd0:	f003 0302 	and.w	r3, r3, #2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d0ef      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x418>
 8003bd8:	e01b      	b.n	8003c12 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003bda:	4b1f      	ldr	r3, [pc, #124]	; (8003c58 <HAL_RCC_OscConfig+0x4b8>)
 8003bdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003be0:	4a1d      	ldr	r2, [pc, #116]	; (8003c58 <HAL_RCC_OscConfig+0x4b8>)
 8003be2:	f023 0301 	bic.w	r3, r3, #1
 8003be6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bea:	f7fe ff87 	bl	8002afc <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bf0:	e008      	b.n	8003c04 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bf2:	f7fe ff83 	bl	8002afc <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e0dd      	b.n	8003dc0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c04:	4b14      	ldr	r3, [pc, #80]	; (8003c58 <HAL_RCC_OscConfig+0x4b8>)
 8003c06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1ef      	bne.n	8003bf2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	69db      	ldr	r3, [r3, #28]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 80d1 	beq.w	8003dbe <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c1c:	4b0e      	ldr	r3, [pc, #56]	; (8003c58 <HAL_RCC_OscConfig+0x4b8>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f003 030c 	and.w	r3, r3, #12
 8003c24:	2b0c      	cmp	r3, #12
 8003c26:	f000 808b 	beq.w	8003d40 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d15e      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c32:	4b09      	ldr	r3, [pc, #36]	; (8003c58 <HAL_RCC_OscConfig+0x4b8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a08      	ldr	r2, [pc, #32]	; (8003c58 <HAL_RCC_OscConfig+0x4b8>)
 8003c38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3e:	f7fe ff5d 	bl	8002afc <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c44:	e00c      	b.n	8003c60 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c46:	f7fe ff59 	bl	8002afc <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d905      	bls.n	8003c60 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e0b3      	b.n	8003dc0 <HAL_RCC_OscConfig+0x620>
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c60:	4b59      	ldr	r3, [pc, #356]	; (8003dc8 <HAL_RCC_OscConfig+0x628>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d1ec      	bne.n	8003c46 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c6c:	4b56      	ldr	r3, [pc, #344]	; (8003dc8 <HAL_RCC_OscConfig+0x628>)
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	4b56      	ldr	r3, [pc, #344]	; (8003dcc <HAL_RCC_OscConfig+0x62c>)
 8003c72:	4013      	ands	r3, r2
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	6a11      	ldr	r1, [r2, #32]
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c7c:	3a01      	subs	r2, #1
 8003c7e:	0112      	lsls	r2, r2, #4
 8003c80:	4311      	orrs	r1, r2
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003c86:	0212      	lsls	r2, r2, #8
 8003c88:	4311      	orrs	r1, r2
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c8e:	0852      	lsrs	r2, r2, #1
 8003c90:	3a01      	subs	r2, #1
 8003c92:	0552      	lsls	r2, r2, #21
 8003c94:	4311      	orrs	r1, r2
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c9a:	0852      	lsrs	r2, r2, #1
 8003c9c:	3a01      	subs	r2, #1
 8003c9e:	0652      	lsls	r2, r2, #25
 8003ca0:	4311      	orrs	r1, r2
 8003ca2:	687a      	ldr	r2, [r7, #4]
 8003ca4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003ca6:	06d2      	lsls	r2, r2, #27
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	4947      	ldr	r1, [pc, #284]	; (8003dc8 <HAL_RCC_OscConfig+0x628>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cb0:	4b45      	ldr	r3, [pc, #276]	; (8003dc8 <HAL_RCC_OscConfig+0x628>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a44      	ldr	r2, [pc, #272]	; (8003dc8 <HAL_RCC_OscConfig+0x628>)
 8003cb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cbc:	4b42      	ldr	r3, [pc, #264]	; (8003dc8 <HAL_RCC_OscConfig+0x628>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	4a41      	ldr	r2, [pc, #260]	; (8003dc8 <HAL_RCC_OscConfig+0x628>)
 8003cc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cc6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc8:	f7fe ff18 	bl	8002afc <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd0:	f7fe ff14 	bl	8002afc <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e06e      	b.n	8003dc0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ce2:	4b39      	ldr	r3, [pc, #228]	; (8003dc8 <HAL_RCC_OscConfig+0x628>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0f0      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x530>
 8003cee:	e066      	b.n	8003dbe <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf0:	4b35      	ldr	r3, [pc, #212]	; (8003dc8 <HAL_RCC_OscConfig+0x628>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a34      	ldr	r2, [pc, #208]	; (8003dc8 <HAL_RCC_OscConfig+0x628>)
 8003cf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cfa:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003cfc:	4b32      	ldr	r3, [pc, #200]	; (8003dc8 <HAL_RCC_OscConfig+0x628>)
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	4a31      	ldr	r2, [pc, #196]	; (8003dc8 <HAL_RCC_OscConfig+0x628>)
 8003d02:	f023 0303 	bic.w	r3, r3, #3
 8003d06:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003d08:	4b2f      	ldr	r3, [pc, #188]	; (8003dc8 <HAL_RCC_OscConfig+0x628>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	4a2e      	ldr	r2, [pc, #184]	; (8003dc8 <HAL_RCC_OscConfig+0x628>)
 8003d0e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003d12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d16:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d18:	f7fe fef0 	bl	8002afc <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d20:	f7fe feec 	bl	8002afc <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e046      	b.n	8003dc0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d32:	4b25      	ldr	r3, [pc, #148]	; (8003dc8 <HAL_RCC_OscConfig+0x628>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1f0      	bne.n	8003d20 <HAL_RCC_OscConfig+0x580>
 8003d3e:	e03e      	b.n	8003dbe <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	69db      	ldr	r3, [r3, #28]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d101      	bne.n	8003d4c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e039      	b.n	8003dc0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003d4c:	4b1e      	ldr	r3, [pc, #120]	; (8003dc8 <HAL_RCC_OscConfig+0x628>)
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	f003 0203 	and.w	r2, r3, #3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a1b      	ldr	r3, [r3, #32]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d12c      	bne.n	8003dba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d123      	bne.n	8003dba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d11b      	bne.n	8003dba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d113      	bne.n	8003dba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9c:	085b      	lsrs	r3, r3, #1
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d109      	bne.n	8003dba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db0:	085b      	lsrs	r3, r3, #1
 8003db2:	3b01      	subs	r3, #1
 8003db4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d001      	beq.n	8003dbe <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e000      	b.n	8003dc0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3720      	adds	r7, #32
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	019f800c 	.word	0x019f800c

08003dd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b086      	sub	sp, #24
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d101      	bne.n	8003de8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003de4:	2301      	movs	r3, #1
 8003de6:	e11e      	b.n	8004026 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003de8:	4b91      	ldr	r3, [pc, #580]	; (8004030 <HAL_RCC_ClockConfig+0x260>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 030f 	and.w	r3, r3, #15
 8003df0:	683a      	ldr	r2, [r7, #0]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d910      	bls.n	8003e18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003df6:	4b8e      	ldr	r3, [pc, #568]	; (8004030 <HAL_RCC_ClockConfig+0x260>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f023 020f 	bic.w	r2, r3, #15
 8003dfe:	498c      	ldr	r1, [pc, #560]	; (8004030 <HAL_RCC_ClockConfig+0x260>)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e06:	4b8a      	ldr	r3, [pc, #552]	; (8004030 <HAL_RCC_ClockConfig+0x260>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 030f 	and.w	r3, r3, #15
 8003e0e:	683a      	ldr	r2, [r7, #0]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d001      	beq.n	8003e18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e106      	b.n	8004026 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0301 	and.w	r3, r3, #1
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d073      	beq.n	8003f0c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	2b03      	cmp	r3, #3
 8003e2a:	d129      	bne.n	8003e80 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e2c:	4b81      	ldr	r3, [pc, #516]	; (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d101      	bne.n	8003e3c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e0f4      	b.n	8004026 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003e3c:	f000 f99e 	bl	800417c <RCC_GetSysClockFreqFromPLLSource>
 8003e40:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	4a7c      	ldr	r2, [pc, #496]	; (8004038 <HAL_RCC_ClockConfig+0x268>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d93f      	bls.n	8003eca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e4a:	4b7a      	ldr	r3, [pc, #488]	; (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d009      	beq.n	8003e6a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d033      	beq.n	8003eca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d12f      	bne.n	8003eca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e6a:	4b72      	ldr	r3, [pc, #456]	; (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e72:	4a70      	ldr	r2, [pc, #448]	; (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e78:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e7a:	2380      	movs	r3, #128	; 0x80
 8003e7c:	617b      	str	r3, [r7, #20]
 8003e7e:	e024      	b.n	8003eca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d107      	bne.n	8003e98 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e88:	4b6a      	ldr	r3, [pc, #424]	; (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d109      	bne.n	8003ea8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e0c6      	b.n	8004026 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e98:	4b66      	ldr	r3, [pc, #408]	; (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d101      	bne.n	8003ea8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e0be      	b.n	8004026 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003ea8:	f000 f8ce 	bl	8004048 <HAL_RCC_GetSysClockFreq>
 8003eac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	4a61      	ldr	r2, [pc, #388]	; (8004038 <HAL_RCC_ClockConfig+0x268>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d909      	bls.n	8003eca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003eb6:	4b5f      	ldr	r3, [pc, #380]	; (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ebe:	4a5d      	ldr	r2, [pc, #372]	; (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003ec0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ec4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003ec6:	2380      	movs	r3, #128	; 0x80
 8003ec8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003eca:	4b5a      	ldr	r3, [pc, #360]	; (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f023 0203 	bic.w	r2, r3, #3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	685b      	ldr	r3, [r3, #4]
 8003ed6:	4957      	ldr	r1, [pc, #348]	; (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003edc:	f7fe fe0e 	bl	8002afc <HAL_GetTick>
 8003ee0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ee2:	e00a      	b.n	8003efa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ee4:	f7fe fe0a 	bl	8002afc <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e095      	b.n	8004026 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003efa:	4b4e      	ldr	r3, [pc, #312]	; (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f003 020c 	and.w	r2, r3, #12
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d1eb      	bne.n	8003ee4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d023      	beq.n	8003f60 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0304 	and.w	r3, r3, #4
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d005      	beq.n	8003f30 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f24:	4b43      	ldr	r3, [pc, #268]	; (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	4a42      	ldr	r2, [pc, #264]	; (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003f2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f2e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0308 	and.w	r3, r3, #8
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d007      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003f3c:	4b3d      	ldr	r3, [pc, #244]	; (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f44:	4a3b      	ldr	r2, [pc, #236]	; (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003f46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f4c:	4b39      	ldr	r3, [pc, #228]	; (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	689b      	ldr	r3, [r3, #8]
 8003f58:	4936      	ldr	r1, [pc, #216]	; (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	608b      	str	r3, [r1, #8]
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	2b80      	cmp	r3, #128	; 0x80
 8003f64:	d105      	bne.n	8003f72 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f66:	4b33      	ldr	r3, [pc, #204]	; (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	4a32      	ldr	r2, [pc, #200]	; (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003f6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f70:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f72:	4b2f      	ldr	r3, [pc, #188]	; (8004030 <HAL_RCC_ClockConfig+0x260>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d21d      	bcs.n	8003fbc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f80:	4b2b      	ldr	r3, [pc, #172]	; (8004030 <HAL_RCC_ClockConfig+0x260>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f023 020f 	bic.w	r2, r3, #15
 8003f88:	4929      	ldr	r1, [pc, #164]	; (8004030 <HAL_RCC_ClockConfig+0x260>)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f90:	f7fe fdb4 	bl	8002afc <HAL_GetTick>
 8003f94:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f96:	e00a      	b.n	8003fae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f98:	f7fe fdb0 	bl	8002afc <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d901      	bls.n	8003fae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e03b      	b.n	8004026 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fae:	4b20      	ldr	r3, [pc, #128]	; (8004030 <HAL_RCC_ClockConfig+0x260>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 030f 	and.w	r3, r3, #15
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d1ed      	bne.n	8003f98 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d008      	beq.n	8003fda <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fc8:	4b1a      	ldr	r3, [pc, #104]	; (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	4917      	ldr	r1, [pc, #92]	; (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0308 	and.w	r3, r3, #8
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d009      	beq.n	8003ffa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fe6:	4b13      	ldr	r3, [pc, #76]	; (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	490f      	ldr	r1, [pc, #60]	; (8004034 <HAL_RCC_ClockConfig+0x264>)
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ffa:	f000 f825 	bl	8004048 <HAL_RCC_GetSysClockFreq>
 8003ffe:	4602      	mov	r2, r0
 8004000:	4b0c      	ldr	r3, [pc, #48]	; (8004034 <HAL_RCC_ClockConfig+0x264>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	091b      	lsrs	r3, r3, #4
 8004006:	f003 030f 	and.w	r3, r3, #15
 800400a:	490c      	ldr	r1, [pc, #48]	; (800403c <HAL_RCC_ClockConfig+0x26c>)
 800400c:	5ccb      	ldrb	r3, [r1, r3]
 800400e:	f003 031f 	and.w	r3, r3, #31
 8004012:	fa22 f303 	lsr.w	r3, r2, r3
 8004016:	4a0a      	ldr	r2, [pc, #40]	; (8004040 <HAL_RCC_ClockConfig+0x270>)
 8004018:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800401a:	4b0a      	ldr	r3, [pc, #40]	; (8004044 <HAL_RCC_ClockConfig+0x274>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4618      	mov	r0, r3
 8004020:	f7fe fd20 	bl	8002a64 <HAL_InitTick>
 8004024:	4603      	mov	r3, r0
}
 8004026:	4618      	mov	r0, r3
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	40022000 	.word	0x40022000
 8004034:	40021000 	.word	0x40021000
 8004038:	04c4b400 	.word	0x04c4b400
 800403c:	08006e84 	.word	0x08006e84
 8004040:	20000000 	.word	0x20000000
 8004044:	20000004 	.word	0x20000004

08004048 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004048:	b480      	push	{r7}
 800404a:	b087      	sub	sp, #28
 800404c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800404e:	4b2c      	ldr	r3, [pc, #176]	; (8004100 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004050:	689b      	ldr	r3, [r3, #8]
 8004052:	f003 030c 	and.w	r3, r3, #12
 8004056:	2b04      	cmp	r3, #4
 8004058:	d102      	bne.n	8004060 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800405a:	4b2a      	ldr	r3, [pc, #168]	; (8004104 <HAL_RCC_GetSysClockFreq+0xbc>)
 800405c:	613b      	str	r3, [r7, #16]
 800405e:	e047      	b.n	80040f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004060:	4b27      	ldr	r3, [pc, #156]	; (8004100 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f003 030c 	and.w	r3, r3, #12
 8004068:	2b08      	cmp	r3, #8
 800406a:	d102      	bne.n	8004072 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800406c:	4b26      	ldr	r3, [pc, #152]	; (8004108 <HAL_RCC_GetSysClockFreq+0xc0>)
 800406e:	613b      	str	r3, [r7, #16]
 8004070:	e03e      	b.n	80040f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004072:	4b23      	ldr	r3, [pc, #140]	; (8004100 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 030c 	and.w	r3, r3, #12
 800407a:	2b0c      	cmp	r3, #12
 800407c:	d136      	bne.n	80040ec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800407e:	4b20      	ldr	r3, [pc, #128]	; (8004100 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	f003 0303 	and.w	r3, r3, #3
 8004086:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004088:	4b1d      	ldr	r3, [pc, #116]	; (8004100 <HAL_RCC_GetSysClockFreq+0xb8>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	091b      	lsrs	r3, r3, #4
 800408e:	f003 030f 	and.w	r3, r3, #15
 8004092:	3301      	adds	r3, #1
 8004094:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2b03      	cmp	r3, #3
 800409a:	d10c      	bne.n	80040b6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800409c:	4a1a      	ldr	r2, [pc, #104]	; (8004108 <HAL_RCC_GetSysClockFreq+0xc0>)
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a4:	4a16      	ldr	r2, [pc, #88]	; (8004100 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040a6:	68d2      	ldr	r2, [r2, #12]
 80040a8:	0a12      	lsrs	r2, r2, #8
 80040aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040ae:	fb02 f303 	mul.w	r3, r2, r3
 80040b2:	617b      	str	r3, [r7, #20]
      break;
 80040b4:	e00c      	b.n	80040d0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040b6:	4a13      	ldr	r2, [pc, #76]	; (8004104 <HAL_RCC_GetSysClockFreq+0xbc>)
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80040be:	4a10      	ldr	r2, [pc, #64]	; (8004100 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040c0:	68d2      	ldr	r2, [r2, #12]
 80040c2:	0a12      	lsrs	r2, r2, #8
 80040c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040c8:	fb02 f303 	mul.w	r3, r2, r3
 80040cc:	617b      	str	r3, [r7, #20]
      break;
 80040ce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040d0:	4b0b      	ldr	r3, [pc, #44]	; (8004100 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	0e5b      	lsrs	r3, r3, #25
 80040d6:	f003 0303 	and.w	r3, r3, #3
 80040da:	3301      	adds	r3, #1
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80040e0:	697a      	ldr	r2, [r7, #20]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e8:	613b      	str	r3, [r7, #16]
 80040ea:	e001      	b.n	80040f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80040ec:	2300      	movs	r3, #0
 80040ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80040f0:	693b      	ldr	r3, [r7, #16]
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	371c      	adds	r7, #28
 80040f6:	46bd      	mov	sp, r7
 80040f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fc:	4770      	bx	lr
 80040fe:	bf00      	nop
 8004100:	40021000 	.word	0x40021000
 8004104:	00f42400 	.word	0x00f42400
 8004108:	016e3600 	.word	0x016e3600

0800410c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004110:	4b03      	ldr	r3, [pc, #12]	; (8004120 <HAL_RCC_GetHCLKFreq+0x14>)
 8004112:	681b      	ldr	r3, [r3, #0]
}
 8004114:	4618      	mov	r0, r3
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	20000000 	.word	0x20000000

08004124 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004128:	f7ff fff0 	bl	800410c <HAL_RCC_GetHCLKFreq>
 800412c:	4602      	mov	r2, r0
 800412e:	4b06      	ldr	r3, [pc, #24]	; (8004148 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	0a1b      	lsrs	r3, r3, #8
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	4904      	ldr	r1, [pc, #16]	; (800414c <HAL_RCC_GetPCLK1Freq+0x28>)
 800413a:	5ccb      	ldrb	r3, [r1, r3]
 800413c:	f003 031f 	and.w	r3, r3, #31
 8004140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004144:	4618      	mov	r0, r3
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40021000 	.word	0x40021000
 800414c:	08006e94 	.word	0x08006e94

08004150 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004154:	f7ff ffda 	bl	800410c <HAL_RCC_GetHCLKFreq>
 8004158:	4602      	mov	r2, r0
 800415a:	4b06      	ldr	r3, [pc, #24]	; (8004174 <HAL_RCC_GetPCLK2Freq+0x24>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	0adb      	lsrs	r3, r3, #11
 8004160:	f003 0307 	and.w	r3, r3, #7
 8004164:	4904      	ldr	r1, [pc, #16]	; (8004178 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004166:	5ccb      	ldrb	r3, [r1, r3]
 8004168:	f003 031f 	and.w	r3, r3, #31
 800416c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004170:	4618      	mov	r0, r3
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40021000 	.word	0x40021000
 8004178:	08006e94 	.word	0x08006e94

0800417c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800417c:	b480      	push	{r7}
 800417e:	b087      	sub	sp, #28
 8004180:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004182:	4b1e      	ldr	r3, [pc, #120]	; (80041fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800418c:	4b1b      	ldr	r3, [pc, #108]	; (80041fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800418e:	68db      	ldr	r3, [r3, #12]
 8004190:	091b      	lsrs	r3, r3, #4
 8004192:	f003 030f 	and.w	r3, r3, #15
 8004196:	3301      	adds	r3, #1
 8004198:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	2b03      	cmp	r3, #3
 800419e:	d10c      	bne.n	80041ba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041a0:	4a17      	ldr	r2, [pc, #92]	; (8004200 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041a8:	4a14      	ldr	r2, [pc, #80]	; (80041fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041aa:	68d2      	ldr	r2, [r2, #12]
 80041ac:	0a12      	lsrs	r2, r2, #8
 80041ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041b2:	fb02 f303 	mul.w	r3, r2, r3
 80041b6:	617b      	str	r3, [r7, #20]
    break;
 80041b8:	e00c      	b.n	80041d4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041ba:	4a12      	ldr	r2, [pc, #72]	; (8004204 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c2:	4a0e      	ldr	r2, [pc, #56]	; (80041fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041c4:	68d2      	ldr	r2, [r2, #12]
 80041c6:	0a12      	lsrs	r2, r2, #8
 80041c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041cc:	fb02 f303 	mul.w	r3, r2, r3
 80041d0:	617b      	str	r3, [r7, #20]
    break;
 80041d2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041d4:	4b09      	ldr	r3, [pc, #36]	; (80041fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	0e5b      	lsrs	r3, r3, #25
 80041da:	f003 0303 	and.w	r3, r3, #3
 80041de:	3301      	adds	r3, #1
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80041ee:	687b      	ldr	r3, [r7, #4]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	371c      	adds	r7, #28
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	40021000 	.word	0x40021000
 8004200:	016e3600 	.word	0x016e3600
 8004204:	00f42400 	.word	0x00f42400

08004208 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004210:	2300      	movs	r3, #0
 8004212:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004214:	2300      	movs	r3, #0
 8004216:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 8098 	beq.w	8004356 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004226:	2300      	movs	r3, #0
 8004228:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800422a:	4b43      	ldr	r3, [pc, #268]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800422c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d10d      	bne.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004236:	4b40      	ldr	r3, [pc, #256]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423a:	4a3f      	ldr	r2, [pc, #252]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800423c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004240:	6593      	str	r3, [r2, #88]	; 0x58
 8004242:	4b3d      	ldr	r3, [pc, #244]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424a:	60bb      	str	r3, [r7, #8]
 800424c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800424e:	2301      	movs	r3, #1
 8004250:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004252:	4b3a      	ldr	r3, [pc, #232]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a39      	ldr	r2, [pc, #228]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004258:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800425c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800425e:	f7fe fc4d 	bl	8002afc <HAL_GetTick>
 8004262:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004264:	e009      	b.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004266:	f7fe fc49 	bl	8002afc <HAL_GetTick>
 800426a:	4602      	mov	r2, r0
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	1ad3      	subs	r3, r2, r3
 8004270:	2b02      	cmp	r3, #2
 8004272:	d902      	bls.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004274:	2303      	movs	r3, #3
 8004276:	74fb      	strb	r3, [r7, #19]
        break;
 8004278:	e005      	b.n	8004286 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800427a:	4b30      	ldr	r3, [pc, #192]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0ef      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004286:	7cfb      	ldrb	r3, [r7, #19]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d159      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800428c:	4b2a      	ldr	r3, [pc, #168]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800428e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004296:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d01e      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d019      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042a8:	4b23      	ldr	r3, [pc, #140]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042b4:	4b20      	ldr	r3, [pc, #128]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ba:	4a1f      	ldr	r2, [pc, #124]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042c4:	4b1c      	ldr	r3, [pc, #112]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ca:	4a1b      	ldr	r2, [pc, #108]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042d4:	4a18      	ldr	r2, [pc, #96]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d016      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042e6:	f7fe fc09 	bl	8002afc <HAL_GetTick>
 80042ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ec:	e00b      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042ee:	f7fe fc05 	bl	8002afc <HAL_GetTick>
 80042f2:	4602      	mov	r2, r0
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	1ad3      	subs	r3, r2, r3
 80042f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d902      	bls.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	74fb      	strb	r3, [r7, #19]
            break;
 8004304:	e006      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004306:	4b0c      	ldr	r3, [pc, #48]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800430c:	f003 0302 	and.w	r3, r3, #2
 8004310:	2b00      	cmp	r3, #0
 8004312:	d0ec      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004314:	7cfb      	ldrb	r3, [r7, #19]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10b      	bne.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800431a:	4b07      	ldr	r3, [pc, #28]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800431c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004320:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004328:	4903      	ldr	r1, [pc, #12]	; (8004338 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004330:	e008      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004332:	7cfb      	ldrb	r3, [r7, #19]
 8004334:	74bb      	strb	r3, [r7, #18]
 8004336:	e005      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004338:	40021000 	.word	0x40021000
 800433c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004340:	7cfb      	ldrb	r3, [r7, #19]
 8004342:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004344:	7c7b      	ldrb	r3, [r7, #17]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d105      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800434a:	4ba7      	ldr	r3, [pc, #668]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800434c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434e:	4aa6      	ldr	r2, [pc, #664]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004350:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004354:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0301 	and.w	r3, r3, #1
 800435e:	2b00      	cmp	r3, #0
 8004360:	d00a      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004362:	4ba1      	ldr	r3, [pc, #644]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004368:	f023 0203 	bic.w	r2, r3, #3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	499d      	ldr	r1, [pc, #628]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004372:	4313      	orrs	r3, r2
 8004374:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0302 	and.w	r3, r3, #2
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00a      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004384:	4b98      	ldr	r3, [pc, #608]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438a:	f023 020c 	bic.w	r2, r3, #12
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	4995      	ldr	r1, [pc, #596]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004394:	4313      	orrs	r3, r2
 8004396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0304 	and.w	r3, r3, #4
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00a      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043a6:	4b90      	ldr	r3, [pc, #576]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	498c      	ldr	r1, [pc, #560]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0308 	and.w	r3, r3, #8
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d00a      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043c8:	4b87      	ldr	r3, [pc, #540]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	4984      	ldr	r1, [pc, #528]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0310 	and.w	r3, r3, #16
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043ea:	4b7f      	ldr	r3, [pc, #508]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	695b      	ldr	r3, [r3, #20]
 80043f8:	497b      	ldr	r1, [pc, #492]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043fa:	4313      	orrs	r3, r2
 80043fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0320 	and.w	r3, r3, #32
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00a      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800440c:	4b76      	ldr	r3, [pc, #472]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800440e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004412:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	4973      	ldr	r1, [pc, #460]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800441c:	4313      	orrs	r3, r2
 800441e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00a      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800442e:	4b6e      	ldr	r3, [pc, #440]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004430:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004434:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	69db      	ldr	r3, [r3, #28]
 800443c:	496a      	ldr	r1, [pc, #424]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800443e:	4313      	orrs	r3, r2
 8004440:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00a      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004450:	4b65      	ldr	r3, [pc, #404]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004456:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	4962      	ldr	r1, [pc, #392]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004460:	4313      	orrs	r3, r2
 8004462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00a      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004472:	4b5d      	ldr	r3, [pc, #372]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004474:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004478:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004480:	4959      	ldr	r1, [pc, #356]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004482:	4313      	orrs	r3, r2
 8004484:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d00a      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004494:	4b54      	ldr	r3, [pc, #336]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004496:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800449a:	f023 0203 	bic.w	r2, r3, #3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a2:	4951      	ldr	r1, [pc, #324]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00a      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044b6:	4b4c      	ldr	r3, [pc, #304]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c4:	4948      	ldr	r1, [pc, #288]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d015      	beq.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044d8:	4b43      	ldr	r3, [pc, #268]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e6:	4940      	ldr	r1, [pc, #256]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044e8:	4313      	orrs	r3, r2
 80044ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044f6:	d105      	bne.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044f8:	4b3b      	ldr	r3, [pc, #236]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	4a3a      	ldr	r2, [pc, #232]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004502:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800450c:	2b00      	cmp	r3, #0
 800450e:	d015      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004510:	4b35      	ldr	r3, [pc, #212]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004516:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800451e:	4932      	ldr	r1, [pc, #200]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004520:	4313      	orrs	r3, r2
 8004522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800452a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800452e:	d105      	bne.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004530:	4b2d      	ldr	r3, [pc, #180]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	4a2c      	ldr	r2, [pc, #176]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004536:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800453a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d015      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004548:	4b27      	ldr	r3, [pc, #156]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800454a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800454e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004556:	4924      	ldr	r1, [pc, #144]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004558:	4313      	orrs	r3, r2
 800455a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004562:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004566:	d105      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004568:	4b1f      	ldr	r3, [pc, #124]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	4a1e      	ldr	r2, [pc, #120]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800456e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004572:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d015      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004580:	4b19      	ldr	r3, [pc, #100]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004586:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458e:	4916      	ldr	r1, [pc, #88]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004590:	4313      	orrs	r3, r2
 8004592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800459a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800459e:	d105      	bne.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045a0:	4b11      	ldr	r3, [pc, #68]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	4a10      	ldr	r2, [pc, #64]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045aa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d019      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045b8:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	4908      	ldr	r1, [pc, #32]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045d6:	d109      	bne.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045d8:	4b03      	ldr	r3, [pc, #12]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	4a02      	ldr	r2, [pc, #8]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045e2:	60d3      	str	r3, [r2, #12]
 80045e4:	e002      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80045e6:	bf00      	nop
 80045e8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d015      	beq.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80045f8:	4b29      	ldr	r3, [pc, #164]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004606:	4926      	ldr	r1, [pc, #152]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004608:	4313      	orrs	r3, r2
 800460a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004612:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004616:	d105      	bne.n	8004624 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004618:	4b21      	ldr	r3, [pc, #132]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	4a20      	ldr	r2, [pc, #128]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800461e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004622:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d015      	beq.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004630:	4b1b      	ldr	r3, [pc, #108]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004636:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800463e:	4918      	ldr	r1, [pc, #96]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004640:	4313      	orrs	r3, r2
 8004642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800464a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800464e:	d105      	bne.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004650:	4b13      	ldr	r3, [pc, #76]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	4a12      	ldr	r2, [pc, #72]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004656:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800465a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d015      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004668:	4b0d      	ldr	r3, [pc, #52]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800466a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800466e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004676:	490a      	ldr	r1, [pc, #40]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004678:	4313      	orrs	r3, r2
 800467a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004682:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004686:	d105      	bne.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004688:	4b05      	ldr	r3, [pc, #20]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	4a04      	ldr	r2, [pc, #16]	; (80046a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800468e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004692:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004694:	7cbb      	ldrb	r3, [r7, #18]
}
 8004696:	4618      	mov	r0, r3
 8004698:	3718      	adds	r7, #24
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}
 800469e:	bf00      	nop
 80046a0:	40021000 	.word	0x40021000

080046a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e049      	b.n	800474a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d106      	bne.n	80046d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7fe f802 	bl	80026d4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2202      	movs	r2, #2
 80046d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	3304      	adds	r3, #4
 80046e0:	4619      	mov	r1, r3
 80046e2:	4610      	mov	r0, r2
 80046e4:	f000 fc0e 	bl	8004f04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2201      	movs	r2, #1
 8004744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004748:	2300      	movs	r3, #0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
	...

08004754 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d109      	bne.n	8004778 <HAL_TIM_PWM_Start+0x24>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b01      	cmp	r3, #1
 800476e:	bf14      	ite	ne
 8004770:	2301      	movne	r3, #1
 8004772:	2300      	moveq	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	e03c      	b.n	80047f2 <HAL_TIM_PWM_Start+0x9e>
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	2b04      	cmp	r3, #4
 800477c:	d109      	bne.n	8004792 <HAL_TIM_PWM_Start+0x3e>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004784:	b2db      	uxtb	r3, r3
 8004786:	2b01      	cmp	r3, #1
 8004788:	bf14      	ite	ne
 800478a:	2301      	movne	r3, #1
 800478c:	2300      	moveq	r3, #0
 800478e:	b2db      	uxtb	r3, r3
 8004790:	e02f      	b.n	80047f2 <HAL_TIM_PWM_Start+0x9e>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b08      	cmp	r3, #8
 8004796:	d109      	bne.n	80047ac <HAL_TIM_PWM_Start+0x58>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	bf14      	ite	ne
 80047a4:	2301      	movne	r3, #1
 80047a6:	2300      	moveq	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	e022      	b.n	80047f2 <HAL_TIM_PWM_Start+0x9e>
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	2b0c      	cmp	r3, #12
 80047b0:	d109      	bne.n	80047c6 <HAL_TIM_PWM_Start+0x72>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	bf14      	ite	ne
 80047be:	2301      	movne	r3, #1
 80047c0:	2300      	moveq	r3, #0
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	e015      	b.n	80047f2 <HAL_TIM_PWM_Start+0x9e>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b10      	cmp	r3, #16
 80047ca:	d109      	bne.n	80047e0 <HAL_TIM_PWM_Start+0x8c>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	bf14      	ite	ne
 80047d8:	2301      	movne	r3, #1
 80047da:	2300      	moveq	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	e008      	b.n	80047f2 <HAL_TIM_PWM_Start+0x9e>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	bf14      	ite	ne
 80047ec:	2301      	movne	r3, #1
 80047ee:	2300      	moveq	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e0a6      	b.n	8004948 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d104      	bne.n	800480a <HAL_TIM_PWM_Start+0xb6>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004808:	e023      	b.n	8004852 <HAL_TIM_PWM_Start+0xfe>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b04      	cmp	r3, #4
 800480e:	d104      	bne.n	800481a <HAL_TIM_PWM_Start+0xc6>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004818:	e01b      	b.n	8004852 <HAL_TIM_PWM_Start+0xfe>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b08      	cmp	r3, #8
 800481e:	d104      	bne.n	800482a <HAL_TIM_PWM_Start+0xd6>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004828:	e013      	b.n	8004852 <HAL_TIM_PWM_Start+0xfe>
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	2b0c      	cmp	r3, #12
 800482e:	d104      	bne.n	800483a <HAL_TIM_PWM_Start+0xe6>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2202      	movs	r2, #2
 8004834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004838:	e00b      	b.n	8004852 <HAL_TIM_PWM_Start+0xfe>
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	2b10      	cmp	r3, #16
 800483e:	d104      	bne.n	800484a <HAL_TIM_PWM_Start+0xf6>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2202      	movs	r2, #2
 8004844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004848:	e003      	b.n	8004852 <HAL_TIM_PWM_Start+0xfe>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2202      	movs	r2, #2
 800484e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2201      	movs	r2, #1
 8004858:	6839      	ldr	r1, [r7, #0]
 800485a:	4618      	mov	r0, r3
 800485c:	f000 ff24 	bl	80056a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a3a      	ldr	r2, [pc, #232]	; (8004950 <HAL_TIM_PWM_Start+0x1fc>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d018      	beq.n	800489c <HAL_TIM_PWM_Start+0x148>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a39      	ldr	r2, [pc, #228]	; (8004954 <HAL_TIM_PWM_Start+0x200>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d013      	beq.n	800489c <HAL_TIM_PWM_Start+0x148>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a37      	ldr	r2, [pc, #220]	; (8004958 <HAL_TIM_PWM_Start+0x204>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d00e      	beq.n	800489c <HAL_TIM_PWM_Start+0x148>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a36      	ldr	r2, [pc, #216]	; (800495c <HAL_TIM_PWM_Start+0x208>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d009      	beq.n	800489c <HAL_TIM_PWM_Start+0x148>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a34      	ldr	r2, [pc, #208]	; (8004960 <HAL_TIM_PWM_Start+0x20c>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d004      	beq.n	800489c <HAL_TIM_PWM_Start+0x148>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a33      	ldr	r2, [pc, #204]	; (8004964 <HAL_TIM_PWM_Start+0x210>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d101      	bne.n	80048a0 <HAL_TIM_PWM_Start+0x14c>
 800489c:	2301      	movs	r3, #1
 800489e:	e000      	b.n	80048a2 <HAL_TIM_PWM_Start+0x14e>
 80048a0:	2300      	movs	r3, #0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d007      	beq.n	80048b6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a25      	ldr	r2, [pc, #148]	; (8004950 <HAL_TIM_PWM_Start+0x1fc>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d022      	beq.n	8004906 <HAL_TIM_PWM_Start+0x1b2>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048c8:	d01d      	beq.n	8004906 <HAL_TIM_PWM_Start+0x1b2>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a26      	ldr	r2, [pc, #152]	; (8004968 <HAL_TIM_PWM_Start+0x214>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d018      	beq.n	8004906 <HAL_TIM_PWM_Start+0x1b2>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a24      	ldr	r2, [pc, #144]	; (800496c <HAL_TIM_PWM_Start+0x218>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d013      	beq.n	8004906 <HAL_TIM_PWM_Start+0x1b2>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a23      	ldr	r2, [pc, #140]	; (8004970 <HAL_TIM_PWM_Start+0x21c>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d00e      	beq.n	8004906 <HAL_TIM_PWM_Start+0x1b2>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a19      	ldr	r2, [pc, #100]	; (8004954 <HAL_TIM_PWM_Start+0x200>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d009      	beq.n	8004906 <HAL_TIM_PWM_Start+0x1b2>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a18      	ldr	r2, [pc, #96]	; (8004958 <HAL_TIM_PWM_Start+0x204>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d004      	beq.n	8004906 <HAL_TIM_PWM_Start+0x1b2>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a18      	ldr	r2, [pc, #96]	; (8004964 <HAL_TIM_PWM_Start+0x210>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d115      	bne.n	8004932 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	4b19      	ldr	r3, [pc, #100]	; (8004974 <HAL_TIM_PWM_Start+0x220>)
 800490e:	4013      	ands	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2b06      	cmp	r3, #6
 8004916:	d015      	beq.n	8004944 <HAL_TIM_PWM_Start+0x1f0>
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800491e:	d011      	beq.n	8004944 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f042 0201 	orr.w	r2, r2, #1
 800492e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004930:	e008      	b.n	8004944 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f042 0201 	orr.w	r2, r2, #1
 8004940:	601a      	str	r2, [r3, #0]
 8004942:	e000      	b.n	8004946 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004944:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}
 8004950:	40012c00 	.word	0x40012c00
 8004954:	40013400 	.word	0x40013400
 8004958:	40014000 	.word	0x40014000
 800495c:	40014400 	.word	0x40014400
 8004960:	40014800 	.word	0x40014800
 8004964:	40015000 	.word	0x40015000
 8004968:	40000400 	.word	0x40000400
 800496c:	40000800 	.word	0x40000800
 8004970:	40000c00 	.word	0x40000c00
 8004974:	00010007 	.word	0x00010007

08004978 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b02      	cmp	r3, #2
 800498c:	d122      	bne.n	80049d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	f003 0302 	and.w	r3, r3, #2
 8004998:	2b02      	cmp	r3, #2
 800499a:	d11b      	bne.n	80049d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f06f 0202 	mvn.w	r2, #2
 80049a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2201      	movs	r2, #1
 80049aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	f003 0303 	and.w	r3, r3, #3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 fa84 	bl	8004ec8 <HAL_TIM_IC_CaptureCallback>
 80049c0:	e005      	b.n	80049ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 fa76 	bl	8004eb4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	f000 fa87 	bl	8004edc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	f003 0304 	and.w	r3, r3, #4
 80049de:	2b04      	cmp	r3, #4
 80049e0:	d122      	bne.n	8004a28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	f003 0304 	and.w	r3, r3, #4
 80049ec:	2b04      	cmp	r3, #4
 80049ee:	d11b      	bne.n	8004a28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f06f 0204 	mvn.w	r2, #4
 80049f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2202      	movs	r2, #2
 80049fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d003      	beq.n	8004a16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 fa5a 	bl	8004ec8 <HAL_TIM_IC_CaptureCallback>
 8004a14:	e005      	b.n	8004a22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 fa4c 	bl	8004eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f000 fa5d 	bl	8004edc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	f003 0308 	and.w	r3, r3, #8
 8004a32:	2b08      	cmp	r3, #8
 8004a34:	d122      	bne.n	8004a7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	f003 0308 	and.w	r3, r3, #8
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	d11b      	bne.n	8004a7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f06f 0208 	mvn.w	r2, #8
 8004a4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2204      	movs	r2, #4
 8004a52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	69db      	ldr	r3, [r3, #28]
 8004a5a:	f003 0303 	and.w	r3, r3, #3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d003      	beq.n	8004a6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 fa30 	bl	8004ec8 <HAL_TIM_IC_CaptureCallback>
 8004a68:	e005      	b.n	8004a76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 fa22 	bl	8004eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a70:	6878      	ldr	r0, [r7, #4]
 8004a72:	f000 fa33 	bl	8004edc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	f003 0310 	and.w	r3, r3, #16
 8004a86:	2b10      	cmp	r3, #16
 8004a88:	d122      	bne.n	8004ad0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	f003 0310 	and.w	r3, r3, #16
 8004a94:	2b10      	cmp	r3, #16
 8004a96:	d11b      	bne.n	8004ad0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f06f 0210 	mvn.w	r2, #16
 8004aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2208      	movs	r2, #8
 8004aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d003      	beq.n	8004abe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 fa06 	bl	8004ec8 <HAL_TIM_IC_CaptureCallback>
 8004abc:	e005      	b.n	8004aca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f9f8 	bl	8004eb4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 fa09 	bl	8004edc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d10e      	bne.n	8004afc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f003 0301 	and.w	r3, r3, #1
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d107      	bne.n	8004afc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f06f 0201 	mvn.w	r2, #1
 8004af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f9d2 	bl	8004ea0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b06:	2b80      	cmp	r3, #128	; 0x80
 8004b08:	d10e      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b14:	2b80      	cmp	r3, #128	; 0x80
 8004b16:	d107      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 ff38 	bl	8005998 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b36:	d10e      	bne.n	8004b56 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b42:	2b80      	cmp	r3, #128	; 0x80
 8004b44:	d107      	bne.n	8004b56 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 ff2b 	bl	80059ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b60:	2b40      	cmp	r3, #64	; 0x40
 8004b62:	d10e      	bne.n	8004b82 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68db      	ldr	r3, [r3, #12]
 8004b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6e:	2b40      	cmp	r3, #64	; 0x40
 8004b70:	d107      	bne.n	8004b82 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 f9b7 	bl	8004ef0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	f003 0320 	and.w	r3, r3, #32
 8004b8c:	2b20      	cmp	r3, #32
 8004b8e:	d10e      	bne.n	8004bae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	f003 0320 	and.w	r3, r3, #32
 8004b9a:	2b20      	cmp	r3, #32
 8004b9c:	d107      	bne.n	8004bae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f06f 0220 	mvn.w	r2, #32
 8004ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 feeb 	bl	8005984 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bbc:	d10f      	bne.n	8004bde <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bcc:	d107      	bne.n	8004bde <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004bd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 fef1 	bl	80059c0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004be8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bec:	d10f      	bne.n	8004c0e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bf8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bfc:	d107      	bne.n	8004c0e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004c06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 fee3 	bl	80059d4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c1c:	d10f      	bne.n	8004c3e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c2c:	d107      	bne.n	8004c3e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 fed5 	bl	80059e8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c4c:	d10f      	bne.n	8004c6e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c5c:	d107      	bne.n	8004c6e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004c66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 fec7 	bl	80059fc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c6e:	bf00      	nop
 8004c70:	3708      	adds	r7, #8
 8004c72:	46bd      	mov	sp, r7
 8004c74:	bd80      	pop	{r7, pc}
	...

08004c78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	60b9      	str	r1, [r7, #8]
 8004c82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c84:	2300      	movs	r3, #0
 8004c86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d101      	bne.n	8004c96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c92:	2302      	movs	r3, #2
 8004c94:	e0ff      	b.n	8004e96 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2b14      	cmp	r3, #20
 8004ca2:	f200 80f0 	bhi.w	8004e86 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004ca6:	a201      	add	r2, pc, #4	; (adr r2, 8004cac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cac:	08004d01 	.word	0x08004d01
 8004cb0:	08004e87 	.word	0x08004e87
 8004cb4:	08004e87 	.word	0x08004e87
 8004cb8:	08004e87 	.word	0x08004e87
 8004cbc:	08004d41 	.word	0x08004d41
 8004cc0:	08004e87 	.word	0x08004e87
 8004cc4:	08004e87 	.word	0x08004e87
 8004cc8:	08004e87 	.word	0x08004e87
 8004ccc:	08004d83 	.word	0x08004d83
 8004cd0:	08004e87 	.word	0x08004e87
 8004cd4:	08004e87 	.word	0x08004e87
 8004cd8:	08004e87 	.word	0x08004e87
 8004cdc:	08004dc3 	.word	0x08004dc3
 8004ce0:	08004e87 	.word	0x08004e87
 8004ce4:	08004e87 	.word	0x08004e87
 8004ce8:	08004e87 	.word	0x08004e87
 8004cec:	08004e05 	.word	0x08004e05
 8004cf0:	08004e87 	.word	0x08004e87
 8004cf4:	08004e87 	.word	0x08004e87
 8004cf8:	08004e87 	.word	0x08004e87
 8004cfc:	08004e45 	.word	0x08004e45
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68b9      	ldr	r1, [r7, #8]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f000 f9a4 	bl	8005054 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699a      	ldr	r2, [r3, #24]
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 0208 	orr.w	r2, r2, #8
 8004d1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	699a      	ldr	r2, [r3, #24]
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0204 	bic.w	r2, r2, #4
 8004d2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6999      	ldr	r1, [r3, #24]
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	691a      	ldr	r2, [r3, #16]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	619a      	str	r2, [r3, #24]
      break;
 8004d3e:	e0a5      	b.n	8004e8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	68b9      	ldr	r1, [r7, #8]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 fa1e 	bl	8005188 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699a      	ldr	r2, [r3, #24]
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	699a      	ldr	r2, [r3, #24]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	6999      	ldr	r1, [r3, #24]
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	021a      	lsls	r2, r3, #8
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	619a      	str	r2, [r3, #24]
      break;
 8004d80:	e084      	b.n	8004e8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68b9      	ldr	r1, [r7, #8]
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f000 fa91 	bl	80052b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	69da      	ldr	r2, [r3, #28]
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f042 0208 	orr.w	r2, r2, #8
 8004d9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	69da      	ldr	r2, [r3, #28]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f022 0204 	bic.w	r2, r2, #4
 8004dac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	69d9      	ldr	r1, [r3, #28]
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	691a      	ldr	r2, [r3, #16]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	430a      	orrs	r2, r1
 8004dbe:	61da      	str	r2, [r3, #28]
      break;
 8004dc0:	e064      	b.n	8004e8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68b9      	ldr	r1, [r7, #8]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f000 fb03 	bl	80053d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	69da      	ldr	r2, [r3, #28]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ddc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	69da      	ldr	r2, [r3, #28]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	69d9      	ldr	r1, [r3, #28]
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	691b      	ldr	r3, [r3, #16]
 8004df8:	021a      	lsls	r2, r3, #8
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	61da      	str	r2, [r3, #28]
      break;
 8004e02:	e043      	b.n	8004e8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68b9      	ldr	r1, [r7, #8]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f000 fb76 	bl	80054fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f042 0208 	orr.w	r2, r2, #8
 8004e1e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0204 	bic.w	r2, r2, #4
 8004e2e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	691a      	ldr	r2, [r3, #16]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004e42:	e023      	b.n	8004e8c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68b9      	ldr	r1, [r7, #8]
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	f000 fbc0 	bl	80055d0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e5e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e6e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	021a      	lsls	r2, r3, #8
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004e84:	e002      	b.n	8004e8c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	75fb      	strb	r3, [r7, #23]
      break;
 8004e8a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e94:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3718      	adds	r7, #24
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop

08004ea0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b083      	sub	sp, #12
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004ea8:	bf00      	nop
 8004eaa:	370c      	adds	r7, #12
 8004eac:	46bd      	mov	sp, r7
 8004eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb2:	4770      	bx	lr

08004eb4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ebc:	bf00      	nop
 8004ebe:	370c      	adds	r7, #12
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b083      	sub	sp, #12
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ef8:	bf00      	nop
 8004efa:	370c      	adds	r7, #12
 8004efc:	46bd      	mov	sp, r7
 8004efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f02:	4770      	bx	lr

08004f04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a46      	ldr	r2, [pc, #280]	; (8005030 <TIM_Base_SetConfig+0x12c>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d017      	beq.n	8004f4c <TIM_Base_SetConfig+0x48>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f22:	d013      	beq.n	8004f4c <TIM_Base_SetConfig+0x48>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a43      	ldr	r2, [pc, #268]	; (8005034 <TIM_Base_SetConfig+0x130>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d00f      	beq.n	8004f4c <TIM_Base_SetConfig+0x48>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a42      	ldr	r2, [pc, #264]	; (8005038 <TIM_Base_SetConfig+0x134>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d00b      	beq.n	8004f4c <TIM_Base_SetConfig+0x48>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a41      	ldr	r2, [pc, #260]	; (800503c <TIM_Base_SetConfig+0x138>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d007      	beq.n	8004f4c <TIM_Base_SetConfig+0x48>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a40      	ldr	r2, [pc, #256]	; (8005040 <TIM_Base_SetConfig+0x13c>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d003      	beq.n	8004f4c <TIM_Base_SetConfig+0x48>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a3f      	ldr	r2, [pc, #252]	; (8005044 <TIM_Base_SetConfig+0x140>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d108      	bne.n	8004f5e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a33      	ldr	r2, [pc, #204]	; (8005030 <TIM_Base_SetConfig+0x12c>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d023      	beq.n	8004fae <TIM_Base_SetConfig+0xaa>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f6c:	d01f      	beq.n	8004fae <TIM_Base_SetConfig+0xaa>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a30      	ldr	r2, [pc, #192]	; (8005034 <TIM_Base_SetConfig+0x130>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d01b      	beq.n	8004fae <TIM_Base_SetConfig+0xaa>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a2f      	ldr	r2, [pc, #188]	; (8005038 <TIM_Base_SetConfig+0x134>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d017      	beq.n	8004fae <TIM_Base_SetConfig+0xaa>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a2e      	ldr	r2, [pc, #184]	; (800503c <TIM_Base_SetConfig+0x138>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d013      	beq.n	8004fae <TIM_Base_SetConfig+0xaa>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a2d      	ldr	r2, [pc, #180]	; (8005040 <TIM_Base_SetConfig+0x13c>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d00f      	beq.n	8004fae <TIM_Base_SetConfig+0xaa>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a2d      	ldr	r2, [pc, #180]	; (8005048 <TIM_Base_SetConfig+0x144>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d00b      	beq.n	8004fae <TIM_Base_SetConfig+0xaa>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a2c      	ldr	r2, [pc, #176]	; (800504c <TIM_Base_SetConfig+0x148>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d007      	beq.n	8004fae <TIM_Base_SetConfig+0xaa>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a2b      	ldr	r2, [pc, #172]	; (8005050 <TIM_Base_SetConfig+0x14c>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d003      	beq.n	8004fae <TIM_Base_SetConfig+0xaa>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a26      	ldr	r2, [pc, #152]	; (8005044 <TIM_Base_SetConfig+0x140>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d108      	bne.n	8004fc0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	689a      	ldr	r2, [r3, #8]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a12      	ldr	r2, [pc, #72]	; (8005030 <TIM_Base_SetConfig+0x12c>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d013      	beq.n	8005014 <TIM_Base_SetConfig+0x110>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a14      	ldr	r2, [pc, #80]	; (8005040 <TIM_Base_SetConfig+0x13c>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d00f      	beq.n	8005014 <TIM_Base_SetConfig+0x110>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a14      	ldr	r2, [pc, #80]	; (8005048 <TIM_Base_SetConfig+0x144>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d00b      	beq.n	8005014 <TIM_Base_SetConfig+0x110>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a13      	ldr	r2, [pc, #76]	; (800504c <TIM_Base_SetConfig+0x148>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d007      	beq.n	8005014 <TIM_Base_SetConfig+0x110>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a12      	ldr	r2, [pc, #72]	; (8005050 <TIM_Base_SetConfig+0x14c>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d003      	beq.n	8005014 <TIM_Base_SetConfig+0x110>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a0d      	ldr	r2, [pc, #52]	; (8005044 <TIM_Base_SetConfig+0x140>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d103      	bne.n	800501c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	691a      	ldr	r2, [r3, #16]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	615a      	str	r2, [r3, #20]
}
 8005022:	bf00      	nop
 8005024:	3714      	adds	r7, #20
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	40012c00 	.word	0x40012c00
 8005034:	40000400 	.word	0x40000400
 8005038:	40000800 	.word	0x40000800
 800503c:	40000c00 	.word	0x40000c00
 8005040:	40013400 	.word	0x40013400
 8005044:	40015000 	.word	0x40015000
 8005048:	40014000 	.word	0x40014000
 800504c:	40014400 	.word	0x40014400
 8005050:	40014800 	.word	0x40014800

08005054 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005054:	b480      	push	{r7}
 8005056:	b087      	sub	sp, #28
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a1b      	ldr	r3, [r3, #32]
 8005062:	f023 0201 	bic.w	r2, r3, #1
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a1b      	ldr	r3, [r3, #32]
 800506e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005086:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 0303 	bic.w	r3, r3, #3
 800508e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	4313      	orrs	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	f023 0302 	bic.w	r3, r3, #2
 80050a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a30      	ldr	r2, [pc, #192]	; (8005170 <TIM_OC1_SetConfig+0x11c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d013      	beq.n	80050dc <TIM_OC1_SetConfig+0x88>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a2f      	ldr	r2, [pc, #188]	; (8005174 <TIM_OC1_SetConfig+0x120>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d00f      	beq.n	80050dc <TIM_OC1_SetConfig+0x88>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a2e      	ldr	r2, [pc, #184]	; (8005178 <TIM_OC1_SetConfig+0x124>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d00b      	beq.n	80050dc <TIM_OC1_SetConfig+0x88>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a2d      	ldr	r2, [pc, #180]	; (800517c <TIM_OC1_SetConfig+0x128>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d007      	beq.n	80050dc <TIM_OC1_SetConfig+0x88>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a2c      	ldr	r2, [pc, #176]	; (8005180 <TIM_OC1_SetConfig+0x12c>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d003      	beq.n	80050dc <TIM_OC1_SetConfig+0x88>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a2b      	ldr	r2, [pc, #172]	; (8005184 <TIM_OC1_SetConfig+0x130>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d10c      	bne.n	80050f6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	f023 0308 	bic.w	r3, r3, #8
 80050e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f023 0304 	bic.w	r3, r3, #4
 80050f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a1d      	ldr	r2, [pc, #116]	; (8005170 <TIM_OC1_SetConfig+0x11c>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d013      	beq.n	8005126 <TIM_OC1_SetConfig+0xd2>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a1c      	ldr	r2, [pc, #112]	; (8005174 <TIM_OC1_SetConfig+0x120>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d00f      	beq.n	8005126 <TIM_OC1_SetConfig+0xd2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a1b      	ldr	r2, [pc, #108]	; (8005178 <TIM_OC1_SetConfig+0x124>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d00b      	beq.n	8005126 <TIM_OC1_SetConfig+0xd2>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a1a      	ldr	r2, [pc, #104]	; (800517c <TIM_OC1_SetConfig+0x128>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d007      	beq.n	8005126 <TIM_OC1_SetConfig+0xd2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a19      	ldr	r2, [pc, #100]	; (8005180 <TIM_OC1_SetConfig+0x12c>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d003      	beq.n	8005126 <TIM_OC1_SetConfig+0xd2>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a18      	ldr	r2, [pc, #96]	; (8005184 <TIM_OC1_SetConfig+0x130>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d111      	bne.n	800514a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800512c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005134:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	695b      	ldr	r3, [r3, #20]
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	4313      	orrs	r3, r2
 800513e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	699b      	ldr	r3, [r3, #24]
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	4313      	orrs	r3, r2
 8005148:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	693a      	ldr	r2, [r7, #16]
 800514e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	621a      	str	r2, [r3, #32]
}
 8005164:	bf00      	nop
 8005166:	371c      	adds	r7, #28
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr
 8005170:	40012c00 	.word	0x40012c00
 8005174:	40013400 	.word	0x40013400
 8005178:	40014000 	.word	0x40014000
 800517c:	40014400 	.word	0x40014400
 8005180:	40014800 	.word	0x40014800
 8005184:	40015000 	.word	0x40015000

08005188 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005188:	b480      	push	{r7}
 800518a:	b087      	sub	sp, #28
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	f023 0210 	bic.w	r2, r3, #16
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	699b      	ldr	r3, [r3, #24]
 80051ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	021b      	lsls	r3, r3, #8
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f023 0320 	bic.w	r3, r3, #32
 80051d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	011b      	lsls	r3, r3, #4
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a2c      	ldr	r2, [pc, #176]	; (8005298 <TIM_OC2_SetConfig+0x110>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d007      	beq.n	80051fc <TIM_OC2_SetConfig+0x74>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a2b      	ldr	r2, [pc, #172]	; (800529c <TIM_OC2_SetConfig+0x114>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d003      	beq.n	80051fc <TIM_OC2_SetConfig+0x74>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a2a      	ldr	r2, [pc, #168]	; (80052a0 <TIM_OC2_SetConfig+0x118>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d10d      	bne.n	8005218 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005202:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	011b      	lsls	r3, r3, #4
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	4313      	orrs	r3, r2
 800520e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005216:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a1f      	ldr	r2, [pc, #124]	; (8005298 <TIM_OC2_SetConfig+0x110>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d013      	beq.n	8005248 <TIM_OC2_SetConfig+0xc0>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	4a1e      	ldr	r2, [pc, #120]	; (800529c <TIM_OC2_SetConfig+0x114>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d00f      	beq.n	8005248 <TIM_OC2_SetConfig+0xc0>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	4a1e      	ldr	r2, [pc, #120]	; (80052a4 <TIM_OC2_SetConfig+0x11c>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d00b      	beq.n	8005248 <TIM_OC2_SetConfig+0xc0>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	4a1d      	ldr	r2, [pc, #116]	; (80052a8 <TIM_OC2_SetConfig+0x120>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d007      	beq.n	8005248 <TIM_OC2_SetConfig+0xc0>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a1c      	ldr	r2, [pc, #112]	; (80052ac <TIM_OC2_SetConfig+0x124>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d003      	beq.n	8005248 <TIM_OC2_SetConfig+0xc0>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a17      	ldr	r2, [pc, #92]	; (80052a0 <TIM_OC2_SetConfig+0x118>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d113      	bne.n	8005270 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800524e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005256:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	695b      	ldr	r3, [r3, #20]
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	4313      	orrs	r3, r2
 8005262:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	693a      	ldr	r2, [r7, #16]
 800526c:	4313      	orrs	r3, r2
 800526e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	685a      	ldr	r2, [r3, #4]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	621a      	str	r2, [r3, #32]
}
 800528a:	bf00      	nop
 800528c:	371c      	adds	r7, #28
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	40012c00 	.word	0x40012c00
 800529c:	40013400 	.word	0x40013400
 80052a0:	40015000 	.word	0x40015000
 80052a4:	40014000 	.word	0x40014000
 80052a8:	40014400 	.word	0x40014400
 80052ac:	40014800 	.word	0x40014800

080052b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b087      	sub	sp, #28
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f023 0303 	bic.w	r3, r3, #3
 80052ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	021b      	lsls	r3, r3, #8
 8005304:	697a      	ldr	r2, [r7, #20]
 8005306:	4313      	orrs	r3, r2
 8005308:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a2b      	ldr	r2, [pc, #172]	; (80053bc <TIM_OC3_SetConfig+0x10c>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d007      	beq.n	8005322 <TIM_OC3_SetConfig+0x72>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a2a      	ldr	r2, [pc, #168]	; (80053c0 <TIM_OC3_SetConfig+0x110>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d003      	beq.n	8005322 <TIM_OC3_SetConfig+0x72>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a29      	ldr	r2, [pc, #164]	; (80053c4 <TIM_OC3_SetConfig+0x114>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d10d      	bne.n	800533e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005328:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	021b      	lsls	r3, r3, #8
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	4313      	orrs	r3, r2
 8005334:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800533c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a1e      	ldr	r2, [pc, #120]	; (80053bc <TIM_OC3_SetConfig+0x10c>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d013      	beq.n	800536e <TIM_OC3_SetConfig+0xbe>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a1d      	ldr	r2, [pc, #116]	; (80053c0 <TIM_OC3_SetConfig+0x110>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d00f      	beq.n	800536e <TIM_OC3_SetConfig+0xbe>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a1d      	ldr	r2, [pc, #116]	; (80053c8 <TIM_OC3_SetConfig+0x118>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d00b      	beq.n	800536e <TIM_OC3_SetConfig+0xbe>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	4a1c      	ldr	r2, [pc, #112]	; (80053cc <TIM_OC3_SetConfig+0x11c>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d007      	beq.n	800536e <TIM_OC3_SetConfig+0xbe>
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	4a1b      	ldr	r2, [pc, #108]	; (80053d0 <TIM_OC3_SetConfig+0x120>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d003      	beq.n	800536e <TIM_OC3_SetConfig+0xbe>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a16      	ldr	r2, [pc, #88]	; (80053c4 <TIM_OC3_SetConfig+0x114>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d113      	bne.n	8005396 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005374:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800537c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	011b      	lsls	r3, r3, #4
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	4313      	orrs	r3, r2
 8005388:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	699b      	ldr	r3, [r3, #24]
 800538e:	011b      	lsls	r3, r3, #4
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	4313      	orrs	r3, r2
 8005394:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	697a      	ldr	r2, [r7, #20]
 80053ae:	621a      	str	r2, [r3, #32]
}
 80053b0:	bf00      	nop
 80053b2:	371c      	adds	r7, #28
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	40012c00 	.word	0x40012c00
 80053c0:	40013400 	.word	0x40013400
 80053c4:	40015000 	.word	0x40015000
 80053c8:	40014000 	.word	0x40014000
 80053cc:	40014400 	.word	0x40014400
 80053d0:	40014800 	.word	0x40014800

080053d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b087      	sub	sp, #28
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a1b      	ldr	r3, [r3, #32]
 80053e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	69db      	ldr	r3, [r3, #28]
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005406:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800540e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	021b      	lsls	r3, r3, #8
 8005416:	68fa      	ldr	r2, [r7, #12]
 8005418:	4313      	orrs	r3, r2
 800541a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005422:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	031b      	lsls	r3, r3, #12
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	4313      	orrs	r3, r2
 800542e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a2c      	ldr	r2, [pc, #176]	; (80054e4 <TIM_OC4_SetConfig+0x110>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d007      	beq.n	8005448 <TIM_OC4_SetConfig+0x74>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a2b      	ldr	r2, [pc, #172]	; (80054e8 <TIM_OC4_SetConfig+0x114>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d003      	beq.n	8005448 <TIM_OC4_SetConfig+0x74>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a2a      	ldr	r2, [pc, #168]	; (80054ec <TIM_OC4_SetConfig+0x118>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d10d      	bne.n	8005464 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800544e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	031b      	lsls	r3, r3, #12
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	4313      	orrs	r3, r2
 800545a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005462:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a1f      	ldr	r2, [pc, #124]	; (80054e4 <TIM_OC4_SetConfig+0x110>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d013      	beq.n	8005494 <TIM_OC4_SetConfig+0xc0>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a1e      	ldr	r2, [pc, #120]	; (80054e8 <TIM_OC4_SetConfig+0x114>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d00f      	beq.n	8005494 <TIM_OC4_SetConfig+0xc0>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a1e      	ldr	r2, [pc, #120]	; (80054f0 <TIM_OC4_SetConfig+0x11c>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d00b      	beq.n	8005494 <TIM_OC4_SetConfig+0xc0>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a1d      	ldr	r2, [pc, #116]	; (80054f4 <TIM_OC4_SetConfig+0x120>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d007      	beq.n	8005494 <TIM_OC4_SetConfig+0xc0>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a1c      	ldr	r2, [pc, #112]	; (80054f8 <TIM_OC4_SetConfig+0x124>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d003      	beq.n	8005494 <TIM_OC4_SetConfig+0xc0>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a17      	ldr	r2, [pc, #92]	; (80054ec <TIM_OC4_SetConfig+0x118>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d113      	bne.n	80054bc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800549a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054a2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	019b      	lsls	r3, r3, #6
 80054aa:	693a      	ldr	r2, [r7, #16]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	699b      	ldr	r3, [r3, #24]
 80054b4:	019b      	lsls	r3, r3, #6
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	685a      	ldr	r2, [r3, #4]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	697a      	ldr	r2, [r7, #20]
 80054d4:	621a      	str	r2, [r3, #32]
}
 80054d6:	bf00      	nop
 80054d8:	371c      	adds	r7, #28
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	40012c00 	.word	0x40012c00
 80054e8:	40013400 	.word	0x40013400
 80054ec:	40015000 	.word	0x40015000
 80054f0:	40014000 	.word	0x40014000
 80054f4:	40014400 	.word	0x40014400
 80054f8:	40014800 	.word	0x40014800

080054fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b087      	sub	sp, #28
 8005500:	af00      	add	r7, sp, #0
 8005502:	6078      	str	r0, [r7, #4]
 8005504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a1b      	ldr	r3, [r3, #32]
 8005516:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800552a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800552e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	4313      	orrs	r3, r2
 8005538:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005540:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	041b      	lsls	r3, r3, #16
 8005548:	693a      	ldr	r2, [r7, #16]
 800554a:	4313      	orrs	r3, r2
 800554c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a19      	ldr	r2, [pc, #100]	; (80055b8 <TIM_OC5_SetConfig+0xbc>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d013      	beq.n	800557e <TIM_OC5_SetConfig+0x82>
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a18      	ldr	r2, [pc, #96]	; (80055bc <TIM_OC5_SetConfig+0xc0>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d00f      	beq.n	800557e <TIM_OC5_SetConfig+0x82>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a17      	ldr	r2, [pc, #92]	; (80055c0 <TIM_OC5_SetConfig+0xc4>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d00b      	beq.n	800557e <TIM_OC5_SetConfig+0x82>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a16      	ldr	r2, [pc, #88]	; (80055c4 <TIM_OC5_SetConfig+0xc8>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d007      	beq.n	800557e <TIM_OC5_SetConfig+0x82>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a15      	ldr	r2, [pc, #84]	; (80055c8 <TIM_OC5_SetConfig+0xcc>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d003      	beq.n	800557e <TIM_OC5_SetConfig+0x82>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a14      	ldr	r2, [pc, #80]	; (80055cc <TIM_OC5_SetConfig+0xd0>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d109      	bne.n	8005592 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005584:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	695b      	ldr	r3, [r3, #20]
 800558a:	021b      	lsls	r3, r3, #8
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	4313      	orrs	r3, r2
 8005590:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	693a      	ldr	r2, [r7, #16]
 80055aa:	621a      	str	r2, [r3, #32]
}
 80055ac:	bf00      	nop
 80055ae:	371c      	adds	r7, #28
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr
 80055b8:	40012c00 	.word	0x40012c00
 80055bc:	40013400 	.word	0x40013400
 80055c0:	40014000 	.word	0x40014000
 80055c4:	40014400 	.word	0x40014400
 80055c8:	40014800 	.word	0x40014800
 80055cc:	40015000 	.word	0x40015000

080055d0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a1b      	ldr	r3, [r3, #32]
 80055de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	021b      	lsls	r3, r3, #8
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	4313      	orrs	r3, r2
 800560e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005616:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	051b      	lsls	r3, r3, #20
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	4313      	orrs	r3, r2
 8005622:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a1a      	ldr	r2, [pc, #104]	; (8005690 <TIM_OC6_SetConfig+0xc0>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d013      	beq.n	8005654 <TIM_OC6_SetConfig+0x84>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a19      	ldr	r2, [pc, #100]	; (8005694 <TIM_OC6_SetConfig+0xc4>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d00f      	beq.n	8005654 <TIM_OC6_SetConfig+0x84>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a18      	ldr	r2, [pc, #96]	; (8005698 <TIM_OC6_SetConfig+0xc8>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d00b      	beq.n	8005654 <TIM_OC6_SetConfig+0x84>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a17      	ldr	r2, [pc, #92]	; (800569c <TIM_OC6_SetConfig+0xcc>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d007      	beq.n	8005654 <TIM_OC6_SetConfig+0x84>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	4a16      	ldr	r2, [pc, #88]	; (80056a0 <TIM_OC6_SetConfig+0xd0>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d003      	beq.n	8005654 <TIM_OC6_SetConfig+0x84>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a15      	ldr	r2, [pc, #84]	; (80056a4 <TIM_OC6_SetConfig+0xd4>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d109      	bne.n	8005668 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800565a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	695b      	ldr	r3, [r3, #20]
 8005660:	029b      	lsls	r3, r3, #10
 8005662:	697a      	ldr	r2, [r7, #20]
 8005664:	4313      	orrs	r3, r2
 8005666:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	68fa      	ldr	r2, [r7, #12]
 8005672:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	621a      	str	r2, [r3, #32]
}
 8005682:	bf00      	nop
 8005684:	371c      	adds	r7, #28
 8005686:	46bd      	mov	sp, r7
 8005688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568c:	4770      	bx	lr
 800568e:	bf00      	nop
 8005690:	40012c00 	.word	0x40012c00
 8005694:	40013400 	.word	0x40013400
 8005698:	40014000 	.word	0x40014000
 800569c:	40014400 	.word	0x40014400
 80056a0:	40014800 	.word	0x40014800
 80056a4:	40015000 	.word	0x40015000

080056a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b087      	sub	sp, #28
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	f003 031f 	and.w	r3, r3, #31
 80056ba:	2201      	movs	r2, #1
 80056bc:	fa02 f303 	lsl.w	r3, r2, r3
 80056c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6a1a      	ldr	r2, [r3, #32]
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	43db      	mvns	r3, r3
 80056ca:	401a      	ands	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6a1a      	ldr	r2, [r3, #32]
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	f003 031f 	and.w	r3, r3, #31
 80056da:	6879      	ldr	r1, [r7, #4]
 80056dc:	fa01 f303 	lsl.w	r3, r1, r3
 80056e0:	431a      	orrs	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	621a      	str	r2, [r3, #32]
}
 80056e6:	bf00      	nop
 80056e8:	371c      	adds	r7, #28
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
	...

080056f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005704:	2b01      	cmp	r3, #1
 8005706:	d101      	bne.n	800570c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005708:	2302      	movs	r3, #2
 800570a:	e074      	b.n	80057f6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2202      	movs	r2, #2
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	689b      	ldr	r3, [r3, #8]
 800572a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a34      	ldr	r2, [pc, #208]	; (8005804 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d009      	beq.n	800574a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a33      	ldr	r2, [pc, #204]	; (8005808 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d004      	beq.n	800574a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a31      	ldr	r2, [pc, #196]	; (800580c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d108      	bne.n	800575c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005750:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	4313      	orrs	r3, r2
 800575a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005766:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	4313      	orrs	r3, r2
 8005770:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a21      	ldr	r2, [pc, #132]	; (8005804 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d022      	beq.n	80057ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800578c:	d01d      	beq.n	80057ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a1f      	ldr	r2, [pc, #124]	; (8005810 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d018      	beq.n	80057ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a1d      	ldr	r2, [pc, #116]	; (8005814 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d013      	beq.n	80057ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a1c      	ldr	r2, [pc, #112]	; (8005818 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d00e      	beq.n	80057ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a15      	ldr	r2, [pc, #84]	; (8005808 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d009      	beq.n	80057ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a18      	ldr	r2, [pc, #96]	; (800581c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d004      	beq.n	80057ca <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a11      	ldr	r2, [pc, #68]	; (800580c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d10c      	bne.n	80057e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	4313      	orrs	r3, r2
 80057da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3714      	adds	r7, #20
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	40012c00 	.word	0x40012c00
 8005808:	40013400 	.word	0x40013400
 800580c:	40015000 	.word	0x40015000
 8005810:	40000400 	.word	0x40000400
 8005814:	40000800 	.word	0x40000800
 8005818:	40000c00 	.word	0x40000c00
 800581c:	40014000 	.word	0x40014000

08005820 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800582a:	2300      	movs	r3, #0
 800582c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005834:	2b01      	cmp	r3, #1
 8005836:	d101      	bne.n	800583c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005838:	2302      	movs	r3, #2
 800583a:	e096      	b.n	800596a <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	68db      	ldr	r3, [r3, #12]
 800584e:	4313      	orrs	r3, r2
 8005850:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	4313      	orrs	r3, r2
 800585e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	4313      	orrs	r3, r2
 800586c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4313      	orrs	r3, r2
 800587a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	4313      	orrs	r3, r2
 8005888:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	695b      	ldr	r3, [r3, #20]
 8005894:	4313      	orrs	r3, r2
 8005896:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a2:	4313      	orrs	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	041b      	lsls	r3, r3, #16
 80058b2:	4313      	orrs	r3, r2
 80058b4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	4a2f      	ldr	r2, [pc, #188]	; (8005978 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d009      	beq.n	80058d4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a2d      	ldr	r2, [pc, #180]	; (800597c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d004      	beq.n	80058d4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a2c      	ldr	r2, [pc, #176]	; (8005980 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d106      	bne.n	80058e2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	4313      	orrs	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a24      	ldr	r2, [pc, #144]	; (8005978 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d009      	beq.n	8005900 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a22      	ldr	r2, [pc, #136]	; (800597c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d004      	beq.n	8005900 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a21      	ldr	r2, [pc, #132]	; (8005980 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d12b      	bne.n	8005958 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590a:	051b      	lsls	r3, r3, #20
 800590c:	4313      	orrs	r3, r2
 800590e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	4313      	orrs	r3, r2
 800591c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005928:	4313      	orrs	r3, r2
 800592a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a11      	ldr	r2, [pc, #68]	; (8005978 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d009      	beq.n	800594a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a10      	ldr	r2, [pc, #64]	; (800597c <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d004      	beq.n	800594a <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a0e      	ldr	r2, [pc, #56]	; (8005980 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d106      	bne.n	8005958 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005954:	4313      	orrs	r3, r2
 8005956:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	40012c00 	.word	0x40012c00
 800597c:	40013400 	.word	0x40013400
 8005980:	40015000 	.word	0x40015000

08005984 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e042      	b.n	8005aa8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d106      	bne.n	8005a3a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f7fc fdad 	bl	8002594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2224      	movs	r2, #36	; 0x24
 8005a3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f022 0201 	bic.w	r2, r2, #1
 8005a50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 fb64 	bl	8006120 <UART_SetConfig>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d101      	bne.n	8005a62 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e022      	b.n	8005aa8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 fe54 	bl	8006718 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	689a      	ldr	r2, [r3, #8]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f042 0201 	orr.w	r2, r2, #1
 8005a9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 fedb 	bl	800685c <UART_CheckIdleState>
 8005aa6:	4603      	mov	r3, r0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3708      	adds	r7, #8
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b0ba      	sub	sp, #232	; 0xe8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	69db      	ldr	r3, [r3, #28]
 8005abe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005ad6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005ada:	f640 030f 	movw	r3, #2063	; 0x80f
 8005ade:	4013      	ands	r3, r2
 8005ae0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005ae4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d11b      	bne.n	8005b24 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005af0:	f003 0320 	and.w	r3, r3, #32
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d015      	beq.n	8005b24 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005afc:	f003 0320 	and.w	r3, r3, #32
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d105      	bne.n	8005b10 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d009      	beq.n	8005b24 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f000 82d6 	beq.w	80060c6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	4798      	blx	r3
      }
      return;
 8005b22:	e2d0      	b.n	80060c6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005b24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	f000 811f 	beq.w	8005d6c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005b2e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005b32:	4b8b      	ldr	r3, [pc, #556]	; (8005d60 <HAL_UART_IRQHandler+0x2b0>)
 8005b34:	4013      	ands	r3, r2
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d106      	bne.n	8005b48 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005b3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005b3e:	4b89      	ldr	r3, [pc, #548]	; (8005d64 <HAL_UART_IRQHandler+0x2b4>)
 8005b40:	4013      	ands	r3, r2
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 8112 	beq.w	8005d6c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d011      	beq.n	8005b78 <HAL_UART_IRQHandler+0xc8>
 8005b54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d00b      	beq.n	8005b78 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	2201      	movs	r2, #1
 8005b66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b6e:	f043 0201 	orr.w	r2, r3, #1
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b7c:	f003 0302 	and.w	r3, r3, #2
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d011      	beq.n	8005ba8 <HAL_UART_IRQHandler+0xf8>
 8005b84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00b      	beq.n	8005ba8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2202      	movs	r2, #2
 8005b96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b9e:	f043 0204 	orr.w	r2, r3, #4
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bac:	f003 0304 	and.w	r3, r3, #4
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d011      	beq.n	8005bd8 <HAL_UART_IRQHandler+0x128>
 8005bb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00b      	beq.n	8005bd8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	2204      	movs	r2, #4
 8005bc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bce:	f043 0202 	orr.w	r2, r3, #2
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bdc:	f003 0308 	and.w	r3, r3, #8
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d017      	beq.n	8005c14 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005be8:	f003 0320 	and.w	r3, r3, #32
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d105      	bne.n	8005bfc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005bf0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005bf4:	4b5a      	ldr	r3, [pc, #360]	; (8005d60 <HAL_UART_IRQHandler+0x2b0>)
 8005bf6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00b      	beq.n	8005c14 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2208      	movs	r2, #8
 8005c02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c0a:	f043 0208 	orr.w	r2, r3, #8
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d012      	beq.n	8005c46 <HAL_UART_IRQHandler+0x196>
 8005c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d00c      	beq.n	8005c46 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c3c:	f043 0220 	orr.w	r2, r3, #32
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f000 823c 	beq.w	80060ca <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c56:	f003 0320 	and.w	r3, r3, #32
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d013      	beq.n	8005c86 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005c5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c62:	f003 0320 	and.w	r3, r3, #32
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d105      	bne.n	8005c76 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005c6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d007      	beq.n	8005c86 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d003      	beq.n	8005c86 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9a:	2b40      	cmp	r3, #64	; 0x40
 8005c9c:	d005      	beq.n	8005caa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005c9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ca2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d04f      	beq.n	8005d4a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 fee9 	bl	8006a82 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	689b      	ldr	r3, [r3, #8]
 8005cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cba:	2b40      	cmp	r3, #64	; 0x40
 8005cbc:	d141      	bne.n	8005d42 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	3308      	adds	r3, #8
 8005cc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ccc:	e853 3f00 	ldrex	r3, [r3]
 8005cd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005cd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	3308      	adds	r3, #8
 8005ce6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005cea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005cee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005cf6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005cfa:	e841 2300 	strex	r3, r2, [r1]
 8005cfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d1d9      	bne.n	8005cbe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d013      	beq.n	8005d3a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d16:	4a14      	ldr	r2, [pc, #80]	; (8005d68 <HAL_UART_IRQHandler+0x2b8>)
 8005d18:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7fd fa4d 	bl	80031be <HAL_DMA_Abort_IT>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d017      	beq.n	8005d5a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005d34:	4610      	mov	r0, r2
 8005d36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d38:	e00f      	b.n	8005d5a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d3a:	6878      	ldr	r0, [r7, #4]
 8005d3c:	f000 f9da 	bl	80060f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d40:	e00b      	b.n	8005d5a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d42:	6878      	ldr	r0, [r7, #4]
 8005d44:	f000 f9d6 	bl	80060f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d48:	e007      	b.n	8005d5a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f9d2 	bl	80060f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005d58:	e1b7      	b.n	80060ca <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d5a:	bf00      	nop
    return;
 8005d5c:	e1b5      	b.n	80060ca <HAL_UART_IRQHandler+0x61a>
 8005d5e:	bf00      	nop
 8005d60:	10000001 	.word	0x10000001
 8005d64:	04000120 	.word	0x04000120
 8005d68:	08006b4f 	.word	0x08006b4f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	f040 814a 	bne.w	800600a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005d76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d7a:	f003 0310 	and.w	r3, r3, #16
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f000 8143 	beq.w	800600a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005d84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d88:	f003 0310 	and.w	r3, r3, #16
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f000 813c 	beq.w	800600a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2210      	movs	r2, #16
 8005d98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da4:	2b40      	cmp	r3, #64	; 0x40
 8005da6:	f040 80b5 	bne.w	8005f14 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005db6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	f000 8187 	beq.w	80060ce <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005dc6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	f080 817f 	bcs.w	80060ce <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dd6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 0320 	and.w	r3, r3, #32
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f040 8086 	bne.w	8005ef8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005df8:	e853 3f00 	ldrex	r3, [r3]
 8005dfc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e04:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e08:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	461a      	mov	r2, r3
 8005e12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005e1a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e1e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e22:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e26:	e841 2300 	strex	r3, r2, [r1]
 8005e2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1da      	bne.n	8005dec <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	3308      	adds	r3, #8
 8005e3c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e40:	e853 3f00 	ldrex	r3, [r3]
 8005e44:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e46:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e48:	f023 0301 	bic.w	r3, r3, #1
 8005e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	3308      	adds	r3, #8
 8005e56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e5a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e5e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e60:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e62:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e66:	e841 2300 	strex	r3, r2, [r1]
 8005e6a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d1e1      	bne.n	8005e36 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	3308      	adds	r3, #8
 8005e78:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e7c:	e853 3f00 	ldrex	r3, [r3]
 8005e80:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	3308      	adds	r3, #8
 8005e92:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e96:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e98:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e9c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e9e:	e841 2300 	strex	r3, r2, [r1]
 8005ea2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ea4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1e3      	bne.n	8005e72 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2220      	movs	r2, #32
 8005eae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ec0:	e853 3f00 	ldrex	r3, [r3]
 8005ec4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ec6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ec8:	f023 0310 	bic.w	r3, r3, #16
 8005ecc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005eda:	65bb      	str	r3, [r7, #88]	; 0x58
 8005edc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ede:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ee0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ee2:	e841 2300 	strex	r3, r2, [r1]
 8005ee6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1e4      	bne.n	8005eb8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7fd f90a 	bl	800310c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f04:	b29b      	uxth	r3, r3
 8005f06:	1ad3      	subs	r3, r2, r3
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	4619      	mov	r1, r3
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 f8fb 	bl	8006108 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f12:	e0dc      	b.n	80060ce <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f000 80ce 	beq.w	80060d2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8005f36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	f000 80c9 	beq.w	80060d2 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f48:	e853 3f00 	ldrex	r3, [r3]
 8005f4c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f50:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f54:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f62:	647b      	str	r3, [r7, #68]	; 0x44
 8005f64:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f66:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f6a:	e841 2300 	strex	r3, r2, [r1]
 8005f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1e4      	bne.n	8005f40 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	3308      	adds	r3, #8
 8005f7c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f80:	e853 3f00 	ldrex	r3, [r3]
 8005f84:	623b      	str	r3, [r7, #32]
   return(result);
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f8c:	f023 0301 	bic.w	r3, r3, #1
 8005f90:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	3308      	adds	r3, #8
 8005f9a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005f9e:	633a      	str	r2, [r7, #48]	; 0x30
 8005fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fa6:	e841 2300 	strex	r3, r2, [r1]
 8005faa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1e1      	bne.n	8005f76 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2220      	movs	r2, #32
 8005fb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	e853 3f00 	ldrex	r3, [r3]
 8005fd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f023 0310 	bic.w	r3, r3, #16
 8005fda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	461a      	mov	r2, r3
 8005fe4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005fe8:	61fb      	str	r3, [r7, #28]
 8005fea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fec:	69b9      	ldr	r1, [r7, #24]
 8005fee:	69fa      	ldr	r2, [r7, #28]
 8005ff0:	e841 2300 	strex	r3, r2, [r1]
 8005ff4:	617b      	str	r3, [r7, #20]
   return(result);
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1e4      	bne.n	8005fc6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ffc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006000:	4619      	mov	r1, r3
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f000 f880 	bl	8006108 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006008:	e063      	b.n	80060d2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800600a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800600e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00e      	beq.n	8006034 <HAL_UART_IRQHandler+0x584>
 8006016:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800601a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d008      	beq.n	8006034 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800602a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f000 fdcf 	bl	8006bd0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006032:	e051      	b.n	80060d8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800603c:	2b00      	cmp	r3, #0
 800603e:	d014      	beq.n	800606a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006048:	2b00      	cmp	r3, #0
 800604a:	d105      	bne.n	8006058 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800604c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006050:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006054:	2b00      	cmp	r3, #0
 8006056:	d008      	beq.n	800606a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800605c:	2b00      	cmp	r3, #0
 800605e:	d03a      	beq.n	80060d6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	4798      	blx	r3
    }
    return;
 8006068:	e035      	b.n	80060d6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800606a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800606e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006072:	2b00      	cmp	r3, #0
 8006074:	d009      	beq.n	800608a <HAL_UART_IRQHandler+0x5da>
 8006076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800607a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800607e:	2b00      	cmp	r3, #0
 8006080:	d003      	beq.n	800608a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 fd79 	bl	8006b7a <UART_EndTransmit_IT>
    return;
 8006088:	e026      	b.n	80060d8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800608a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800608e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006092:	2b00      	cmp	r3, #0
 8006094:	d009      	beq.n	80060aa <HAL_UART_IRQHandler+0x5fa>
 8006096:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800609a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d003      	beq.n	80060aa <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 fda8 	bl	8006bf8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060a8:	e016      	b.n	80060d8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80060aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d010      	beq.n	80060d8 <HAL_UART_IRQHandler+0x628>
 80060b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	da0c      	bge.n	80060d8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 fd90 	bl	8006be4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060c4:	e008      	b.n	80060d8 <HAL_UART_IRQHandler+0x628>
      return;
 80060c6:	bf00      	nop
 80060c8:	e006      	b.n	80060d8 <HAL_UART_IRQHandler+0x628>
    return;
 80060ca:	bf00      	nop
 80060cc:	e004      	b.n	80060d8 <HAL_UART_IRQHandler+0x628>
      return;
 80060ce:	bf00      	nop
 80060d0:	e002      	b.n	80060d8 <HAL_UART_IRQHandler+0x628>
      return;
 80060d2:	bf00      	nop
 80060d4:	e000      	b.n	80060d8 <HAL_UART_IRQHandler+0x628>
    return;
 80060d6:	bf00      	nop
  }
}
 80060d8:	37e8      	adds	r7, #232	; 0xe8
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop

080060e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	460b      	mov	r3, r1
 8006112:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006114:	bf00      	nop
 8006116:	370c      	adds	r7, #12
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006120:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006124:	b08c      	sub	sp, #48	; 0x30
 8006126:	af00      	add	r7, sp, #0
 8006128:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800612a:	2300      	movs	r3, #0
 800612c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	689a      	ldr	r2, [r3, #8]
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	431a      	orrs	r2, r3
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	431a      	orrs	r2, r3
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	69db      	ldr	r3, [r3, #28]
 8006144:	4313      	orrs	r3, r2
 8006146:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006148:	697b      	ldr	r3, [r7, #20]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	4baa      	ldr	r3, [pc, #680]	; (80063f8 <UART_SetConfig+0x2d8>)
 8006150:	4013      	ands	r3, r2
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	6812      	ldr	r2, [r2, #0]
 8006156:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006158:	430b      	orrs	r3, r1
 800615a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	68da      	ldr	r2, [r3, #12]
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	430a      	orrs	r2, r1
 8006170:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	4a9f      	ldr	r2, [pc, #636]	; (80063fc <UART_SetConfig+0x2dc>)
 800617e:	4293      	cmp	r3, r2
 8006180:	d004      	beq.n	800618c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006188:	4313      	orrs	r3, r2
 800618a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006196:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	6812      	ldr	r2, [r2, #0]
 800619e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061a0:	430b      	orrs	r3, r1
 80061a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061aa:	f023 010f 	bic.w	r1, r3, #15
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	430a      	orrs	r2, r1
 80061b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a90      	ldr	r2, [pc, #576]	; (8006400 <UART_SetConfig+0x2e0>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d125      	bne.n	8006210 <UART_SetConfig+0xf0>
 80061c4:	4b8f      	ldr	r3, [pc, #572]	; (8006404 <UART_SetConfig+0x2e4>)
 80061c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ca:	f003 0303 	and.w	r3, r3, #3
 80061ce:	2b03      	cmp	r3, #3
 80061d0:	d81a      	bhi.n	8006208 <UART_SetConfig+0xe8>
 80061d2:	a201      	add	r2, pc, #4	; (adr r2, 80061d8 <UART_SetConfig+0xb8>)
 80061d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d8:	080061e9 	.word	0x080061e9
 80061dc:	080061f9 	.word	0x080061f9
 80061e0:	080061f1 	.word	0x080061f1
 80061e4:	08006201 	.word	0x08006201
 80061e8:	2301      	movs	r3, #1
 80061ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061ee:	e116      	b.n	800641e <UART_SetConfig+0x2fe>
 80061f0:	2302      	movs	r3, #2
 80061f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061f6:	e112      	b.n	800641e <UART_SetConfig+0x2fe>
 80061f8:	2304      	movs	r3, #4
 80061fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061fe:	e10e      	b.n	800641e <UART_SetConfig+0x2fe>
 8006200:	2308      	movs	r3, #8
 8006202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006206:	e10a      	b.n	800641e <UART_SetConfig+0x2fe>
 8006208:	2310      	movs	r3, #16
 800620a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800620e:	e106      	b.n	800641e <UART_SetConfig+0x2fe>
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a7c      	ldr	r2, [pc, #496]	; (8006408 <UART_SetConfig+0x2e8>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d138      	bne.n	800628c <UART_SetConfig+0x16c>
 800621a:	4b7a      	ldr	r3, [pc, #488]	; (8006404 <UART_SetConfig+0x2e4>)
 800621c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006220:	f003 030c 	and.w	r3, r3, #12
 8006224:	2b0c      	cmp	r3, #12
 8006226:	d82d      	bhi.n	8006284 <UART_SetConfig+0x164>
 8006228:	a201      	add	r2, pc, #4	; (adr r2, 8006230 <UART_SetConfig+0x110>)
 800622a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800622e:	bf00      	nop
 8006230:	08006265 	.word	0x08006265
 8006234:	08006285 	.word	0x08006285
 8006238:	08006285 	.word	0x08006285
 800623c:	08006285 	.word	0x08006285
 8006240:	08006275 	.word	0x08006275
 8006244:	08006285 	.word	0x08006285
 8006248:	08006285 	.word	0x08006285
 800624c:	08006285 	.word	0x08006285
 8006250:	0800626d 	.word	0x0800626d
 8006254:	08006285 	.word	0x08006285
 8006258:	08006285 	.word	0x08006285
 800625c:	08006285 	.word	0x08006285
 8006260:	0800627d 	.word	0x0800627d
 8006264:	2300      	movs	r3, #0
 8006266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800626a:	e0d8      	b.n	800641e <UART_SetConfig+0x2fe>
 800626c:	2302      	movs	r3, #2
 800626e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006272:	e0d4      	b.n	800641e <UART_SetConfig+0x2fe>
 8006274:	2304      	movs	r3, #4
 8006276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800627a:	e0d0      	b.n	800641e <UART_SetConfig+0x2fe>
 800627c:	2308      	movs	r3, #8
 800627e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006282:	e0cc      	b.n	800641e <UART_SetConfig+0x2fe>
 8006284:	2310      	movs	r3, #16
 8006286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800628a:	e0c8      	b.n	800641e <UART_SetConfig+0x2fe>
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a5e      	ldr	r2, [pc, #376]	; (800640c <UART_SetConfig+0x2ec>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d125      	bne.n	80062e2 <UART_SetConfig+0x1c2>
 8006296:	4b5b      	ldr	r3, [pc, #364]	; (8006404 <UART_SetConfig+0x2e4>)
 8006298:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800629c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80062a0:	2b30      	cmp	r3, #48	; 0x30
 80062a2:	d016      	beq.n	80062d2 <UART_SetConfig+0x1b2>
 80062a4:	2b30      	cmp	r3, #48	; 0x30
 80062a6:	d818      	bhi.n	80062da <UART_SetConfig+0x1ba>
 80062a8:	2b20      	cmp	r3, #32
 80062aa:	d00a      	beq.n	80062c2 <UART_SetConfig+0x1a2>
 80062ac:	2b20      	cmp	r3, #32
 80062ae:	d814      	bhi.n	80062da <UART_SetConfig+0x1ba>
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d002      	beq.n	80062ba <UART_SetConfig+0x19a>
 80062b4:	2b10      	cmp	r3, #16
 80062b6:	d008      	beq.n	80062ca <UART_SetConfig+0x1aa>
 80062b8:	e00f      	b.n	80062da <UART_SetConfig+0x1ba>
 80062ba:	2300      	movs	r3, #0
 80062bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062c0:	e0ad      	b.n	800641e <UART_SetConfig+0x2fe>
 80062c2:	2302      	movs	r3, #2
 80062c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062c8:	e0a9      	b.n	800641e <UART_SetConfig+0x2fe>
 80062ca:	2304      	movs	r3, #4
 80062cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062d0:	e0a5      	b.n	800641e <UART_SetConfig+0x2fe>
 80062d2:	2308      	movs	r3, #8
 80062d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062d8:	e0a1      	b.n	800641e <UART_SetConfig+0x2fe>
 80062da:	2310      	movs	r3, #16
 80062dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062e0:	e09d      	b.n	800641e <UART_SetConfig+0x2fe>
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a4a      	ldr	r2, [pc, #296]	; (8006410 <UART_SetConfig+0x2f0>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d125      	bne.n	8006338 <UART_SetConfig+0x218>
 80062ec:	4b45      	ldr	r3, [pc, #276]	; (8006404 <UART_SetConfig+0x2e4>)
 80062ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80062f6:	2bc0      	cmp	r3, #192	; 0xc0
 80062f8:	d016      	beq.n	8006328 <UART_SetConfig+0x208>
 80062fa:	2bc0      	cmp	r3, #192	; 0xc0
 80062fc:	d818      	bhi.n	8006330 <UART_SetConfig+0x210>
 80062fe:	2b80      	cmp	r3, #128	; 0x80
 8006300:	d00a      	beq.n	8006318 <UART_SetConfig+0x1f8>
 8006302:	2b80      	cmp	r3, #128	; 0x80
 8006304:	d814      	bhi.n	8006330 <UART_SetConfig+0x210>
 8006306:	2b00      	cmp	r3, #0
 8006308:	d002      	beq.n	8006310 <UART_SetConfig+0x1f0>
 800630a:	2b40      	cmp	r3, #64	; 0x40
 800630c:	d008      	beq.n	8006320 <UART_SetConfig+0x200>
 800630e:	e00f      	b.n	8006330 <UART_SetConfig+0x210>
 8006310:	2300      	movs	r3, #0
 8006312:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006316:	e082      	b.n	800641e <UART_SetConfig+0x2fe>
 8006318:	2302      	movs	r3, #2
 800631a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800631e:	e07e      	b.n	800641e <UART_SetConfig+0x2fe>
 8006320:	2304      	movs	r3, #4
 8006322:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006326:	e07a      	b.n	800641e <UART_SetConfig+0x2fe>
 8006328:	2308      	movs	r3, #8
 800632a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800632e:	e076      	b.n	800641e <UART_SetConfig+0x2fe>
 8006330:	2310      	movs	r3, #16
 8006332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006336:	e072      	b.n	800641e <UART_SetConfig+0x2fe>
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a35      	ldr	r2, [pc, #212]	; (8006414 <UART_SetConfig+0x2f4>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d12a      	bne.n	8006398 <UART_SetConfig+0x278>
 8006342:	4b30      	ldr	r3, [pc, #192]	; (8006404 <UART_SetConfig+0x2e4>)
 8006344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006348:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800634c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006350:	d01a      	beq.n	8006388 <UART_SetConfig+0x268>
 8006352:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006356:	d81b      	bhi.n	8006390 <UART_SetConfig+0x270>
 8006358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800635c:	d00c      	beq.n	8006378 <UART_SetConfig+0x258>
 800635e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006362:	d815      	bhi.n	8006390 <UART_SetConfig+0x270>
 8006364:	2b00      	cmp	r3, #0
 8006366:	d003      	beq.n	8006370 <UART_SetConfig+0x250>
 8006368:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800636c:	d008      	beq.n	8006380 <UART_SetConfig+0x260>
 800636e:	e00f      	b.n	8006390 <UART_SetConfig+0x270>
 8006370:	2300      	movs	r3, #0
 8006372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006376:	e052      	b.n	800641e <UART_SetConfig+0x2fe>
 8006378:	2302      	movs	r3, #2
 800637a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800637e:	e04e      	b.n	800641e <UART_SetConfig+0x2fe>
 8006380:	2304      	movs	r3, #4
 8006382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006386:	e04a      	b.n	800641e <UART_SetConfig+0x2fe>
 8006388:	2308      	movs	r3, #8
 800638a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800638e:	e046      	b.n	800641e <UART_SetConfig+0x2fe>
 8006390:	2310      	movs	r3, #16
 8006392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006396:	e042      	b.n	800641e <UART_SetConfig+0x2fe>
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a17      	ldr	r2, [pc, #92]	; (80063fc <UART_SetConfig+0x2dc>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d13a      	bne.n	8006418 <UART_SetConfig+0x2f8>
 80063a2:	4b18      	ldr	r3, [pc, #96]	; (8006404 <UART_SetConfig+0x2e4>)
 80063a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80063ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063b0:	d01a      	beq.n	80063e8 <UART_SetConfig+0x2c8>
 80063b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063b6:	d81b      	bhi.n	80063f0 <UART_SetConfig+0x2d0>
 80063b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063bc:	d00c      	beq.n	80063d8 <UART_SetConfig+0x2b8>
 80063be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063c2:	d815      	bhi.n	80063f0 <UART_SetConfig+0x2d0>
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d003      	beq.n	80063d0 <UART_SetConfig+0x2b0>
 80063c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063cc:	d008      	beq.n	80063e0 <UART_SetConfig+0x2c0>
 80063ce:	e00f      	b.n	80063f0 <UART_SetConfig+0x2d0>
 80063d0:	2300      	movs	r3, #0
 80063d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063d6:	e022      	b.n	800641e <UART_SetConfig+0x2fe>
 80063d8:	2302      	movs	r3, #2
 80063da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063de:	e01e      	b.n	800641e <UART_SetConfig+0x2fe>
 80063e0:	2304      	movs	r3, #4
 80063e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063e6:	e01a      	b.n	800641e <UART_SetConfig+0x2fe>
 80063e8:	2308      	movs	r3, #8
 80063ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063ee:	e016      	b.n	800641e <UART_SetConfig+0x2fe>
 80063f0:	2310      	movs	r3, #16
 80063f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063f6:	e012      	b.n	800641e <UART_SetConfig+0x2fe>
 80063f8:	cfff69f3 	.word	0xcfff69f3
 80063fc:	40008000 	.word	0x40008000
 8006400:	40013800 	.word	0x40013800
 8006404:	40021000 	.word	0x40021000
 8006408:	40004400 	.word	0x40004400
 800640c:	40004800 	.word	0x40004800
 8006410:	40004c00 	.word	0x40004c00
 8006414:	40005000 	.word	0x40005000
 8006418:	2310      	movs	r3, #16
 800641a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4aae      	ldr	r2, [pc, #696]	; (80066dc <UART_SetConfig+0x5bc>)
 8006424:	4293      	cmp	r3, r2
 8006426:	f040 8097 	bne.w	8006558 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800642a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800642e:	2b08      	cmp	r3, #8
 8006430:	d823      	bhi.n	800647a <UART_SetConfig+0x35a>
 8006432:	a201      	add	r2, pc, #4	; (adr r2, 8006438 <UART_SetConfig+0x318>)
 8006434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006438:	0800645d 	.word	0x0800645d
 800643c:	0800647b 	.word	0x0800647b
 8006440:	08006465 	.word	0x08006465
 8006444:	0800647b 	.word	0x0800647b
 8006448:	0800646b 	.word	0x0800646b
 800644c:	0800647b 	.word	0x0800647b
 8006450:	0800647b 	.word	0x0800647b
 8006454:	0800647b 	.word	0x0800647b
 8006458:	08006473 	.word	0x08006473
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800645c:	f7fd fe62 	bl	8004124 <HAL_RCC_GetPCLK1Freq>
 8006460:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006462:	e010      	b.n	8006486 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006464:	4b9e      	ldr	r3, [pc, #632]	; (80066e0 <UART_SetConfig+0x5c0>)
 8006466:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006468:	e00d      	b.n	8006486 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800646a:	f7fd fded 	bl	8004048 <HAL_RCC_GetSysClockFreq>
 800646e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006470:	e009      	b.n	8006486 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006476:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006478:	e005      	b.n	8006486 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800647a:	2300      	movs	r3, #0
 800647c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006484:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006488:	2b00      	cmp	r3, #0
 800648a:	f000 8130 	beq.w	80066ee <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006492:	4a94      	ldr	r2, [pc, #592]	; (80066e4 <UART_SetConfig+0x5c4>)
 8006494:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006498:	461a      	mov	r2, r3
 800649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649c:	fbb3 f3f2 	udiv	r3, r3, r2
 80064a0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	685a      	ldr	r2, [r3, #4]
 80064a6:	4613      	mov	r3, r2
 80064a8:	005b      	lsls	r3, r3, #1
 80064aa:	4413      	add	r3, r2
 80064ac:	69ba      	ldr	r2, [r7, #24]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d305      	bcc.n	80064be <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064b8:	69ba      	ldr	r2, [r7, #24]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d903      	bls.n	80064c6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80064c4:	e113      	b.n	80066ee <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c8:	2200      	movs	r2, #0
 80064ca:	60bb      	str	r3, [r7, #8]
 80064cc:	60fa      	str	r2, [r7, #12]
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d2:	4a84      	ldr	r2, [pc, #528]	; (80066e4 <UART_SetConfig+0x5c4>)
 80064d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064d8:	b29b      	uxth	r3, r3
 80064da:	2200      	movs	r2, #0
 80064dc:	603b      	str	r3, [r7, #0]
 80064de:	607a      	str	r2, [r7, #4]
 80064e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064e4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80064e8:	f7f9 fe96 	bl	8000218 <__aeabi_uldivmod>
 80064ec:	4602      	mov	r2, r0
 80064ee:	460b      	mov	r3, r1
 80064f0:	4610      	mov	r0, r2
 80064f2:	4619      	mov	r1, r3
 80064f4:	f04f 0200 	mov.w	r2, #0
 80064f8:	f04f 0300 	mov.w	r3, #0
 80064fc:	020b      	lsls	r3, r1, #8
 80064fe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006502:	0202      	lsls	r2, r0, #8
 8006504:	6979      	ldr	r1, [r7, #20]
 8006506:	6849      	ldr	r1, [r1, #4]
 8006508:	0849      	lsrs	r1, r1, #1
 800650a:	2000      	movs	r0, #0
 800650c:	460c      	mov	r4, r1
 800650e:	4605      	mov	r5, r0
 8006510:	eb12 0804 	adds.w	r8, r2, r4
 8006514:	eb43 0905 	adc.w	r9, r3, r5
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	2200      	movs	r2, #0
 800651e:	469a      	mov	sl, r3
 8006520:	4693      	mov	fp, r2
 8006522:	4652      	mov	r2, sl
 8006524:	465b      	mov	r3, fp
 8006526:	4640      	mov	r0, r8
 8006528:	4649      	mov	r1, r9
 800652a:	f7f9 fe75 	bl	8000218 <__aeabi_uldivmod>
 800652e:	4602      	mov	r2, r0
 8006530:	460b      	mov	r3, r1
 8006532:	4613      	mov	r3, r2
 8006534:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006536:	6a3b      	ldr	r3, [r7, #32]
 8006538:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800653c:	d308      	bcc.n	8006550 <UART_SetConfig+0x430>
 800653e:	6a3b      	ldr	r3, [r7, #32]
 8006540:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006544:	d204      	bcs.n	8006550 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6a3a      	ldr	r2, [r7, #32]
 800654c:	60da      	str	r2, [r3, #12]
 800654e:	e0ce      	b.n	80066ee <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006556:	e0ca      	b.n	80066ee <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	69db      	ldr	r3, [r3, #28]
 800655c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006560:	d166      	bne.n	8006630 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006562:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006566:	2b08      	cmp	r3, #8
 8006568:	d827      	bhi.n	80065ba <UART_SetConfig+0x49a>
 800656a:	a201      	add	r2, pc, #4	; (adr r2, 8006570 <UART_SetConfig+0x450>)
 800656c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006570:	08006595 	.word	0x08006595
 8006574:	0800659d 	.word	0x0800659d
 8006578:	080065a5 	.word	0x080065a5
 800657c:	080065bb 	.word	0x080065bb
 8006580:	080065ab 	.word	0x080065ab
 8006584:	080065bb 	.word	0x080065bb
 8006588:	080065bb 	.word	0x080065bb
 800658c:	080065bb 	.word	0x080065bb
 8006590:	080065b3 	.word	0x080065b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006594:	f7fd fdc6 	bl	8004124 <HAL_RCC_GetPCLK1Freq>
 8006598:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800659a:	e014      	b.n	80065c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800659c:	f7fd fdd8 	bl	8004150 <HAL_RCC_GetPCLK2Freq>
 80065a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80065a2:	e010      	b.n	80065c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065a4:	4b4e      	ldr	r3, [pc, #312]	; (80066e0 <UART_SetConfig+0x5c0>)
 80065a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80065a8:	e00d      	b.n	80065c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065aa:	f7fd fd4d 	bl	8004048 <HAL_RCC_GetSysClockFreq>
 80065ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80065b0:	e009      	b.n	80065c6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80065b8:	e005      	b.n	80065c6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80065ba:	2300      	movs	r3, #0
 80065bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80065c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f000 8090 	beq.w	80066ee <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d2:	4a44      	ldr	r2, [pc, #272]	; (80066e4 <UART_SetConfig+0x5c4>)
 80065d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065d8:	461a      	mov	r2, r3
 80065da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80065e0:	005a      	lsls	r2, r3, #1
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	085b      	lsrs	r3, r3, #1
 80065e8:	441a      	add	r2, r3
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80065f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065f4:	6a3b      	ldr	r3, [r7, #32]
 80065f6:	2b0f      	cmp	r3, #15
 80065f8:	d916      	bls.n	8006628 <UART_SetConfig+0x508>
 80065fa:	6a3b      	ldr	r3, [r7, #32]
 80065fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006600:	d212      	bcs.n	8006628 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006602:	6a3b      	ldr	r3, [r7, #32]
 8006604:	b29b      	uxth	r3, r3
 8006606:	f023 030f 	bic.w	r3, r3, #15
 800660a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800660c:	6a3b      	ldr	r3, [r7, #32]
 800660e:	085b      	lsrs	r3, r3, #1
 8006610:	b29b      	uxth	r3, r3
 8006612:	f003 0307 	and.w	r3, r3, #7
 8006616:	b29a      	uxth	r2, r3
 8006618:	8bfb      	ldrh	r3, [r7, #30]
 800661a:	4313      	orrs	r3, r2
 800661c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	8bfa      	ldrh	r2, [r7, #30]
 8006624:	60da      	str	r2, [r3, #12]
 8006626:	e062      	b.n	80066ee <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800662e:	e05e      	b.n	80066ee <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006630:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006634:	2b08      	cmp	r3, #8
 8006636:	d828      	bhi.n	800668a <UART_SetConfig+0x56a>
 8006638:	a201      	add	r2, pc, #4	; (adr r2, 8006640 <UART_SetConfig+0x520>)
 800663a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800663e:	bf00      	nop
 8006640:	08006665 	.word	0x08006665
 8006644:	0800666d 	.word	0x0800666d
 8006648:	08006675 	.word	0x08006675
 800664c:	0800668b 	.word	0x0800668b
 8006650:	0800667b 	.word	0x0800667b
 8006654:	0800668b 	.word	0x0800668b
 8006658:	0800668b 	.word	0x0800668b
 800665c:	0800668b 	.word	0x0800668b
 8006660:	08006683 	.word	0x08006683
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006664:	f7fd fd5e 	bl	8004124 <HAL_RCC_GetPCLK1Freq>
 8006668:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800666a:	e014      	b.n	8006696 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800666c:	f7fd fd70 	bl	8004150 <HAL_RCC_GetPCLK2Freq>
 8006670:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006672:	e010      	b.n	8006696 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006674:	4b1a      	ldr	r3, [pc, #104]	; (80066e0 <UART_SetConfig+0x5c0>)
 8006676:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006678:	e00d      	b.n	8006696 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800667a:	f7fd fce5 	bl	8004048 <HAL_RCC_GetSysClockFreq>
 800667e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006680:	e009      	b.n	8006696 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006682:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006686:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006688:	e005      	b.n	8006696 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800668a:	2300      	movs	r3, #0
 800668c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006694:	bf00      	nop
    }

    if (pclk != 0U)
 8006696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006698:	2b00      	cmp	r3, #0
 800669a:	d028      	beq.n	80066ee <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a0:	4a10      	ldr	r2, [pc, #64]	; (80066e4 <UART_SetConfig+0x5c4>)
 80066a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066a6:	461a      	mov	r2, r3
 80066a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066aa:	fbb3 f2f2 	udiv	r2, r3, r2
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	085b      	lsrs	r3, r3, #1
 80066b4:	441a      	add	r2, r3
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80066be:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066c0:	6a3b      	ldr	r3, [r7, #32]
 80066c2:	2b0f      	cmp	r3, #15
 80066c4:	d910      	bls.n	80066e8 <UART_SetConfig+0x5c8>
 80066c6:	6a3b      	ldr	r3, [r7, #32]
 80066c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066cc:	d20c      	bcs.n	80066e8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	60da      	str	r2, [r3, #12]
 80066d8:	e009      	b.n	80066ee <UART_SetConfig+0x5ce>
 80066da:	bf00      	nop
 80066dc:	40008000 	.word	0x40008000
 80066e0:	00f42400 	.word	0x00f42400
 80066e4:	08006e9c 	.word	0x08006e9c
      }
      else
      {
        ret = HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	2200      	movs	r2, #0
 8006702:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	2200      	movs	r2, #0
 8006708:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800670a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800670e:	4618      	mov	r0, r3
 8006710:	3730      	adds	r7, #48	; 0x30
 8006712:	46bd      	mov	sp, r7
 8006714:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006718 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006724:	f003 0301 	and.w	r3, r3, #1
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00a      	beq.n	8006742 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	430a      	orrs	r2, r1
 8006740:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006746:	f003 0302 	and.w	r3, r3, #2
 800674a:	2b00      	cmp	r3, #0
 800674c:	d00a      	beq.n	8006764 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	430a      	orrs	r2, r1
 8006762:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006768:	f003 0304 	and.w	r3, r3, #4
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00a      	beq.n	8006786 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	685b      	ldr	r3, [r3, #4]
 8006776:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	430a      	orrs	r2, r1
 8006784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678a:	f003 0308 	and.w	r3, r3, #8
 800678e:	2b00      	cmp	r3, #0
 8006790:	d00a      	beq.n	80067a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	685b      	ldr	r3, [r3, #4]
 8006798:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	430a      	orrs	r2, r1
 80067a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ac:	f003 0310 	and.w	r3, r3, #16
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d00a      	beq.n	80067ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ce:	f003 0320 	and.w	r3, r3, #32
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00a      	beq.n	80067ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	430a      	orrs	r2, r1
 80067ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d01a      	beq.n	800682e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	430a      	orrs	r2, r1
 800680c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006812:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006816:	d10a      	bne.n	800682e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	685b      	ldr	r3, [r3, #4]
 800681e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	430a      	orrs	r2, r1
 800682c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006836:	2b00      	cmp	r3, #0
 8006838:	d00a      	beq.n	8006850 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	430a      	orrs	r2, r1
 800684e:	605a      	str	r2, [r3, #4]
  }
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b086      	sub	sp, #24
 8006860:	af02      	add	r7, sp, #8
 8006862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2200      	movs	r2, #0
 8006868:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800686c:	f7fc f946 	bl	8002afc <HAL_GetTick>
 8006870:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0308 	and.w	r3, r3, #8
 800687c:	2b08      	cmp	r3, #8
 800687e:	d10e      	bne.n	800689e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006880:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006884:	9300      	str	r3, [sp, #0]
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 f82f 	bl	80068f2 <UART_WaitOnFlagUntilTimeout>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d001      	beq.n	800689e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800689a:	2303      	movs	r3, #3
 800689c:	e025      	b.n	80068ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0304 	and.w	r3, r3, #4
 80068a8:	2b04      	cmp	r3, #4
 80068aa:	d10e      	bne.n	80068ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 f819 	bl	80068f2 <UART_WaitOnFlagUntilTimeout>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d001      	beq.n	80068ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e00f      	b.n	80068ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2220      	movs	r2, #32
 80068ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2220      	movs	r2, #32
 80068d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2200      	movs	r2, #0
 80068de:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3710      	adds	r7, #16
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}

080068f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068f2:	b580      	push	{r7, lr}
 80068f4:	b09c      	sub	sp, #112	; 0x70
 80068f6:	af00      	add	r7, sp, #0
 80068f8:	60f8      	str	r0, [r7, #12]
 80068fa:	60b9      	str	r1, [r7, #8]
 80068fc:	603b      	str	r3, [r7, #0]
 80068fe:	4613      	mov	r3, r2
 8006900:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006902:	e0a9      	b.n	8006a58 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800690a:	f000 80a5 	beq.w	8006a58 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800690e:	f7fc f8f5 	bl	8002afc <HAL_GetTick>
 8006912:	4602      	mov	r2, r0
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800691a:	429a      	cmp	r2, r3
 800691c:	d302      	bcc.n	8006924 <UART_WaitOnFlagUntilTimeout+0x32>
 800691e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006920:	2b00      	cmp	r3, #0
 8006922:	d140      	bne.n	80069a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800692c:	e853 3f00 	ldrex	r3, [r3]
 8006930:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006932:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006934:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006938:	667b      	str	r3, [r7, #100]	; 0x64
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	461a      	mov	r2, r3
 8006940:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006942:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006944:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006946:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006948:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800694a:	e841 2300 	strex	r3, r2, [r1]
 800694e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1e6      	bne.n	8006924 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	3308      	adds	r3, #8
 800695c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006960:	e853 3f00 	ldrex	r3, [r3]
 8006964:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006968:	f023 0301 	bic.w	r3, r3, #1
 800696c:	663b      	str	r3, [r7, #96]	; 0x60
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	3308      	adds	r3, #8
 8006974:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006976:	64ba      	str	r2, [r7, #72]	; 0x48
 8006978:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800697c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800697e:	e841 2300 	strex	r3, r2, [r1]
 8006982:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006984:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1e5      	bne.n	8006956 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2220      	movs	r2, #32
 800698e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2220      	movs	r2, #32
 8006996:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	2200      	movs	r2, #0
 800699e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80069a2:	2303      	movs	r3, #3
 80069a4:	e069      	b.n	8006a7a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0304 	and.w	r3, r3, #4
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d051      	beq.n	8006a58 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	69db      	ldr	r3, [r3, #28]
 80069ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069c2:	d149      	bne.n	8006a58 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069cc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d6:	e853 3f00 	ldrex	r3, [r3]
 80069da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	461a      	mov	r2, r3
 80069ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069ec:	637b      	str	r3, [r7, #52]	; 0x34
 80069ee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069f4:	e841 2300 	strex	r3, r2, [r1]
 80069f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80069fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d1e6      	bne.n	80069ce <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	3308      	adds	r3, #8
 8006a06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	e853 3f00 	ldrex	r3, [r3]
 8006a0e:	613b      	str	r3, [r7, #16]
   return(result);
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	f023 0301 	bic.w	r3, r3, #1
 8006a16:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	3308      	adds	r3, #8
 8006a1e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a20:	623a      	str	r2, [r7, #32]
 8006a22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a24:	69f9      	ldr	r1, [r7, #28]
 8006a26:	6a3a      	ldr	r2, [r7, #32]
 8006a28:	e841 2300 	strex	r3, r2, [r1]
 8006a2c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d1e5      	bne.n	8006a00 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	2220      	movs	r2, #32
 8006a38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	2220      	movs	r2, #32
 8006a40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2220      	movs	r2, #32
 8006a48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e010      	b.n	8006a7a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	69da      	ldr	r2, [r3, #28]
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	4013      	ands	r3, r2
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	bf0c      	ite	eq
 8006a68:	2301      	moveq	r3, #1
 8006a6a:	2300      	movne	r3, #0
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	461a      	mov	r2, r3
 8006a70:	79fb      	ldrb	r3, [r7, #7]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	f43f af46 	beq.w	8006904 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3770      	adds	r7, #112	; 0x70
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}

08006a82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a82:	b480      	push	{r7}
 8006a84:	b095      	sub	sp, #84	; 0x54
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a92:	e853 3f00 	ldrex	r3, [r3]
 8006a96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aa8:	643b      	str	r3, [r7, #64]	; 0x40
 8006aaa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006aae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ab0:	e841 2300 	strex	r3, r2, [r1]
 8006ab4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1e6      	bne.n	8006a8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	3308      	adds	r3, #8
 8006ac2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac4:	6a3b      	ldr	r3, [r7, #32]
 8006ac6:	e853 3f00 	ldrex	r3, [r3]
 8006aca:	61fb      	str	r3, [r7, #28]
   return(result);
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ad2:	f023 0301 	bic.w	r3, r3, #1
 8006ad6:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	3308      	adds	r3, #8
 8006ade:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ae0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ae2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ae6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ae8:	e841 2300 	strex	r3, r2, [r1]
 8006aec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1e3      	bne.n	8006abc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d118      	bne.n	8006b2e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	e853 3f00 	ldrex	r3, [r3]
 8006b08:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	f023 0310 	bic.w	r3, r3, #16
 8006b10:	647b      	str	r3, [r7, #68]	; 0x44
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	461a      	mov	r2, r3
 8006b18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b1a:	61bb      	str	r3, [r7, #24]
 8006b1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b1e:	6979      	ldr	r1, [r7, #20]
 8006b20:	69ba      	ldr	r2, [r7, #24]
 8006b22:	e841 2300 	strex	r3, r2, [r1]
 8006b26:	613b      	str	r3, [r7, #16]
   return(result);
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d1e6      	bne.n	8006afc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2220      	movs	r2, #32
 8006b32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006b42:	bf00      	nop
 8006b44:	3754      	adds	r7, #84	; 0x54
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b4e:	b580      	push	{r7, lr}
 8006b50:	b084      	sub	sp, #16
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f7ff fac1 	bl	80060f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b72:	bf00      	nop
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b088      	sub	sp, #32
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	e853 3f00 	ldrex	r3, [r3]
 8006b8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b96:	61fb      	str	r3, [r7, #28]
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	61bb      	str	r3, [r7, #24]
 8006ba2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba4:	6979      	ldr	r1, [r7, #20]
 8006ba6:	69ba      	ldr	r2, [r7, #24]
 8006ba8:	e841 2300 	strex	r3, r2, [r1]
 8006bac:	613b      	str	r3, [r7, #16]
   return(result);
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1e6      	bne.n	8006b82 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2220      	movs	r2, #32
 8006bb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7ff fa8c 	bl	80060e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bc8:	bf00      	nop
 8006bca:	3720      	adds	r7, #32
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006bd0:	b480      	push	{r7}
 8006bd2:	b083      	sub	sp, #12
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006bd8:	bf00      	nop
 8006bda:	370c      	adds	r7, #12
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr

08006be4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006bec:	bf00      	nop
 8006bee:	370c      	adds	r7, #12
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf6:	4770      	bx	lr

08006bf8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b083      	sub	sp, #12
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006c00:	bf00      	nop
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b085      	sub	sp, #20
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006c1a:	2b01      	cmp	r3, #1
 8006c1c:	d101      	bne.n	8006c22 <HAL_UARTEx_DisableFifoMode+0x16>
 8006c1e:	2302      	movs	r3, #2
 8006c20:	e027      	b.n	8006c72 <HAL_UARTEx_DisableFifoMode+0x66>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2224      	movs	r2, #36	; 0x24
 8006c2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f022 0201 	bic.w	r2, r2, #1
 8006c48:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006c50:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2220      	movs	r2, #32
 8006c64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3714      	adds	r7, #20
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr

08006c7e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b084      	sub	sp, #16
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
 8006c86:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d101      	bne.n	8006c96 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c92:	2302      	movs	r3, #2
 8006c94:	e02d      	b.n	8006cf2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2224      	movs	r2, #36	; 0x24
 8006ca2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f022 0201 	bic.w	r2, r2, #1
 8006cbc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	683a      	ldr	r2, [r7, #0]
 8006cce:	430a      	orrs	r2, r1
 8006cd0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f850 	bl	8006d78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	68fa      	ldr	r2, [r7, #12]
 8006cde:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2220      	movs	r2, #32
 8006ce4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3710      	adds	r7, #16
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b084      	sub	sp, #16
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
 8006d02:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d101      	bne.n	8006d12 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d0e:	2302      	movs	r3, #2
 8006d10:	e02d      	b.n	8006d6e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2201      	movs	r2, #1
 8006d16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2224      	movs	r2, #36	; 0x24
 8006d1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f022 0201 	bic.w	r2, r2, #1
 8006d38:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	683a      	ldr	r2, [r7, #0]
 8006d4a:	430a      	orrs	r2, r1
 8006d4c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f812 	bl	8006d78 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68fa      	ldr	r2, [r7, #12]
 8006d5a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2220      	movs	r2, #32
 8006d60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d6c:	2300      	movs	r3, #0
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
	...

08006d78 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d108      	bne.n	8006d9a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d98:	e031      	b.n	8006dfe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d9a:	2308      	movs	r3, #8
 8006d9c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006d9e:	2308      	movs	r3, #8
 8006da0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	0e5b      	lsrs	r3, r3, #25
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	f003 0307 	and.w	r3, r3, #7
 8006db0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	0f5b      	lsrs	r3, r3, #29
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	f003 0307 	and.w	r3, r3, #7
 8006dc0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006dc2:	7bbb      	ldrb	r3, [r7, #14]
 8006dc4:	7b3a      	ldrb	r2, [r7, #12]
 8006dc6:	4911      	ldr	r1, [pc, #68]	; (8006e0c <UARTEx_SetNbDataToProcess+0x94>)
 8006dc8:	5c8a      	ldrb	r2, [r1, r2]
 8006dca:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006dce:	7b3a      	ldrb	r2, [r7, #12]
 8006dd0:	490f      	ldr	r1, [pc, #60]	; (8006e10 <UARTEx_SetNbDataToProcess+0x98>)
 8006dd2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006dd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006de0:	7bfb      	ldrb	r3, [r7, #15]
 8006de2:	7b7a      	ldrb	r2, [r7, #13]
 8006de4:	4909      	ldr	r1, [pc, #36]	; (8006e0c <UARTEx_SetNbDataToProcess+0x94>)
 8006de6:	5c8a      	ldrb	r2, [r1, r2]
 8006de8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006dec:	7b7a      	ldrb	r2, [r7, #13]
 8006dee:	4908      	ldr	r1, [pc, #32]	; (8006e10 <UARTEx_SetNbDataToProcess+0x98>)
 8006df0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006df2:	fb93 f3f2 	sdiv	r3, r3, r2
 8006df6:	b29a      	uxth	r2, r3
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006dfe:	bf00      	nop
 8006e00:	3714      	adds	r7, #20
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	08006eb4 	.word	0x08006eb4
 8006e10:	08006ebc 	.word	0x08006ebc

08006e14 <memset>:
 8006e14:	4402      	add	r2, r0
 8006e16:	4603      	mov	r3, r0
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d100      	bne.n	8006e1e <memset+0xa>
 8006e1c:	4770      	bx	lr
 8006e1e:	f803 1b01 	strb.w	r1, [r3], #1
 8006e22:	e7f9      	b.n	8006e18 <memset+0x4>

08006e24 <__libc_init_array>:
 8006e24:	b570      	push	{r4, r5, r6, lr}
 8006e26:	4d0d      	ldr	r5, [pc, #52]	; (8006e5c <__libc_init_array+0x38>)
 8006e28:	4c0d      	ldr	r4, [pc, #52]	; (8006e60 <__libc_init_array+0x3c>)
 8006e2a:	1b64      	subs	r4, r4, r5
 8006e2c:	10a4      	asrs	r4, r4, #2
 8006e2e:	2600      	movs	r6, #0
 8006e30:	42a6      	cmp	r6, r4
 8006e32:	d109      	bne.n	8006e48 <__libc_init_array+0x24>
 8006e34:	4d0b      	ldr	r5, [pc, #44]	; (8006e64 <__libc_init_array+0x40>)
 8006e36:	4c0c      	ldr	r4, [pc, #48]	; (8006e68 <__libc_init_array+0x44>)
 8006e38:	f000 f818 	bl	8006e6c <_init>
 8006e3c:	1b64      	subs	r4, r4, r5
 8006e3e:	10a4      	asrs	r4, r4, #2
 8006e40:	2600      	movs	r6, #0
 8006e42:	42a6      	cmp	r6, r4
 8006e44:	d105      	bne.n	8006e52 <__libc_init_array+0x2e>
 8006e46:	bd70      	pop	{r4, r5, r6, pc}
 8006e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e4c:	4798      	blx	r3
 8006e4e:	3601      	adds	r6, #1
 8006e50:	e7ee      	b.n	8006e30 <__libc_init_array+0xc>
 8006e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e56:	4798      	blx	r3
 8006e58:	3601      	adds	r6, #1
 8006e5a:	e7f2      	b.n	8006e42 <__libc_init_array+0x1e>
 8006e5c:	08006ecc 	.word	0x08006ecc
 8006e60:	08006ecc 	.word	0x08006ecc
 8006e64:	08006ecc 	.word	0x08006ecc
 8006e68:	08006ed0 	.word	0x08006ed0

08006e6c <_init>:
 8006e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e6e:	bf00      	nop
 8006e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e72:	bc08      	pop	{r3}
 8006e74:	469e      	mov	lr, r3
 8006e76:	4770      	bx	lr

08006e78 <_fini>:
 8006e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7a:	bf00      	nop
 8006e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e7e:	bc08      	pop	{r3}
 8006e80:	469e      	mov	lr, r3
 8006e82:	4770      	bx	lr
