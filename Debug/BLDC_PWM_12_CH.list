
BLDC_PWM_12_CH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b08  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006ce0  08006ce0  00016ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d20  08006d20  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006d20  08006d20  00016d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006d28  08006d28  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d28  08006d28  00016d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d2c  08006d2c  00016d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006d30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  20000010  08006d40  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  08006d40  0002029c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f00  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000255c  00000000  00000000  00034f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  000374a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001168  00000000  00000000  000386e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c34  00000000  00000000  00039848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001476b  00000000  00000000  0006047c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff3d3  00000000  00000000  00074be7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00173fba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d08  00000000  00000000  0017400c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000010 	.word	0x20000010
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006cc8 	.word	0x08006cc8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000014 	.word	0x20000014
 8000214:	08006cc8 	.word	0x08006cc8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000522:	f002 f9b4 	bl	800288e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000526:	f000 f8dd 	bl	80006e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052a:	f000 fc39 	bl	8000da0 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800052e:	f000 f95f 	bl	80007f0 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8000532:	f000 f9f3 	bl	800091c <MX_TIM1_Init>
  MX_DAC1_Init();
 8000536:	f000 f921 	bl	800077c <MX_DAC1_Init>
  MX_USART1_UART_Init();
 800053a:	f000 f9a3 	bl	8000884 <MX_USART1_UART_Init>
  MX_TIM8_Init();
 800053e:	f000 fb77 	bl	8000c30 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000542:	f000 faa3 	bl	8000a8c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000546:	f000 fb1b 	bl	8000b80 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800054a:	2100      	movs	r1, #0
 800054c:	485d      	ldr	r0, [pc, #372]	; (80006c4 <main+0x1a8>)
 800054e:	f004 f82f 	bl	80045b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000552:	2104      	movs	r1, #4
 8000554:	485b      	ldr	r0, [pc, #364]	; (80006c4 <main+0x1a8>)
 8000556:	f004 f82b 	bl	80045b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800055a:	2108      	movs	r1, #8
 800055c:	4859      	ldr	r0, [pc, #356]	; (80006c4 <main+0x1a8>)
 800055e:	f004 f827 	bl	80045b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000562:	210c      	movs	r1, #12
 8000564:	4857      	ldr	r0, [pc, #348]	; (80006c4 <main+0x1a8>)
 8000566:	f004 f823 	bl	80045b0 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800056a:	2100      	movs	r1, #0
 800056c:	4856      	ldr	r0, [pc, #344]	; (80006c8 <main+0x1ac>)
 800056e:	f004 f81f 	bl	80045b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000572:	2104      	movs	r1, #4
 8000574:	4854      	ldr	r0, [pc, #336]	; (80006c8 <main+0x1ac>)
 8000576:	f004 f81b 	bl	80045b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800057a:	2108      	movs	r1, #8
 800057c:	4852      	ldr	r0, [pc, #328]	; (80006c8 <main+0x1ac>)
 800057e:	f004 f817 	bl	80045b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000582:	210c      	movs	r1, #12
 8000584:	4850      	ldr	r0, [pc, #320]	; (80006c8 <main+0x1ac>)
 8000586:	f004 f813 	bl	80045b0 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800058a:	2100      	movs	r1, #0
 800058c:	484f      	ldr	r0, [pc, #316]	; (80006cc <main+0x1b0>)
 800058e:	f004 f80f 	bl	80045b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000592:	2104      	movs	r1, #4
 8000594:	484d      	ldr	r0, [pc, #308]	; (80006cc <main+0x1b0>)
 8000596:	f004 f80b 	bl	80045b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800059a:	2108      	movs	r1, #8
 800059c:	484b      	ldr	r0, [pc, #300]	; (80006cc <main+0x1b0>)
 800059e:	f004 f807 	bl	80045b0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80005a2:	210c      	movs	r1, #12
 80005a4:	4849      	ldr	r0, [pc, #292]	; (80006cc <main+0x1b0>)
 80005a6:	f004 f803 	bl	80045b0 <HAL_TIM_PWM_Start>


  TIM1->CCR1 = 2048;
 80005aa:	4b49      	ldr	r3, [pc, #292]	; (80006d0 <main+0x1b4>)
 80005ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005b0:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 2048;
 80005b2:	4b47      	ldr	r3, [pc, #284]	; (80006d0 <main+0x1b4>)
 80005b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005b8:	639a      	str	r2, [r3, #56]	; 0x38
  TIM1->CCR3 = 2048;
 80005ba:	4b45      	ldr	r3, [pc, #276]	; (80006d0 <main+0x1b4>)
 80005bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005c0:	63da      	str	r2, [r3, #60]	; 0x3c
  TIM1->CCR4 = 2048;
 80005c2:	4b43      	ldr	r3, [pc, #268]	; (80006d0 <main+0x1b4>)
 80005c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005c8:	641a      	str	r2, [r3, #64]	; 0x40
//
//  TIM8->CCR1 = 2048;
//  TIM8->CCR2 = 2048;
//  TIM8->CCR3 = 2048;
//  TIM8->CCR4 = 2048;
  uint32_t timer = 100;
 80005ca:	2364      	movs	r3, #100	; 0x64
 80005cc:	607b      	str	r3, [r7, #4]
		InverterX(2) - low switches are on, high switches are off
		InverterX(3) - 120 deg. commutation with PWM
		InverterX(4) - 120 deg. commutation without PWM
		*/

		time = HAL_GetTick();
 80005ce:	f002 f9c3 	bl	8002958 <HAL_GetTick>
 80005d2:	6038      	str	r0, [r7, #0]
//		Inverter1(4);
//		Inverter2(1);
//		Inverter3(4);
//		Inverter4(1);

		if (time < 15000) {
 80005d4:	683b      	ldr	r3, [r7, #0]
 80005d6:	f643 2297 	movw	r2, #14999	; 0x3a97
 80005da:	4293      	cmp	r3, r2
 80005dc:	d833      	bhi.n	8000646 <main+0x12a>
			Inverter1(3);
 80005de:	2003      	movs	r0, #3
 80005e0:	f001 f936 	bl	8001850 <Inverter1>
			Inverter2(1);
 80005e4:	2001      	movs	r0, #1
 80005e6:	f001 fbc3 	bl	8001d70 <Inverter2>
			Inverter3(2);
 80005ea:	2002      	movs	r0, #2
 80005ec:	f001 fa78 	bl	8001ae0 <Inverter3>
			Inverter4(1);
 80005f0:	2001      	movs	r0, #1
 80005f2:	f001 fd29 	bl	8002048 <Inverter4>
			if (time >= timer) {
 80005f6:	683a      	ldr	r2, [r7, #0]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	429a      	cmp	r2, r3
 80005fc:	d3e7      	bcc.n	80005ce <main+0xb2>
				timer += 20;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	3314      	adds	r3, #20
 8000602:	607b      	str	r3, [r7, #4]
				PWM1 = PWM1 + 10;
 8000604:	4b33      	ldr	r3, [pc, #204]	; (80006d4 <main+0x1b8>)
 8000606:	881b      	ldrh	r3, [r3, #0]
 8000608:	b29b      	uxth	r3, r3
 800060a:	330a      	adds	r3, #10
 800060c:	b29a      	uxth	r2, r3
 800060e:	4b31      	ldr	r3, [pc, #196]	; (80006d4 <main+0x1b8>)
 8000610:	801a      	strh	r2, [r3, #0]
				PWM2 += 10;
 8000612:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <main+0x1bc>)
 8000614:	881b      	ldrh	r3, [r3, #0]
 8000616:	330a      	adds	r3, #10
 8000618:	b29a      	uxth	r2, r3
 800061a:	4b2f      	ldr	r3, [pc, #188]	; (80006d8 <main+0x1bc>)
 800061c:	801a      	strh	r2, [r3, #0]

				if (PWM1 > 4095)
 800061e:	4b2d      	ldr	r3, [pc, #180]	; (80006d4 <main+0x1b8>)
 8000620:	881b      	ldrh	r3, [r3, #0]
 8000622:	b29b      	uxth	r3, r3
 8000624:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000628:	d303      	bcc.n	8000632 <main+0x116>
					PWM1 = 4095;
 800062a:	4b2a      	ldr	r3, [pc, #168]	; (80006d4 <main+0x1b8>)
 800062c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000630:	801a      	strh	r2, [r3, #0]
				if (PWM2 > 4095)
 8000632:	4b29      	ldr	r3, [pc, #164]	; (80006d8 <main+0x1bc>)
 8000634:	881b      	ldrh	r3, [r3, #0]
 8000636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800063a:	d3c8      	bcc.n	80005ce <main+0xb2>
					PWM2 = 4095;
 800063c:	4b26      	ldr	r3, [pc, #152]	; (80006d8 <main+0x1bc>)
 800063e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000642:	801a      	strh	r2, [r3, #0]
 8000644:	e7c3      	b.n	80005ce <main+0xb2>
			}
		}
		else if (time < 30000) {
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	f247 522f 	movw	r2, #29999	; 0x752f
 800064c:	4293      	cmp	r3, r2
 800064e:	d82e      	bhi.n	80006ae <main+0x192>
			Inverter1(4);
 8000650:	2004      	movs	r0, #4
 8000652:	f001 f8fd 	bl	8001850 <Inverter1>
			Inverter2(1);
 8000656:	2001      	movs	r0, #1
 8000658:	f001 fb8a 	bl	8001d70 <Inverter2>
			Inverter3(3);
 800065c:	2003      	movs	r0, #3
 800065e:	f001 fa3f 	bl	8001ae0 <Inverter3>
			if (time >= timer) {
 8000662:	683a      	ldr	r2, [r7, #0]
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	429a      	cmp	r2, r3
 8000668:	d3b1      	bcc.n	80005ce <main+0xb2>
				timer += 20;
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	3314      	adds	r3, #20
 800066e:	607b      	str	r3, [r7, #4]
				PWM3 = PWM3 + 10;
 8000670:	4b1a      	ldr	r3, [pc, #104]	; (80006dc <main+0x1c0>)
 8000672:	881b      	ldrh	r3, [r3, #0]
 8000674:	330a      	adds	r3, #10
 8000676:	b29a      	uxth	r2, r3
 8000678:	4b18      	ldr	r3, [pc, #96]	; (80006dc <main+0x1c0>)
 800067a:	801a      	strh	r2, [r3, #0]
				PWM4 += 10;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <main+0x1c4>)
 800067e:	881b      	ldrh	r3, [r3, #0]
 8000680:	330a      	adds	r3, #10
 8000682:	b29a      	uxth	r2, r3
 8000684:	4b16      	ldr	r3, [pc, #88]	; (80006e0 <main+0x1c4>)
 8000686:	801a      	strh	r2, [r3, #0]

				if (PWM3 > 4095)
 8000688:	4b14      	ldr	r3, [pc, #80]	; (80006dc <main+0x1c0>)
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000690:	d303      	bcc.n	800069a <main+0x17e>
					PWM3 = 4095;
 8000692:	4b12      	ldr	r3, [pc, #72]	; (80006dc <main+0x1c0>)
 8000694:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000698:	801a      	strh	r2, [r3, #0]
				if (PWM4 > 4095)
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <main+0x1c4>)
 800069c:	881b      	ldrh	r3, [r3, #0]
 800069e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006a2:	d394      	bcc.n	80005ce <main+0xb2>
					PWM4 = 4095;
 80006a4:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <main+0x1c4>)
 80006a6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80006aa:	801a      	strh	r2, [r3, #0]
 80006ac:	e78f      	b.n	80005ce <main+0xb2>

			}
		}
		else {
			Inverter1(4);
 80006ae:	2004      	movs	r0, #4
 80006b0:	f001 f8ce 	bl	8001850 <Inverter1>
			Inverter2(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f001 fb5b 	bl	8001d70 <Inverter2>
			Inverter3(3);
 80006ba:	2003      	movs	r0, #3
 80006bc:	f001 fa10 	bl	8001ae0 <Inverter3>
		time = HAL_GetTick();
 80006c0:	e785      	b.n	80005ce <main+0xb2>
 80006c2:	bf00      	nop
 80006c4:	20000160 	.word	0x20000160
 80006c8:	200001ac 	.word	0x200001ac
 80006cc:	20000244 	.word	0x20000244
 80006d0:	40012c00 	.word	0x40012c00
 80006d4:	20000000 	.word	0x20000000
 80006d8:	20000290 	.word	0x20000290
 80006dc:	20000292 	.word	0x20000292
 80006e0:	20000294 	.word	0x20000294

080006e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b094      	sub	sp, #80	; 0x50
 80006e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ea:	f107 0318 	add.w	r3, r7, #24
 80006ee:	2238      	movs	r2, #56	; 0x38
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f006 fae0 	bl	8006cb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000706:	2000      	movs	r0, #0
 8000708:	f002 fec4 	bl	8003494 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800070c:	2302      	movs	r3, #2
 800070e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000710:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000716:	2340      	movs	r3, #64	; 0x40
 8000718:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071a:	2302      	movs	r3, #2
 800071c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800071e:	2302      	movs	r3, #2
 8000720:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000722:	2304      	movs	r3, #4
 8000724:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000726:	2355      	movs	r3, #85	; 0x55
 8000728:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800072a:	2302      	movs	r3, #2
 800072c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800072e:	2302      	movs	r3, #2
 8000730:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000732:	2302      	movs	r3, #2
 8000734:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000736:	f107 0318 	add.w	r3, r7, #24
 800073a:	4618      	mov	r0, r3
 800073c:	f002 ff5e 	bl	80035fc <HAL_RCC_OscConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000746:	f001 fdeb 	bl	8002320 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074a:	230f      	movs	r3, #15
 800074c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074e:	2303      	movs	r3, #3
 8000750:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	2104      	movs	r1, #4
 8000762:	4618      	mov	r0, r3
 8000764:	f003 fa62 	bl	8003c2c <HAL_RCC_ClockConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800076e:	f001 fdd7 	bl	8002320 <Error_Handler>
  }
}
 8000772:	bf00      	nop
 8000774:	3750      	adds	r7, #80	; 0x50
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08c      	sub	sp, #48	; 0x30
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000782:	463b      	mov	r3, r7
 8000784:	2230      	movs	r2, #48	; 0x30
 8000786:	2100      	movs	r1, #0
 8000788:	4618      	mov	r0, r3
 800078a:	f006 fa95 	bl	8006cb8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800078e:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <MX_DAC1_Init+0x6c>)
 8000790:	4a16      	ldr	r2, [pc, #88]	; (80007ec <MX_DAC1_Init+0x70>)
 8000792:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000794:	4814      	ldr	r0, [pc, #80]	; (80007e8 <MX_DAC1_Init+0x6c>)
 8000796:	f002 fa1c 	bl	8002bd2 <HAL_DAC_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80007a0:	f001 fdbe 	bl	8002320 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80007a4:	2302      	movs	r3, #2
 80007a6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80007a8:	2300      	movs	r3, #0
 80007aa:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007b4:	2300      	movs	r3, #0
 80007b6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80007b8:	2300      	movs	r3, #0
 80007ba:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80007c0:	2301      	movs	r3, #1
 80007c2:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007c8:	463b      	mov	r3, r7
 80007ca:	2200      	movs	r2, #0
 80007cc:	4619      	mov	r1, r3
 80007ce:	4806      	ldr	r0, [pc, #24]	; (80007e8 <MX_DAC1_Init+0x6c>)
 80007d0:	f002 fa22 	bl	8002c18 <HAL_DAC_ConfigChannel>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80007da:	f001 fda1 	bl	8002320 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	3730      	adds	r7, #48	; 0x30
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	2000002c 	.word	0x2000002c
 80007ec:	50000800 	.word	0x50000800

080007f0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80007f4:	4b20      	ldr	r3, [pc, #128]	; (8000878 <MX_LPUART1_UART_Init+0x88>)
 80007f6:	4a21      	ldr	r2, [pc, #132]	; (800087c <MX_LPUART1_UART_Init+0x8c>)
 80007f8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80007fa:	4b1f      	ldr	r3, [pc, #124]	; (8000878 <MX_LPUART1_UART_Init+0x88>)
 80007fc:	4a20      	ldr	r2, [pc, #128]	; (8000880 <MX_LPUART1_UART_Init+0x90>)
 80007fe:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000800:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <MX_LPUART1_UART_Init+0x88>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000806:	4b1c      	ldr	r3, [pc, #112]	; (8000878 <MX_LPUART1_UART_Init+0x88>)
 8000808:	2200      	movs	r2, #0
 800080a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800080c:	4b1a      	ldr	r3, [pc, #104]	; (8000878 <MX_LPUART1_UART_Init+0x88>)
 800080e:	2200      	movs	r2, #0
 8000810:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000812:	4b19      	ldr	r3, [pc, #100]	; (8000878 <MX_LPUART1_UART_Init+0x88>)
 8000814:	220c      	movs	r2, #12
 8000816:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000818:	4b17      	ldr	r3, [pc, #92]	; (8000878 <MX_LPUART1_UART_Init+0x88>)
 800081a:	2200      	movs	r2, #0
 800081c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081e:	4b16      	ldr	r3, [pc, #88]	; (8000878 <MX_LPUART1_UART_Init+0x88>)
 8000820:	2200      	movs	r2, #0
 8000822:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000824:	4b14      	ldr	r3, [pc, #80]	; (8000878 <MX_LPUART1_UART_Init+0x88>)
 8000826:	2200      	movs	r2, #0
 8000828:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800082a:	4b13      	ldr	r3, [pc, #76]	; (8000878 <MX_LPUART1_UART_Init+0x88>)
 800082c:	2200      	movs	r2, #0
 800082e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000830:	4811      	ldr	r0, [pc, #68]	; (8000878 <MX_LPUART1_UART_Init+0x88>)
 8000832:	f005 f81b 	bl	800586c <HAL_UART_Init>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 800083c:	f001 fd70 	bl	8002320 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000840:	2100      	movs	r1, #0
 8000842:	480d      	ldr	r0, [pc, #52]	; (8000878 <MX_LPUART1_UART_Init+0x88>)
 8000844:	f006 f949 	bl	8006ada <HAL_UARTEx_SetTxFifoThreshold>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 800084e:	f001 fd67 	bl	8002320 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000852:	2100      	movs	r1, #0
 8000854:	4808      	ldr	r0, [pc, #32]	; (8000878 <MX_LPUART1_UART_Init+0x88>)
 8000856:	f006 f97e 	bl	8006b56 <HAL_UARTEx_SetRxFifoThreshold>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000860:	f001 fd5e 	bl	8002320 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000864:	4804      	ldr	r0, [pc, #16]	; (8000878 <MX_LPUART1_UART_Init+0x88>)
 8000866:	f006 f8ff 	bl	8006a68 <HAL_UARTEx_DisableFifoMode>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000870:	f001 fd56 	bl	8002320 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000874:	bf00      	nop
 8000876:	bd80      	pop	{r7, pc}
 8000878:	20000040 	.word	0x20000040
 800087c:	40008000 	.word	0x40008000
 8000880:	00033324 	.word	0x00033324

08000884 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000888:	4b22      	ldr	r3, [pc, #136]	; (8000914 <MX_USART1_UART_Init+0x90>)
 800088a:	4a23      	ldr	r2, [pc, #140]	; (8000918 <MX_USART1_UART_Init+0x94>)
 800088c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800088e:	4b21      	ldr	r3, [pc, #132]	; (8000914 <MX_USART1_UART_Init+0x90>)
 8000890:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000894:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000896:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <MX_USART1_UART_Init+0x90>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800089c:	4b1d      	ldr	r3, [pc, #116]	; (8000914 <MX_USART1_UART_Init+0x90>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008a2:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <MX_USART1_UART_Init+0x90>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008a8:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <MX_USART1_UART_Init+0x90>)
 80008aa:	220c      	movs	r2, #12
 80008ac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ae:	4b19      	ldr	r3, [pc, #100]	; (8000914 <MX_USART1_UART_Init+0x90>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008b4:	4b17      	ldr	r3, [pc, #92]	; (8000914 <MX_USART1_UART_Init+0x90>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ba:	4b16      	ldr	r3, [pc, #88]	; (8000914 <MX_USART1_UART_Init+0x90>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008c0:	4b14      	ldr	r3, [pc, #80]	; (8000914 <MX_USART1_UART_Init+0x90>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008c6:	4b13      	ldr	r3, [pc, #76]	; (8000914 <MX_USART1_UART_Init+0x90>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008cc:	4811      	ldr	r0, [pc, #68]	; (8000914 <MX_USART1_UART_Init+0x90>)
 80008ce:	f004 ffcd 	bl	800586c <HAL_UART_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80008d8:	f001 fd22 	bl	8002320 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008dc:	2100      	movs	r1, #0
 80008de:	480d      	ldr	r0, [pc, #52]	; (8000914 <MX_USART1_UART_Init+0x90>)
 80008e0:	f006 f8fb 	bl	8006ada <HAL_UARTEx_SetTxFifoThreshold>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80008ea:	f001 fd19 	bl	8002320 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ee:	2100      	movs	r1, #0
 80008f0:	4808      	ldr	r0, [pc, #32]	; (8000914 <MX_USART1_UART_Init+0x90>)
 80008f2:	f006 f930 	bl	8006b56 <HAL_UARTEx_SetRxFifoThreshold>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80008fc:	f001 fd10 	bl	8002320 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000900:	4804      	ldr	r0, [pc, #16]	; (8000914 <MX_USART1_UART_Init+0x90>)
 8000902:	f006 f8b1 	bl	8006a68 <HAL_UARTEx_DisableFifoMode>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800090c:	f001 fd08 	bl	8002320 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	200000d0 	.word	0x200000d0
 8000918:	40013800 	.word	0x40013800

0800091c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b098      	sub	sp, #96	; 0x60
 8000920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000922:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800092e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]
 800093e:	615a      	str	r2, [r3, #20]
 8000940:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2234      	movs	r2, #52	; 0x34
 8000946:	2100      	movs	r1, #0
 8000948:	4618      	mov	r0, r3
 800094a:	f006 f9b5 	bl	8006cb8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800094e:	4b4d      	ldr	r3, [pc, #308]	; (8000a84 <MX_TIM1_Init+0x168>)
 8000950:	4a4d      	ldr	r2, [pc, #308]	; (8000a88 <MX_TIM1_Init+0x16c>)
 8000952:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000954:	4b4b      	ldr	r3, [pc, #300]	; (8000a84 <MX_TIM1_Init+0x168>)
 8000956:	2200      	movs	r2, #0
 8000958:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800095a:	4b4a      	ldr	r3, [pc, #296]	; (8000a84 <MX_TIM1_Init+0x168>)
 800095c:	2220      	movs	r2, #32
 800095e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4095;
 8000960:	4b48      	ldr	r3, [pc, #288]	; (8000a84 <MX_TIM1_Init+0x168>)
 8000962:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000966:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000968:	4b46      	ldr	r3, [pc, #280]	; (8000a84 <MX_TIM1_Init+0x168>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800096e:	4b45      	ldr	r3, [pc, #276]	; (8000a84 <MX_TIM1_Init+0x168>)
 8000970:	2200      	movs	r2, #0
 8000972:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000974:	4b43      	ldr	r3, [pc, #268]	; (8000a84 <MX_TIM1_Init+0x168>)
 8000976:	2200      	movs	r2, #0
 8000978:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800097a:	4842      	ldr	r0, [pc, #264]	; (8000a84 <MX_TIM1_Init+0x168>)
 800097c:	f003 fdc0 	bl	8004500 <HAL_TIM_PWM_Init>
 8000980:	4603      	mov	r3, r0
 8000982:	2b00      	cmp	r3, #0
 8000984:	d001      	beq.n	800098a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000986:	f001 fccb 	bl	8002320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800098a:	2300      	movs	r3, #0
 800098c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800098e:	2300      	movs	r3, #0
 8000990:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000992:	2300      	movs	r3, #0
 8000994:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000996:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800099a:	4619      	mov	r1, r3
 800099c:	4839      	ldr	r0, [pc, #228]	; (8000a84 <MX_TIM1_Init+0x168>)
 800099e:	f004 fdd7 	bl	8005550 <HAL_TIMEx_MasterConfigSynchronization>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80009a8:	f001 fcba 	bl	8002320 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ac:	2360      	movs	r3, #96	; 0x60
 80009ae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009b4:	2300      	movs	r3, #0
 80009b6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80009b8:	2300      	movs	r3, #0
 80009ba:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009bc:	2300      	movs	r3, #0
 80009be:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80009c0:	2300      	movs	r3, #0
 80009c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80009c4:	2300      	movs	r3, #0
 80009c6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009cc:	2200      	movs	r2, #0
 80009ce:	4619      	mov	r1, r3
 80009d0:	482c      	ldr	r0, [pc, #176]	; (8000a84 <MX_TIM1_Init+0x168>)
 80009d2:	f004 f87f 	bl	8004ad4 <HAL_TIM_PWM_ConfigChannel>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80009dc:	f001 fca0 	bl	8002320 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009e4:	2204      	movs	r2, #4
 80009e6:	4619      	mov	r1, r3
 80009e8:	4826      	ldr	r0, [pc, #152]	; (8000a84 <MX_TIM1_Init+0x168>)
 80009ea:	f004 f873 	bl	8004ad4 <HAL_TIM_PWM_ConfigChannel>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 80009f4:	f001 fc94 	bl	8002320 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80009fc:	2208      	movs	r2, #8
 80009fe:	4619      	mov	r1, r3
 8000a00:	4820      	ldr	r0, [pc, #128]	; (8000a84 <MX_TIM1_Init+0x168>)
 8000a02:	f004 f867 	bl	8004ad4 <HAL_TIM_PWM_ConfigChannel>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000a0c:	f001 fc88 	bl	8002320 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a10:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a14:	220c      	movs	r2, #12
 8000a16:	4619      	mov	r1, r3
 8000a18:	481a      	ldr	r0, [pc, #104]	; (8000a84 <MX_TIM1_Init+0x168>)
 8000a1a:	f004 f85b 	bl	8004ad4 <HAL_TIM_PWM_ConfigChannel>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000a24:	f001 fc7c 	bl	8002320 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a40:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000a46:	2300      	movs	r3, #0
 8000a48:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a60:	1d3b      	adds	r3, r7, #4
 8000a62:	4619      	mov	r1, r3
 8000a64:	4807      	ldr	r0, [pc, #28]	; (8000a84 <MX_TIM1_Init+0x168>)
 8000a66:	f004 fe09 	bl	800567c <HAL_TIMEx_ConfigBreakDeadTime>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8000a70:	f001 fc56 	bl	8002320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000a74:	4803      	ldr	r0, [pc, #12]	; (8000a84 <MX_TIM1_Init+0x168>)
 8000a76:	f001 fdbb 	bl	80025f0 <HAL_TIM_MspPostInit>

}
 8000a7a:	bf00      	nop
 8000a7c:	3760      	adds	r7, #96	; 0x60
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000160 	.word	0x20000160
 8000a88:	40012c00 	.word	0x40012c00

08000a8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08a      	sub	sp, #40	; 0x28
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]
 8000aac:	615a      	str	r2, [r3, #20]
 8000aae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ab0:	4b32      	ldr	r3, [pc, #200]	; (8000b7c <MX_TIM2_Init+0xf0>)
 8000ab2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ab6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000ab8:	4b30      	ldr	r3, [pc, #192]	; (8000b7c <MX_TIM2_Init+0xf0>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000abe:	4b2f      	ldr	r3, [pc, #188]	; (8000b7c <MX_TIM2_Init+0xf0>)
 8000ac0:	2220      	movs	r2, #32
 8000ac2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4095;
 8000ac4:	4b2d      	ldr	r3, [pc, #180]	; (8000b7c <MX_TIM2_Init+0xf0>)
 8000ac6:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000aca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000acc:	4b2b      	ldr	r3, [pc, #172]	; (8000b7c <MX_TIM2_Init+0xf0>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ad2:	4b2a      	ldr	r3, [pc, #168]	; (8000b7c <MX_TIM2_Init+0xf0>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ad8:	4828      	ldr	r0, [pc, #160]	; (8000b7c <MX_TIM2_Init+0xf0>)
 8000ada:	f003 fd11 	bl	8004500 <HAL_TIM_PWM_Init>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000ae4:	f001 fc1c 	bl	8002320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000af0:	f107 031c 	add.w	r3, r7, #28
 8000af4:	4619      	mov	r1, r3
 8000af6:	4821      	ldr	r0, [pc, #132]	; (8000b7c <MX_TIM2_Init+0xf0>)
 8000af8:	f004 fd2a 	bl	8005550 <HAL_TIMEx_MasterConfigSynchronization>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000b02:	f001 fc0d 	bl	8002320 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b06:	2360      	movs	r3, #96	; 0x60
 8000b08:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b16:	463b      	mov	r3, r7
 8000b18:	2200      	movs	r2, #0
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4817      	ldr	r0, [pc, #92]	; (8000b7c <MX_TIM2_Init+0xf0>)
 8000b1e:	f003 ffd9 	bl	8004ad4 <HAL_TIM_PWM_ConfigChannel>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000b28:	f001 fbfa 	bl	8002320 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b2c:	463b      	mov	r3, r7
 8000b2e:	2204      	movs	r2, #4
 8000b30:	4619      	mov	r1, r3
 8000b32:	4812      	ldr	r0, [pc, #72]	; (8000b7c <MX_TIM2_Init+0xf0>)
 8000b34:	f003 ffce 	bl	8004ad4 <HAL_TIM_PWM_ConfigChannel>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000b3e:	f001 fbef 	bl	8002320 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b42:	463b      	mov	r3, r7
 8000b44:	2208      	movs	r2, #8
 8000b46:	4619      	mov	r1, r3
 8000b48:	480c      	ldr	r0, [pc, #48]	; (8000b7c <MX_TIM2_Init+0xf0>)
 8000b4a:	f003 ffc3 	bl	8004ad4 <HAL_TIM_PWM_ConfigChannel>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000b54:	f001 fbe4 	bl	8002320 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000b58:	463b      	mov	r3, r7
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	4807      	ldr	r0, [pc, #28]	; (8000b7c <MX_TIM2_Init+0xf0>)
 8000b60:	f003 ffb8 	bl	8004ad4 <HAL_TIM_PWM_ConfigChannel>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8000b6a:	f001 fbd9 	bl	8002320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b6e:	4803      	ldr	r0, [pc, #12]	; (8000b7c <MX_TIM2_Init+0xf0>)
 8000b70:	f001 fd3e 	bl	80025f0 <HAL_TIM_MspPostInit>

}
 8000b74:	bf00      	nop
 8000b76:	3728      	adds	r7, #40	; 0x28
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	200001ac 	.word	0x200001ac

08000b80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b86:	f107 031c 	add.w	r3, r7, #28
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b92:	463b      	mov	r3, r7
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
 8000ba0:	615a      	str	r2, [r3, #20]
 8000ba2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ba4:	4b20      	ldr	r3, [pc, #128]	; (8000c28 <MX_TIM3_Init+0xa8>)
 8000ba6:	4a21      	ldr	r2, [pc, #132]	; (8000c2c <MX_TIM3_Init+0xac>)
 8000ba8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5;
 8000baa:	4b1f      	ldr	r3, [pc, #124]	; (8000c28 <MX_TIM3_Init+0xa8>)
 8000bac:	2205      	movs	r2, #5
 8000bae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb0:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <MX_TIM3_Init+0xa8>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000bb6:	4b1c      	ldr	r3, [pc, #112]	; (8000c28 <MX_TIM3_Init+0xa8>)
 8000bb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bbc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bbe:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <MX_TIM3_Init+0xa8>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc4:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <MX_TIM3_Init+0xa8>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000bca:	4817      	ldr	r0, [pc, #92]	; (8000c28 <MX_TIM3_Init+0xa8>)
 8000bcc:	f003 fc98 	bl	8004500 <HAL_TIM_PWM_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000bd6:	f001 fba3 	bl	8002320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bde:	2300      	movs	r3, #0
 8000be0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000be2:	f107 031c 	add.w	r3, r7, #28
 8000be6:	4619      	mov	r1, r3
 8000be8:	480f      	ldr	r0, [pc, #60]	; (8000c28 <MX_TIM3_Init+0xa8>)
 8000bea:	f004 fcb1 	bl	8005550 <HAL_TIMEx_MasterConfigSynchronization>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000bf4:	f001 fb94 	bl	8002320 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bf8:	2360      	movs	r3, #96	; 0x60
 8000bfa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 16000;
 8000bfc:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8000c00:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c02:	2300      	movs	r3, #0
 8000c04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c06:	2300      	movs	r3, #0
 8000c08:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c0a:	463b      	mov	r3, r7
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4805      	ldr	r0, [pc, #20]	; (8000c28 <MX_TIM3_Init+0xa8>)
 8000c12:	f003 ff5f 	bl	8004ad4 <HAL_TIM_PWM_ConfigChannel>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000c1c:	f001 fb80 	bl	8002320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c20:	bf00      	nop
 8000c22:	3728      	adds	r7, #40	; 0x28
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	200001f8 	.word	0x200001f8
 8000c2c:	40000400 	.word	0x40000400

08000c30 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b098      	sub	sp, #96	; 0x60
 8000c34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c36:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c42:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
 8000c50:	611a      	str	r2, [r3, #16]
 8000c52:	615a      	str	r2, [r3, #20]
 8000c54:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2234      	movs	r2, #52	; 0x34
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f006 f82b 	bl	8006cb8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000c62:	4b4d      	ldr	r3, [pc, #308]	; (8000d98 <MX_TIM8_Init+0x168>)
 8000c64:	4a4d      	ldr	r2, [pc, #308]	; (8000d9c <MX_TIM8_Init+0x16c>)
 8000c66:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000c68:	4b4b      	ldr	r3, [pc, #300]	; (8000d98 <MX_TIM8_Init+0x168>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000c6e:	4b4a      	ldr	r3, [pc, #296]	; (8000d98 <MX_TIM8_Init+0x168>)
 8000c70:	2220      	movs	r2, #32
 8000c72:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 4095;
 8000c74:	4b48      	ldr	r3, [pc, #288]	; (8000d98 <MX_TIM8_Init+0x168>)
 8000c76:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000c7a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7c:	4b46      	ldr	r3, [pc, #280]	; (8000d98 <MX_TIM8_Init+0x168>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000c82:	4b45      	ldr	r3, [pc, #276]	; (8000d98 <MX_TIM8_Init+0x168>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c88:	4b43      	ldr	r3, [pc, #268]	; (8000d98 <MX_TIM8_Init+0x168>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000c8e:	4842      	ldr	r0, [pc, #264]	; (8000d98 <MX_TIM8_Init+0x168>)
 8000c90:	f003 fc36 	bl	8004500 <HAL_TIM_PWM_Init>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000c9a:	f001 fb41 	bl	8002320 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000caa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4839      	ldr	r0, [pc, #228]	; (8000d98 <MX_TIM8_Init+0x168>)
 8000cb2:	f004 fc4d 	bl	8005550 <HAL_TIMEx_MasterConfigSynchronization>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000cbc:	f001 fb30 	bl	8002320 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cc0:	2360      	movs	r3, #96	; 0x60
 8000cc2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cdc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	482c      	ldr	r0, [pc, #176]	; (8000d98 <MX_TIM8_Init+0x168>)
 8000ce6:	f003 fef5 	bl	8004ad4 <HAL_TIM_PWM_ConfigChannel>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000cf0:	f001 fb16 	bl	8002320 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cf4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000cf8:	2204      	movs	r2, #4
 8000cfa:	4619      	mov	r1, r3
 8000cfc:	4826      	ldr	r0, [pc, #152]	; (8000d98 <MX_TIM8_Init+0x168>)
 8000cfe:	f003 fee9 	bl	8004ad4 <HAL_TIM_PWM_ConfigChannel>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8000d08:	f001 fb0a 	bl	8002320 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d0c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d10:	2208      	movs	r2, #8
 8000d12:	4619      	mov	r1, r3
 8000d14:	4820      	ldr	r0, [pc, #128]	; (8000d98 <MX_TIM8_Init+0x168>)
 8000d16:	f003 fedd 	bl	8004ad4 <HAL_TIM_PWM_ConfigChannel>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8000d20:	f001 fafe 	bl	8002320 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d24:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000d28:	220c      	movs	r2, #12
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	481a      	ldr	r0, [pc, #104]	; (8000d98 <MX_TIM8_Init+0x168>)
 8000d2e:	f003 fed1 	bl	8004ad4 <HAL_TIM_PWM_ConfigChannel>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM8_Init+0x10c>
  {
    Error_Handler();
 8000d38:	f001 faf2 	bl	8002320 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d44:	2300      	movs	r3, #0
 8000d46:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d54:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000d62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d66:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d70:	2300      	movs	r3, #0
 8000d72:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	4619      	mov	r1, r3
 8000d78:	4807      	ldr	r0, [pc, #28]	; (8000d98 <MX_TIM8_Init+0x168>)
 8000d7a:	f004 fc7f 	bl	800567c <HAL_TIMEx_ConfigBreakDeadTime>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM8_Init+0x158>
  {
    Error_Handler();
 8000d84:	f001 facc 	bl	8002320 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000d88:	4803      	ldr	r0, [pc, #12]	; (8000d98 <MX_TIM8_Init+0x168>)
 8000d8a:	f001 fc31 	bl	80025f0 <HAL_TIM_MspPostInit>

}
 8000d8e:	bf00      	nop
 8000d90:	3760      	adds	r7, #96	; 0x60
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	20000244 	.word	0x20000244
 8000d9c:	40013400 	.word	0x40013400

08000da0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08a      	sub	sp, #40	; 0x28
 8000da4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da6:	f107 0314 	add.w	r3, r7, #20
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
 8000db4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db6:	4b47      	ldr	r3, [pc, #284]	; (8000ed4 <MX_GPIO_Init+0x134>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dba:	4a46      	ldr	r2, [pc, #280]	; (8000ed4 <MX_GPIO_Init+0x134>)
 8000dbc:	f043 0304 	orr.w	r3, r3, #4
 8000dc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc2:	4b44      	ldr	r3, [pc, #272]	; (8000ed4 <MX_GPIO_Init+0x134>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc6:	f003 0304 	and.w	r3, r3, #4
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dce:	4b41      	ldr	r3, [pc, #260]	; (8000ed4 <MX_GPIO_Init+0x134>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd2:	4a40      	ldr	r2, [pc, #256]	; (8000ed4 <MX_GPIO_Init+0x134>)
 8000dd4:	f043 0320 	orr.w	r3, r3, #32
 8000dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dda:	4b3e      	ldr	r3, [pc, #248]	; (8000ed4 <MX_GPIO_Init+0x134>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	f003 0320 	and.w	r3, r3, #32
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de6:	4b3b      	ldr	r3, [pc, #236]	; (8000ed4 <MX_GPIO_Init+0x134>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dea:	4a3a      	ldr	r2, [pc, #232]	; (8000ed4 <MX_GPIO_Init+0x134>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df2:	4b38      	ldr	r3, [pc, #224]	; (8000ed4 <MX_GPIO_Init+0x134>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dfe:	4b35      	ldr	r3, [pc, #212]	; (8000ed4 <MX_GPIO_Init+0x134>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	4a34      	ldr	r2, [pc, #208]	; (8000ed4 <MX_GPIO_Init+0x134>)
 8000e04:	f043 0302 	orr.w	r3, r3, #2
 8000e08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0a:	4b32      	ldr	r3, [pc, #200]	; (8000ed4 <MX_GPIO_Init+0x134>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0e:	f003 0302 	and.w	r3, r3, #2
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SD_A_3_Pin|SD_B_3_Pin|SD_C_3_Pin|SD_A_4_Pin
 8000e16:	2200      	movs	r2, #0
 8000e18:	f44f 51cf 	mov.w	r1, #6624	; 0x19e0
 8000e1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e20:	f002 fafc 	bl	800341c <HAL_GPIO_WritePin>
                          |SD_B_4_Pin|SD_C_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_B_1_Pin|SD_C_1_Pin|SD_A_1_Pin|Toggle_pin_Pin
 8000e24:	2200      	movs	r2, #0
 8000e26:	f24e 4107 	movw	r1, #58375	; 0xe407
 8000e2a:	482b      	ldr	r0, [pc, #172]	; (8000ed8 <MX_GPIO_Init+0x138>)
 8000e2c:	f002 faf6 	bl	800341c <HAL_GPIO_WritePin>
                          |SD_A_2_Pin|SD_B_2_Pin|SD_C_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e36:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e40:	f107 0314 	add.w	r3, r7, #20
 8000e44:	4619      	mov	r1, r3
 8000e46:	4825      	ldr	r0, [pc, #148]	; (8000edc <MX_GPIO_Init+0x13c>)
 8000e48:	f002 f94e 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_A_3_Pin SD_B_3_Pin SD_C_3_Pin SD_A_4_Pin
                           SD_B_4_Pin SD_C_4_Pin */
  GPIO_InitStruct.Pin = SD_A_3_Pin|SD_B_3_Pin|SD_C_3_Pin|SD_A_4_Pin
 8000e4c:	f44f 53cf 	mov.w	r3, #6624	; 0x19e0
 8000e50:	617b      	str	r3, [r7, #20]
                          |SD_B_4_Pin|SD_C_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e52:	2301      	movs	r3, #1
 8000e54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e68:	f002 f93e 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_B_1_Pin SD_C_1_Pin SD_A_1_Pin Toggle_pin_Pin
                           SD_A_2_Pin SD_B_2_Pin SD_C_2_Pin */
  GPIO_InitStruct.Pin = SD_B_1_Pin|SD_C_1_Pin|SD_A_1_Pin|Toggle_pin_Pin
 8000e6c:	f24e 4307 	movw	r3, #58375	; 0xe407
 8000e70:	617b      	str	r3, [r7, #20]
                          |SD_A_2_Pin|SD_B_2_Pin|SD_C_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e72:	2301      	movs	r3, #1
 8000e74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	2300      	movs	r3, #0
 8000e78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7e:	f107 0314 	add.w	r3, r7, #20
 8000e82:	4619      	mov	r1, r3
 8000e84:	4814      	ldr	r0, [pc, #80]	; (8000ed8 <MX_GPIO_Init+0x138>)
 8000e86:	f002 f92f 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HS4_Pin HS5_Pin HS6_Pin */
  GPIO_InitStruct.Pin = HS4_Pin|HS5_Pin|HS6_Pin;
 8000e8a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000e8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e90:	2300      	movs	r3, #0
 8000e92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e94:	2302      	movs	r3, #2
 8000e96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	480f      	ldr	r0, [pc, #60]	; (8000edc <MX_GPIO_Init+0x13c>)
 8000ea0:	f002 f922 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HS1_Pin HS2_Pin HS3_Pin */
  GPIO_InitStruct.Pin = HS1_Pin|HS2_Pin|HS3_Pin;
 8000ea4:	2370      	movs	r3, #112	; 0x70
 8000ea6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000eac:	2302      	movs	r3, #2
 8000eae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4808      	ldr	r0, [pc, #32]	; (8000ed8 <MX_GPIO_Init+0x138>)
 8000eb8:	f002 f916 	bl	80030e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	2028      	movs	r0, #40	; 0x28
 8000ec2:	f001 fe52 	bl	8002b6a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ec6:	2028      	movs	r0, #40	; 0x28
 8000ec8:	f001 fe69 	bl	8002b9e <HAL_NVIC_EnableIRQ>

}
 8000ecc:	bf00      	nop
 8000ece:	3728      	adds	r7, #40	; 0x28
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	48000400 	.word	0x48000400
 8000edc:	48000800 	.word	0x48000800

08000ee0 <state0_inv1>:

//void HAL_TIM_PWM_PulseFinishedCallback (TIM_HandleTypeDef * htim){
//HAL_GPIO_TogglePin (GPIOB, Toggle_pin_Pin);
//}

void state0_inv1() {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0

	IN_A_1 = 0;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <state0_inv1+0x38>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_1;
 8000eea:	2201      	movs	r2, #1
 8000eec:	2104      	movs	r1, #4
 8000eee:	480b      	ldr	r0, [pc, #44]	; (8000f1c <state0_inv1+0x3c>)
 8000ef0:	f002 fa94 	bl	800341c <HAL_GPIO_WritePin>

	IN_B_1 = 0;
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <state0_inv1+0x38>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_1;
 8000efa:	2201      	movs	r2, #1
 8000efc:	2101      	movs	r1, #1
 8000efe:	4807      	ldr	r0, [pc, #28]	; (8000f1c <state0_inv1+0x3c>)
 8000f00:	f002 fa8c 	bl	800341c <HAL_GPIO_WritePin>

	IN_C_1 = 0;
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <state0_inv1+0x38>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_1;
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	2102      	movs	r1, #2
 8000f0e:	4803      	ldr	r0, [pc, #12]	; (8000f1c <state0_inv1+0x3c>)
 8000f10:	f002 fa84 	bl	800341c <HAL_GPIO_WritePin>

}
 8000f14:	bf00      	nop
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	40012c00 	.word	0x40012c00
 8000f1c:	48000400 	.word	0x48000400

08000f20 <state1_inv1>:

void state1_inv1() {
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0

	IN_A_1 = 0;
 8000f24:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <state1_inv1+0x3c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	635a      	str	r2, [r3, #52]	; 0x34
	RESET_SD_A_1;
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2104      	movs	r1, #4
 8000f2e:	480c      	ldr	r0, [pc, #48]	; (8000f60 <state1_inv1+0x40>)
 8000f30:	f002 fa74 	bl	800341c <HAL_GPIO_WritePin>

	IN_B_1 = PWM1;
 8000f34:	4b0b      	ldr	r3, [pc, #44]	; (8000f64 <state1_inv1+0x44>)
 8000f36:	881b      	ldrh	r3, [r3, #0]
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <state1_inv1+0x3c>)
 8000f3c:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_1;
 8000f3e:	2201      	movs	r2, #1
 8000f40:	2101      	movs	r1, #1
 8000f42:	4807      	ldr	r0, [pc, #28]	; (8000f60 <state1_inv1+0x40>)
 8000f44:	f002 fa6a 	bl	800341c <HAL_GPIO_WritePin>

	IN_C_1 = 0;
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <state1_inv1+0x3c>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_1;
 8000f4e:	2201      	movs	r2, #1
 8000f50:	2102      	movs	r1, #2
 8000f52:	4803      	ldr	r0, [pc, #12]	; (8000f60 <state1_inv1+0x40>)
 8000f54:	f002 fa62 	bl	800341c <HAL_GPIO_WritePin>
//		TIM1->CCR2 = PWM1;
//		TIM1->CCR3 = PWM1;
//    	HAL_GPIO_WritePin(GPIOB, SD_A_1_Pin, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(GPIOB, SD_B_1_Pin, GPIO_PIN_SET);
//		HAL_GPIO_WritePin(GPIOB, SD_C_1_Pin, GPIO_PIN_RESET);
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40012c00 	.word	0x40012c00
 8000f60:	48000400 	.word	0x48000400
 8000f64:	20000000 	.word	0x20000000

08000f68 <state2_inv1>:
void state2_inv1() {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0

	IN_A_1 = PWM1;
 8000f6c:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <state2_inv1+0x3c>)
 8000f6e:	881b      	ldrh	r3, [r3, #0]
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	4b0d      	ldr	r3, [pc, #52]	; (8000fa8 <state2_inv1+0x40>)
 8000f74:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_1;
 8000f76:	2201      	movs	r2, #1
 8000f78:	2104      	movs	r1, #4
 8000f7a:	480c      	ldr	r0, [pc, #48]	; (8000fac <state2_inv1+0x44>)
 8000f7c:	f002 fa4e 	bl	800341c <HAL_GPIO_WritePin>

	IN_B_1 = 0;
 8000f80:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <state2_inv1+0x40>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	639a      	str	r2, [r3, #56]	; 0x38
	RESET_SD_B_1;
 8000f86:	2200      	movs	r2, #0
 8000f88:	2101      	movs	r1, #1
 8000f8a:	4808      	ldr	r0, [pc, #32]	; (8000fac <state2_inv1+0x44>)
 8000f8c:	f002 fa46 	bl	800341c <HAL_GPIO_WritePin>

	IN_C_1 = 0;
 8000f90:	4b05      	ldr	r3, [pc, #20]	; (8000fa8 <state2_inv1+0x40>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_1;
 8000f96:	2201      	movs	r2, #1
 8000f98:	2102      	movs	r1, #2
 8000f9a:	4804      	ldr	r0, [pc, #16]	; (8000fac <state2_inv1+0x44>)
 8000f9c:	f002 fa3e 	bl	800341c <HAL_GPIO_WritePin>
//		TIM1->CCR2 = 0;
//		TIM1->CCR3 = PWM1;
//    	HAL_GPIO_WritePin(GPIOB, SD_A_1_Pin, GPIO_PIN_SET);
//		HAL_GPIO_WritePin(GPIOB, SD_B_1_Pin, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(GPIOB, SD_C_1_Pin, GPIO_PIN_RESET);
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	40012c00 	.word	0x40012c00
 8000fac:	48000400 	.word	0x48000400

08000fb0 <state3_inv1>:

void state3_inv1() {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0

	IN_A_1 = PWM1;
 8000fb4:	4b0d      	ldr	r3, [pc, #52]	; (8000fec <state3_inv1+0x3c>)
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	b29a      	uxth	r2, r3
 8000fba:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <state3_inv1+0x40>)
 8000fbc:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_1;
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	2104      	movs	r1, #4
 8000fc2:	480c      	ldr	r0, [pc, #48]	; (8000ff4 <state3_inv1+0x44>)
 8000fc4:	f002 fa2a 	bl	800341c <HAL_GPIO_WritePin>

	IN_B_1 = 0;
 8000fc8:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <state3_inv1+0x40>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_1;
 8000fce:	2201      	movs	r2, #1
 8000fd0:	2101      	movs	r1, #1
 8000fd2:	4808      	ldr	r0, [pc, #32]	; (8000ff4 <state3_inv1+0x44>)
 8000fd4:	f002 fa22 	bl	800341c <HAL_GPIO_WritePin>

	IN_C_1 = 0;
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <state3_inv1+0x40>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	63da      	str	r2, [r3, #60]	; 0x3c
	RESET_SD_C_1;
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2102      	movs	r1, #2
 8000fe2:	4804      	ldr	r0, [pc, #16]	; (8000ff4 <state3_inv1+0x44>)
 8000fe4:	f002 fa1a 	bl	800341c <HAL_GPIO_WritePin>
//		TIM1->CCR2 = PWM1;
//		TIM1->CCR3 = 0;
//    	HAL_GPIO_WritePin(GPIOB, SD_A_1_Pin, GPIO_PIN_SET);
//		HAL_GPIO_WritePin(GPIOB, SD_B_1_Pin, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(GPIOB, SD_C_1_Pin, GPIO_PIN_RESET);
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	40012c00 	.word	0x40012c00
 8000ff4:	48000400 	.word	0x48000400

08000ff8 <state4_inv1>:

void state4_inv1() {
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0

	IN_A_1 = 0;
 8000ffc:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <state4_inv1+0x3c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	635a      	str	r2, [r3, #52]	; 0x34
	RESET_SD_A_1;
 8001002:	2200      	movs	r2, #0
 8001004:	2104      	movs	r1, #4
 8001006:	480c      	ldr	r0, [pc, #48]	; (8001038 <state4_inv1+0x40>)
 8001008:	f002 fa08 	bl	800341c <HAL_GPIO_WritePin>

	IN_B_1 = 0;
 800100c:	4b09      	ldr	r3, [pc, #36]	; (8001034 <state4_inv1+0x3c>)
 800100e:	2200      	movs	r2, #0
 8001010:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_1;
 8001012:	2201      	movs	r2, #1
 8001014:	2101      	movs	r1, #1
 8001016:	4808      	ldr	r0, [pc, #32]	; (8001038 <state4_inv1+0x40>)
 8001018:	f002 fa00 	bl	800341c <HAL_GPIO_WritePin>

	IN_C_1 = PWM1;
 800101c:	4b07      	ldr	r3, [pc, #28]	; (800103c <state4_inv1+0x44>)
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	b29a      	uxth	r2, r3
 8001022:	4b04      	ldr	r3, [pc, #16]	; (8001034 <state4_inv1+0x3c>)
 8001024:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_1;
 8001026:	2201      	movs	r2, #1
 8001028:	2102      	movs	r1, #2
 800102a:	4803      	ldr	r0, [pc, #12]	; (8001038 <state4_inv1+0x40>)
 800102c:	f002 f9f6 	bl	800341c <HAL_GPIO_WritePin>
//		TIM1->CCR2 = PWM1;
//		TIM1->CCR3 = PWM1;
//    	HAL_GPIO_WritePin(GPIOB, SD_A_1_Pin, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(GPIOB, SD_B_1_Pin, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(GPIOB, SD_C_1_Pin, GPIO_PIN_SET);
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40012c00 	.word	0x40012c00
 8001038:	48000400 	.word	0x48000400
 800103c:	20000000 	.word	0x20000000

08001040 <state5_inv1>:

void state5_inv1() {
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0

	IN_A_1 = 0;
 8001044:	4b0d      	ldr	r3, [pc, #52]	; (800107c <state5_inv1+0x3c>)
 8001046:	2200      	movs	r2, #0
 8001048:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_1;
 800104a:	2201      	movs	r2, #1
 800104c:	2104      	movs	r1, #4
 800104e:	480c      	ldr	r0, [pc, #48]	; (8001080 <state5_inv1+0x40>)
 8001050:	f002 f9e4 	bl	800341c <HAL_GPIO_WritePin>

	IN_B_1 = 0;
 8001054:	4b09      	ldr	r3, [pc, #36]	; (800107c <state5_inv1+0x3c>)
 8001056:	2200      	movs	r2, #0
 8001058:	639a      	str	r2, [r3, #56]	; 0x38
	RESET_SD_B_1;
 800105a:	2200      	movs	r2, #0
 800105c:	2101      	movs	r1, #1
 800105e:	4808      	ldr	r0, [pc, #32]	; (8001080 <state5_inv1+0x40>)
 8001060:	f002 f9dc 	bl	800341c <HAL_GPIO_WritePin>

	IN_C_1 = PWM1;
 8001064:	4b07      	ldr	r3, [pc, #28]	; (8001084 <state5_inv1+0x44>)
 8001066:	881b      	ldrh	r3, [r3, #0]
 8001068:	b29a      	uxth	r2, r3
 800106a:	4b04      	ldr	r3, [pc, #16]	; (800107c <state5_inv1+0x3c>)
 800106c:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_1;
 800106e:	2201      	movs	r2, #1
 8001070:	2102      	movs	r1, #2
 8001072:	4803      	ldr	r0, [pc, #12]	; (8001080 <state5_inv1+0x40>)
 8001074:	f002 f9d2 	bl	800341c <HAL_GPIO_WritePin>
//	TIM1->CCR2 = 0;
//	TIM1->CCR3 = PWM1;
//	HAL_GPIO_WritePin(GPIOB, SD_A_1_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(GPIOB, SD_B_1_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(GPIOB, SD_C_1_Pin, GPIO_PIN_SET);
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40012c00 	.word	0x40012c00
 8001080:	48000400 	.word	0x48000400
 8001084:	20000000 	.word	0x20000000

08001088 <state6_inv1>:

void state6_inv1() {
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0

	IN_A_1 = 0;
 800108c:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <state6_inv1+0x3c>)
 800108e:	2200      	movs	r2, #0
 8001090:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_1;
 8001092:	2201      	movs	r2, #1
 8001094:	2104      	movs	r1, #4
 8001096:	480c      	ldr	r0, [pc, #48]	; (80010c8 <state6_inv1+0x40>)
 8001098:	f002 f9c0 	bl	800341c <HAL_GPIO_WritePin>

	IN_B_1 = PWM1;
 800109c:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <state6_inv1+0x44>)
 800109e:	881b      	ldrh	r3, [r3, #0]
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <state6_inv1+0x3c>)
 80010a4:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_1;
 80010a6:	2201      	movs	r2, #1
 80010a8:	2101      	movs	r1, #1
 80010aa:	4807      	ldr	r0, [pc, #28]	; (80010c8 <state6_inv1+0x40>)
 80010ac:	f002 f9b6 	bl	800341c <HAL_GPIO_WritePin>

	IN_C_1 = 0;
 80010b0:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <state6_inv1+0x3c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	63da      	str	r2, [r3, #60]	; 0x3c
	RESET_SD_C_1;
 80010b6:	2200      	movs	r2, #0
 80010b8:	2102      	movs	r1, #2
 80010ba:	4803      	ldr	r0, [pc, #12]	; (80010c8 <state6_inv1+0x40>)
 80010bc:	f002 f9ae 	bl	800341c <HAL_GPIO_WritePin>
//		TIM1->CCR2 = PWM1;
//		TIM1->CCR3 = 0;
//    	HAL_GPIO_WritePin(GPIOB, SD_A_1_Pin, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(GPIOB, SD_B_1_Pin, GPIO_PIN_SET);
//		HAL_GPIO_WritePin(GPIOB, SD_C_1_Pin, GPIO_PIN_RESET);
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40012c00 	.word	0x40012c00
 80010c8:	48000400 	.word	0x48000400
 80010cc:	20000000 	.word	0x20000000

080010d0 <stateOff_inv1>:

void stateOff_inv1() {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0

	IN_A_1 = 0;
 80010d4:	4b0c      	ldr	r3, [pc, #48]	; (8001108 <stateOff_inv1+0x38>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	635a      	str	r2, [r3, #52]	; 0x34
	RESET_SD_A_1;
 80010da:	2200      	movs	r2, #0
 80010dc:	2104      	movs	r1, #4
 80010de:	480b      	ldr	r0, [pc, #44]	; (800110c <stateOff_inv1+0x3c>)
 80010e0:	f002 f99c 	bl	800341c <HAL_GPIO_WritePin>


	IN_B_1 = 0;
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <stateOff_inv1+0x38>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	639a      	str	r2, [r3, #56]	; 0x38
	RESET_SD_B_1;
 80010ea:	2200      	movs	r2, #0
 80010ec:	2101      	movs	r1, #1
 80010ee:	4807      	ldr	r0, [pc, #28]	; (800110c <stateOff_inv1+0x3c>)
 80010f0:	f002 f994 	bl	800341c <HAL_GPIO_WritePin>


	IN_C_1 = 0;
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <stateOff_inv1+0x38>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	63da      	str	r2, [r3, #60]	; 0x3c
	RESET_SD_C_1;
 80010fa:	2200      	movs	r2, #0
 80010fc:	2102      	movs	r1, #2
 80010fe:	4803      	ldr	r0, [pc, #12]	; (800110c <stateOff_inv1+0x3c>)
 8001100:	f002 f98c 	bl	800341c <HAL_GPIO_WritePin>

}
 8001104:	bf00      	nop
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40012c00 	.word	0x40012c00
 800110c:	48000400 	.word	0x48000400

08001110 <state0_inv2>:


//Inverter 2
void state0_inv2() {
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
	IN_A_2 = 0;
 8001114:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <state0_inv2+0x40>)
 8001116:	2200      	movs	r2, #0
 8001118:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_2;
 800111a:	2201      	movs	r2, #1
 800111c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001120:	480c      	ldr	r0, [pc, #48]	; (8001154 <state0_inv2+0x44>)
 8001122:	f002 f97b 	bl	800341c <HAL_GPIO_WritePin>

	IN_B_2 = 0;
 8001126:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <state0_inv2+0x40>)
 8001128:	2200      	movs	r2, #0
 800112a:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_2;
 800112c:	2201      	movs	r2, #1
 800112e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001132:	4808      	ldr	r0, [pc, #32]	; (8001154 <state0_inv2+0x44>)
 8001134:	f002 f972 	bl	800341c <HAL_GPIO_WritePin>

	IN_C_2 = 0;
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <state0_inv2+0x40>)
 800113a:	2200      	movs	r2, #0
 800113c:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_2;
 800113e:	2201      	movs	r2, #1
 8001140:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001144:	4803      	ldr	r0, [pc, #12]	; (8001154 <state0_inv2+0x44>)
 8001146:	f002 f969 	bl	800341c <HAL_GPIO_WritePin>
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40013400 	.word	0x40013400
 8001154:	48000400 	.word	0x48000400

08001158 <state1_inv2>:


void state1_inv2() {
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	IN_A_2 = 0;
 800115c:	4b0e      	ldr	r3, [pc, #56]	; (8001198 <state1_inv2+0x40>)
 800115e:	2200      	movs	r2, #0
 8001160:	635a      	str	r2, [r3, #52]	; 0x34
	RESET_SD_A_2;
 8001162:	2200      	movs	r2, #0
 8001164:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001168:	480c      	ldr	r0, [pc, #48]	; (800119c <state1_inv2+0x44>)
 800116a:	f002 f957 	bl	800341c <HAL_GPIO_WritePin>

	IN_B_2 = PWM2;
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <state1_inv2+0x48>)
 8001170:	881a      	ldrh	r2, [r3, #0]
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <state1_inv2+0x40>)
 8001174:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_2;
 8001176:	2201      	movs	r2, #1
 8001178:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800117c:	4807      	ldr	r0, [pc, #28]	; (800119c <state1_inv2+0x44>)
 800117e:	f002 f94d 	bl	800341c <HAL_GPIO_WritePin>

	IN_C_2 = 0;
 8001182:	4b05      	ldr	r3, [pc, #20]	; (8001198 <state1_inv2+0x40>)
 8001184:	2200      	movs	r2, #0
 8001186:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_2;
 8001188:	2201      	movs	r2, #1
 800118a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800118e:	4803      	ldr	r0, [pc, #12]	; (800119c <state1_inv2+0x44>)
 8001190:	f002 f944 	bl	800341c <HAL_GPIO_WritePin>
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}
 8001198:	40013400 	.word	0x40013400
 800119c:	48000400 	.word	0x48000400
 80011a0:	20000290 	.word	0x20000290

080011a4 <state2_inv2>:
void state2_inv2() {
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
	IN_A_2 = PWM2;
 80011a8:	4b0e      	ldr	r3, [pc, #56]	; (80011e4 <state2_inv2+0x40>)
 80011aa:	881a      	ldrh	r2, [r3, #0]
 80011ac:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <state2_inv2+0x44>)
 80011ae:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_2;
 80011b0:	2201      	movs	r2, #1
 80011b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011b6:	480d      	ldr	r0, [pc, #52]	; (80011ec <state2_inv2+0x48>)
 80011b8:	f002 f930 	bl	800341c <HAL_GPIO_WritePin>

	IN_B_2 = 0;
 80011bc:	4b0a      	ldr	r3, [pc, #40]	; (80011e8 <state2_inv2+0x44>)
 80011be:	2200      	movs	r2, #0
 80011c0:	639a      	str	r2, [r3, #56]	; 0x38
	RESET_SD_B_2;
 80011c2:	2200      	movs	r2, #0
 80011c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80011c8:	4808      	ldr	r0, [pc, #32]	; (80011ec <state2_inv2+0x48>)
 80011ca:	f002 f927 	bl	800341c <HAL_GPIO_WritePin>

	IN_C_2 = 0;
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <state2_inv2+0x44>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_2;
 80011d4:	2201      	movs	r2, #1
 80011d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011da:	4804      	ldr	r0, [pc, #16]	; (80011ec <state2_inv2+0x48>)
 80011dc:	f002 f91e 	bl	800341c <HAL_GPIO_WritePin>
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	20000290 	.word	0x20000290
 80011e8:	40013400 	.word	0x40013400
 80011ec:	48000400 	.word	0x48000400

080011f0 <state3_inv2>:
void state3_inv2() {
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	IN_A_2 = PWM2;
 80011f4:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <state3_inv2+0x40>)
 80011f6:	881a      	ldrh	r2, [r3, #0]
 80011f8:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <state3_inv2+0x44>)
 80011fa:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_2;
 80011fc:	2201      	movs	r2, #1
 80011fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001202:	480d      	ldr	r0, [pc, #52]	; (8001238 <state3_inv2+0x48>)
 8001204:	f002 f90a 	bl	800341c <HAL_GPIO_WritePin>

	IN_B_2 = 0;
 8001208:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <state3_inv2+0x44>)
 800120a:	2200      	movs	r2, #0
 800120c:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_2;
 800120e:	2201      	movs	r2, #1
 8001210:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001214:	4808      	ldr	r0, [pc, #32]	; (8001238 <state3_inv2+0x48>)
 8001216:	f002 f901 	bl	800341c <HAL_GPIO_WritePin>

	IN_C_2 = 0;
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <state3_inv2+0x44>)
 800121c:	2200      	movs	r2, #0
 800121e:	63da      	str	r2, [r3, #60]	; 0x3c
	RESET_SD_C_2;
 8001220:	2200      	movs	r2, #0
 8001222:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001226:	4804      	ldr	r0, [pc, #16]	; (8001238 <state3_inv2+0x48>)
 8001228:	f002 f8f8 	bl	800341c <HAL_GPIO_WritePin>
}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}
 8001230:	20000290 	.word	0x20000290
 8001234:	40013400 	.word	0x40013400
 8001238:	48000400 	.word	0x48000400

0800123c <state4_inv2>:
void state4_inv2() {
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
	IN_A_2 = 0;
 8001240:	4b0e      	ldr	r3, [pc, #56]	; (800127c <state4_inv2+0x40>)
 8001242:	2200      	movs	r2, #0
 8001244:	635a      	str	r2, [r3, #52]	; 0x34
	RESET_SD_A_2;
 8001246:	2200      	movs	r2, #0
 8001248:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800124c:	480c      	ldr	r0, [pc, #48]	; (8001280 <state4_inv2+0x44>)
 800124e:	f002 f8e5 	bl	800341c <HAL_GPIO_WritePin>

	IN_B_2 = 0;
 8001252:	4b0a      	ldr	r3, [pc, #40]	; (800127c <state4_inv2+0x40>)
 8001254:	2200      	movs	r2, #0
 8001256:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_2;
 8001258:	2201      	movs	r2, #1
 800125a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800125e:	4808      	ldr	r0, [pc, #32]	; (8001280 <state4_inv2+0x44>)
 8001260:	f002 f8dc 	bl	800341c <HAL_GPIO_WritePin>

	IN_C_2 = PWM2;
 8001264:	4b07      	ldr	r3, [pc, #28]	; (8001284 <state4_inv2+0x48>)
 8001266:	881a      	ldrh	r2, [r3, #0]
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <state4_inv2+0x40>)
 800126a:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_2;
 800126c:	2201      	movs	r2, #1
 800126e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001272:	4803      	ldr	r0, [pc, #12]	; (8001280 <state4_inv2+0x44>)
 8001274:	f002 f8d2 	bl	800341c <HAL_GPIO_WritePin>
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40013400 	.word	0x40013400
 8001280:	48000400 	.word	0x48000400
 8001284:	20000290 	.word	0x20000290

08001288 <state5_inv2>:
void state5_inv2() {
 8001288:	b580      	push	{r7, lr}
 800128a:	af00      	add	r7, sp, #0
	IN_A_2 = 0;
 800128c:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <state5_inv2+0x40>)
 800128e:	2200      	movs	r2, #0
 8001290:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_2;
 8001292:	2201      	movs	r2, #1
 8001294:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001298:	480c      	ldr	r0, [pc, #48]	; (80012cc <state5_inv2+0x44>)
 800129a:	f002 f8bf 	bl	800341c <HAL_GPIO_WritePin>

	IN_B_2 = 0;
 800129e:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <state5_inv2+0x40>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	639a      	str	r2, [r3, #56]	; 0x38
	RESET_SD_B_2;
 80012a4:	2200      	movs	r2, #0
 80012a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012aa:	4808      	ldr	r0, [pc, #32]	; (80012cc <state5_inv2+0x44>)
 80012ac:	f002 f8b6 	bl	800341c <HAL_GPIO_WritePin>

	IN_C_2 = PWM2;
 80012b0:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <state5_inv2+0x48>)
 80012b2:	881a      	ldrh	r2, [r3, #0]
 80012b4:	4b04      	ldr	r3, [pc, #16]	; (80012c8 <state5_inv2+0x40>)
 80012b6:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_2;
 80012b8:	2201      	movs	r2, #1
 80012ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012be:	4803      	ldr	r0, [pc, #12]	; (80012cc <state5_inv2+0x44>)
 80012c0:	f002 f8ac 	bl	800341c <HAL_GPIO_WritePin>
}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40013400 	.word	0x40013400
 80012cc:	48000400 	.word	0x48000400
 80012d0:	20000290 	.word	0x20000290

080012d4 <state6_inv2>:
void state6_inv2() {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
	IN_A_2 = 0;
 80012d8:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <state6_inv2+0x40>)
 80012da:	2200      	movs	r2, #0
 80012dc:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_2;
 80012de:	2201      	movs	r2, #1
 80012e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012e4:	480c      	ldr	r0, [pc, #48]	; (8001318 <state6_inv2+0x44>)
 80012e6:	f002 f899 	bl	800341c <HAL_GPIO_WritePin>

	IN_B_2 = PWM2;
 80012ea:	4b0c      	ldr	r3, [pc, #48]	; (800131c <state6_inv2+0x48>)
 80012ec:	881a      	ldrh	r2, [r3, #0]
 80012ee:	4b09      	ldr	r3, [pc, #36]	; (8001314 <state6_inv2+0x40>)
 80012f0:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_2;
 80012f2:	2201      	movs	r2, #1
 80012f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012f8:	4807      	ldr	r0, [pc, #28]	; (8001318 <state6_inv2+0x44>)
 80012fa:	f002 f88f 	bl	800341c <HAL_GPIO_WritePin>

	IN_C_2 = 0;
 80012fe:	4b05      	ldr	r3, [pc, #20]	; (8001314 <state6_inv2+0x40>)
 8001300:	2200      	movs	r2, #0
 8001302:	63da      	str	r2, [r3, #60]	; 0x3c
	RESET_SD_C_2;
 8001304:	2200      	movs	r2, #0
 8001306:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800130a:	4803      	ldr	r0, [pc, #12]	; (8001318 <state6_inv2+0x44>)
 800130c:	f002 f886 	bl	800341c <HAL_GPIO_WritePin>
}
 8001310:	bf00      	nop
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40013400 	.word	0x40013400
 8001318:	48000400 	.word	0x48000400
 800131c:	20000290 	.word	0x20000290

08001320 <stateOff_inv2>:

void stateOff_inv2() {
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
	IN_A_2 = 0;
 8001324:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <stateOff_inv2+0x40>)
 8001326:	2200      	movs	r2, #0
 8001328:	635a      	str	r2, [r3, #52]	; 0x34
	RESET_SD_A_2;
 800132a:	2200      	movs	r2, #0
 800132c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001330:	480c      	ldr	r0, [pc, #48]	; (8001364 <stateOff_inv2+0x44>)
 8001332:	f002 f873 	bl	800341c <HAL_GPIO_WritePin>

	IN_B_2 = 0;
 8001336:	4b0a      	ldr	r3, [pc, #40]	; (8001360 <stateOff_inv2+0x40>)
 8001338:	2200      	movs	r2, #0
 800133a:	639a      	str	r2, [r3, #56]	; 0x38
	RESET_SD_B_2;
 800133c:	2200      	movs	r2, #0
 800133e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001342:	4808      	ldr	r0, [pc, #32]	; (8001364 <stateOff_inv2+0x44>)
 8001344:	f002 f86a 	bl	800341c <HAL_GPIO_WritePin>

	IN_C_2 = 0;
 8001348:	4b05      	ldr	r3, [pc, #20]	; (8001360 <stateOff_inv2+0x40>)
 800134a:	2200      	movs	r2, #0
 800134c:	63da      	str	r2, [r3, #60]	; 0x3c
	RESET_SD_C_2;
 800134e:	2200      	movs	r2, #0
 8001350:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001354:	4803      	ldr	r0, [pc, #12]	; (8001364 <stateOff_inv2+0x44>)
 8001356:	f002 f861 	bl	800341c <HAL_GPIO_WritePin>
}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40013400 	.word	0x40013400
 8001364:	48000400 	.word	0x48000400

08001368 <state0_inv3>:

//Inverter 3
void state0_inv3() {
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
	IN_A_3 = 0;
 800136c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001370:	2200      	movs	r2, #0
 8001372:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_3;
 8001374:	2201      	movs	r2, #1
 8001376:	2120      	movs	r1, #32
 8001378:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800137c:	f002 f84e 	bl	800341c <HAL_GPIO_WritePin>

	IN_B_3 = 0;
 8001380:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001384:	2200      	movs	r2, #0
 8001386:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_3;
 8001388:	2201      	movs	r2, #1
 800138a:	2140      	movs	r1, #64	; 0x40
 800138c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001390:	f002 f844 	bl	800341c <HAL_GPIO_WritePin>

	IN_C_3 = 0;
 8001394:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001398:	2200      	movs	r2, #0
 800139a:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_3;
 800139c:	2201      	movs	r2, #1
 800139e:	2180      	movs	r1, #128	; 0x80
 80013a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a4:	f002 f83a 	bl	800341c <HAL_GPIO_WritePin>
}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}

080013ac <state1_inv3>:

void state1_inv3() {
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	IN_A_3 = 0;
 80013b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013b4:	2200      	movs	r2, #0
 80013b6:	635a      	str	r2, [r3, #52]	; 0x34
	RESET_SD_A_3;
 80013b8:	2200      	movs	r2, #0
 80013ba:	2120      	movs	r1, #32
 80013bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c0:	f002 f82c 	bl	800341c <HAL_GPIO_WritePin>

	IN_B_3 = 0;
 80013c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013c8:	2200      	movs	r2, #0
 80013ca:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_3;
 80013cc:	2201      	movs	r2, #1
 80013ce:	2140      	movs	r1, #64	; 0x40
 80013d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d4:	f002 f822 	bl	800341c <HAL_GPIO_WritePin>

	IN_C_3 = PWM3;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <state1_inv3+0x48>)
 80013da:	881a      	ldrh	r2, [r3, #0]
 80013dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80013e0:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_3;
 80013e2:	2201      	movs	r2, #1
 80013e4:	2180      	movs	r1, #128	; 0x80
 80013e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ea:	f002 f817 	bl	800341c <HAL_GPIO_WritePin>
}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000292 	.word	0x20000292

080013f8 <state2_inv3>:
void state2_inv3() {
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
	IN_A_3 = 0;
 80013fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001400:	2200      	movs	r2, #0
 8001402:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_3;
 8001404:	2201      	movs	r2, #1
 8001406:	2120      	movs	r1, #32
 8001408:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140c:	f002 f806 	bl	800341c <HAL_GPIO_WritePin>

	IN_B_3 = 0;
 8001410:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001414:	2200      	movs	r2, #0
 8001416:	639a      	str	r2, [r3, #56]	; 0x38
	RESET_SD_B_3;
 8001418:	2200      	movs	r2, #0
 800141a:	2140      	movs	r1, #64	; 0x40
 800141c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001420:	f001 fffc 	bl	800341c <HAL_GPIO_WritePin>

	IN_C_3 = PWM3;
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <state2_inv3+0x48>)
 8001426:	881a      	ldrh	r2, [r3, #0]
 8001428:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800142c:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_3;
 800142e:	2201      	movs	r2, #1
 8001430:	2180      	movs	r1, #128	; 0x80
 8001432:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001436:	f001 fff1 	bl	800341c <HAL_GPIO_WritePin>
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000292 	.word	0x20000292

08001444 <state3_inv3>:
void state3_inv3() {
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
	IN_A_3 = 0;
 8001448:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800144c:	2200      	movs	r2, #0
 800144e:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_3;
 8001450:	2201      	movs	r2, #1
 8001452:	2120      	movs	r1, #32
 8001454:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001458:	f001 ffe0 	bl	800341c <HAL_GPIO_WritePin>

	IN_B_3 = PWM3;
 800145c:	4b0b      	ldr	r3, [pc, #44]	; (800148c <state3_inv3+0x48>)
 800145e:	881a      	ldrh	r2, [r3, #0]
 8001460:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001464:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_3;
 8001466:	2201      	movs	r2, #1
 8001468:	2140      	movs	r1, #64	; 0x40
 800146a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800146e:	f001 ffd5 	bl	800341c <HAL_GPIO_WritePin>

	IN_C_3 = 0;
 8001472:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001476:	2200      	movs	r2, #0
 8001478:	63da      	str	r2, [r3, #60]	; 0x3c
	RESET_SD_C_3;
 800147a:	2200      	movs	r2, #0
 800147c:	2180      	movs	r1, #128	; 0x80
 800147e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001482:	f001 ffcb 	bl	800341c <HAL_GPIO_WritePin>
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000292 	.word	0x20000292

08001490 <state4_inv3>:
void state4_inv3() {
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
	IN_A_3 = 0;
 8001494:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001498:	2200      	movs	r2, #0
 800149a:	635a      	str	r2, [r3, #52]	; 0x34
	RESET_SD_A_3;
 800149c:	2200      	movs	r2, #0
 800149e:	2120      	movs	r1, #32
 80014a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a4:	f001 ffba 	bl	800341c <HAL_GPIO_WritePin>

	IN_B_3 = PWM3;
 80014a8:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <state4_inv3+0x48>)
 80014aa:	881a      	ldrh	r2, [r3, #0]
 80014ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014b0:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_3;
 80014b2:	2201      	movs	r2, #1
 80014b4:	2140      	movs	r1, #64	; 0x40
 80014b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ba:	f001 ffaf 	bl	800341c <HAL_GPIO_WritePin>

	IN_C_3 = 0;
 80014be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014c2:	2200      	movs	r2, #0
 80014c4:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_3;
 80014c6:	2201      	movs	r2, #1
 80014c8:	2180      	movs	r1, #128	; 0x80
 80014ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ce:	f001 ffa5 	bl	800341c <HAL_GPIO_WritePin>
}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	20000292 	.word	0x20000292

080014dc <state5_inv3>:
void state5_inv3() {
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
	IN_A_3 = PWM3;
 80014e0:	4b10      	ldr	r3, [pc, #64]	; (8001524 <state5_inv3+0x48>)
 80014e2:	881a      	ldrh	r2, [r3, #0]
 80014e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014e8:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_3;
 80014ea:	2201      	movs	r2, #1
 80014ec:	2120      	movs	r1, #32
 80014ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f2:	f001 ff93 	bl	800341c <HAL_GPIO_WritePin>

	IN_B_3 = 0;
 80014f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014fa:	2200      	movs	r2, #0
 80014fc:	639a      	str	r2, [r3, #56]	; 0x38
	RESET_SD_B_3;
 80014fe:	2200      	movs	r2, #0
 8001500:	2140      	movs	r1, #64	; 0x40
 8001502:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001506:	f001 ff89 	bl	800341c <HAL_GPIO_WritePin>

	IN_C_3 = 0;
 800150a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800150e:	2200      	movs	r2, #0
 8001510:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_3;
 8001512:	2201      	movs	r2, #1
 8001514:	2180      	movs	r1, #128	; 0x80
 8001516:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800151a:	f001 ff7f 	bl	800341c <HAL_GPIO_WritePin>
}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000292 	.word	0x20000292

08001528 <state6_inv3>:
void state6_inv3() {
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	IN_A_3 = PWM3;
 800152c:	4b10      	ldr	r3, [pc, #64]	; (8001570 <state6_inv3+0x48>)
 800152e:	881a      	ldrh	r2, [r3, #0]
 8001530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001534:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_3;
 8001536:	2201      	movs	r2, #1
 8001538:	2120      	movs	r1, #32
 800153a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800153e:	f001 ff6d 	bl	800341c <HAL_GPIO_WritePin>

	IN_B_3 = 0;
 8001542:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001546:	2200      	movs	r2, #0
 8001548:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_3;
 800154a:	2201      	movs	r2, #1
 800154c:	2140      	movs	r1, #64	; 0x40
 800154e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001552:	f001 ff63 	bl	800341c <HAL_GPIO_WritePin>

	IN_C_3 = 0;
 8001556:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800155a:	2200      	movs	r2, #0
 800155c:	63da      	str	r2, [r3, #60]	; 0x3c
	RESET_SD_C_3;
 800155e:	2200      	movs	r2, #0
 8001560:	2180      	movs	r1, #128	; 0x80
 8001562:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001566:	f001 ff59 	bl	800341c <HAL_GPIO_WritePin>
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000292 	.word	0x20000292

08001574 <stateOff_inv3>:

void stateOff_inv3() {
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
	IN_A_3 = 0;
 8001578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800157c:	2200      	movs	r2, #0
 800157e:	635a      	str	r2, [r3, #52]	; 0x34
	RESET_SD_A_3;
 8001580:	2200      	movs	r2, #0
 8001582:	2120      	movs	r1, #32
 8001584:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001588:	f001 ff48 	bl	800341c <HAL_GPIO_WritePin>

	IN_B_3 = 0;
 800158c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001590:	2200      	movs	r2, #0
 8001592:	639a      	str	r2, [r3, #56]	; 0x38
	RESET_SD_B_3;
 8001594:	2200      	movs	r2, #0
 8001596:	2140      	movs	r1, #64	; 0x40
 8001598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800159c:	f001 ff3e 	bl	800341c <HAL_GPIO_WritePin>

	IN_C_3 = 0;
 80015a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015a4:	2200      	movs	r2, #0
 80015a6:	63da      	str	r2, [r3, #60]	; 0x3c
	RESET_SD_C_3;
 80015a8:	2200      	movs	r2, #0
 80015aa:	2180      	movs	r1, #128	; 0x80
 80015ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b0:	f001 ff34 	bl	800341c <HAL_GPIO_WritePin>
}
 80015b4:	bf00      	nop
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <state0_inv4>:


	//Inverter 4
void state0_inv4() {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
	IN_A_4 = 0;
 80015bc:	4b10      	ldr	r3, [pc, #64]	; (8001600 <state0_inv4+0x48>)
 80015be:	2200      	movs	r2, #0
 80015c0:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_A_4;
 80015c2:	2201      	movs	r2, #1
 80015c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015cc:	f001 ff26 	bl	800341c <HAL_GPIO_WritePin>

	IN_B_4 = 0;
 80015d0:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <state0_inv4+0x4c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_B_4;
 80015d6:	2201      	movs	r2, #1
 80015d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e0:	f001 ff1c 	bl	800341c <HAL_GPIO_WritePin>

	IN_C_4 = 0;
 80015e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015e8:	2200      	movs	r2, #0
 80015ea:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_C_4;
 80015ec:	2201      	movs	r2, #1
 80015ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f6:	f001 ff11 	bl	800341c <HAL_GPIO_WritePin>
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40012c00 	.word	0x40012c00
 8001604:	40013400 	.word	0x40013400

08001608 <state1_inv4>:

void state1_inv4() {
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
	IN_A_4 = 0;
 800160c:	4b10      	ldr	r3, [pc, #64]	; (8001650 <state1_inv4+0x48>)
 800160e:	2200      	movs	r2, #0
 8001610:	641a      	str	r2, [r3, #64]	; 0x40
	RESET_SD_A_4;
 8001612:	2200      	movs	r2, #0
 8001614:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800161c:	f001 fefe 	bl	800341c <HAL_GPIO_WritePin>

	IN_B_4 = 0;
 8001620:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <state1_inv4+0x4c>)
 8001622:	2200      	movs	r2, #0
 8001624:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_B_4;
 8001626:	2201      	movs	r2, #1
 8001628:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800162c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001630:	f001 fef4 	bl	800341c <HAL_GPIO_WritePin>

	IN_C_4 = PWM4;
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <state1_inv4+0x50>)
 8001636:	881a      	ldrh	r2, [r3, #0]
 8001638:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800163c:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_C_4;
 800163e:	2201      	movs	r2, #1
 8001640:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001648:	f001 fee8 	bl	800341c <HAL_GPIO_WritePin>
}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40012c00 	.word	0x40012c00
 8001654:	40013400 	.word	0x40013400
 8001658:	20000294 	.word	0x20000294

0800165c <state2_inv4>:
void state2_inv4() {
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
	IN_A_4 = 0;
 8001660:	4b10      	ldr	r3, [pc, #64]	; (80016a4 <state2_inv4+0x48>)
 8001662:	2200      	movs	r2, #0
 8001664:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_A_4;
 8001666:	2201      	movs	r2, #1
 8001668:	f44f 7180 	mov.w	r1, #256	; 0x100
 800166c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001670:	f001 fed4 	bl	800341c <HAL_GPIO_WritePin>

	IN_B_4 = 0;
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <state2_inv4+0x4c>)
 8001676:	2200      	movs	r2, #0
 8001678:	641a      	str	r2, [r3, #64]	; 0x40
	RESET_SD_B_4;
 800167a:	2200      	movs	r2, #0
 800167c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001680:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001684:	f001 feca 	bl	800341c <HAL_GPIO_WritePin>

	IN_C_4 = PWM4;
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <state2_inv4+0x50>)
 800168a:	881a      	ldrh	r2, [r3, #0]
 800168c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001690:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_C_4;
 8001692:	2201      	movs	r2, #1
 8001694:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001698:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169c:	f001 febe 	bl	800341c <HAL_GPIO_WritePin>
}
 80016a0:	bf00      	nop
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40012c00 	.word	0x40012c00
 80016a8:	40013400 	.word	0x40013400
 80016ac:	20000294 	.word	0x20000294

080016b0 <state3_inv4>:
void state3_inv4() {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
	IN_A_4 = 0;
 80016b4:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <state3_inv4+0x48>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_A_4;
 80016ba:	2201      	movs	r2, #1
 80016bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c4:	f001 feaa 	bl	800341c <HAL_GPIO_WritePin>

	IN_B_4 = PWM4;
 80016c8:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <state3_inv4+0x4c>)
 80016ca:	881a      	ldrh	r2, [r3, #0]
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <state3_inv4+0x50>)
 80016ce:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_B_4;
 80016d0:	2201      	movs	r2, #1
 80016d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016da:	f001 fe9f 	bl	800341c <HAL_GPIO_WritePin>

	IN_C_4 = 0;
 80016de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016e2:	2200      	movs	r2, #0
 80016e4:	641a      	str	r2, [r3, #64]	; 0x40
	RESET_SD_C_4;
 80016e6:	2200      	movs	r2, #0
 80016e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f0:	f001 fe94 	bl	800341c <HAL_GPIO_WritePin>
}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	40012c00 	.word	0x40012c00
 80016fc:	20000294 	.word	0x20000294
 8001700:	40013400 	.word	0x40013400

08001704 <state4_inv4>:
void state4_inv4() {
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
	IN_A_4 = 0;
 8001708:	4b10      	ldr	r3, [pc, #64]	; (800174c <state4_inv4+0x48>)
 800170a:	2200      	movs	r2, #0
 800170c:	641a      	str	r2, [r3, #64]	; 0x40
	RESET_SD_A_4;
 800170e:	2200      	movs	r2, #0
 8001710:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001714:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001718:	f001 fe80 	bl	800341c <HAL_GPIO_WritePin>

	IN_B_4 = PWM4;
 800171c:	4b0c      	ldr	r3, [pc, #48]	; (8001750 <state4_inv4+0x4c>)
 800171e:	881a      	ldrh	r2, [r3, #0]
 8001720:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <state4_inv4+0x50>)
 8001722:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_B_4;
 8001724:	2201      	movs	r2, #1
 8001726:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800172a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800172e:	f001 fe75 	bl	800341c <HAL_GPIO_WritePin>

	IN_C_4 = 0;
 8001732:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001736:	2200      	movs	r2, #0
 8001738:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_C_4;
 800173a:	2201      	movs	r2, #1
 800173c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001744:	f001 fe6a 	bl	800341c <HAL_GPIO_WritePin>
}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}
 800174c:	40012c00 	.word	0x40012c00
 8001750:	20000294 	.word	0x20000294
 8001754:	40013400 	.word	0x40013400

08001758 <state5_inv4>:
void state5_inv4() {
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
	IN_A_4 = PWM4;
 800175c:	4b10      	ldr	r3, [pc, #64]	; (80017a0 <state5_inv4+0x48>)
 800175e:	881a      	ldrh	r2, [r3, #0]
 8001760:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <state5_inv4+0x4c>)
 8001762:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_A_4;
 8001764:	2201      	movs	r2, #1
 8001766:	f44f 7180 	mov.w	r1, #256	; 0x100
 800176a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800176e:	f001 fe55 	bl	800341c <HAL_GPIO_WritePin>

	IN_B_4 = 0;
 8001772:	4b0d      	ldr	r3, [pc, #52]	; (80017a8 <state5_inv4+0x50>)
 8001774:	2200      	movs	r2, #0
 8001776:	641a      	str	r2, [r3, #64]	; 0x40
	RESET_SD_B_4;
 8001778:	2200      	movs	r2, #0
 800177a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800177e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001782:	f001 fe4b 	bl	800341c <HAL_GPIO_WritePin>

	IN_C_4 = 0;
 8001786:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800178a:	2200      	movs	r2, #0
 800178c:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_C_4;
 800178e:	2201      	movs	r2, #1
 8001790:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001794:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001798:	f001 fe40 	bl	800341c <HAL_GPIO_WritePin>
}
 800179c:	bf00      	nop
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	20000294 	.word	0x20000294
 80017a4:	40012c00 	.word	0x40012c00
 80017a8:	40013400 	.word	0x40013400

080017ac <state6_inv4>:
void state6_inv4() {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0

	IN_A_4 = PWM4;
 80017b0:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <state6_inv4+0x48>)
 80017b2:	881a      	ldrh	r2, [r3, #0]
 80017b4:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <state6_inv4+0x4c>)
 80017b6:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_A_4;
 80017b8:	2201      	movs	r2, #1
 80017ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c2:	f001 fe2b 	bl	800341c <HAL_GPIO_WritePin>

	IN_B_4 = 0;
 80017c6:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <state6_inv4+0x50>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_B_4;
 80017cc:	2201      	movs	r2, #1
 80017ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d6:	f001 fe21 	bl	800341c <HAL_GPIO_WritePin>

	IN_C_4 = 0;
 80017da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017de:	2200      	movs	r2, #0
 80017e0:	641a      	str	r2, [r3, #64]	; 0x40
	RESET_SD_C_4;
 80017e2:	2200      	movs	r2, #0
 80017e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ec:	f001 fe16 	bl	800341c <HAL_GPIO_WritePin>
}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000294 	.word	0x20000294
 80017f8:	40012c00 	.word	0x40012c00
 80017fc:	40013400 	.word	0x40013400

08001800 <stateOff_inv4>:

void stateOff_inv4() {
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0

	IN_A_4 = 0;
 8001804:	4b10      	ldr	r3, [pc, #64]	; (8001848 <stateOff_inv4+0x48>)
 8001806:	2200      	movs	r2, #0
 8001808:	641a      	str	r2, [r3, #64]	; 0x40
	RESET_SD_A_4;
 800180a:	2200      	movs	r2, #0
 800180c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001810:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001814:	f001 fe02 	bl	800341c <HAL_GPIO_WritePin>

	IN_B_4 = 0;
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <stateOff_inv4+0x4c>)
 800181a:	2200      	movs	r2, #0
 800181c:	641a      	str	r2, [r3, #64]	; 0x40
	RESET_SD_B_4;
 800181e:	2200      	movs	r2, #0
 8001820:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001824:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001828:	f001 fdf8 	bl	800341c <HAL_GPIO_WritePin>

	IN_C_4 = 0;
 800182c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001830:	2200      	movs	r2, #0
 8001832:	641a      	str	r2, [r3, #64]	; 0x40
	RESET_SD_C_4;
 8001834:	2200      	movs	r2, #0
 8001836:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800183a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800183e:	f001 fded 	bl	800341c <HAL_GPIO_WritePin>
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40012c00 	.word	0x40012c00
 800184c:	40013400 	.word	0x40013400

08001850 <Inverter1>:
		state6_inv2();
		state6_inv4();
	}
}

void Inverter1(uint8_t inv_mode) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
	inv_mode == 2- low switches are on, high switches are off
	inv_mode == 3- 120 deg. commutation with PWM
	inv_mode == 4- 120 deg. commutation without PWM
	*/

	if (inv_mode == 1) {
 800185a:	79fb      	ldrb	r3, [r7, #7]
 800185c:	2b01      	cmp	r3, #1
 800185e:	d102      	bne.n	8001866 <Inverter1+0x16>
		stateOff_inv1();
 8001860:	f7ff fc36 	bl	80010d0 <stateOff_inv1>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
			state6_inv1();
		}
	}
}
 8001864:	e134      	b.n	8001ad0 <Inverter1+0x280>
	else if (inv_mode == 2) {
 8001866:	79fb      	ldrb	r3, [r7, #7]
 8001868:	2b02      	cmp	r3, #2
 800186a:	d102      	bne.n	8001872 <Inverter1+0x22>
		state0_inv1();
 800186c:	f7ff fb38 	bl	8000ee0 <state0_inv1>
}
 8001870:	e12e      	b.n	8001ad0 <Inverter1+0x280>
	else if (inv_mode == 3) {
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	2b03      	cmp	r3, #3
 8001876:	f040 8093 	bne.w	80019a0 <Inverter1+0x150>
		if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin) && HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 800187a:	2110      	movs	r1, #16
 800187c:	4896      	ldr	r0, [pc, #600]	; (8001ad8 <Inverter1+0x288>)
 800187e:	f001 fdb5 	bl	80033ec <HAL_GPIO_ReadPin>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d010      	beq.n	80018aa <Inverter1+0x5a>
 8001888:	2120      	movs	r1, #32
 800188a:	4893      	ldr	r0, [pc, #588]	; (8001ad8 <Inverter1+0x288>)
 800188c:	f001 fdae 	bl	80033ec <HAL_GPIO_ReadPin>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d009      	beq.n	80018aa <Inverter1+0x5a>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001896:	2140      	movs	r1, #64	; 0x40
 8001898:	488f      	ldr	r0, [pc, #572]	; (8001ad8 <Inverter1+0x288>)
 800189a:	f001 fda7 	bl	80033ec <HAL_GPIO_ReadPin>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d102      	bne.n	80018aa <Inverter1+0x5a>
			state1_inv1();
 80018a4:	f7ff fb3c 	bl	8000f20 <state1_inv1>
 80018a8:	e112      	b.n	8001ad0 <Inverter1+0x280>
		else if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 80018aa:	2110      	movs	r1, #16
 80018ac:	488a      	ldr	r0, [pc, #552]	; (8001ad8 <Inverter1+0x288>)
 80018ae:	f001 fd9d 	bl	80033ec <HAL_GPIO_ReadPin>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d010      	beq.n	80018da <Inverter1+0x8a>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 80018b8:	2120      	movs	r1, #32
 80018ba:	4887      	ldr	r0, [pc, #540]	; (8001ad8 <Inverter1+0x288>)
 80018bc:	f001 fd96 	bl	80033ec <HAL_GPIO_ReadPin>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d109      	bne.n	80018da <Inverter1+0x8a>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 80018c6:	2140      	movs	r1, #64	; 0x40
 80018c8:	4883      	ldr	r0, [pc, #524]	; (8001ad8 <Inverter1+0x288>)
 80018ca:	f001 fd8f 	bl	80033ec <HAL_GPIO_ReadPin>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d102      	bne.n	80018da <Inverter1+0x8a>
			state2_inv1();
 80018d4:	f7ff fb48 	bl	8000f68 <state2_inv1>
 80018d8:	e0fa      	b.n	8001ad0 <Inverter1+0x280>
		else if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 80018da:	2110      	movs	r1, #16
 80018dc:	487e      	ldr	r0, [pc, #504]	; (8001ad8 <Inverter1+0x288>)
 80018de:	f001 fd85 	bl	80033ec <HAL_GPIO_ReadPin>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d010      	beq.n	800190a <Inverter1+0xba>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 80018e8:	2120      	movs	r1, #32
 80018ea:	487b      	ldr	r0, [pc, #492]	; (8001ad8 <Inverter1+0x288>)
 80018ec:	f001 fd7e 	bl	80033ec <HAL_GPIO_ReadPin>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d109      	bne.n	800190a <Inverter1+0xba>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 80018f6:	2140      	movs	r1, #64	; 0x40
 80018f8:	4877      	ldr	r0, [pc, #476]	; (8001ad8 <Inverter1+0x288>)
 80018fa:	f001 fd77 	bl	80033ec <HAL_GPIO_ReadPin>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d002      	beq.n	800190a <Inverter1+0xba>
			state3_inv1();
 8001904:	f7ff fb54 	bl	8000fb0 <state3_inv1>
 8001908:	e0e2      	b.n	8001ad0 <Inverter1+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 800190a:	2110      	movs	r1, #16
 800190c:	4872      	ldr	r0, [pc, #456]	; (8001ad8 <Inverter1+0x288>)
 800190e:	f001 fd6d 	bl	80033ec <HAL_GPIO_ReadPin>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d110      	bne.n	800193a <Inverter1+0xea>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001918:	2120      	movs	r1, #32
 800191a:	486f      	ldr	r0, [pc, #444]	; (8001ad8 <Inverter1+0x288>)
 800191c:	f001 fd66 	bl	80033ec <HAL_GPIO_ReadPin>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d109      	bne.n	800193a <Inverter1+0xea>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001926:	2140      	movs	r1, #64	; 0x40
 8001928:	486b      	ldr	r0, [pc, #428]	; (8001ad8 <Inverter1+0x288>)
 800192a:	f001 fd5f 	bl	80033ec <HAL_GPIO_ReadPin>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d002      	beq.n	800193a <Inverter1+0xea>
			state4_inv1();
 8001934:	f7ff fb60 	bl	8000ff8 <state4_inv1>
 8001938:	e0ca      	b.n	8001ad0 <Inverter1+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 800193a:	2110      	movs	r1, #16
 800193c:	4866      	ldr	r0, [pc, #408]	; (8001ad8 <Inverter1+0x288>)
 800193e:	f001 fd55 	bl	80033ec <HAL_GPIO_ReadPin>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d110      	bne.n	800196a <Inverter1+0x11a>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001948:	2120      	movs	r1, #32
 800194a:	4863      	ldr	r0, [pc, #396]	; (8001ad8 <Inverter1+0x288>)
 800194c:	f001 fd4e 	bl	80033ec <HAL_GPIO_ReadPin>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d009      	beq.n	800196a <Inverter1+0x11a>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001956:	2140      	movs	r1, #64	; 0x40
 8001958:	485f      	ldr	r0, [pc, #380]	; (8001ad8 <Inverter1+0x288>)
 800195a:	f001 fd47 	bl	80033ec <HAL_GPIO_ReadPin>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d002      	beq.n	800196a <Inverter1+0x11a>
			state5_inv1();
 8001964:	f7ff fb6c 	bl	8001040 <state5_inv1>
 8001968:	e0b2      	b.n	8001ad0 <Inverter1+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 800196a:	2110      	movs	r1, #16
 800196c:	485a      	ldr	r0, [pc, #360]	; (8001ad8 <Inverter1+0x288>)
 800196e:	f001 fd3d 	bl	80033ec <HAL_GPIO_ReadPin>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	f040 80ab 	bne.w	8001ad0 <Inverter1+0x280>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 800197a:	2120      	movs	r1, #32
 800197c:	4856      	ldr	r0, [pc, #344]	; (8001ad8 <Inverter1+0x288>)
 800197e:	f001 fd35 	bl	80033ec <HAL_GPIO_ReadPin>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 80a3 	beq.w	8001ad0 <Inverter1+0x280>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 800198a:	2140      	movs	r1, #64	; 0x40
 800198c:	4852      	ldr	r0, [pc, #328]	; (8001ad8 <Inverter1+0x288>)
 800198e:	f001 fd2d 	bl	80033ec <HAL_GPIO_ReadPin>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	f040 809b 	bne.w	8001ad0 <Inverter1+0x280>
			state6_inv1();
 800199a:	f7ff fb75 	bl	8001088 <state6_inv1>
}
 800199e:	e097      	b.n	8001ad0 <Inverter1+0x280>
		else if (inv_mode == 4) {
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	f040 8094 	bne.w	8001ad0 <Inverter1+0x280>
			PWM1= 4095;
 80019a8:	4b4c      	ldr	r3, [pc, #304]	; (8001adc <Inverter1+0x28c>)
 80019aa:	f640 72ff 	movw	r2, #4095	; 0xfff
 80019ae:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin) && HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 80019b0:	2110      	movs	r1, #16
 80019b2:	4849      	ldr	r0, [pc, #292]	; (8001ad8 <Inverter1+0x288>)
 80019b4:	f001 fd1a 	bl	80033ec <HAL_GPIO_ReadPin>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d010      	beq.n	80019e0 <Inverter1+0x190>
 80019be:	2120      	movs	r1, #32
 80019c0:	4845      	ldr	r0, [pc, #276]	; (8001ad8 <Inverter1+0x288>)
 80019c2:	f001 fd13 	bl	80033ec <HAL_GPIO_ReadPin>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d009      	beq.n	80019e0 <Inverter1+0x190>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 80019cc:	2140      	movs	r1, #64	; 0x40
 80019ce:	4842      	ldr	r0, [pc, #264]	; (8001ad8 <Inverter1+0x288>)
 80019d0:	f001 fd0c 	bl	80033ec <HAL_GPIO_ReadPin>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d102      	bne.n	80019e0 <Inverter1+0x190>
			state1_inv1();
 80019da:	f7ff faa1 	bl	8000f20 <state1_inv1>
 80019de:	e077      	b.n	8001ad0 <Inverter1+0x280>
		else if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 80019e0:	2110      	movs	r1, #16
 80019e2:	483d      	ldr	r0, [pc, #244]	; (8001ad8 <Inverter1+0x288>)
 80019e4:	f001 fd02 	bl	80033ec <HAL_GPIO_ReadPin>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d010      	beq.n	8001a10 <Inverter1+0x1c0>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 80019ee:	2120      	movs	r1, #32
 80019f0:	4839      	ldr	r0, [pc, #228]	; (8001ad8 <Inverter1+0x288>)
 80019f2:	f001 fcfb 	bl	80033ec <HAL_GPIO_ReadPin>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d109      	bne.n	8001a10 <Inverter1+0x1c0>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 80019fc:	2140      	movs	r1, #64	; 0x40
 80019fe:	4836      	ldr	r0, [pc, #216]	; (8001ad8 <Inverter1+0x288>)
 8001a00:	f001 fcf4 	bl	80033ec <HAL_GPIO_ReadPin>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d102      	bne.n	8001a10 <Inverter1+0x1c0>
			state2_inv1();
 8001a0a:	f7ff faad 	bl	8000f68 <state2_inv1>
 8001a0e:	e05f      	b.n	8001ad0 <Inverter1+0x280>
		else if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001a10:	2110      	movs	r1, #16
 8001a12:	4831      	ldr	r0, [pc, #196]	; (8001ad8 <Inverter1+0x288>)
 8001a14:	f001 fcea 	bl	80033ec <HAL_GPIO_ReadPin>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d010      	beq.n	8001a40 <Inverter1+0x1f0>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001a1e:	2120      	movs	r1, #32
 8001a20:	482d      	ldr	r0, [pc, #180]	; (8001ad8 <Inverter1+0x288>)
 8001a22:	f001 fce3 	bl	80033ec <HAL_GPIO_ReadPin>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d109      	bne.n	8001a40 <Inverter1+0x1f0>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001a2c:	2140      	movs	r1, #64	; 0x40
 8001a2e:	482a      	ldr	r0, [pc, #168]	; (8001ad8 <Inverter1+0x288>)
 8001a30:	f001 fcdc 	bl	80033ec <HAL_GPIO_ReadPin>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d002      	beq.n	8001a40 <Inverter1+0x1f0>
			state3_inv1();
 8001a3a:	f7ff fab9 	bl	8000fb0 <state3_inv1>
 8001a3e:	e047      	b.n	8001ad0 <Inverter1+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001a40:	2110      	movs	r1, #16
 8001a42:	4825      	ldr	r0, [pc, #148]	; (8001ad8 <Inverter1+0x288>)
 8001a44:	f001 fcd2 	bl	80033ec <HAL_GPIO_ReadPin>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d110      	bne.n	8001a70 <Inverter1+0x220>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001a4e:	2120      	movs	r1, #32
 8001a50:	4821      	ldr	r0, [pc, #132]	; (8001ad8 <Inverter1+0x288>)
 8001a52:	f001 fccb 	bl	80033ec <HAL_GPIO_ReadPin>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d109      	bne.n	8001a70 <Inverter1+0x220>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001a5c:	2140      	movs	r1, #64	; 0x40
 8001a5e:	481e      	ldr	r0, [pc, #120]	; (8001ad8 <Inverter1+0x288>)
 8001a60:	f001 fcc4 	bl	80033ec <HAL_GPIO_ReadPin>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d002      	beq.n	8001a70 <Inverter1+0x220>
			state4_inv1();
 8001a6a:	f7ff fac5 	bl	8000ff8 <state4_inv1>
 8001a6e:	e02f      	b.n	8001ad0 <Inverter1+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001a70:	2110      	movs	r1, #16
 8001a72:	4819      	ldr	r0, [pc, #100]	; (8001ad8 <Inverter1+0x288>)
 8001a74:	f001 fcba 	bl	80033ec <HAL_GPIO_ReadPin>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d110      	bne.n	8001aa0 <Inverter1+0x250>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001a7e:	2120      	movs	r1, #32
 8001a80:	4815      	ldr	r0, [pc, #84]	; (8001ad8 <Inverter1+0x288>)
 8001a82:	f001 fcb3 	bl	80033ec <HAL_GPIO_ReadPin>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d009      	beq.n	8001aa0 <Inverter1+0x250>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001a8c:	2140      	movs	r1, #64	; 0x40
 8001a8e:	4812      	ldr	r0, [pc, #72]	; (8001ad8 <Inverter1+0x288>)
 8001a90:	f001 fcac 	bl	80033ec <HAL_GPIO_ReadPin>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d002      	beq.n	8001aa0 <Inverter1+0x250>
			state5_inv1();
 8001a9a:	f7ff fad1 	bl	8001040 <state5_inv1>
 8001a9e:	e017      	b.n	8001ad0 <Inverter1+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001aa0:	2110      	movs	r1, #16
 8001aa2:	480d      	ldr	r0, [pc, #52]	; (8001ad8 <Inverter1+0x288>)
 8001aa4:	f001 fca2 	bl	80033ec <HAL_GPIO_ReadPin>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d110      	bne.n	8001ad0 <Inverter1+0x280>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001aae:	2120      	movs	r1, #32
 8001ab0:	4809      	ldr	r0, [pc, #36]	; (8001ad8 <Inverter1+0x288>)
 8001ab2:	f001 fc9b 	bl	80033ec <HAL_GPIO_ReadPin>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d009      	beq.n	8001ad0 <Inverter1+0x280>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001abc:	2140      	movs	r1, #64	; 0x40
 8001abe:	4806      	ldr	r0, [pc, #24]	; (8001ad8 <Inverter1+0x288>)
 8001ac0:	f001 fc94 	bl	80033ec <HAL_GPIO_ReadPin>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d102      	bne.n	8001ad0 <Inverter1+0x280>
			state6_inv1();
 8001aca:	f7ff fadd 	bl	8001088 <state6_inv1>
}
 8001ace:	e7ff      	b.n	8001ad0 <Inverter1+0x280>
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	48000400 	.word	0x48000400
 8001adc:	20000000 	.word	0x20000000

08001ae0 <Inverter3>:
void Inverter3(uint8_t inv_mode) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	71fb      	strb	r3, [r7, #7]
	if (inv_mode == 1) {
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d102      	bne.n	8001af6 <Inverter3+0x16>
		stateOff_inv3();
 8001af0:	f7ff fd40 	bl	8001574 <stateOff_inv3>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
			state6_inv3();
		}
	}
}
 8001af4:	e134      	b.n	8001d60 <Inverter3+0x280>
	else if (inv_mode == 2) {
 8001af6:	79fb      	ldrb	r3, [r7, #7]
 8001af8:	2b02      	cmp	r3, #2
 8001afa:	d102      	bne.n	8001b02 <Inverter3+0x22>
		state0_inv3();
 8001afc:	f7ff fc34 	bl	8001368 <state0_inv3>
}
 8001b00:	e12e      	b.n	8001d60 <Inverter3+0x280>
	else if (inv_mode == 3) {
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	2b03      	cmp	r3, #3
 8001b06:	f040 8093 	bne.w	8001c30 <Inverter3+0x150>
		if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin) && HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001b0a:	2110      	movs	r1, #16
 8001b0c:	4896      	ldr	r0, [pc, #600]	; (8001d68 <Inverter3+0x288>)
 8001b0e:	f001 fc6d 	bl	80033ec <HAL_GPIO_ReadPin>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d010      	beq.n	8001b3a <Inverter3+0x5a>
 8001b18:	2120      	movs	r1, #32
 8001b1a:	4893      	ldr	r0, [pc, #588]	; (8001d68 <Inverter3+0x288>)
 8001b1c:	f001 fc66 	bl	80033ec <HAL_GPIO_ReadPin>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d009      	beq.n	8001b3a <Inverter3+0x5a>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001b26:	2140      	movs	r1, #64	; 0x40
 8001b28:	488f      	ldr	r0, [pc, #572]	; (8001d68 <Inverter3+0x288>)
 8001b2a:	f001 fc5f 	bl	80033ec <HAL_GPIO_ReadPin>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d102      	bne.n	8001b3a <Inverter3+0x5a>
			state1_inv3();
 8001b34:	f7ff fc3a 	bl	80013ac <state1_inv3>
 8001b38:	e112      	b.n	8001d60 <Inverter3+0x280>
		else if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001b3a:	2110      	movs	r1, #16
 8001b3c:	488a      	ldr	r0, [pc, #552]	; (8001d68 <Inverter3+0x288>)
 8001b3e:	f001 fc55 	bl	80033ec <HAL_GPIO_ReadPin>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d010      	beq.n	8001b6a <Inverter3+0x8a>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001b48:	2120      	movs	r1, #32
 8001b4a:	4887      	ldr	r0, [pc, #540]	; (8001d68 <Inverter3+0x288>)
 8001b4c:	f001 fc4e 	bl	80033ec <HAL_GPIO_ReadPin>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d109      	bne.n	8001b6a <Inverter3+0x8a>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001b56:	2140      	movs	r1, #64	; 0x40
 8001b58:	4883      	ldr	r0, [pc, #524]	; (8001d68 <Inverter3+0x288>)
 8001b5a:	f001 fc47 	bl	80033ec <HAL_GPIO_ReadPin>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d102      	bne.n	8001b6a <Inverter3+0x8a>
			state2_inv3();
 8001b64:	f7ff fc48 	bl	80013f8 <state2_inv3>
 8001b68:	e0fa      	b.n	8001d60 <Inverter3+0x280>
		else if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001b6a:	2110      	movs	r1, #16
 8001b6c:	487e      	ldr	r0, [pc, #504]	; (8001d68 <Inverter3+0x288>)
 8001b6e:	f001 fc3d 	bl	80033ec <HAL_GPIO_ReadPin>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d010      	beq.n	8001b9a <Inverter3+0xba>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001b78:	2120      	movs	r1, #32
 8001b7a:	487b      	ldr	r0, [pc, #492]	; (8001d68 <Inverter3+0x288>)
 8001b7c:	f001 fc36 	bl	80033ec <HAL_GPIO_ReadPin>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d109      	bne.n	8001b9a <Inverter3+0xba>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001b86:	2140      	movs	r1, #64	; 0x40
 8001b88:	4877      	ldr	r0, [pc, #476]	; (8001d68 <Inverter3+0x288>)
 8001b8a:	f001 fc2f 	bl	80033ec <HAL_GPIO_ReadPin>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d002      	beq.n	8001b9a <Inverter3+0xba>
			state3_inv3();
 8001b94:	f7ff fc56 	bl	8001444 <state3_inv3>
 8001b98:	e0e2      	b.n	8001d60 <Inverter3+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001b9a:	2110      	movs	r1, #16
 8001b9c:	4872      	ldr	r0, [pc, #456]	; (8001d68 <Inverter3+0x288>)
 8001b9e:	f001 fc25 	bl	80033ec <HAL_GPIO_ReadPin>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d110      	bne.n	8001bca <Inverter3+0xea>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001ba8:	2120      	movs	r1, #32
 8001baa:	486f      	ldr	r0, [pc, #444]	; (8001d68 <Inverter3+0x288>)
 8001bac:	f001 fc1e 	bl	80033ec <HAL_GPIO_ReadPin>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d109      	bne.n	8001bca <Inverter3+0xea>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001bb6:	2140      	movs	r1, #64	; 0x40
 8001bb8:	486b      	ldr	r0, [pc, #428]	; (8001d68 <Inverter3+0x288>)
 8001bba:	f001 fc17 	bl	80033ec <HAL_GPIO_ReadPin>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d002      	beq.n	8001bca <Inverter3+0xea>
			state4_inv3();
 8001bc4:	f7ff fc64 	bl	8001490 <state4_inv3>
 8001bc8:	e0ca      	b.n	8001d60 <Inverter3+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001bca:	2110      	movs	r1, #16
 8001bcc:	4866      	ldr	r0, [pc, #408]	; (8001d68 <Inverter3+0x288>)
 8001bce:	f001 fc0d 	bl	80033ec <HAL_GPIO_ReadPin>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d110      	bne.n	8001bfa <Inverter3+0x11a>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001bd8:	2120      	movs	r1, #32
 8001bda:	4863      	ldr	r0, [pc, #396]	; (8001d68 <Inverter3+0x288>)
 8001bdc:	f001 fc06 	bl	80033ec <HAL_GPIO_ReadPin>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d009      	beq.n	8001bfa <Inverter3+0x11a>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001be6:	2140      	movs	r1, #64	; 0x40
 8001be8:	485f      	ldr	r0, [pc, #380]	; (8001d68 <Inverter3+0x288>)
 8001bea:	f001 fbff 	bl	80033ec <HAL_GPIO_ReadPin>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d002      	beq.n	8001bfa <Inverter3+0x11a>
			state5_inv3();
 8001bf4:	f7ff fc72 	bl	80014dc <state5_inv3>
 8001bf8:	e0b2      	b.n	8001d60 <Inverter3+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001bfa:	2110      	movs	r1, #16
 8001bfc:	485a      	ldr	r0, [pc, #360]	; (8001d68 <Inverter3+0x288>)
 8001bfe:	f001 fbf5 	bl	80033ec <HAL_GPIO_ReadPin>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f040 80ab 	bne.w	8001d60 <Inverter3+0x280>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001c0a:	2120      	movs	r1, #32
 8001c0c:	4856      	ldr	r0, [pc, #344]	; (8001d68 <Inverter3+0x288>)
 8001c0e:	f001 fbed 	bl	80033ec <HAL_GPIO_ReadPin>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 80a3 	beq.w	8001d60 <Inverter3+0x280>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001c1a:	2140      	movs	r1, #64	; 0x40
 8001c1c:	4852      	ldr	r0, [pc, #328]	; (8001d68 <Inverter3+0x288>)
 8001c1e:	f001 fbe5 	bl	80033ec <HAL_GPIO_ReadPin>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f040 809b 	bne.w	8001d60 <Inverter3+0x280>
			state6_inv3();
 8001c2a:	f7ff fc7d 	bl	8001528 <state6_inv3>
}
 8001c2e:	e097      	b.n	8001d60 <Inverter3+0x280>
		else if (inv_mode == 4) {
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	f040 8094 	bne.w	8001d60 <Inverter3+0x280>
			PWM3 = 4095;
 8001c38:	4b4c      	ldr	r3, [pc, #304]	; (8001d6c <Inverter3+0x28c>)
 8001c3a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001c3e:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin) && HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001c40:	2110      	movs	r1, #16
 8001c42:	4849      	ldr	r0, [pc, #292]	; (8001d68 <Inverter3+0x288>)
 8001c44:	f001 fbd2 	bl	80033ec <HAL_GPIO_ReadPin>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d010      	beq.n	8001c70 <Inverter3+0x190>
 8001c4e:	2120      	movs	r1, #32
 8001c50:	4845      	ldr	r0, [pc, #276]	; (8001d68 <Inverter3+0x288>)
 8001c52:	f001 fbcb 	bl	80033ec <HAL_GPIO_ReadPin>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d009      	beq.n	8001c70 <Inverter3+0x190>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001c5c:	2140      	movs	r1, #64	; 0x40
 8001c5e:	4842      	ldr	r0, [pc, #264]	; (8001d68 <Inverter3+0x288>)
 8001c60:	f001 fbc4 	bl	80033ec <HAL_GPIO_ReadPin>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d102      	bne.n	8001c70 <Inverter3+0x190>
			state1_inv3();
 8001c6a:	f7ff fb9f 	bl	80013ac <state1_inv3>
 8001c6e:	e077      	b.n	8001d60 <Inverter3+0x280>
		else if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001c70:	2110      	movs	r1, #16
 8001c72:	483d      	ldr	r0, [pc, #244]	; (8001d68 <Inverter3+0x288>)
 8001c74:	f001 fbba 	bl	80033ec <HAL_GPIO_ReadPin>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d010      	beq.n	8001ca0 <Inverter3+0x1c0>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001c7e:	2120      	movs	r1, #32
 8001c80:	4839      	ldr	r0, [pc, #228]	; (8001d68 <Inverter3+0x288>)
 8001c82:	f001 fbb3 	bl	80033ec <HAL_GPIO_ReadPin>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d109      	bne.n	8001ca0 <Inverter3+0x1c0>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001c8c:	2140      	movs	r1, #64	; 0x40
 8001c8e:	4836      	ldr	r0, [pc, #216]	; (8001d68 <Inverter3+0x288>)
 8001c90:	f001 fbac 	bl	80033ec <HAL_GPIO_ReadPin>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d102      	bne.n	8001ca0 <Inverter3+0x1c0>
			state2_inv3();
 8001c9a:	f7ff fbad 	bl	80013f8 <state2_inv3>
 8001c9e:	e05f      	b.n	8001d60 <Inverter3+0x280>
		else if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001ca0:	2110      	movs	r1, #16
 8001ca2:	4831      	ldr	r0, [pc, #196]	; (8001d68 <Inverter3+0x288>)
 8001ca4:	f001 fba2 	bl	80033ec <HAL_GPIO_ReadPin>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d010      	beq.n	8001cd0 <Inverter3+0x1f0>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001cae:	2120      	movs	r1, #32
 8001cb0:	482d      	ldr	r0, [pc, #180]	; (8001d68 <Inverter3+0x288>)
 8001cb2:	f001 fb9b 	bl	80033ec <HAL_GPIO_ReadPin>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d109      	bne.n	8001cd0 <Inverter3+0x1f0>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001cbc:	2140      	movs	r1, #64	; 0x40
 8001cbe:	482a      	ldr	r0, [pc, #168]	; (8001d68 <Inverter3+0x288>)
 8001cc0:	f001 fb94 	bl	80033ec <HAL_GPIO_ReadPin>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d002      	beq.n	8001cd0 <Inverter3+0x1f0>
			state3_inv3();
 8001cca:	f7ff fbbb 	bl	8001444 <state3_inv3>
 8001cce:	e047      	b.n	8001d60 <Inverter3+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001cd0:	2110      	movs	r1, #16
 8001cd2:	4825      	ldr	r0, [pc, #148]	; (8001d68 <Inverter3+0x288>)
 8001cd4:	f001 fb8a 	bl	80033ec <HAL_GPIO_ReadPin>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d110      	bne.n	8001d00 <Inverter3+0x220>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001cde:	2120      	movs	r1, #32
 8001ce0:	4821      	ldr	r0, [pc, #132]	; (8001d68 <Inverter3+0x288>)
 8001ce2:	f001 fb83 	bl	80033ec <HAL_GPIO_ReadPin>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d109      	bne.n	8001d00 <Inverter3+0x220>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001cec:	2140      	movs	r1, #64	; 0x40
 8001cee:	481e      	ldr	r0, [pc, #120]	; (8001d68 <Inverter3+0x288>)
 8001cf0:	f001 fb7c 	bl	80033ec <HAL_GPIO_ReadPin>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d002      	beq.n	8001d00 <Inverter3+0x220>
			state4_inv3();
 8001cfa:	f7ff fbc9 	bl	8001490 <state4_inv3>
 8001cfe:	e02f      	b.n	8001d60 <Inverter3+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001d00:	2110      	movs	r1, #16
 8001d02:	4819      	ldr	r0, [pc, #100]	; (8001d68 <Inverter3+0x288>)
 8001d04:	f001 fb72 	bl	80033ec <HAL_GPIO_ReadPin>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d110      	bne.n	8001d30 <Inverter3+0x250>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001d0e:	2120      	movs	r1, #32
 8001d10:	4815      	ldr	r0, [pc, #84]	; (8001d68 <Inverter3+0x288>)
 8001d12:	f001 fb6b 	bl	80033ec <HAL_GPIO_ReadPin>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d009      	beq.n	8001d30 <Inverter3+0x250>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001d1c:	2140      	movs	r1, #64	; 0x40
 8001d1e:	4812      	ldr	r0, [pc, #72]	; (8001d68 <Inverter3+0x288>)
 8001d20:	f001 fb64 	bl	80033ec <HAL_GPIO_ReadPin>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d002      	beq.n	8001d30 <Inverter3+0x250>
			state5_inv3();
 8001d2a:	f7ff fbd7 	bl	80014dc <state5_inv3>
 8001d2e:	e017      	b.n	8001d60 <Inverter3+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001d30:	2110      	movs	r1, #16
 8001d32:	480d      	ldr	r0, [pc, #52]	; (8001d68 <Inverter3+0x288>)
 8001d34:	f001 fb5a 	bl	80033ec <HAL_GPIO_ReadPin>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d110      	bne.n	8001d60 <Inverter3+0x280>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001d3e:	2120      	movs	r1, #32
 8001d40:	4809      	ldr	r0, [pc, #36]	; (8001d68 <Inverter3+0x288>)
 8001d42:	f001 fb53 	bl	80033ec <HAL_GPIO_ReadPin>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d009      	beq.n	8001d60 <Inverter3+0x280>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001d4c:	2140      	movs	r1, #64	; 0x40
 8001d4e:	4806      	ldr	r0, [pc, #24]	; (8001d68 <Inverter3+0x288>)
 8001d50:	f001 fb4c 	bl	80033ec <HAL_GPIO_ReadPin>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d102      	bne.n	8001d60 <Inverter3+0x280>
			state6_inv3();
 8001d5a:	f7ff fbe5 	bl	8001528 <state6_inv3>
}
 8001d5e:	e7ff      	b.n	8001d60 <Inverter3+0x280>
 8001d60:	bf00      	nop
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	48000400 	.word	0x48000400
 8001d6c:	20000292 	.word	0x20000292

08001d70 <Inverter2>:
void Inverter2(uint8_t inv_mode) {
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	4603      	mov	r3, r0
 8001d78:	71fb      	strb	r3, [r7, #7]
	if (inv_mode == 1) {
 8001d7a:	79fb      	ldrb	r3, [r7, #7]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d102      	bne.n	8001d86 <Inverter2+0x16>
		stateOff_inv2();
 8001d80:	f7ff face 	bl	8001320 <stateOff_inv2>
				&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
				&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
			state6_inv2();
		}
	}
}
 8001d84:	e158      	b.n	8002038 <Inverter2+0x2c8>
	else if (inv_mode == 2) {
 8001d86:	79fb      	ldrb	r3, [r7, #7]
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d102      	bne.n	8001d92 <Inverter2+0x22>
		state0_inv2();
 8001d8c:	f7ff f9c0 	bl	8001110 <state0_inv2>
}
 8001d90:	e152      	b.n	8002038 <Inverter2+0x2c8>
	else if (inv_mode == 3) {
 8001d92:	79fb      	ldrb	r3, [r7, #7]
 8001d94:	2b03      	cmp	r3, #3
 8001d96:	f040 80a5 	bne.w	8001ee4 <Inverter2+0x174>
		if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8001d9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d9e:	48a8      	ldr	r0, [pc, #672]	; (8002040 <Inverter2+0x2d0>)
 8001da0:	f001 fb24 	bl	80033ec <HAL_GPIO_ReadPin>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d012      	beq.n	8001dd0 <Inverter2+0x60>
					&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8001daa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001dae:	48a4      	ldr	r0, [pc, #656]	; (8002040 <Inverter2+0x2d0>)
 8001db0:	f001 fb1c 	bl	80033ec <HAL_GPIO_ReadPin>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00a      	beq.n	8001dd0 <Inverter2+0x60>
					&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8001dba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001dbe:	48a0      	ldr	r0, [pc, #640]	; (8002040 <Inverter2+0x2d0>)
 8001dc0:	f001 fb14 	bl	80033ec <HAL_GPIO_ReadPin>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d102      	bne.n	8001dd0 <Inverter2+0x60>
				state1_inv2();
 8001dca:	f7ff f9c5 	bl	8001158 <state1_inv2>
 8001dce:	e133      	b.n	8002038 <Inverter2+0x2c8>
			else if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8001dd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dd4:	489a      	ldr	r0, [pc, #616]	; (8002040 <Inverter2+0x2d0>)
 8001dd6:	f001 fb09 	bl	80033ec <HAL_GPIO_ReadPin>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d012      	beq.n	8001e06 <Inverter2+0x96>
					&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8001de0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001de4:	4896      	ldr	r0, [pc, #600]	; (8002040 <Inverter2+0x2d0>)
 8001de6:	f001 fb01 	bl	80033ec <HAL_GPIO_ReadPin>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10a      	bne.n	8001e06 <Inverter2+0x96>
					&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8001df0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001df4:	4892      	ldr	r0, [pc, #584]	; (8002040 <Inverter2+0x2d0>)
 8001df6:	f001 faf9 	bl	80033ec <HAL_GPIO_ReadPin>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d102      	bne.n	8001e06 <Inverter2+0x96>
				state2_inv2();
 8001e00:	f7ff f9d0 	bl	80011a4 <state2_inv2>
 8001e04:	e118      	b.n	8002038 <Inverter2+0x2c8>
			else if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8001e06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e0a:	488d      	ldr	r0, [pc, #564]	; (8002040 <Inverter2+0x2d0>)
 8001e0c:	f001 faee 	bl	80033ec <HAL_GPIO_ReadPin>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d012      	beq.n	8001e3c <Inverter2+0xcc>
					&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8001e16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e1a:	4889      	ldr	r0, [pc, #548]	; (8002040 <Inverter2+0x2d0>)
 8001e1c:	f001 fae6 	bl	80033ec <HAL_GPIO_ReadPin>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10a      	bne.n	8001e3c <Inverter2+0xcc>
					&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8001e26:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e2a:	4885      	ldr	r0, [pc, #532]	; (8002040 <Inverter2+0x2d0>)
 8001e2c:	f001 fade 	bl	80033ec <HAL_GPIO_ReadPin>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d002      	beq.n	8001e3c <Inverter2+0xcc>
				state3_inv2();
 8001e36:	f7ff f9db 	bl	80011f0 <state3_inv2>
 8001e3a:	e0fd      	b.n	8002038 <Inverter2+0x2c8>
			else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8001e3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e40:	487f      	ldr	r0, [pc, #508]	; (8002040 <Inverter2+0x2d0>)
 8001e42:	f001 fad3 	bl	80033ec <HAL_GPIO_ReadPin>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d112      	bne.n	8001e72 <Inverter2+0x102>
					&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8001e4c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e50:	487b      	ldr	r0, [pc, #492]	; (8002040 <Inverter2+0x2d0>)
 8001e52:	f001 facb 	bl	80033ec <HAL_GPIO_ReadPin>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d10a      	bne.n	8001e72 <Inverter2+0x102>
					&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8001e5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e60:	4877      	ldr	r0, [pc, #476]	; (8002040 <Inverter2+0x2d0>)
 8001e62:	f001 fac3 	bl	80033ec <HAL_GPIO_ReadPin>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d002      	beq.n	8001e72 <Inverter2+0x102>
				state4_inv2();
 8001e6c:	f7ff f9e6 	bl	800123c <state4_inv2>
 8001e70:	e0e2      	b.n	8002038 <Inverter2+0x2c8>
			else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8001e72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e76:	4872      	ldr	r0, [pc, #456]	; (8002040 <Inverter2+0x2d0>)
 8001e78:	f001 fab8 	bl	80033ec <HAL_GPIO_ReadPin>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d112      	bne.n	8001ea8 <Inverter2+0x138>
					&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8001e82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001e86:	486e      	ldr	r0, [pc, #440]	; (8002040 <Inverter2+0x2d0>)
 8001e88:	f001 fab0 	bl	80033ec <HAL_GPIO_ReadPin>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00a      	beq.n	8001ea8 <Inverter2+0x138>
					&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8001e92:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001e96:	486a      	ldr	r0, [pc, #424]	; (8002040 <Inverter2+0x2d0>)
 8001e98:	f001 faa8 	bl	80033ec <HAL_GPIO_ReadPin>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d002      	beq.n	8001ea8 <Inverter2+0x138>
				state5_inv2();
 8001ea2:	f7ff f9f1 	bl	8001288 <state5_inv2>
 8001ea6:	e0c7      	b.n	8002038 <Inverter2+0x2c8>
			else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8001ea8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001eac:	4864      	ldr	r0, [pc, #400]	; (8002040 <Inverter2+0x2d0>)
 8001eae:	f001 fa9d 	bl	80033ec <HAL_GPIO_ReadPin>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	f040 80bf 	bne.w	8002038 <Inverter2+0x2c8>
					&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8001eba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ebe:	4860      	ldr	r0, [pc, #384]	; (8002040 <Inverter2+0x2d0>)
 8001ec0:	f001 fa94 	bl	80033ec <HAL_GPIO_ReadPin>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	f000 80b6 	beq.w	8002038 <Inverter2+0x2c8>
					&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8001ecc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ed0:	485b      	ldr	r0, [pc, #364]	; (8002040 <Inverter2+0x2d0>)
 8001ed2:	f001 fa8b 	bl	80033ec <HAL_GPIO_ReadPin>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	f040 80ad 	bne.w	8002038 <Inverter2+0x2c8>
				state6_inv2();
 8001ede:	f7ff f9f9 	bl	80012d4 <state6_inv2>
}
 8001ee2:	e0a9      	b.n	8002038 <Inverter2+0x2c8>
	else if (inv_mode == 4) {
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	2b04      	cmp	r3, #4
 8001ee8:	f040 80a6 	bne.w	8002038 <Inverter2+0x2c8>
		PWM2 = 4095;
 8001eec:	4b55      	ldr	r3, [pc, #340]	; (8002044 <Inverter2+0x2d4>)
 8001eee:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001ef2:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin) && HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8001ef4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ef8:	4851      	ldr	r0, [pc, #324]	; (8002040 <Inverter2+0x2d0>)
 8001efa:	f001 fa77 	bl	80033ec <HAL_GPIO_ReadPin>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d012      	beq.n	8001f2a <Inverter2+0x1ba>
 8001f04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f08:	484d      	ldr	r0, [pc, #308]	; (8002040 <Inverter2+0x2d0>)
 8001f0a:	f001 fa6f 	bl	80033ec <HAL_GPIO_ReadPin>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d00a      	beq.n	8001f2a <Inverter2+0x1ba>
				&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8001f14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f18:	4849      	ldr	r0, [pc, #292]	; (8002040 <Inverter2+0x2d0>)
 8001f1a:	f001 fa67 	bl	80033ec <HAL_GPIO_ReadPin>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d102      	bne.n	8001f2a <Inverter2+0x1ba>
			state1_inv2();
 8001f24:	f7ff f918 	bl	8001158 <state1_inv2>
 8001f28:	e086      	b.n	8002038 <Inverter2+0x2c8>
		else if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8001f2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f2e:	4844      	ldr	r0, [pc, #272]	; (8002040 <Inverter2+0x2d0>)
 8001f30:	f001 fa5c 	bl	80033ec <HAL_GPIO_ReadPin>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d012      	beq.n	8001f60 <Inverter2+0x1f0>
				&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8001f3a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f3e:	4840      	ldr	r0, [pc, #256]	; (8002040 <Inverter2+0x2d0>)
 8001f40:	f001 fa54 	bl	80033ec <HAL_GPIO_ReadPin>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10a      	bne.n	8001f60 <Inverter2+0x1f0>
				&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8001f4a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f4e:	483c      	ldr	r0, [pc, #240]	; (8002040 <Inverter2+0x2d0>)
 8001f50:	f001 fa4c 	bl	80033ec <HAL_GPIO_ReadPin>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d102      	bne.n	8001f60 <Inverter2+0x1f0>
			state2_inv2();
 8001f5a:	f7ff f923 	bl	80011a4 <state2_inv2>
 8001f5e:	e06b      	b.n	8002038 <Inverter2+0x2c8>
		else if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8001f60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f64:	4836      	ldr	r0, [pc, #216]	; (8002040 <Inverter2+0x2d0>)
 8001f66:	f001 fa41 	bl	80033ec <HAL_GPIO_ReadPin>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d012      	beq.n	8001f96 <Inverter2+0x226>
				&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8001f70:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f74:	4832      	ldr	r0, [pc, #200]	; (8002040 <Inverter2+0x2d0>)
 8001f76:	f001 fa39 	bl	80033ec <HAL_GPIO_ReadPin>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d10a      	bne.n	8001f96 <Inverter2+0x226>
				&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8001f80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f84:	482e      	ldr	r0, [pc, #184]	; (8002040 <Inverter2+0x2d0>)
 8001f86:	f001 fa31 	bl	80033ec <HAL_GPIO_ReadPin>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <Inverter2+0x226>
			state3_inv2();
 8001f90:	f7ff f92e 	bl	80011f0 <state3_inv2>
 8001f94:	e050      	b.n	8002038 <Inverter2+0x2c8>
		else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8001f96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f9a:	4829      	ldr	r0, [pc, #164]	; (8002040 <Inverter2+0x2d0>)
 8001f9c:	f001 fa26 	bl	80033ec <HAL_GPIO_ReadPin>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d112      	bne.n	8001fcc <Inverter2+0x25c>
				&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8001fa6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001faa:	4825      	ldr	r0, [pc, #148]	; (8002040 <Inverter2+0x2d0>)
 8001fac:	f001 fa1e 	bl	80033ec <HAL_GPIO_ReadPin>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10a      	bne.n	8001fcc <Inverter2+0x25c>
				&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8001fb6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fba:	4821      	ldr	r0, [pc, #132]	; (8002040 <Inverter2+0x2d0>)
 8001fbc:	f001 fa16 	bl	80033ec <HAL_GPIO_ReadPin>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d002      	beq.n	8001fcc <Inverter2+0x25c>
			state4_inv2();
 8001fc6:	f7ff f939 	bl	800123c <state4_inv2>
 8001fca:	e035      	b.n	8002038 <Inverter2+0x2c8>
		else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8001fcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fd0:	481b      	ldr	r0, [pc, #108]	; (8002040 <Inverter2+0x2d0>)
 8001fd2:	f001 fa0b 	bl	80033ec <HAL_GPIO_ReadPin>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d112      	bne.n	8002002 <Inverter2+0x292>
				&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8001fdc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fe0:	4817      	ldr	r0, [pc, #92]	; (8002040 <Inverter2+0x2d0>)
 8001fe2:	f001 fa03 	bl	80033ec <HAL_GPIO_ReadPin>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d00a      	beq.n	8002002 <Inverter2+0x292>
				&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8001fec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ff0:	4813      	ldr	r0, [pc, #76]	; (8002040 <Inverter2+0x2d0>)
 8001ff2:	f001 f9fb 	bl	80033ec <HAL_GPIO_ReadPin>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d002      	beq.n	8002002 <Inverter2+0x292>
			state5_inv2();
 8001ffc:	f7ff f944 	bl	8001288 <state5_inv2>
 8002000:	e01a      	b.n	8002038 <Inverter2+0x2c8>
		else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8002002:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002006:	480e      	ldr	r0, [pc, #56]	; (8002040 <Inverter2+0x2d0>)
 8002008:	f001 f9f0 	bl	80033ec <HAL_GPIO_ReadPin>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d112      	bne.n	8002038 <Inverter2+0x2c8>
				&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8002012:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002016:	480a      	ldr	r0, [pc, #40]	; (8002040 <Inverter2+0x2d0>)
 8002018:	f001 f9e8 	bl	80033ec <HAL_GPIO_ReadPin>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00a      	beq.n	8002038 <Inverter2+0x2c8>
				&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8002022:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002026:	4806      	ldr	r0, [pc, #24]	; (8002040 <Inverter2+0x2d0>)
 8002028:	f001 f9e0 	bl	80033ec <HAL_GPIO_ReadPin>
 800202c:	4603      	mov	r3, r0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d102      	bne.n	8002038 <Inverter2+0x2c8>
			state6_inv2();
 8002032:	f7ff f94f 	bl	80012d4 <state6_inv2>
}
 8002036:	e7ff      	b.n	8002038 <Inverter2+0x2c8>
 8002038:	bf00      	nop
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	48000800 	.word	0x48000800
 8002044:	20000290 	.word	0x20000290

08002048 <Inverter4>:
void Inverter4(uint8_t inv_mode) {
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	71fb      	strb	r3, [r7, #7]
	if (inv_mode == 1) {
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d102      	bne.n	800205e <Inverter4+0x16>
		stateOff_inv4();
 8002058:	f7ff fbd2 	bl	8001800 <stateOff_inv4>
				&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
				&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
			state6_inv4();
		}
	}
}
 800205c:	e158      	b.n	8002310 <Inverter4+0x2c8>
	else if (inv_mode == 2) {
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	2b02      	cmp	r3, #2
 8002062:	d102      	bne.n	800206a <Inverter4+0x22>
		state0_inv4();
 8002064:	f7ff faa8 	bl	80015b8 <state0_inv4>
}
 8002068:	e152      	b.n	8002310 <Inverter4+0x2c8>
	else if (inv_mode == 3) {
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	2b03      	cmp	r3, #3
 800206e:	f040 80a5 	bne.w	80021bc <Inverter4+0x174>
		if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8002072:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002076:	48a8      	ldr	r0, [pc, #672]	; (8002318 <Inverter4+0x2d0>)
 8002078:	f001 f9b8 	bl	80033ec <HAL_GPIO_ReadPin>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d012      	beq.n	80020a8 <Inverter4+0x60>
					&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8002082:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002086:	48a4      	ldr	r0, [pc, #656]	; (8002318 <Inverter4+0x2d0>)
 8002088:	f001 f9b0 	bl	80033ec <HAL_GPIO_ReadPin>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00a      	beq.n	80020a8 <Inverter4+0x60>
					&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8002092:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002096:	48a0      	ldr	r0, [pc, #640]	; (8002318 <Inverter4+0x2d0>)
 8002098:	f001 f9a8 	bl	80033ec <HAL_GPIO_ReadPin>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d102      	bne.n	80020a8 <Inverter4+0x60>
				state1_inv4();
 80020a2:	f7ff fab1 	bl	8001608 <state1_inv4>
 80020a6:	e133      	b.n	8002310 <Inverter4+0x2c8>
			else if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 80020a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020ac:	489a      	ldr	r0, [pc, #616]	; (8002318 <Inverter4+0x2d0>)
 80020ae:	f001 f99d 	bl	80033ec <HAL_GPIO_ReadPin>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d012      	beq.n	80020de <Inverter4+0x96>
					&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 80020b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020bc:	4896      	ldr	r0, [pc, #600]	; (8002318 <Inverter4+0x2d0>)
 80020be:	f001 f995 	bl	80033ec <HAL_GPIO_ReadPin>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d10a      	bne.n	80020de <Inverter4+0x96>
					&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 80020c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020cc:	4892      	ldr	r0, [pc, #584]	; (8002318 <Inverter4+0x2d0>)
 80020ce:	f001 f98d 	bl	80033ec <HAL_GPIO_ReadPin>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d102      	bne.n	80020de <Inverter4+0x96>
				state2_inv4();
 80020d8:	f7ff fac0 	bl	800165c <state2_inv4>
 80020dc:	e118      	b.n	8002310 <Inverter4+0x2c8>
			else if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 80020de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020e2:	488d      	ldr	r0, [pc, #564]	; (8002318 <Inverter4+0x2d0>)
 80020e4:	f001 f982 	bl	80033ec <HAL_GPIO_ReadPin>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d012      	beq.n	8002114 <Inverter4+0xcc>
					&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 80020ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020f2:	4889      	ldr	r0, [pc, #548]	; (8002318 <Inverter4+0x2d0>)
 80020f4:	f001 f97a 	bl	80033ec <HAL_GPIO_ReadPin>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d10a      	bne.n	8002114 <Inverter4+0xcc>
					&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 80020fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002102:	4885      	ldr	r0, [pc, #532]	; (8002318 <Inverter4+0x2d0>)
 8002104:	f001 f972 	bl	80033ec <HAL_GPIO_ReadPin>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d002      	beq.n	8002114 <Inverter4+0xcc>
				state3_inv4();
 800210e:	f7ff facf 	bl	80016b0 <state3_inv4>
 8002112:	e0fd      	b.n	8002310 <Inverter4+0x2c8>
			else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8002114:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002118:	487f      	ldr	r0, [pc, #508]	; (8002318 <Inverter4+0x2d0>)
 800211a:	f001 f967 	bl	80033ec <HAL_GPIO_ReadPin>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d112      	bne.n	800214a <Inverter4+0x102>
					&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8002124:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002128:	487b      	ldr	r0, [pc, #492]	; (8002318 <Inverter4+0x2d0>)
 800212a:	f001 f95f 	bl	80033ec <HAL_GPIO_ReadPin>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10a      	bne.n	800214a <Inverter4+0x102>
					&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8002134:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002138:	4877      	ldr	r0, [pc, #476]	; (8002318 <Inverter4+0x2d0>)
 800213a:	f001 f957 	bl	80033ec <HAL_GPIO_ReadPin>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d002      	beq.n	800214a <Inverter4+0x102>
				state4_inv4();
 8002144:	f7ff fade 	bl	8001704 <state4_inv4>
 8002148:	e0e2      	b.n	8002310 <Inverter4+0x2c8>
			else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 800214a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800214e:	4872      	ldr	r0, [pc, #456]	; (8002318 <Inverter4+0x2d0>)
 8002150:	f001 f94c 	bl	80033ec <HAL_GPIO_ReadPin>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d112      	bne.n	8002180 <Inverter4+0x138>
					&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 800215a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800215e:	486e      	ldr	r0, [pc, #440]	; (8002318 <Inverter4+0x2d0>)
 8002160:	f001 f944 	bl	80033ec <HAL_GPIO_ReadPin>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00a      	beq.n	8002180 <Inverter4+0x138>
					&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 800216a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800216e:	486a      	ldr	r0, [pc, #424]	; (8002318 <Inverter4+0x2d0>)
 8002170:	f001 f93c 	bl	80033ec <HAL_GPIO_ReadPin>
 8002174:	4603      	mov	r3, r0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d002      	beq.n	8002180 <Inverter4+0x138>
				state5_inv4();
 800217a:	f7ff faed 	bl	8001758 <state5_inv4>
 800217e:	e0c7      	b.n	8002310 <Inverter4+0x2c8>
			else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8002180:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002184:	4864      	ldr	r0, [pc, #400]	; (8002318 <Inverter4+0x2d0>)
 8002186:	f001 f931 	bl	80033ec <HAL_GPIO_ReadPin>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	f040 80bf 	bne.w	8002310 <Inverter4+0x2c8>
					&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8002192:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002196:	4860      	ldr	r0, [pc, #384]	; (8002318 <Inverter4+0x2d0>)
 8002198:	f001 f928 	bl	80033ec <HAL_GPIO_ReadPin>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 80b6 	beq.w	8002310 <Inverter4+0x2c8>
					&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 80021a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021a8:	485b      	ldr	r0, [pc, #364]	; (8002318 <Inverter4+0x2d0>)
 80021aa:	f001 f91f 	bl	80033ec <HAL_GPIO_ReadPin>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f040 80ad 	bne.w	8002310 <Inverter4+0x2c8>
				state6_inv4();
 80021b6:	f7ff faf9 	bl	80017ac <state6_inv4>
}
 80021ba:	e0a9      	b.n	8002310 <Inverter4+0x2c8>
	else if (inv_mode == 4) {
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	2b04      	cmp	r3, #4
 80021c0:	f040 80a6 	bne.w	8002310 <Inverter4+0x2c8>
		PWM4 = 4095;
 80021c4:	4b55      	ldr	r3, [pc, #340]	; (800231c <Inverter4+0x2d4>)
 80021c6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80021ca:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin) && HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 80021cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021d0:	4851      	ldr	r0, [pc, #324]	; (8002318 <Inverter4+0x2d0>)
 80021d2:	f001 f90b 	bl	80033ec <HAL_GPIO_ReadPin>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d012      	beq.n	8002202 <Inverter4+0x1ba>
 80021dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021e0:	484d      	ldr	r0, [pc, #308]	; (8002318 <Inverter4+0x2d0>)
 80021e2:	f001 f903 	bl	80033ec <HAL_GPIO_ReadPin>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00a      	beq.n	8002202 <Inverter4+0x1ba>
				&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 80021ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021f0:	4849      	ldr	r0, [pc, #292]	; (8002318 <Inverter4+0x2d0>)
 80021f2:	f001 f8fb 	bl	80033ec <HAL_GPIO_ReadPin>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d102      	bne.n	8002202 <Inverter4+0x1ba>
			state1_inv4();
 80021fc:	f7ff fa04 	bl	8001608 <state1_inv4>
 8002200:	e086      	b.n	8002310 <Inverter4+0x2c8>
		else if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8002202:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002206:	4844      	ldr	r0, [pc, #272]	; (8002318 <Inverter4+0x2d0>)
 8002208:	f001 f8f0 	bl	80033ec <HAL_GPIO_ReadPin>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d012      	beq.n	8002238 <Inverter4+0x1f0>
				&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8002212:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002216:	4840      	ldr	r0, [pc, #256]	; (8002318 <Inverter4+0x2d0>)
 8002218:	f001 f8e8 	bl	80033ec <HAL_GPIO_ReadPin>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10a      	bne.n	8002238 <Inverter4+0x1f0>
				&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8002222:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002226:	483c      	ldr	r0, [pc, #240]	; (8002318 <Inverter4+0x2d0>)
 8002228:	f001 f8e0 	bl	80033ec <HAL_GPIO_ReadPin>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d102      	bne.n	8002238 <Inverter4+0x1f0>
			state2_inv4();
 8002232:	f7ff fa13 	bl	800165c <state2_inv4>
 8002236:	e06b      	b.n	8002310 <Inverter4+0x2c8>
		else if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8002238:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800223c:	4836      	ldr	r0, [pc, #216]	; (8002318 <Inverter4+0x2d0>)
 800223e:	f001 f8d5 	bl	80033ec <HAL_GPIO_ReadPin>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d012      	beq.n	800226e <Inverter4+0x226>
				&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8002248:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800224c:	4832      	ldr	r0, [pc, #200]	; (8002318 <Inverter4+0x2d0>)
 800224e:	f001 f8cd 	bl	80033ec <HAL_GPIO_ReadPin>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d10a      	bne.n	800226e <Inverter4+0x226>
				&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8002258:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800225c:	482e      	ldr	r0, [pc, #184]	; (8002318 <Inverter4+0x2d0>)
 800225e:	f001 f8c5 	bl	80033ec <HAL_GPIO_ReadPin>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d002      	beq.n	800226e <Inverter4+0x226>
			state3_inv4();
 8002268:	f7ff fa22 	bl	80016b0 <state3_inv4>
 800226c:	e050      	b.n	8002310 <Inverter4+0x2c8>
		else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 800226e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002272:	4829      	ldr	r0, [pc, #164]	; (8002318 <Inverter4+0x2d0>)
 8002274:	f001 f8ba 	bl	80033ec <HAL_GPIO_ReadPin>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d112      	bne.n	80022a4 <Inverter4+0x25c>
				&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 800227e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002282:	4825      	ldr	r0, [pc, #148]	; (8002318 <Inverter4+0x2d0>)
 8002284:	f001 f8b2 	bl	80033ec <HAL_GPIO_ReadPin>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10a      	bne.n	80022a4 <Inverter4+0x25c>
				&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 800228e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002292:	4821      	ldr	r0, [pc, #132]	; (8002318 <Inverter4+0x2d0>)
 8002294:	f001 f8aa 	bl	80033ec <HAL_GPIO_ReadPin>
 8002298:	4603      	mov	r3, r0
 800229a:	2b00      	cmp	r3, #0
 800229c:	d002      	beq.n	80022a4 <Inverter4+0x25c>
			state4_inv4();
 800229e:	f7ff fa31 	bl	8001704 <state4_inv4>
 80022a2:	e035      	b.n	8002310 <Inverter4+0x2c8>
		else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 80022a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022a8:	481b      	ldr	r0, [pc, #108]	; (8002318 <Inverter4+0x2d0>)
 80022aa:	f001 f89f 	bl	80033ec <HAL_GPIO_ReadPin>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d112      	bne.n	80022da <Inverter4+0x292>
				&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 80022b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022b8:	4817      	ldr	r0, [pc, #92]	; (8002318 <Inverter4+0x2d0>)
 80022ba:	f001 f897 	bl	80033ec <HAL_GPIO_ReadPin>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00a      	beq.n	80022da <Inverter4+0x292>
				&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 80022c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022c8:	4813      	ldr	r0, [pc, #76]	; (8002318 <Inverter4+0x2d0>)
 80022ca:	f001 f88f 	bl	80033ec <HAL_GPIO_ReadPin>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d002      	beq.n	80022da <Inverter4+0x292>
			state5_inv4();
 80022d4:	f7ff fa40 	bl	8001758 <state5_inv4>
 80022d8:	e01a      	b.n	8002310 <Inverter4+0x2c8>
		else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 80022da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022de:	480e      	ldr	r0, [pc, #56]	; (8002318 <Inverter4+0x2d0>)
 80022e0:	f001 f884 	bl	80033ec <HAL_GPIO_ReadPin>
 80022e4:	4603      	mov	r3, r0
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d112      	bne.n	8002310 <Inverter4+0x2c8>
				&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 80022ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022ee:	480a      	ldr	r0, [pc, #40]	; (8002318 <Inverter4+0x2d0>)
 80022f0:	f001 f87c 	bl	80033ec <HAL_GPIO_ReadPin>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00a      	beq.n	8002310 <Inverter4+0x2c8>
				&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 80022fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022fe:	4806      	ldr	r0, [pc, #24]	; (8002318 <Inverter4+0x2d0>)
 8002300:	f001 f874 	bl	80033ec <HAL_GPIO_ReadPin>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d102      	bne.n	8002310 <Inverter4+0x2c8>
			state6_inv4();
 800230a:	f7ff fa4f 	bl	80017ac <state6_inv4>
}
 800230e:	e7ff      	b.n	8002310 <Inverter4+0x2c8>
 8002310:	bf00      	nop
 8002312:	3708      	adds	r7, #8
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	48000800 	.word	0x48000800
 800231c:	20000294 	.word	0x20000294

08002320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002324:	b672      	cpsid	i
}
 8002326:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002328:	e7fe      	b.n	8002328 <Error_Handler+0x8>
	...

0800232c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002332:	4b0f      	ldr	r3, [pc, #60]	; (8002370 <HAL_MspInit+0x44>)
 8002334:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002336:	4a0e      	ldr	r2, [pc, #56]	; (8002370 <HAL_MspInit+0x44>)
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	6613      	str	r3, [r2, #96]	; 0x60
 800233e:	4b0c      	ldr	r3, [pc, #48]	; (8002370 <HAL_MspInit+0x44>)
 8002340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	607b      	str	r3, [r7, #4]
 8002348:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800234a:	4b09      	ldr	r3, [pc, #36]	; (8002370 <HAL_MspInit+0x44>)
 800234c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800234e:	4a08      	ldr	r2, [pc, #32]	; (8002370 <HAL_MspInit+0x44>)
 8002350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002354:	6593      	str	r3, [r2, #88]	; 0x58
 8002356:	4b06      	ldr	r3, [pc, #24]	; (8002370 <HAL_MspInit+0x44>)
 8002358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235e:	603b      	str	r3, [r7, #0]
 8002360:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002362:	f001 f93b 	bl	80035dc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40021000 	.word	0x40021000

08002374 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08a      	sub	sp, #40	; 0x28
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800237c:	f107 0314 	add.w	r3, r7, #20
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	60da      	str	r2, [r3, #12]
 800238a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a15      	ldr	r2, [pc, #84]	; (80023e8 <HAL_DAC_MspInit+0x74>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d124      	bne.n	80023e0 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002396:	4b15      	ldr	r3, [pc, #84]	; (80023ec <HAL_DAC_MspInit+0x78>)
 8002398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800239a:	4a14      	ldr	r2, [pc, #80]	; (80023ec <HAL_DAC_MspInit+0x78>)
 800239c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023a2:	4b12      	ldr	r3, [pc, #72]	; (80023ec <HAL_DAC_MspInit+0x78>)
 80023a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ae:	4b0f      	ldr	r3, [pc, #60]	; (80023ec <HAL_DAC_MspInit+0x78>)
 80023b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023b2:	4a0e      	ldr	r2, [pc, #56]	; (80023ec <HAL_DAC_MspInit+0x78>)
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023ba:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <HAL_DAC_MspInit+0x78>)
 80023bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80023c6:	2310      	movs	r3, #16
 80023c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023ca:	2303      	movs	r3, #3
 80023cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ce:	2300      	movs	r3, #0
 80023d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023d2:	f107 0314 	add.w	r3, r7, #20
 80023d6:	4619      	mov	r1, r3
 80023d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80023dc:	f000 fe84 	bl	80030e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80023e0:	bf00      	nop
 80023e2:	3728      	adds	r7, #40	; 0x28
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	50000800 	.word	0x50000800
 80023ec:	40021000 	.word	0x40021000

080023f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b0a0      	sub	sp, #128	; 0x80
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	60da      	str	r2, [r3, #12]
 8002406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002408:	f107 0318 	add.w	r3, r7, #24
 800240c:	2254      	movs	r2, #84	; 0x54
 800240e:	2100      	movs	r1, #0
 8002410:	4618      	mov	r0, r3
 8002412:	f004 fc51 	bl	8006cb8 <memset>
  if(huart->Instance==LPUART1)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a41      	ldr	r2, [pc, #260]	; (8002520 <HAL_UART_MspInit+0x130>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d137      	bne.n	8002490 <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002420:	2320      	movs	r3, #32
 8002422:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002424:	2300      	movs	r3, #0
 8002426:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002428:	f107 0318 	add.w	r3, r7, #24
 800242c:	4618      	mov	r0, r3
 800242e:	f001 fe19 	bl	8004064 <HAL_RCCEx_PeriphCLKConfig>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002438:	f7ff ff72 	bl	8002320 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800243c:	4b39      	ldr	r3, [pc, #228]	; (8002524 <HAL_UART_MspInit+0x134>)
 800243e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002440:	4a38      	ldr	r2, [pc, #224]	; (8002524 <HAL_UART_MspInit+0x134>)
 8002442:	f043 0301 	orr.w	r3, r3, #1
 8002446:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002448:	4b36      	ldr	r3, [pc, #216]	; (8002524 <HAL_UART_MspInit+0x134>)
 800244a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244c:	f003 0301 	and.w	r3, r3, #1
 8002450:	617b      	str	r3, [r7, #20]
 8002452:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002454:	4b33      	ldr	r3, [pc, #204]	; (8002524 <HAL_UART_MspInit+0x134>)
 8002456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002458:	4a32      	ldr	r2, [pc, #200]	; (8002524 <HAL_UART_MspInit+0x134>)
 800245a:	f043 0301 	orr.w	r3, r3, #1
 800245e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002460:	4b30      	ldr	r3, [pc, #192]	; (8002524 <HAL_UART_MspInit+0x134>)
 8002462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	613b      	str	r3, [r7, #16]
 800246a:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800246c:	230c      	movs	r3, #12
 800246e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002470:	2302      	movs	r3, #2
 8002472:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002478:	2300      	movs	r3, #0
 800247a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800247c:	230c      	movs	r3, #12
 800247e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002480:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002484:	4619      	mov	r1, r3
 8002486:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800248a:	f000 fe2d 	bl	80030e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800248e:	e042      	b.n	8002516 <HAL_UART_MspInit+0x126>
  else if(huart->Instance==USART1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a24      	ldr	r2, [pc, #144]	; (8002528 <HAL_UART_MspInit+0x138>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d13d      	bne.n	8002516 <HAL_UART_MspInit+0x126>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800249a:	2301      	movs	r3, #1
 800249c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800249e:	2300      	movs	r3, #0
 80024a0:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024a2:	f107 0318 	add.w	r3, r7, #24
 80024a6:	4618      	mov	r0, r3
 80024a8:	f001 fddc 	bl	8004064 <HAL_RCCEx_PeriphCLKConfig>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 80024b2:	f7ff ff35 	bl	8002320 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80024b6:	4b1b      	ldr	r3, [pc, #108]	; (8002524 <HAL_UART_MspInit+0x134>)
 80024b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ba:	4a1a      	ldr	r2, [pc, #104]	; (8002524 <HAL_UART_MspInit+0x134>)
 80024bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024c0:	6613      	str	r3, [r2, #96]	; 0x60
 80024c2:	4b18      	ldr	r3, [pc, #96]	; (8002524 <HAL_UART_MspInit+0x134>)
 80024c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ce:	4b15      	ldr	r3, [pc, #84]	; (8002524 <HAL_UART_MspInit+0x134>)
 80024d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d2:	4a14      	ldr	r2, [pc, #80]	; (8002524 <HAL_UART_MspInit+0x134>)
 80024d4:	f043 0304 	orr.w	r3, r3, #4
 80024d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024da:	4b12      	ldr	r3, [pc, #72]	; (8002524 <HAL_UART_MspInit+0x134>)
 80024dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024de:	f003 0304 	and.w	r3, r3, #4
 80024e2:	60bb      	str	r3, [r7, #8]
 80024e4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80024e6:	2330      	movs	r3, #48	; 0x30
 80024e8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ea:	2302      	movs	r3, #2
 80024ec:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ee:	2300      	movs	r3, #0
 80024f0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f2:	2300      	movs	r3, #0
 80024f4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024f6:	2307      	movs	r3, #7
 80024f8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024fa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80024fe:	4619      	mov	r1, r3
 8002500:	480a      	ldr	r0, [pc, #40]	; (800252c <HAL_UART_MspInit+0x13c>)
 8002502:	f000 fdf1 	bl	80030e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002506:	2200      	movs	r2, #0
 8002508:	2100      	movs	r1, #0
 800250a:	2025      	movs	r0, #37	; 0x25
 800250c:	f000 fb2d 	bl	8002b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002510:	2025      	movs	r0, #37	; 0x25
 8002512:	f000 fb44 	bl	8002b9e <HAL_NVIC_EnableIRQ>
}
 8002516:	bf00      	nop
 8002518:	3780      	adds	r7, #128	; 0x80
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40008000 	.word	0x40008000
 8002524:	40021000 	.word	0x40021000
 8002528:	40013800 	.word	0x40013800
 800252c:	48000800 	.word	0x48000800

08002530 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a28      	ldr	r2, [pc, #160]	; (80025e0 <HAL_TIM_PWM_MspInit+0xb0>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d10c      	bne.n	800255c <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002542:	4b28      	ldr	r3, [pc, #160]	; (80025e4 <HAL_TIM_PWM_MspInit+0xb4>)
 8002544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002546:	4a27      	ldr	r2, [pc, #156]	; (80025e4 <HAL_TIM_PWM_MspInit+0xb4>)
 8002548:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800254c:	6613      	str	r3, [r2, #96]	; 0x60
 800254e:	4b25      	ldr	r3, [pc, #148]	; (80025e4 <HAL_TIM_PWM_MspInit+0xb4>)
 8002550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002552:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800255a:	e03c      	b.n	80025d6 <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM2)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002564:	d10c      	bne.n	8002580 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002566:	4b1f      	ldr	r3, [pc, #124]	; (80025e4 <HAL_TIM_PWM_MspInit+0xb4>)
 8002568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256a:	4a1e      	ldr	r2, [pc, #120]	; (80025e4 <HAL_TIM_PWM_MspInit+0xb4>)
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	6593      	str	r3, [r2, #88]	; 0x58
 8002572:	4b1c      	ldr	r3, [pc, #112]	; (80025e4 <HAL_TIM_PWM_MspInit+0xb4>)
 8002574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	613b      	str	r3, [r7, #16]
 800257c:	693b      	ldr	r3, [r7, #16]
}
 800257e:	e02a      	b.n	80025d6 <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM3)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a18      	ldr	r2, [pc, #96]	; (80025e8 <HAL_TIM_PWM_MspInit+0xb8>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d114      	bne.n	80025b4 <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800258a:	4b16      	ldr	r3, [pc, #88]	; (80025e4 <HAL_TIM_PWM_MspInit+0xb4>)
 800258c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258e:	4a15      	ldr	r2, [pc, #84]	; (80025e4 <HAL_TIM_PWM_MspInit+0xb4>)
 8002590:	f043 0302 	orr.w	r3, r3, #2
 8002594:	6593      	str	r3, [r2, #88]	; 0x58
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <HAL_TIM_PWM_MspInit+0xb4>)
 8002598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80025a2:	2200      	movs	r2, #0
 80025a4:	2100      	movs	r1, #0
 80025a6:	201d      	movs	r0, #29
 80025a8:	f000 fadf 	bl	8002b6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80025ac:	201d      	movs	r0, #29
 80025ae:	f000 faf6 	bl	8002b9e <HAL_NVIC_EnableIRQ>
}
 80025b2:	e010      	b.n	80025d6 <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM8)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a0c      	ldr	r2, [pc, #48]	; (80025ec <HAL_TIM_PWM_MspInit+0xbc>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d10b      	bne.n	80025d6 <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80025be:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <HAL_TIM_PWM_MspInit+0xb4>)
 80025c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c2:	4a08      	ldr	r2, [pc, #32]	; (80025e4 <HAL_TIM_PWM_MspInit+0xb4>)
 80025c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025c8:	6613      	str	r3, [r2, #96]	; 0x60
 80025ca:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <HAL_TIM_PWM_MspInit+0xb4>)
 80025cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025d2:	60bb      	str	r3, [r7, #8]
 80025d4:	68bb      	ldr	r3, [r7, #8]
}
 80025d6:	bf00      	nop
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40012c00 	.word	0x40012c00
 80025e4:	40021000 	.word	0x40021000
 80025e8:	40000400 	.word	0x40000400
 80025ec:	40013400 	.word	0x40013400

080025f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08c      	sub	sp, #48	; 0x30
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f8:	f107 031c 	add.w	r3, r7, #28
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	605a      	str	r2, [r3, #4]
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	60da      	str	r2, [r3, #12]
 8002606:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a5a      	ldr	r2, [pc, #360]	; (8002778 <HAL_TIM_MspPostInit+0x188>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d13a      	bne.n	8002688 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002612:	4b5a      	ldr	r3, [pc, #360]	; (800277c <HAL_TIM_MspPostInit+0x18c>)
 8002614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002616:	4a59      	ldr	r2, [pc, #356]	; (800277c <HAL_TIM_MspPostInit+0x18c>)
 8002618:	f043 0304 	orr.w	r3, r3, #4
 800261c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800261e:	4b57      	ldr	r3, [pc, #348]	; (800277c <HAL_TIM_MspPostInit+0x18c>)
 8002620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	61bb      	str	r3, [r7, #24]
 8002628:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800262a:	4b54      	ldr	r3, [pc, #336]	; (800277c <HAL_TIM_MspPostInit+0x18c>)
 800262c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262e:	4a53      	ldr	r2, [pc, #332]	; (800277c <HAL_TIM_MspPostInit+0x18c>)
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002636:	4b51      	ldr	r3, [pc, #324]	; (800277c <HAL_TIM_MspPostInit+0x18c>)
 8002638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	697b      	ldr	r3, [r7, #20]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC3     ------> TIM1_CH4
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 8002642:	230b      	movs	r3, #11
 8002644:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002646:	2302      	movs	r3, #2
 8002648:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264a:	2300      	movs	r3, #0
 800264c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264e:	2300      	movs	r3, #0
 8002650:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002652:	2302      	movs	r3, #2
 8002654:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002656:	f107 031c 	add.w	r3, r7, #28
 800265a:	4619      	mov	r1, r3
 800265c:	4848      	ldr	r0, [pc, #288]	; (8002780 <HAL_TIM_MspPostInit+0x190>)
 800265e:	f000 fd43 	bl	80030e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002662:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002668:	2302      	movs	r3, #2
 800266a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266c:	2300      	movs	r3, #0
 800266e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002670:	2300      	movs	r3, #0
 8002672:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002674:	2306      	movs	r3, #6
 8002676:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002678:	f107 031c 	add.w	r3, r7, #28
 800267c:	4619      	mov	r1, r3
 800267e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002682:	f000 fd31 	bl	80030e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002686:	e073      	b.n	8002770 <HAL_TIM_MspPostInit+0x180>
  else if(htim->Instance==TIM2)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002690:	d14c      	bne.n	800272c <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002692:	4b3a      	ldr	r3, [pc, #232]	; (800277c <HAL_TIM_MspPostInit+0x18c>)
 8002694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002696:	4a39      	ldr	r2, [pc, #228]	; (800277c <HAL_TIM_MspPostInit+0x18c>)
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800269e:	4b37      	ldr	r3, [pc, #220]	; (800277c <HAL_TIM_MspPostInit+0x18c>)
 80026a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	613b      	str	r3, [r7, #16]
 80026a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026aa:	4b34      	ldr	r3, [pc, #208]	; (800277c <HAL_TIM_MspPostInit+0x18c>)
 80026ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ae:	4a33      	ldr	r2, [pc, #204]	; (800277c <HAL_TIM_MspPostInit+0x18c>)
 80026b0:	f043 0302 	orr.w	r3, r3, #2
 80026b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026b6:	4b31      	ldr	r3, [pc, #196]	; (800277c <HAL_TIM_MspPostInit+0x18c>)
 80026b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026c2:	2303      	movs	r3, #3
 80026c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c6:	2302      	movs	r3, #2
 80026c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ce:	2300      	movs	r3, #0
 80026d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026d2:	2301      	movs	r3, #1
 80026d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d6:	f107 031c 	add.w	r3, r7, #28
 80026da:	4619      	mov	r1, r3
 80026dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026e0:	f000 fd02 	bl	80030e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80026e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80026e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ea:	2302      	movs	r3, #2
 80026ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ee:	2300      	movs	r3, #0
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f2:	2300      	movs	r3, #0
 80026f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026f6:	2301      	movs	r3, #1
 80026f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026fa:	f107 031c 	add.w	r3, r7, #28
 80026fe:	4619      	mov	r1, r3
 8002700:	4820      	ldr	r0, [pc, #128]	; (8002784 <HAL_TIM_MspPostInit+0x194>)
 8002702:	f000 fcf1 	bl	80030e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002706:	f44f 7300 	mov.w	r3, #512	; 0x200
 800270a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800270c:	2302      	movs	r3, #2
 800270e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002710:	2300      	movs	r3, #0
 8002712:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002714:	2300      	movs	r3, #0
 8002716:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 8002718:	230a      	movs	r3, #10
 800271a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800271c:	f107 031c 	add.w	r3, r7, #28
 8002720:	4619      	mov	r1, r3
 8002722:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002726:	f000 fcdf 	bl	80030e8 <HAL_GPIO_Init>
}
 800272a:	e021      	b.n	8002770 <HAL_TIM_MspPostInit+0x180>
  else if(htim->Instance==TIM8)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a15      	ldr	r2, [pc, #84]	; (8002788 <HAL_TIM_MspPostInit+0x198>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d11c      	bne.n	8002770 <HAL_TIM_MspPostInit+0x180>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002736:	4b11      	ldr	r3, [pc, #68]	; (800277c <HAL_TIM_MspPostInit+0x18c>)
 8002738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800273a:	4a10      	ldr	r2, [pc, #64]	; (800277c <HAL_TIM_MspPostInit+0x18c>)
 800273c:	f043 0304 	orr.w	r3, r3, #4
 8002740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002742:	4b0e      	ldr	r3, [pc, #56]	; (800277c <HAL_TIM_MspPostInit+0x18c>)
 8002744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002746:	f003 0304 	and.w	r3, r3, #4
 800274a:	60bb      	str	r3, [r7, #8]
 800274c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800274e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002752:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002754:	2302      	movs	r3, #2
 8002756:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002758:	2300      	movs	r3, #0
 800275a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275c:	2300      	movs	r3, #0
 800275e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002760:	2304      	movs	r3, #4
 8002762:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002764:	f107 031c 	add.w	r3, r7, #28
 8002768:	4619      	mov	r1, r3
 800276a:	4805      	ldr	r0, [pc, #20]	; (8002780 <HAL_TIM_MspPostInit+0x190>)
 800276c:	f000 fcbc 	bl	80030e8 <HAL_GPIO_Init>
}
 8002770:	bf00      	nop
 8002772:	3730      	adds	r7, #48	; 0x30
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}
 8002778:	40012c00 	.word	0x40012c00
 800277c:	40021000 	.word	0x40021000
 8002780:	48000800 	.word	0x48000800
 8002784:	48000400 	.word	0x48000400
 8002788:	40013400 	.word	0x40013400

0800278c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002790:	e7fe      	b.n	8002790 <NMI_Handler+0x4>

08002792 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002792:	b480      	push	{r7}
 8002794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002796:	e7fe      	b.n	8002796 <HardFault_Handler+0x4>

08002798 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800279c:	e7fe      	b.n	800279c <MemManage_Handler+0x4>

0800279e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800279e:	b480      	push	{r7}
 80027a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027a2:	e7fe      	b.n	80027a2 <BusFault_Handler+0x4>

080027a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027a4:	b480      	push	{r7}
 80027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027a8:	e7fe      	b.n	80027a8 <UsageFault_Handler+0x4>

080027aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027aa:	b480      	push	{r7}
 80027ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027bc:	bf00      	nop
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr

080027c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027c6:	b480      	push	{r7}
 80027c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027ca:	bf00      	nop
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027d8:	f000 f8ac 	bl	8002934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027dc:	bf00      	nop
 80027de:	bd80      	pop	{r7, pc}

080027e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80027e4:	4802      	ldr	r0, [pc, #8]	; (80027f0 <TIM3_IRQHandler+0x10>)
 80027e6:	f001 fff5 	bl	80047d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	200001f8 	.word	0x200001f8

080027f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80027f8:	4802      	ldr	r0, [pc, #8]	; (8002804 <USART1_IRQHandler+0x10>)
 80027fa:	f003 f887 	bl	800590c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	200000d0 	.word	0x200000d0

08002808 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800280c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002810:	f000 fe1c 	bl	800344c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002814:	bf00      	nop
 8002816:	bd80      	pop	{r7, pc}

08002818 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002818:	b480      	push	{r7}
 800281a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800281c:	4b06      	ldr	r3, [pc, #24]	; (8002838 <SystemInit+0x20>)
 800281e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002822:	4a05      	ldr	r2, [pc, #20]	; (8002838 <SystemInit+0x20>)
 8002824:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800282c:	bf00      	nop
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	e000ed00 	.word	0xe000ed00

0800283c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800283c:	480d      	ldr	r0, [pc, #52]	; (8002874 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800283e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002840:	480d      	ldr	r0, [pc, #52]	; (8002878 <LoopForever+0x6>)
  ldr r1, =_edata
 8002842:	490e      	ldr	r1, [pc, #56]	; (800287c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002844:	4a0e      	ldr	r2, [pc, #56]	; (8002880 <LoopForever+0xe>)
  movs r3, #0
 8002846:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002848:	e002      	b.n	8002850 <LoopCopyDataInit>

0800284a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800284a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800284c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800284e:	3304      	adds	r3, #4

08002850 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002850:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002852:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002854:	d3f9      	bcc.n	800284a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002856:	4a0b      	ldr	r2, [pc, #44]	; (8002884 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002858:	4c0b      	ldr	r4, [pc, #44]	; (8002888 <LoopForever+0x16>)
  movs r3, #0
 800285a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800285c:	e001      	b.n	8002862 <LoopFillZerobss>

0800285e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800285e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002860:	3204      	adds	r2, #4

08002862 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002862:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002864:	d3fb      	bcc.n	800285e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002866:	f7ff ffd7 	bl	8002818 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800286a:	f004 fa01 	bl	8006c70 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800286e:	f7fd fe55 	bl	800051c <main>

08002872 <LoopForever>:

LoopForever:
    b LoopForever
 8002872:	e7fe      	b.n	8002872 <LoopForever>
  ldr   r0, =_estack
 8002874:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800287c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002880:	08006d30 	.word	0x08006d30
  ldr r2, =_sbss
 8002884:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8002888:	2000029c 	.word	0x2000029c

0800288c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800288c:	e7fe      	b.n	800288c <ADC1_2_IRQHandler>

0800288e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002894:	2300      	movs	r3, #0
 8002896:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002898:	2003      	movs	r0, #3
 800289a:	f000 f95b 	bl	8002b54 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800289e:	2000      	movs	r0, #0
 80028a0:	f000 f80e 	bl	80028c0 <HAL_InitTick>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d002      	beq.n	80028b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	71fb      	strb	r3, [r7, #7]
 80028ae:	e001      	b.n	80028b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028b0:	f7ff fd3c 	bl	800232c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028b4:	79fb      	ldrb	r3, [r7, #7]

}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80028cc:	4b16      	ldr	r3, [pc, #88]	; (8002928 <HAL_InitTick+0x68>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d022      	beq.n	800291a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80028d4:	4b15      	ldr	r3, [pc, #84]	; (800292c <HAL_InitTick+0x6c>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	4b13      	ldr	r3, [pc, #76]	; (8002928 <HAL_InitTick+0x68>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80028e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80028e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 f966 	bl	8002bba <HAL_SYSTICK_Config>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10f      	bne.n	8002914 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b0f      	cmp	r3, #15
 80028f8:	d809      	bhi.n	800290e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028fa:	2200      	movs	r2, #0
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	f04f 30ff 	mov.w	r0, #4294967295
 8002902:	f000 f932 	bl	8002b6a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002906:	4a0a      	ldr	r2, [pc, #40]	; (8002930 <HAL_InitTick+0x70>)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	e007      	b.n	800291e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	73fb      	strb	r3, [r7, #15]
 8002912:	e004      	b.n	800291e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	73fb      	strb	r3, [r7, #15]
 8002918:	e001      	b.n	800291e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800291e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	2000000c 	.word	0x2000000c
 800292c:	20000004 	.word	0x20000004
 8002930:	20000008 	.word	0x20000008

08002934 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002938:	4b05      	ldr	r3, [pc, #20]	; (8002950 <HAL_IncTick+0x1c>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	4b05      	ldr	r3, [pc, #20]	; (8002954 <HAL_IncTick+0x20>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4413      	add	r3, r2
 8002942:	4a03      	ldr	r2, [pc, #12]	; (8002950 <HAL_IncTick+0x1c>)
 8002944:	6013      	str	r3, [r2, #0]
}
 8002946:	bf00      	nop
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	20000298 	.word	0x20000298
 8002954:	2000000c 	.word	0x2000000c

08002958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  return uwTick;
 800295c:	4b03      	ldr	r3, [pc, #12]	; (800296c <HAL_GetTick+0x14>)
 800295e:	681b      	ldr	r3, [r3, #0]
}
 8002960:	4618      	mov	r0, r3
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	20000298 	.word	0x20000298

08002970 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002978:	f7ff ffee 	bl	8002958 <HAL_GetTick>
 800297c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002988:	d004      	beq.n	8002994 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800298a:	4b09      	ldr	r3, [pc, #36]	; (80029b0 <HAL_Delay+0x40>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	4413      	add	r3, r2
 8002992:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002994:	bf00      	nop
 8002996:	f7ff ffdf 	bl	8002958 <HAL_GetTick>
 800299a:	4602      	mov	r2, r0
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d8f7      	bhi.n	8002996 <HAL_Delay+0x26>
  {
  }
}
 80029a6:	bf00      	nop
 80029a8:	bf00      	nop
 80029aa:	3710      	adds	r7, #16
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	2000000c 	.word	0x2000000c

080029b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b085      	sub	sp, #20
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029c4:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <__NVIC_SetPriorityGrouping+0x44>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029ca:	68ba      	ldr	r2, [r7, #8]
 80029cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80029d0:	4013      	ands	r3, r2
 80029d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029e6:	4a04      	ldr	r2, [pc, #16]	; (80029f8 <__NVIC_SetPriorityGrouping+0x44>)
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	60d3      	str	r3, [r2, #12]
}
 80029ec:	bf00      	nop
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	e000ed00 	.word	0xe000ed00

080029fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a00:	4b04      	ldr	r3, [pc, #16]	; (8002a14 <__NVIC_GetPriorityGrouping+0x18>)
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	0a1b      	lsrs	r3, r3, #8
 8002a06:	f003 0307 	and.w	r3, r3, #7
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr
 8002a14:	e000ed00 	.word	0xe000ed00

08002a18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	db0b      	blt.n	8002a42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a2a:	79fb      	ldrb	r3, [r7, #7]
 8002a2c:	f003 021f 	and.w	r2, r3, #31
 8002a30:	4907      	ldr	r1, [pc, #28]	; (8002a50 <__NVIC_EnableIRQ+0x38>)
 8002a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a36:	095b      	lsrs	r3, r3, #5
 8002a38:	2001      	movs	r0, #1
 8002a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a42:	bf00      	nop
 8002a44:	370c      	adds	r7, #12
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	e000e100 	.word	0xe000e100

08002a54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	6039      	str	r1, [r7, #0]
 8002a5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	db0a      	blt.n	8002a7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	b2da      	uxtb	r2, r3
 8002a6c:	490c      	ldr	r1, [pc, #48]	; (8002aa0 <__NVIC_SetPriority+0x4c>)
 8002a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a72:	0112      	lsls	r2, r2, #4
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	440b      	add	r3, r1
 8002a78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a7c:	e00a      	b.n	8002a94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	b2da      	uxtb	r2, r3
 8002a82:	4908      	ldr	r1, [pc, #32]	; (8002aa4 <__NVIC_SetPriority+0x50>)
 8002a84:	79fb      	ldrb	r3, [r7, #7]
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	3b04      	subs	r3, #4
 8002a8c:	0112      	lsls	r2, r2, #4
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	440b      	add	r3, r1
 8002a92:	761a      	strb	r2, [r3, #24]
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	e000e100 	.word	0xe000e100
 8002aa4:	e000ed00 	.word	0xe000ed00

08002aa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b089      	sub	sp, #36	; 0x24
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f1c3 0307 	rsb	r3, r3, #7
 8002ac2:	2b04      	cmp	r3, #4
 8002ac4:	bf28      	it	cs
 8002ac6:	2304      	movcs	r3, #4
 8002ac8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aca:	69fb      	ldr	r3, [r7, #28]
 8002acc:	3304      	adds	r3, #4
 8002ace:	2b06      	cmp	r3, #6
 8002ad0:	d902      	bls.n	8002ad8 <NVIC_EncodePriority+0x30>
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	3b03      	subs	r3, #3
 8002ad6:	e000      	b.n	8002ada <NVIC_EncodePriority+0x32>
 8002ad8:	2300      	movs	r3, #0
 8002ada:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002adc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	43da      	mvns	r2, r3
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	401a      	ands	r2, r3
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002af0:	f04f 31ff 	mov.w	r1, #4294967295
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	fa01 f303 	lsl.w	r3, r1, r3
 8002afa:	43d9      	mvns	r1, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b00:	4313      	orrs	r3, r2
         );
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3724      	adds	r7, #36	; 0x24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr
	...

08002b10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b20:	d301      	bcc.n	8002b26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b22:	2301      	movs	r3, #1
 8002b24:	e00f      	b.n	8002b46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b26:	4a0a      	ldr	r2, [pc, #40]	; (8002b50 <SysTick_Config+0x40>)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b2e:	210f      	movs	r1, #15
 8002b30:	f04f 30ff 	mov.w	r0, #4294967295
 8002b34:	f7ff ff8e 	bl	8002a54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b38:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <SysTick_Config+0x40>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b3e:	4b04      	ldr	r3, [pc, #16]	; (8002b50 <SysTick_Config+0x40>)
 8002b40:	2207      	movs	r2, #7
 8002b42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b44:	2300      	movs	r3, #0
}
 8002b46:	4618      	mov	r0, r3
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	e000e010 	.word	0xe000e010

08002b54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7ff ff29 	bl	80029b4 <__NVIC_SetPriorityGrouping>
}
 8002b62:	bf00      	nop
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}

08002b6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b6a:	b580      	push	{r7, lr}
 8002b6c:	b086      	sub	sp, #24
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	4603      	mov	r3, r0
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	607a      	str	r2, [r7, #4]
 8002b76:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b78:	f7ff ff40 	bl	80029fc <__NVIC_GetPriorityGrouping>
 8002b7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	68b9      	ldr	r1, [r7, #8]
 8002b82:	6978      	ldr	r0, [r7, #20]
 8002b84:	f7ff ff90 	bl	8002aa8 <NVIC_EncodePriority>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b8e:	4611      	mov	r1, r2
 8002b90:	4618      	mov	r0, r3
 8002b92:	f7ff ff5f 	bl	8002a54 <__NVIC_SetPriority>
}
 8002b96:	bf00      	nop
 8002b98:	3718      	adds	r7, #24
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b082      	sub	sp, #8
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff ff33 	bl	8002a18 <__NVIC_EnableIRQ>
}
 8002bb2:	bf00      	nop
 8002bb4:	3708      	adds	r7, #8
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}

08002bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b082      	sub	sp, #8
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7ff ffa4 	bl	8002b10 <SysTick_Config>
 8002bc8:	4603      	mov	r3, r0
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b082      	sub	sp, #8
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e014      	b.n	8002c0e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	791b      	ldrb	r3, [r3, #4]
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d105      	bne.n	8002bfa <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff fbbd 	bl	8002374 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2202      	movs	r2, #2
 8002bfe:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
	...

08002c18 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08a      	sub	sp, #40	; 0x28
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	795b      	ldrb	r3, [r3, #5]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d101      	bne.n	8002c30 <HAL_DAC_ConfigChannel+0x18>
 8002c2c:	2302      	movs	r3, #2
 8002c2e:	e192      	b.n	8002f56 <HAL_DAC_ConfigChannel+0x33e>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2201      	movs	r2, #1
 8002c34:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2202      	movs	r2, #2
 8002c3a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	d174      	bne.n	8002d2e <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002c44:	f7ff fe88 	bl	8002958 <HAL_GetTick>
 8002c48:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d134      	bne.n	8002cba <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c50:	e011      	b.n	8002c76 <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002c52:	f7ff fe81 	bl	8002958 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d90a      	bls.n	8002c76 <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	f043 0208 	orr.w	r2, r3, #8
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2203      	movs	r2, #3
 8002c70:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e16f      	b.n	8002f56 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1e6      	bne.n	8002c52 <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8002c84:	2001      	movs	r0, #1
 8002c86:	f7ff fe73 	bl	8002970 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c92:	641a      	str	r2, [r3, #64]	; 0x40
 8002c94:	e01e      	b.n	8002cd4 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002c96:	f7ff fe5f 	bl	8002958 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d90a      	bls.n	8002cba <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	f043 0208 	orr.w	r2, r3, #8
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2203      	movs	r2, #3
 8002cb4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e14d      	b.n	8002f56 <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	dbe8      	blt.n	8002c96 <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8002cc4:	2001      	movs	r0, #1
 8002cc6:	f7ff fe53 	bl	8002970 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68ba      	ldr	r2, [r7, #8]
 8002cd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cd2:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f003 0310 	and.w	r3, r3, #16
 8002ce0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002ce4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce8:	43db      	mvns	r3, r3
 8002cea:	ea02 0103 	and.w	r1, r2, r3
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f003 0310 	and.w	r3, r3, #16
 8002cf8:	409a      	lsls	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f003 0310 	and.w	r3, r3, #16
 8002d0e:	21ff      	movs	r1, #255	; 0xff
 8002d10:	fa01 f303 	lsl.w	r3, r1, r3
 8002d14:	43db      	mvns	r3, r3
 8002d16:	ea02 0103 	and.w	r1, r2, r3
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f003 0310 	and.w	r3, r3, #16
 8002d24:	409a      	lsls	r2, r3
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	69db      	ldr	r3, [r3, #28]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d11d      	bne.n	8002d72 <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f003 0310 	and.w	r3, r3, #16
 8002d44:	221f      	movs	r2, #31
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	43db      	mvns	r3, r3
 8002d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d4e:	4013      	ands	r3, r2
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f003 0310 	and.w	r3, r3, #16
 8002d5e:	69ba      	ldr	r2, [r7, #24]
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d66:	4313      	orrs	r3, r2
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d70:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d78:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f003 0310 	and.w	r3, r3, #16
 8002d80:	2207      	movs	r2, #7
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43db      	mvns	r3, r3
 8002d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d102      	bne.n	8002d9c <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	623b      	str	r3, [r7, #32]
 8002d9a:	e00f      	b.n	8002dbc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d102      	bne.n	8002daa <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002da4:	2301      	movs	r3, #1
 8002da6:	623b      	str	r3, [r7, #32]
 8002da8:	e008      	b.n	8002dbc <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d102      	bne.n	8002db8 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002db2:	2301      	movs	r3, #1
 8002db4:	623b      	str	r3, [r7, #32]
 8002db6:	e001      	b.n	8002dbc <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002db8:	2300      	movs	r3, #0
 8002dba:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	689a      	ldr	r2, [r3, #8]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	695b      	ldr	r3, [r3, #20]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	6a3a      	ldr	r2, [r7, #32]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f003 0310 	and.w	r3, r3, #16
 8002dd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dde:	4013      	ands	r3, r2
 8002de0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	791b      	ldrb	r3, [r3, #4]
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d102      	bne.n	8002df0 <HAL_DAC_ConfigChannel+0x1d8>
 8002dea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002dee:	e000      	b.n	8002df2 <HAL_DAC_ConfigChannel+0x1da>
 8002df0:	2300      	movs	r3, #0
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f003 0310 	and.w	r3, r3, #16
 8002dfe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	43db      	mvns	r3, r3
 8002e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	795b      	ldrb	r3, [r3, #5]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d102      	bne.n	8002e1c <HAL_DAC_ConfigChannel+0x204>
 8002e16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002e1a:	e000      	b.n	8002e1e <HAL_DAC_ConfigChannel+0x206>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8002e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e26:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002e2a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d114      	bne.n	8002e5e <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8002e34:	f001 f898 	bl	8003f68 <HAL_RCC_GetHCLKFreq>
 8002e38:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	4a48      	ldr	r2, [pc, #288]	; (8002f60 <HAL_DAC_ConfigChannel+0x348>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d904      	bls.n	8002e4c <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8002e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e48:	627b      	str	r3, [r7, #36]	; 0x24
 8002e4a:	e00f      	b.n	8002e6c <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	4a45      	ldr	r2, [pc, #276]	; (8002f64 <HAL_DAC_ConfigChannel+0x34c>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d90a      	bls.n	8002e6a <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002e5c:	e006      	b.n	8002e6c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e64:	4313      	orrs	r3, r2
 8002e66:	627b      	str	r3, [r7, #36]	; 0x24
 8002e68:	e000      	b.n	8002e6c <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002e6a:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f003 0310 	and.w	r3, r3, #16
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6819      	ldr	r1, [r3, #0]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f003 0310 	and.w	r3, r3, #16
 8002e92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e96:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9a:	43da      	mvns	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	400a      	ands	r2, r1
 8002ea2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f003 0310 	and.w	r3, r3, #16
 8002eb2:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	68db      	ldr	r3, [r3, #12]
 8002ec6:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f003 0310 	and.w	r3, r3, #16
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ee0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6819      	ldr	r1, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f003 0310 	and.w	r3, r3, #16
 8002eee:	22c0      	movs	r2, #192	; 0xc0
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43da      	mvns	r2, r3
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	400a      	ands	r2, r1
 8002efc:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8002efe:	68bb      	ldr	r3, [r7, #8]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	089b      	lsrs	r3, r3, #2
 8002f04:	f003 030f 	and.w	r3, r3, #15
 8002f08:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	089b      	lsrs	r3, r3, #2
 8002f10:	021b      	lsls	r3, r3, #8
 8002f12:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f003 0310 	and.w	r3, r3, #16
 8002f28:	f640 710f 	movw	r1, #3855	; 0xf0f
 8002f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f30:	43db      	mvns	r3, r3
 8002f32:	ea02 0103 	and.w	r1, r2, r3
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f003 0310 	and.w	r3, r3, #16
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	409a      	lsls	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3728      	adds	r7, #40	; 0x28
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	09896800 	.word	0x09896800
 8002f64:	04c4b400 	.word	0x04c4b400

08002f68 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f70:	2300      	movs	r3, #0
 8002f72:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	d005      	beq.n	8002f8c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2204      	movs	r2, #4
 8002f84:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	73fb      	strb	r3, [r7, #15]
 8002f8a:	e037      	b.n	8002ffc <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 020e 	bic.w	r2, r2, #14
 8002f9a:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fa6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002faa:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0201 	bic.w	r2, r2, #1
 8002fba:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc0:	f003 021f 	and.w	r2, r3, #31
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc8:	2101      	movs	r1, #1
 8002fca:	fa01 f202 	lsl.w	r2, r1, r2
 8002fce:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002fd8:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d00c      	beq.n	8002ffc <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ff0:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002ffa:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800300c:	7bfb      	ldrb	r3, [r7, #15]
}
 800300e:	4618      	mov	r0, r3
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b084      	sub	sp, #16
 800301e:	af00      	add	r7, sp, #0
 8003020:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003022:	2300      	movs	r3, #0
 8003024:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d00d      	beq.n	800304e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2204      	movs	r2, #4
 8003036:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	73fb      	strb	r3, [r7, #15]
 800304c:	e047      	b.n	80030de <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f022 020e 	bic.w	r2, r2, #14
 800305c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 0201 	bic.w	r2, r2, #1
 800306c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003078:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800307c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003082:	f003 021f 	and.w	r2, r3, #31
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	2101      	movs	r1, #1
 800308c:	fa01 f202 	lsl.w	r2, r1, r2
 8003090:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800309a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00c      	beq.n	80030be <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030b2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80030bc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2201      	movs	r2, #1
 80030c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	4798      	blx	r3
    }
  }
  return status;
 80030de:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b087      	sub	sp, #28
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80030f6:	e15a      	b.n	80033ae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681a      	ldr	r2, [r3, #0]
 80030fc:	2101      	movs	r1, #1
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	fa01 f303 	lsl.w	r3, r1, r3
 8003104:	4013      	ands	r3, r2
 8003106:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2b00      	cmp	r3, #0
 800310c:	f000 814c 	beq.w	80033a8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f003 0303 	and.w	r3, r3, #3
 8003118:	2b01      	cmp	r3, #1
 800311a:	d005      	beq.n	8003128 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003124:	2b02      	cmp	r3, #2
 8003126:	d130      	bne.n	800318a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	2203      	movs	r2, #3
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	43db      	mvns	r3, r3
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	4013      	ands	r3, r2
 800313e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	68da      	ldr	r2, [r3, #12]
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	005b      	lsls	r3, r3, #1
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	693a      	ldr	r2, [r7, #16]
 800314e:	4313      	orrs	r3, r2
 8003150:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	693a      	ldr	r2, [r7, #16]
 8003156:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800315e:	2201      	movs	r2, #1
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43db      	mvns	r3, r3
 8003168:	693a      	ldr	r2, [r7, #16]
 800316a:	4013      	ands	r3, r2
 800316c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	091b      	lsrs	r3, r3, #4
 8003174:	f003 0201 	and.w	r2, r3, #1
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	fa02 f303 	lsl.w	r3, r2, r3
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	2b03      	cmp	r3, #3
 8003194:	d017      	beq.n	80031c6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	2203      	movs	r2, #3
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	43db      	mvns	r3, r3
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	4013      	ands	r3, r2
 80031ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031ae:	683b      	ldr	r3, [r7, #0]
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4313      	orrs	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d123      	bne.n	800321a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	08da      	lsrs	r2, r3, #3
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	3208      	adds	r2, #8
 80031da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	220f      	movs	r2, #15
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43db      	mvns	r3, r3
 80031f0:	693a      	ldr	r2, [r7, #16]
 80031f2:	4013      	ands	r3, r2
 80031f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	691a      	ldr	r2, [r3, #16]
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	fa02 f303 	lsl.w	r3, r2, r3
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	4313      	orrs	r3, r2
 800320a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	08da      	lsrs	r2, r3, #3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3208      	adds	r2, #8
 8003214:	6939      	ldr	r1, [r7, #16]
 8003216:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	2203      	movs	r2, #3
 8003226:	fa02 f303 	lsl.w	r3, r2, r3
 800322a:	43db      	mvns	r3, r3
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	4013      	ands	r3, r2
 8003230:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f003 0203 	and.w	r2, r3, #3
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	4313      	orrs	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 80a6 	beq.w	80033a8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800325c:	4b5b      	ldr	r3, [pc, #364]	; (80033cc <HAL_GPIO_Init+0x2e4>)
 800325e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003260:	4a5a      	ldr	r2, [pc, #360]	; (80033cc <HAL_GPIO_Init+0x2e4>)
 8003262:	f043 0301 	orr.w	r3, r3, #1
 8003266:	6613      	str	r3, [r2, #96]	; 0x60
 8003268:	4b58      	ldr	r3, [pc, #352]	; (80033cc <HAL_GPIO_Init+0x2e4>)
 800326a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800326c:	f003 0301 	and.w	r3, r3, #1
 8003270:	60bb      	str	r3, [r7, #8]
 8003272:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003274:	4a56      	ldr	r2, [pc, #344]	; (80033d0 <HAL_GPIO_Init+0x2e8>)
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	089b      	lsrs	r3, r3, #2
 800327a:	3302      	adds	r3, #2
 800327c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003280:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f003 0303 	and.w	r3, r3, #3
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	220f      	movs	r2, #15
 800328c:	fa02 f303 	lsl.w	r3, r2, r3
 8003290:	43db      	mvns	r3, r3
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	4013      	ands	r3, r2
 8003296:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800329e:	d01f      	beq.n	80032e0 <HAL_GPIO_Init+0x1f8>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a4c      	ldr	r2, [pc, #304]	; (80033d4 <HAL_GPIO_Init+0x2ec>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d019      	beq.n	80032dc <HAL_GPIO_Init+0x1f4>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a4b      	ldr	r2, [pc, #300]	; (80033d8 <HAL_GPIO_Init+0x2f0>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d013      	beq.n	80032d8 <HAL_GPIO_Init+0x1f0>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a4a      	ldr	r2, [pc, #296]	; (80033dc <HAL_GPIO_Init+0x2f4>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d00d      	beq.n	80032d4 <HAL_GPIO_Init+0x1ec>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a49      	ldr	r2, [pc, #292]	; (80033e0 <HAL_GPIO_Init+0x2f8>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d007      	beq.n	80032d0 <HAL_GPIO_Init+0x1e8>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	4a48      	ldr	r2, [pc, #288]	; (80033e4 <HAL_GPIO_Init+0x2fc>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d101      	bne.n	80032cc <HAL_GPIO_Init+0x1e4>
 80032c8:	2305      	movs	r3, #5
 80032ca:	e00a      	b.n	80032e2 <HAL_GPIO_Init+0x1fa>
 80032cc:	2306      	movs	r3, #6
 80032ce:	e008      	b.n	80032e2 <HAL_GPIO_Init+0x1fa>
 80032d0:	2304      	movs	r3, #4
 80032d2:	e006      	b.n	80032e2 <HAL_GPIO_Init+0x1fa>
 80032d4:	2303      	movs	r3, #3
 80032d6:	e004      	b.n	80032e2 <HAL_GPIO_Init+0x1fa>
 80032d8:	2302      	movs	r3, #2
 80032da:	e002      	b.n	80032e2 <HAL_GPIO_Init+0x1fa>
 80032dc:	2301      	movs	r3, #1
 80032de:	e000      	b.n	80032e2 <HAL_GPIO_Init+0x1fa>
 80032e0:	2300      	movs	r3, #0
 80032e2:	697a      	ldr	r2, [r7, #20]
 80032e4:	f002 0203 	and.w	r2, r2, #3
 80032e8:	0092      	lsls	r2, r2, #2
 80032ea:	4093      	lsls	r3, r2
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032f2:	4937      	ldr	r1, [pc, #220]	; (80033d0 <HAL_GPIO_Init+0x2e8>)
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	089b      	lsrs	r3, r3, #2
 80032f8:	3302      	adds	r3, #2
 80032fa:	693a      	ldr	r2, [r7, #16]
 80032fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003300:	4b39      	ldr	r3, [pc, #228]	; (80033e8 <HAL_GPIO_Init+0x300>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	43db      	mvns	r3, r3
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	4013      	ands	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4313      	orrs	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003324:	4a30      	ldr	r2, [pc, #192]	; (80033e8 <HAL_GPIO_Init+0x300>)
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800332a:	4b2f      	ldr	r3, [pc, #188]	; (80033e8 <HAL_GPIO_Init+0x300>)
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	43db      	mvns	r3, r3
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	4013      	ands	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	4313      	orrs	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800334e:	4a26      	ldr	r2, [pc, #152]	; (80033e8 <HAL_GPIO_Init+0x300>)
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003354:	4b24      	ldr	r3, [pc, #144]	; (80033e8 <HAL_GPIO_Init+0x300>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	43db      	mvns	r3, r3
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	4013      	ands	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4313      	orrs	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003378:	4a1b      	ldr	r2, [pc, #108]	; (80033e8 <HAL_GPIO_Init+0x300>)
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800337e:	4b1a      	ldr	r3, [pc, #104]	; (80033e8 <HAL_GPIO_Init+0x300>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	43db      	mvns	r3, r3
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	4013      	ands	r3, r2
 800338c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800339a:	693a      	ldr	r2, [r7, #16]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	4313      	orrs	r3, r2
 80033a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80033a2:	4a11      	ldr	r2, [pc, #68]	; (80033e8 <HAL_GPIO_Init+0x300>)
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	3301      	adds	r3, #1
 80033ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	fa22 f303 	lsr.w	r3, r2, r3
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	f47f ae9d 	bne.w	80030f8 <HAL_GPIO_Init+0x10>
  }
}
 80033be:	bf00      	nop
 80033c0:	bf00      	nop
 80033c2:	371c      	adds	r7, #28
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr
 80033cc:	40021000 	.word	0x40021000
 80033d0:	40010000 	.word	0x40010000
 80033d4:	48000400 	.word	0x48000400
 80033d8:	48000800 	.word	0x48000800
 80033dc:	48000c00 	.word	0x48000c00
 80033e0:	48001000 	.word	0x48001000
 80033e4:	48001400 	.word	0x48001400
 80033e8:	40010400 	.word	0x40010400

080033ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	691a      	ldr	r2, [r3, #16]
 80033fc:	887b      	ldrh	r3, [r7, #2]
 80033fe:	4013      	ands	r3, r2
 8003400:	2b00      	cmp	r3, #0
 8003402:	d002      	beq.n	800340a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003404:	2301      	movs	r3, #1
 8003406:	73fb      	strb	r3, [r7, #15]
 8003408:	e001      	b.n	800340e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800340a:	2300      	movs	r3, #0
 800340c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800340e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003410:	4618      	mov	r0, r3
 8003412:	3714      	adds	r7, #20
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	460b      	mov	r3, r1
 8003426:	807b      	strh	r3, [r7, #2]
 8003428:	4613      	mov	r3, r2
 800342a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800342c:	787b      	ldrb	r3, [r7, #1]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003432:	887a      	ldrh	r2, [r7, #2]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003438:	e002      	b.n	8003440 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800343a:	887a      	ldrh	r2, [r7, #2]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003440:	bf00      	nop
 8003442:	370c      	adds	r7, #12
 8003444:	46bd      	mov	sp, r7
 8003446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344a:	4770      	bx	lr

0800344c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003456:	4b08      	ldr	r3, [pc, #32]	; (8003478 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003458:	695a      	ldr	r2, [r3, #20]
 800345a:	88fb      	ldrh	r3, [r7, #6]
 800345c:	4013      	ands	r3, r2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d006      	beq.n	8003470 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003462:	4a05      	ldr	r2, [pc, #20]	; (8003478 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003464:	88fb      	ldrh	r3, [r7, #6]
 8003466:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003468:	88fb      	ldrh	r3, [r7, #6]
 800346a:	4618      	mov	r0, r3
 800346c:	f000 f806 	bl	800347c <HAL_GPIO_EXTI_Callback>
  }
}
 8003470:	bf00      	nop
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40010400 	.word	0x40010400

0800347c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
	...

08003494 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d141      	bne.n	8003526 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80034a2:	4b4b      	ldr	r3, [pc, #300]	; (80035d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80034aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ae:	d131      	bne.n	8003514 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034b0:	4b47      	ldr	r3, [pc, #284]	; (80035d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034b6:	4a46      	ldr	r2, [pc, #280]	; (80035d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80034c0:	4b43      	ldr	r3, [pc, #268]	; (80035d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034c8:	4a41      	ldr	r2, [pc, #260]	; (80035d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034ce:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80034d0:	4b40      	ldr	r3, [pc, #256]	; (80035d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2232      	movs	r2, #50	; 0x32
 80034d6:	fb02 f303 	mul.w	r3, r2, r3
 80034da:	4a3f      	ldr	r2, [pc, #252]	; (80035d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80034dc:	fba2 2303 	umull	r2, r3, r2, r3
 80034e0:	0c9b      	lsrs	r3, r3, #18
 80034e2:	3301      	adds	r3, #1
 80034e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034e6:	e002      	b.n	80034ee <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034ee:	4b38      	ldr	r3, [pc, #224]	; (80035d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034fa:	d102      	bne.n	8003502 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d1f2      	bne.n	80034e8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003502:	4b33      	ldr	r3, [pc, #204]	; (80035d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800350a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800350e:	d158      	bne.n	80035c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003510:	2303      	movs	r3, #3
 8003512:	e057      	b.n	80035c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003514:	4b2e      	ldr	r3, [pc, #184]	; (80035d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003516:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800351a:	4a2d      	ldr	r2, [pc, #180]	; (80035d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800351c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003520:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003524:	e04d      	b.n	80035c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800352c:	d141      	bne.n	80035b2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800352e:	4b28      	ldr	r3, [pc, #160]	; (80035d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800353a:	d131      	bne.n	80035a0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800353c:	4b24      	ldr	r3, [pc, #144]	; (80035d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800353e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003542:	4a23      	ldr	r2, [pc, #140]	; (80035d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003548:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800354c:	4b20      	ldr	r3, [pc, #128]	; (80035d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003554:	4a1e      	ldr	r2, [pc, #120]	; (80035d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003556:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800355a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800355c:	4b1d      	ldr	r3, [pc, #116]	; (80035d4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2232      	movs	r2, #50	; 0x32
 8003562:	fb02 f303 	mul.w	r3, r2, r3
 8003566:	4a1c      	ldr	r2, [pc, #112]	; (80035d8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003568:	fba2 2303 	umull	r2, r3, r2, r3
 800356c:	0c9b      	lsrs	r3, r3, #18
 800356e:	3301      	adds	r3, #1
 8003570:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003572:	e002      	b.n	800357a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	3b01      	subs	r3, #1
 8003578:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800357a:	4b15      	ldr	r3, [pc, #84]	; (80035d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003586:	d102      	bne.n	800358e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1f2      	bne.n	8003574 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800358e:	4b10      	ldr	r3, [pc, #64]	; (80035d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800359a:	d112      	bne.n	80035c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e011      	b.n	80035c4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035a0:	4b0b      	ldr	r3, [pc, #44]	; (80035d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035a6:	4a0a      	ldr	r2, [pc, #40]	; (80035d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80035b0:	e007      	b.n	80035c2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80035b2:	4b07      	ldr	r3, [pc, #28]	; (80035d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035ba:	4a05      	ldr	r2, [pc, #20]	; (80035d0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035c0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80035c2:	2300      	movs	r3, #0
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr
 80035d0:	40007000 	.word	0x40007000
 80035d4:	20000004 	.word	0x20000004
 80035d8:	431bde83 	.word	0x431bde83

080035dc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80035e0:	4b05      	ldr	r3, [pc, #20]	; (80035f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	4a04      	ldr	r2, [pc, #16]	; (80035f8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80035e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035ea:	6093      	str	r3, [r2, #8]
}
 80035ec:	bf00      	nop
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	40007000 	.word	0x40007000

080035fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b088      	sub	sp, #32
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d101      	bne.n	800360e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e306      	b.n	8003c1c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b00      	cmp	r3, #0
 8003618:	d075      	beq.n	8003706 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800361a:	4b97      	ldr	r3, [pc, #604]	; (8003878 <HAL_RCC_OscConfig+0x27c>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 030c 	and.w	r3, r3, #12
 8003622:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003624:	4b94      	ldr	r3, [pc, #592]	; (8003878 <HAL_RCC_OscConfig+0x27c>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	f003 0303 	and.w	r3, r3, #3
 800362c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	2b0c      	cmp	r3, #12
 8003632:	d102      	bne.n	800363a <HAL_RCC_OscConfig+0x3e>
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	2b03      	cmp	r3, #3
 8003638:	d002      	beq.n	8003640 <HAL_RCC_OscConfig+0x44>
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	2b08      	cmp	r3, #8
 800363e:	d10b      	bne.n	8003658 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003640:	4b8d      	ldr	r3, [pc, #564]	; (8003878 <HAL_RCC_OscConfig+0x27c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d05b      	beq.n	8003704 <HAL_RCC_OscConfig+0x108>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d157      	bne.n	8003704 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e2e1      	b.n	8003c1c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003660:	d106      	bne.n	8003670 <HAL_RCC_OscConfig+0x74>
 8003662:	4b85      	ldr	r3, [pc, #532]	; (8003878 <HAL_RCC_OscConfig+0x27c>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a84      	ldr	r2, [pc, #528]	; (8003878 <HAL_RCC_OscConfig+0x27c>)
 8003668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800366c:	6013      	str	r3, [r2, #0]
 800366e:	e01d      	b.n	80036ac <HAL_RCC_OscConfig+0xb0>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003678:	d10c      	bne.n	8003694 <HAL_RCC_OscConfig+0x98>
 800367a:	4b7f      	ldr	r3, [pc, #508]	; (8003878 <HAL_RCC_OscConfig+0x27c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a7e      	ldr	r2, [pc, #504]	; (8003878 <HAL_RCC_OscConfig+0x27c>)
 8003680:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003684:	6013      	str	r3, [r2, #0]
 8003686:	4b7c      	ldr	r3, [pc, #496]	; (8003878 <HAL_RCC_OscConfig+0x27c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a7b      	ldr	r2, [pc, #492]	; (8003878 <HAL_RCC_OscConfig+0x27c>)
 800368c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003690:	6013      	str	r3, [r2, #0]
 8003692:	e00b      	b.n	80036ac <HAL_RCC_OscConfig+0xb0>
 8003694:	4b78      	ldr	r3, [pc, #480]	; (8003878 <HAL_RCC_OscConfig+0x27c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a77      	ldr	r2, [pc, #476]	; (8003878 <HAL_RCC_OscConfig+0x27c>)
 800369a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800369e:	6013      	str	r3, [r2, #0]
 80036a0:	4b75      	ldr	r3, [pc, #468]	; (8003878 <HAL_RCC_OscConfig+0x27c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a74      	ldr	r2, [pc, #464]	; (8003878 <HAL_RCC_OscConfig+0x27c>)
 80036a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d013      	beq.n	80036dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b4:	f7ff f950 	bl	8002958 <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036bc:	f7ff f94c 	bl	8002958 <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b64      	cmp	r3, #100	; 0x64
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e2a6      	b.n	8003c1c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80036ce:	4b6a      	ldr	r3, [pc, #424]	; (8003878 <HAL_RCC_OscConfig+0x27c>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0f0      	beq.n	80036bc <HAL_RCC_OscConfig+0xc0>
 80036da:	e014      	b.n	8003706 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036dc:	f7ff f93c 	bl	8002958 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036e4:	f7ff f938 	bl	8002958 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b64      	cmp	r3, #100	; 0x64
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e292      	b.n	8003c1c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80036f6:	4b60      	ldr	r3, [pc, #384]	; (8003878 <HAL_RCC_OscConfig+0x27c>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d1f0      	bne.n	80036e4 <HAL_RCC_OscConfig+0xe8>
 8003702:	e000      	b.n	8003706 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d075      	beq.n	80037fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003712:	4b59      	ldr	r3, [pc, #356]	; (8003878 <HAL_RCC_OscConfig+0x27c>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f003 030c 	and.w	r3, r3, #12
 800371a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800371c:	4b56      	ldr	r3, [pc, #344]	; (8003878 <HAL_RCC_OscConfig+0x27c>)
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	f003 0303 	and.w	r3, r3, #3
 8003724:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	2b0c      	cmp	r3, #12
 800372a:	d102      	bne.n	8003732 <HAL_RCC_OscConfig+0x136>
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	2b02      	cmp	r3, #2
 8003730:	d002      	beq.n	8003738 <HAL_RCC_OscConfig+0x13c>
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	2b04      	cmp	r3, #4
 8003736:	d11f      	bne.n	8003778 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003738:	4b4f      	ldr	r3, [pc, #316]	; (8003878 <HAL_RCC_OscConfig+0x27c>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003740:	2b00      	cmp	r3, #0
 8003742:	d005      	beq.n	8003750 <HAL_RCC_OscConfig+0x154>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e265      	b.n	8003c1c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003750:	4b49      	ldr	r3, [pc, #292]	; (8003878 <HAL_RCC_OscConfig+0x27c>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	061b      	lsls	r3, r3, #24
 800375e:	4946      	ldr	r1, [pc, #280]	; (8003878 <HAL_RCC_OscConfig+0x27c>)
 8003760:	4313      	orrs	r3, r2
 8003762:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003764:	4b45      	ldr	r3, [pc, #276]	; (800387c <HAL_RCC_OscConfig+0x280>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f7ff f8a9 	bl	80028c0 <HAL_InitTick>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d043      	beq.n	80037fc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e251      	b.n	8003c1c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d023      	beq.n	80037c8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003780:	4b3d      	ldr	r3, [pc, #244]	; (8003878 <HAL_RCC_OscConfig+0x27c>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a3c      	ldr	r2, [pc, #240]	; (8003878 <HAL_RCC_OscConfig+0x27c>)
 8003786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800378a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800378c:	f7ff f8e4 	bl	8002958 <HAL_GetTick>
 8003790:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003792:	e008      	b.n	80037a6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003794:	f7ff f8e0 	bl	8002958 <HAL_GetTick>
 8003798:	4602      	mov	r2, r0
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e23a      	b.n	8003c1c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037a6:	4b34      	ldr	r3, [pc, #208]	; (8003878 <HAL_RCC_OscConfig+0x27c>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d0f0      	beq.n	8003794 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037b2:	4b31      	ldr	r3, [pc, #196]	; (8003878 <HAL_RCC_OscConfig+0x27c>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	061b      	lsls	r3, r3, #24
 80037c0:	492d      	ldr	r1, [pc, #180]	; (8003878 <HAL_RCC_OscConfig+0x27c>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	604b      	str	r3, [r1, #4]
 80037c6:	e01a      	b.n	80037fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037c8:	4b2b      	ldr	r3, [pc, #172]	; (8003878 <HAL_RCC_OscConfig+0x27c>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a2a      	ldr	r2, [pc, #168]	; (8003878 <HAL_RCC_OscConfig+0x27c>)
 80037ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d4:	f7ff f8c0 	bl	8002958 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037dc:	f7ff f8bc 	bl	8002958 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e216      	b.n	8003c1c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80037ee:	4b22      	ldr	r3, [pc, #136]	; (8003878 <HAL_RCC_OscConfig+0x27c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f0      	bne.n	80037dc <HAL_RCC_OscConfig+0x1e0>
 80037fa:	e000      	b.n	80037fe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0308 	and.w	r3, r3, #8
 8003806:	2b00      	cmp	r3, #0
 8003808:	d041      	beq.n	800388e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d01c      	beq.n	800384c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003812:	4b19      	ldr	r3, [pc, #100]	; (8003878 <HAL_RCC_OscConfig+0x27c>)
 8003814:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003818:	4a17      	ldr	r2, [pc, #92]	; (8003878 <HAL_RCC_OscConfig+0x27c>)
 800381a:	f043 0301 	orr.w	r3, r3, #1
 800381e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003822:	f7ff f899 	bl	8002958 <HAL_GetTick>
 8003826:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003828:	e008      	b.n	800383c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800382a:	f7ff f895 	bl	8002958 <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	2b02      	cmp	r3, #2
 8003836:	d901      	bls.n	800383c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e1ef      	b.n	8003c1c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800383c:	4b0e      	ldr	r3, [pc, #56]	; (8003878 <HAL_RCC_OscConfig+0x27c>)
 800383e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003842:	f003 0302 	and.w	r3, r3, #2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d0ef      	beq.n	800382a <HAL_RCC_OscConfig+0x22e>
 800384a:	e020      	b.n	800388e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800384c:	4b0a      	ldr	r3, [pc, #40]	; (8003878 <HAL_RCC_OscConfig+0x27c>)
 800384e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003852:	4a09      	ldr	r2, [pc, #36]	; (8003878 <HAL_RCC_OscConfig+0x27c>)
 8003854:	f023 0301 	bic.w	r3, r3, #1
 8003858:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800385c:	f7ff f87c 	bl	8002958 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003862:	e00d      	b.n	8003880 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003864:	f7ff f878 	bl	8002958 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d906      	bls.n	8003880 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e1d2      	b.n	8003c1c <HAL_RCC_OscConfig+0x620>
 8003876:	bf00      	nop
 8003878:	40021000 	.word	0x40021000
 800387c:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003880:	4b8c      	ldr	r3, [pc, #560]	; (8003ab4 <HAL_RCC_OscConfig+0x4b8>)
 8003882:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003886:	f003 0302 	and.w	r3, r3, #2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1ea      	bne.n	8003864 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0304 	and.w	r3, r3, #4
 8003896:	2b00      	cmp	r3, #0
 8003898:	f000 80a6 	beq.w	80039e8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800389c:	2300      	movs	r3, #0
 800389e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038a0:	4b84      	ldr	r3, [pc, #528]	; (8003ab4 <HAL_RCC_OscConfig+0x4b8>)
 80038a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d101      	bne.n	80038b0 <HAL_RCC_OscConfig+0x2b4>
 80038ac:	2301      	movs	r3, #1
 80038ae:	e000      	b.n	80038b2 <HAL_RCC_OscConfig+0x2b6>
 80038b0:	2300      	movs	r3, #0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00d      	beq.n	80038d2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038b6:	4b7f      	ldr	r3, [pc, #508]	; (8003ab4 <HAL_RCC_OscConfig+0x4b8>)
 80038b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ba:	4a7e      	ldr	r2, [pc, #504]	; (8003ab4 <HAL_RCC_OscConfig+0x4b8>)
 80038bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c0:	6593      	str	r3, [r2, #88]	; 0x58
 80038c2:	4b7c      	ldr	r3, [pc, #496]	; (8003ab4 <HAL_RCC_OscConfig+0x4b8>)
 80038c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038ca:	60fb      	str	r3, [r7, #12]
 80038cc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80038ce:	2301      	movs	r3, #1
 80038d0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038d2:	4b79      	ldr	r3, [pc, #484]	; (8003ab8 <HAL_RCC_OscConfig+0x4bc>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d118      	bne.n	8003910 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038de:	4b76      	ldr	r3, [pc, #472]	; (8003ab8 <HAL_RCC_OscConfig+0x4bc>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a75      	ldr	r2, [pc, #468]	; (8003ab8 <HAL_RCC_OscConfig+0x4bc>)
 80038e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ea:	f7ff f835 	bl	8002958 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038f2:	f7ff f831 	bl	8002958 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e18b      	b.n	8003c1c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003904:	4b6c      	ldr	r3, [pc, #432]	; (8003ab8 <HAL_RCC_OscConfig+0x4bc>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800390c:	2b00      	cmp	r3, #0
 800390e:	d0f0      	beq.n	80038f2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	2b01      	cmp	r3, #1
 8003916:	d108      	bne.n	800392a <HAL_RCC_OscConfig+0x32e>
 8003918:	4b66      	ldr	r3, [pc, #408]	; (8003ab4 <HAL_RCC_OscConfig+0x4b8>)
 800391a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391e:	4a65      	ldr	r2, [pc, #404]	; (8003ab4 <HAL_RCC_OscConfig+0x4b8>)
 8003920:	f043 0301 	orr.w	r3, r3, #1
 8003924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003928:	e024      	b.n	8003974 <HAL_RCC_OscConfig+0x378>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	2b05      	cmp	r3, #5
 8003930:	d110      	bne.n	8003954 <HAL_RCC_OscConfig+0x358>
 8003932:	4b60      	ldr	r3, [pc, #384]	; (8003ab4 <HAL_RCC_OscConfig+0x4b8>)
 8003934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003938:	4a5e      	ldr	r2, [pc, #376]	; (8003ab4 <HAL_RCC_OscConfig+0x4b8>)
 800393a:	f043 0304 	orr.w	r3, r3, #4
 800393e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003942:	4b5c      	ldr	r3, [pc, #368]	; (8003ab4 <HAL_RCC_OscConfig+0x4b8>)
 8003944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003948:	4a5a      	ldr	r2, [pc, #360]	; (8003ab4 <HAL_RCC_OscConfig+0x4b8>)
 800394a:	f043 0301 	orr.w	r3, r3, #1
 800394e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003952:	e00f      	b.n	8003974 <HAL_RCC_OscConfig+0x378>
 8003954:	4b57      	ldr	r3, [pc, #348]	; (8003ab4 <HAL_RCC_OscConfig+0x4b8>)
 8003956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395a:	4a56      	ldr	r2, [pc, #344]	; (8003ab4 <HAL_RCC_OscConfig+0x4b8>)
 800395c:	f023 0301 	bic.w	r3, r3, #1
 8003960:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003964:	4b53      	ldr	r3, [pc, #332]	; (8003ab4 <HAL_RCC_OscConfig+0x4b8>)
 8003966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396a:	4a52      	ldr	r2, [pc, #328]	; (8003ab4 <HAL_RCC_OscConfig+0x4b8>)
 800396c:	f023 0304 	bic.w	r3, r3, #4
 8003970:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d016      	beq.n	80039aa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800397c:	f7fe ffec 	bl	8002958 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003982:	e00a      	b.n	800399a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003984:	f7fe ffe8 	bl	8002958 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003992:	4293      	cmp	r3, r2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e140      	b.n	8003c1c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800399a:	4b46      	ldr	r3, [pc, #280]	; (8003ab4 <HAL_RCC_OscConfig+0x4b8>)
 800399c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a0:	f003 0302 	and.w	r3, r3, #2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d0ed      	beq.n	8003984 <HAL_RCC_OscConfig+0x388>
 80039a8:	e015      	b.n	80039d6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039aa:	f7fe ffd5 	bl	8002958 <HAL_GetTick>
 80039ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039b0:	e00a      	b.n	80039c8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039b2:	f7fe ffd1 	bl	8002958 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e129      	b.n	8003c1c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80039c8:	4b3a      	ldr	r3, [pc, #232]	; (8003ab4 <HAL_RCC_OscConfig+0x4b8>)
 80039ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ce:	f003 0302 	and.w	r3, r3, #2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1ed      	bne.n	80039b2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039d6:	7ffb      	ldrb	r3, [r7, #31]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d105      	bne.n	80039e8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039dc:	4b35      	ldr	r3, [pc, #212]	; (8003ab4 <HAL_RCC_OscConfig+0x4b8>)
 80039de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e0:	4a34      	ldr	r2, [pc, #208]	; (8003ab4 <HAL_RCC_OscConfig+0x4b8>)
 80039e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039e6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0320 	and.w	r3, r3, #32
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d03c      	beq.n	8003a6e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d01c      	beq.n	8003a36 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80039fc:	4b2d      	ldr	r3, [pc, #180]	; (8003ab4 <HAL_RCC_OscConfig+0x4b8>)
 80039fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a02:	4a2c      	ldr	r2, [pc, #176]	; (8003ab4 <HAL_RCC_OscConfig+0x4b8>)
 8003a04:	f043 0301 	orr.w	r3, r3, #1
 8003a08:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a0c:	f7fe ffa4 	bl	8002958 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a14:	f7fe ffa0 	bl	8002958 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e0fa      	b.n	8003c1c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a26:	4b23      	ldr	r3, [pc, #140]	; (8003ab4 <HAL_RCC_OscConfig+0x4b8>)
 8003a28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d0ef      	beq.n	8003a14 <HAL_RCC_OscConfig+0x418>
 8003a34:	e01b      	b.n	8003a6e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a36:	4b1f      	ldr	r3, [pc, #124]	; (8003ab4 <HAL_RCC_OscConfig+0x4b8>)
 8003a38:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a3c:	4a1d      	ldr	r2, [pc, #116]	; (8003ab4 <HAL_RCC_OscConfig+0x4b8>)
 8003a3e:	f023 0301 	bic.w	r3, r3, #1
 8003a42:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a46:	f7fe ff87 	bl	8002958 <HAL_GetTick>
 8003a4a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a4c:	e008      	b.n	8003a60 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a4e:	f7fe ff83 	bl	8002958 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e0dd      	b.n	8003c1c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003a60:	4b14      	ldr	r3, [pc, #80]	; (8003ab4 <HAL_RCC_OscConfig+0x4b8>)
 8003a62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1ef      	bne.n	8003a4e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 80d1 	beq.w	8003c1a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a78:	4b0e      	ldr	r3, [pc, #56]	; (8003ab4 <HAL_RCC_OscConfig+0x4b8>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	f003 030c 	and.w	r3, r3, #12
 8003a80:	2b0c      	cmp	r3, #12
 8003a82:	f000 808b 	beq.w	8003b9c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	2b02      	cmp	r3, #2
 8003a8c:	d15e      	bne.n	8003b4c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a8e:	4b09      	ldr	r3, [pc, #36]	; (8003ab4 <HAL_RCC_OscConfig+0x4b8>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a08      	ldr	r2, [pc, #32]	; (8003ab4 <HAL_RCC_OscConfig+0x4b8>)
 8003a94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9a:	f7fe ff5d 	bl	8002958 <HAL_GetTick>
 8003a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003aa0:	e00c      	b.n	8003abc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aa2:	f7fe ff59 	bl	8002958 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d905      	bls.n	8003abc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e0b3      	b.n	8003c1c <HAL_RCC_OscConfig+0x620>
 8003ab4:	40021000 	.word	0x40021000
 8003ab8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003abc:	4b59      	ldr	r3, [pc, #356]	; (8003c24 <HAL_RCC_OscConfig+0x628>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1ec      	bne.n	8003aa2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ac8:	4b56      	ldr	r3, [pc, #344]	; (8003c24 <HAL_RCC_OscConfig+0x628>)
 8003aca:	68da      	ldr	r2, [r3, #12]
 8003acc:	4b56      	ldr	r3, [pc, #344]	; (8003c28 <HAL_RCC_OscConfig+0x62c>)
 8003ace:	4013      	ands	r3, r2
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	6a11      	ldr	r1, [r2, #32]
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ad8:	3a01      	subs	r2, #1
 8003ada:	0112      	lsls	r2, r2, #4
 8003adc:	4311      	orrs	r1, r2
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003ae2:	0212      	lsls	r2, r2, #8
 8003ae4:	4311      	orrs	r1, r2
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003aea:	0852      	lsrs	r2, r2, #1
 8003aec:	3a01      	subs	r2, #1
 8003aee:	0552      	lsls	r2, r2, #21
 8003af0:	4311      	orrs	r1, r2
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003af6:	0852      	lsrs	r2, r2, #1
 8003af8:	3a01      	subs	r2, #1
 8003afa:	0652      	lsls	r2, r2, #25
 8003afc:	4311      	orrs	r1, r2
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003b02:	06d2      	lsls	r2, r2, #27
 8003b04:	430a      	orrs	r2, r1
 8003b06:	4947      	ldr	r1, [pc, #284]	; (8003c24 <HAL_RCC_OscConfig+0x628>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b0c:	4b45      	ldr	r3, [pc, #276]	; (8003c24 <HAL_RCC_OscConfig+0x628>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a44      	ldr	r2, [pc, #272]	; (8003c24 <HAL_RCC_OscConfig+0x628>)
 8003b12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b16:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b18:	4b42      	ldr	r3, [pc, #264]	; (8003c24 <HAL_RCC_OscConfig+0x628>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	4a41      	ldr	r2, [pc, #260]	; (8003c24 <HAL_RCC_OscConfig+0x628>)
 8003b1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b22:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b24:	f7fe ff18 	bl	8002958 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b2a:	e008      	b.n	8003b3e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b2c:	f7fe ff14 	bl	8002958 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e06e      	b.n	8003c1c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b3e:	4b39      	ldr	r3, [pc, #228]	; (8003c24 <HAL_RCC_OscConfig+0x628>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d0f0      	beq.n	8003b2c <HAL_RCC_OscConfig+0x530>
 8003b4a:	e066      	b.n	8003c1a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b4c:	4b35      	ldr	r3, [pc, #212]	; (8003c24 <HAL_RCC_OscConfig+0x628>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a34      	ldr	r2, [pc, #208]	; (8003c24 <HAL_RCC_OscConfig+0x628>)
 8003b52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b56:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003b58:	4b32      	ldr	r3, [pc, #200]	; (8003c24 <HAL_RCC_OscConfig+0x628>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	4a31      	ldr	r2, [pc, #196]	; (8003c24 <HAL_RCC_OscConfig+0x628>)
 8003b5e:	f023 0303 	bic.w	r3, r3, #3
 8003b62:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003b64:	4b2f      	ldr	r3, [pc, #188]	; (8003c24 <HAL_RCC_OscConfig+0x628>)
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	4a2e      	ldr	r2, [pc, #184]	; (8003c24 <HAL_RCC_OscConfig+0x628>)
 8003b6a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b72:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b74:	f7fe fef0 	bl	8002958 <HAL_GetTick>
 8003b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b7a:	e008      	b.n	8003b8e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b7c:	f7fe feec 	bl	8002958 <HAL_GetTick>
 8003b80:	4602      	mov	r2, r0
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1ad3      	subs	r3, r2, r3
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e046      	b.n	8003c1c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b8e:	4b25      	ldr	r3, [pc, #148]	; (8003c24 <HAL_RCC_OscConfig+0x628>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1f0      	bne.n	8003b7c <HAL_RCC_OscConfig+0x580>
 8003b9a:	e03e      	b.n	8003c1a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d101      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e039      	b.n	8003c1c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003ba8:	4b1e      	ldr	r3, [pc, #120]	; (8003c24 <HAL_RCC_OscConfig+0x628>)
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f003 0203 	and.w	r2, r3, #3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d12c      	bne.n	8003c16 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d123      	bne.n	8003c16 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d11b      	bne.n	8003c16 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d113      	bne.n	8003c16 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf8:	085b      	lsrs	r3, r3, #1
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d109      	bne.n	8003c16 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c0c:	085b      	lsrs	r3, r3, #1
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d001      	beq.n	8003c1a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e000      	b.n	8003c1c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003c1a:	2300      	movs	r3, #0
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3720      	adds	r7, #32
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}
 8003c24:	40021000 	.word	0x40021000
 8003c28:	019f800c 	.word	0x019f800c

08003c2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003c36:	2300      	movs	r3, #0
 8003c38:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d101      	bne.n	8003c44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e11e      	b.n	8003e82 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c44:	4b91      	ldr	r3, [pc, #580]	; (8003e8c <HAL_RCC_ClockConfig+0x260>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 030f 	and.w	r3, r3, #15
 8003c4c:	683a      	ldr	r2, [r7, #0]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d910      	bls.n	8003c74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c52:	4b8e      	ldr	r3, [pc, #568]	; (8003e8c <HAL_RCC_ClockConfig+0x260>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f023 020f 	bic.w	r2, r3, #15
 8003c5a:	498c      	ldr	r1, [pc, #560]	; (8003e8c <HAL_RCC_ClockConfig+0x260>)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c62:	4b8a      	ldr	r3, [pc, #552]	; (8003e8c <HAL_RCC_ClockConfig+0x260>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d001      	beq.n	8003c74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e106      	b.n	8003e82 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0301 	and.w	r3, r3, #1
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d073      	beq.n	8003d68 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b03      	cmp	r3, #3
 8003c86:	d129      	bne.n	8003cdc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c88:	4b81      	ldr	r3, [pc, #516]	; (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d101      	bne.n	8003c98 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e0f4      	b.n	8003e82 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003c98:	f000 f99e 	bl	8003fd8 <RCC_GetSysClockFreqFromPLLSource>
 8003c9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	4a7c      	ldr	r2, [pc, #496]	; (8003e94 <HAL_RCC_ClockConfig+0x268>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d93f      	bls.n	8003d26 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003ca6:	4b7a      	ldr	r3, [pc, #488]	; (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d009      	beq.n	8003cc6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d033      	beq.n	8003d26 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d12f      	bne.n	8003d26 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003cc6:	4b72      	ldr	r3, [pc, #456]	; (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cce:	4a70      	ldr	r2, [pc, #448]	; (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cd4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003cd6:	2380      	movs	r3, #128	; 0x80
 8003cd8:	617b      	str	r3, [r7, #20]
 8003cda:	e024      	b.n	8003d26 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d107      	bne.n	8003cf4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ce4:	4b6a      	ldr	r3, [pc, #424]	; (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d109      	bne.n	8003d04 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e0c6      	b.n	8003e82 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003cf4:	4b66      	ldr	r3, [pc, #408]	; (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d101      	bne.n	8003d04 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e0be      	b.n	8003e82 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003d04:	f000 f8ce 	bl	8003ea4 <HAL_RCC_GetSysClockFreq>
 8003d08:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	4a61      	ldr	r2, [pc, #388]	; (8003e94 <HAL_RCC_ClockConfig+0x268>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d909      	bls.n	8003d26 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d12:	4b5f      	ldr	r3, [pc, #380]	; (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d1a:	4a5d      	ldr	r2, [pc, #372]	; (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d20:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003d22:	2380      	movs	r3, #128	; 0x80
 8003d24:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d26:	4b5a      	ldr	r3, [pc, #360]	; (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	f023 0203 	bic.w	r2, r3, #3
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	4957      	ldr	r1, [pc, #348]	; (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d38:	f7fe fe0e 	bl	8002958 <HAL_GetTick>
 8003d3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d3e:	e00a      	b.n	8003d56 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d40:	f7fe fe0a 	bl	8002958 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e095      	b.n	8003e82 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d56:	4b4e      	ldr	r3, [pc, #312]	; (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	f003 020c 	and.w	r2, r3, #12
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d1eb      	bne.n	8003d40 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d023      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f003 0304 	and.w	r3, r3, #4
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d80:	4b43      	ldr	r3, [pc, #268]	; (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	4a42      	ldr	r2, [pc, #264]	; (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003d86:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003d8a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f003 0308 	and.w	r3, r3, #8
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d007      	beq.n	8003da8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003d98:	4b3d      	ldr	r3, [pc, #244]	; (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003da0:	4a3b      	ldr	r2, [pc, #236]	; (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003da2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003da6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003da8:	4b39      	ldr	r3, [pc, #228]	; (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	4936      	ldr	r1, [pc, #216]	; (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003db6:	4313      	orrs	r3, r2
 8003db8:	608b      	str	r3, [r1, #8]
 8003dba:	e008      	b.n	8003dce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	2b80      	cmp	r3, #128	; 0x80
 8003dc0:	d105      	bne.n	8003dce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003dc2:	4b33      	ldr	r3, [pc, #204]	; (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	4a32      	ldr	r2, [pc, #200]	; (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003dc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dcc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003dce:	4b2f      	ldr	r3, [pc, #188]	; (8003e8c <HAL_RCC_ClockConfig+0x260>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 030f 	and.w	r3, r3, #15
 8003dd6:	683a      	ldr	r2, [r7, #0]
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d21d      	bcs.n	8003e18 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ddc:	4b2b      	ldr	r3, [pc, #172]	; (8003e8c <HAL_RCC_ClockConfig+0x260>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f023 020f 	bic.w	r2, r3, #15
 8003de4:	4929      	ldr	r1, [pc, #164]	; (8003e8c <HAL_RCC_ClockConfig+0x260>)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003dec:	f7fe fdb4 	bl	8002958 <HAL_GetTick>
 8003df0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003df2:	e00a      	b.n	8003e0a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003df4:	f7fe fdb0 	bl	8002958 <HAL_GetTick>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	1ad3      	subs	r3, r2, r3
 8003dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e03b      	b.n	8003e82 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e0a:	4b20      	ldr	r3, [pc, #128]	; (8003e8c <HAL_RCC_ClockConfig+0x260>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 030f 	and.w	r3, r3, #15
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d1ed      	bne.n	8003df4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d008      	beq.n	8003e36 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e24:	4b1a      	ldr	r3, [pc, #104]	; (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	4917      	ldr	r1, [pc, #92]	; (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0308 	and.w	r3, r3, #8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d009      	beq.n	8003e56 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e42:	4b13      	ldr	r3, [pc, #76]	; (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	691b      	ldr	r3, [r3, #16]
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	490f      	ldr	r1, [pc, #60]	; (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e56:	f000 f825 	bl	8003ea4 <HAL_RCC_GetSysClockFreq>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	4b0c      	ldr	r3, [pc, #48]	; (8003e90 <HAL_RCC_ClockConfig+0x264>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	091b      	lsrs	r3, r3, #4
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	490c      	ldr	r1, [pc, #48]	; (8003e98 <HAL_RCC_ClockConfig+0x26c>)
 8003e68:	5ccb      	ldrb	r3, [r1, r3]
 8003e6a:	f003 031f 	and.w	r3, r3, #31
 8003e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003e72:	4a0a      	ldr	r2, [pc, #40]	; (8003e9c <HAL_RCC_ClockConfig+0x270>)
 8003e74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003e76:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <HAL_RCC_ClockConfig+0x274>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fe fd20 	bl	80028c0 <HAL_InitTick>
 8003e80:	4603      	mov	r3, r0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3718      	adds	r7, #24
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40022000 	.word	0x40022000
 8003e90:	40021000 	.word	0x40021000
 8003e94:	04c4b400 	.word	0x04c4b400
 8003e98:	08006ce0 	.word	0x08006ce0
 8003e9c:	20000004 	.word	0x20000004
 8003ea0:	20000008 	.word	0x20000008

08003ea4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b087      	sub	sp, #28
 8003ea8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003eaa:	4b2c      	ldr	r3, [pc, #176]	; (8003f5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 030c 	and.w	r3, r3, #12
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d102      	bne.n	8003ebc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003eb6:	4b2a      	ldr	r3, [pc, #168]	; (8003f60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003eb8:	613b      	str	r3, [r7, #16]
 8003eba:	e047      	b.n	8003f4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003ebc:	4b27      	ldr	r3, [pc, #156]	; (8003f5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f003 030c 	and.w	r3, r3, #12
 8003ec4:	2b08      	cmp	r3, #8
 8003ec6:	d102      	bne.n	8003ece <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ec8:	4b26      	ldr	r3, [pc, #152]	; (8003f64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003eca:	613b      	str	r3, [r7, #16]
 8003ecc:	e03e      	b.n	8003f4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003ece:	4b23      	ldr	r3, [pc, #140]	; (8003f5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f003 030c 	and.w	r3, r3, #12
 8003ed6:	2b0c      	cmp	r3, #12
 8003ed8:	d136      	bne.n	8003f48 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003eda:	4b20      	ldr	r3, [pc, #128]	; (8003f5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	f003 0303 	and.w	r3, r3, #3
 8003ee2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ee4:	4b1d      	ldr	r3, [pc, #116]	; (8003f5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	091b      	lsrs	r3, r3, #4
 8003eea:	f003 030f 	and.w	r3, r3, #15
 8003eee:	3301      	adds	r3, #1
 8003ef0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2b03      	cmp	r3, #3
 8003ef6:	d10c      	bne.n	8003f12 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ef8:	4a1a      	ldr	r2, [pc, #104]	; (8003f64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f00:	4a16      	ldr	r2, [pc, #88]	; (8003f5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f02:	68d2      	ldr	r2, [r2, #12]
 8003f04:	0a12      	lsrs	r2, r2, #8
 8003f06:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f0a:	fb02 f303 	mul.w	r3, r2, r3
 8003f0e:	617b      	str	r3, [r7, #20]
      break;
 8003f10:	e00c      	b.n	8003f2c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f12:	4a13      	ldr	r2, [pc, #76]	; (8003f60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f1a:	4a10      	ldr	r2, [pc, #64]	; (8003f5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f1c:	68d2      	ldr	r2, [r2, #12]
 8003f1e:	0a12      	lsrs	r2, r2, #8
 8003f20:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f24:	fb02 f303 	mul.w	r3, r2, r3
 8003f28:	617b      	str	r3, [r7, #20]
      break;
 8003f2a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f2c:	4b0b      	ldr	r3, [pc, #44]	; (8003f5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	0e5b      	lsrs	r3, r3, #25
 8003f32:	f003 0303 	and.w	r3, r3, #3
 8003f36:	3301      	adds	r3, #1
 8003f38:	005b      	lsls	r3, r3, #1
 8003f3a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f44:	613b      	str	r3, [r7, #16]
 8003f46:	e001      	b.n	8003f4c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003f4c:	693b      	ldr	r3, [r7, #16]
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	371c      	adds	r7, #28
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	40021000 	.word	0x40021000
 8003f60:	00f42400 	.word	0x00f42400
 8003f64:	016e3600 	.word	0x016e3600

08003f68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f6c:	4b03      	ldr	r3, [pc, #12]	; (8003f7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	20000004 	.word	0x20000004

08003f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003f84:	f7ff fff0 	bl	8003f68 <HAL_RCC_GetHCLKFreq>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	4b06      	ldr	r3, [pc, #24]	; (8003fa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	0a1b      	lsrs	r3, r3, #8
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	4904      	ldr	r1, [pc, #16]	; (8003fa8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003f96:	5ccb      	ldrb	r3, [r1, r3]
 8003f98:	f003 031f 	and.w	r3, r3, #31
 8003f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	08006cf0 	.word	0x08006cf0

08003fac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003fb0:	f7ff ffda 	bl	8003f68 <HAL_RCC_GetHCLKFreq>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	4b06      	ldr	r3, [pc, #24]	; (8003fd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	0adb      	lsrs	r3, r3, #11
 8003fbc:	f003 0307 	and.w	r3, r3, #7
 8003fc0:	4904      	ldr	r1, [pc, #16]	; (8003fd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003fc2:	5ccb      	ldrb	r3, [r1, r3]
 8003fc4:	f003 031f 	and.w	r3, r3, #31
 8003fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	08006cf0 	.word	0x08006cf0

08003fd8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b087      	sub	sp, #28
 8003fdc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003fde:	4b1e      	ldr	r3, [pc, #120]	; (8004058 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f003 0303 	and.w	r3, r3, #3
 8003fe6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003fe8:	4b1b      	ldr	r3, [pc, #108]	; (8004058 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	091b      	lsrs	r3, r3, #4
 8003fee:	f003 030f 	and.w	r3, r3, #15
 8003ff2:	3301      	adds	r3, #1
 8003ff4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	2b03      	cmp	r3, #3
 8003ffa:	d10c      	bne.n	8004016 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ffc:	4a17      	ldr	r2, [pc, #92]	; (800405c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	fbb2 f3f3 	udiv	r3, r2, r3
 8004004:	4a14      	ldr	r2, [pc, #80]	; (8004058 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004006:	68d2      	ldr	r2, [r2, #12]
 8004008:	0a12      	lsrs	r2, r2, #8
 800400a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800400e:	fb02 f303 	mul.w	r3, r2, r3
 8004012:	617b      	str	r3, [r7, #20]
    break;
 8004014:	e00c      	b.n	8004030 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004016:	4a12      	ldr	r2, [pc, #72]	; (8004060 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	fbb2 f3f3 	udiv	r3, r2, r3
 800401e:	4a0e      	ldr	r2, [pc, #56]	; (8004058 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004020:	68d2      	ldr	r2, [r2, #12]
 8004022:	0a12      	lsrs	r2, r2, #8
 8004024:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004028:	fb02 f303 	mul.w	r3, r2, r3
 800402c:	617b      	str	r3, [r7, #20]
    break;
 800402e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004030:	4b09      	ldr	r3, [pc, #36]	; (8004058 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	0e5b      	lsrs	r3, r3, #25
 8004036:	f003 0303 	and.w	r3, r3, #3
 800403a:	3301      	adds	r3, #1
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004040:	697a      	ldr	r2, [r7, #20]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	fbb2 f3f3 	udiv	r3, r2, r3
 8004048:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800404a:	687b      	ldr	r3, [r7, #4]
}
 800404c:	4618      	mov	r0, r3
 800404e:	371c      	adds	r7, #28
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr
 8004058:	40021000 	.word	0x40021000
 800405c:	016e3600 	.word	0x016e3600
 8004060:	00f42400 	.word	0x00f42400

08004064 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b086      	sub	sp, #24
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800406c:	2300      	movs	r3, #0
 800406e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004070:	2300      	movs	r3, #0
 8004072:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800407c:	2b00      	cmp	r3, #0
 800407e:	f000 8098 	beq.w	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004082:	2300      	movs	r3, #0
 8004084:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004086:	4b43      	ldr	r3, [pc, #268]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10d      	bne.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004092:	4b40      	ldr	r3, [pc, #256]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004096:	4a3f      	ldr	r2, [pc, #252]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800409c:	6593      	str	r3, [r2, #88]	; 0x58
 800409e:	4b3d      	ldr	r3, [pc, #244]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a6:	60bb      	str	r3, [r7, #8]
 80040a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040aa:	2301      	movs	r3, #1
 80040ac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040ae:	4b3a      	ldr	r3, [pc, #232]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a39      	ldr	r2, [pc, #228]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80040b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040ba:	f7fe fc4d 	bl	8002958 <HAL_GetTick>
 80040be:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040c0:	e009      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040c2:	f7fe fc49 	bl	8002958 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d902      	bls.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	74fb      	strb	r3, [r7, #19]
        break;
 80040d4:	e005      	b.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040d6:	4b30      	ldr	r3, [pc, #192]	; (8004198 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d0ef      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80040e2:	7cfb      	ldrb	r3, [r7, #19]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d159      	bne.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80040e8:	4b2a      	ldr	r3, [pc, #168]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040f2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d01e      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	429a      	cmp	r2, r3
 8004102:	d019      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004104:	4b23      	ldr	r3, [pc, #140]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800410e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004110:	4b20      	ldr	r3, [pc, #128]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004116:	4a1f      	ldr	r2, [pc, #124]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800411c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004120:	4b1c      	ldr	r3, [pc, #112]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004126:	4a1b      	ldr	r2, [pc, #108]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004128:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800412c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004130:	4a18      	ldr	r2, [pc, #96]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d016      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004142:	f7fe fc09 	bl	8002958 <HAL_GetTick>
 8004146:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004148:	e00b      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800414a:	f7fe fc05 	bl	8002958 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	f241 3288 	movw	r2, #5000	; 0x1388
 8004158:	4293      	cmp	r3, r2
 800415a:	d902      	bls.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	74fb      	strb	r3, [r7, #19]
            break;
 8004160:	e006      	b.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004162:	4b0c      	ldr	r3, [pc, #48]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004164:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d0ec      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004170:	7cfb      	ldrb	r3, [r7, #19]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10b      	bne.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004176:	4b07      	ldr	r3, [pc, #28]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004184:	4903      	ldr	r1, [pc, #12]	; (8004194 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004186:	4313      	orrs	r3, r2
 8004188:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800418c:	e008      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800418e:	7cfb      	ldrb	r3, [r7, #19]
 8004190:	74bb      	strb	r3, [r7, #18]
 8004192:	e005      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004194:	40021000 	.word	0x40021000
 8004198:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800419c:	7cfb      	ldrb	r3, [r7, #19]
 800419e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041a0:	7c7b      	ldrb	r3, [r7, #17]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d105      	bne.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041a6:	4ba7      	ldr	r3, [pc, #668]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041aa:	4aa6      	ldr	r2, [pc, #664]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041b0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00a      	beq.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041be:	4ba1      	ldr	r3, [pc, #644]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c4:	f023 0203 	bic.w	r2, r3, #3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	499d      	ldr	r1, [pc, #628]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d00a      	beq.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80041e0:	4b98      	ldr	r3, [pc, #608]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e6:	f023 020c 	bic.w	r2, r3, #12
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	4995      	ldr	r1, [pc, #596]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0304 	and.w	r3, r3, #4
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00a      	beq.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004202:	4b90      	ldr	r3, [pc, #576]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004208:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	498c      	ldr	r1, [pc, #560]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004212:	4313      	orrs	r3, r2
 8004214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0308 	and.w	r3, r3, #8
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00a      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004224:	4b87      	ldr	r3, [pc, #540]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	4984      	ldr	r1, [pc, #528]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004234:	4313      	orrs	r3, r2
 8004236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0310 	and.w	r3, r3, #16
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00a      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004246:	4b7f      	ldr	r3, [pc, #508]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	695b      	ldr	r3, [r3, #20]
 8004254:	497b      	ldr	r1, [pc, #492]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004256:	4313      	orrs	r3, r2
 8004258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0320 	and.w	r3, r3, #32
 8004264:	2b00      	cmp	r3, #0
 8004266:	d00a      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004268:	4b76      	ldr	r3, [pc, #472]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800426a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	4973      	ldr	r1, [pc, #460]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004278:	4313      	orrs	r3, r2
 800427a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00a      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800428a:	4b6e      	ldr	r3, [pc, #440]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800428c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004290:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	496a      	ldr	r1, [pc, #424]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800429a:	4313      	orrs	r3, r2
 800429c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00a      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042ac:	4b65      	ldr	r3, [pc, #404]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	4962      	ldr	r1, [pc, #392]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00a      	beq.n	80042e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042ce:	4b5d      	ldr	r3, [pc, #372]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	4959      	ldr	r1, [pc, #356]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00a      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042f0:	4b54      	ldr	r3, [pc, #336]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042f6:	f023 0203 	bic.w	r2, r3, #3
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042fe:	4951      	ldr	r1, [pc, #324]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004300:	4313      	orrs	r3, r2
 8004302:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00a      	beq.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004312:	4b4c      	ldr	r3, [pc, #304]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004318:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004320:	4948      	ldr	r1, [pc, #288]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004322:	4313      	orrs	r3, r2
 8004324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004330:	2b00      	cmp	r3, #0
 8004332:	d015      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004334:	4b43      	ldr	r3, [pc, #268]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800433a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004342:	4940      	ldr	r1, [pc, #256]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004344:	4313      	orrs	r3, r2
 8004346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004352:	d105      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004354:	4b3b      	ldr	r3, [pc, #236]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	4a3a      	ldr	r2, [pc, #232]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800435a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800435e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004368:	2b00      	cmp	r3, #0
 800436a:	d015      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800436c:	4b35      	ldr	r3, [pc, #212]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800436e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004372:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800437a:	4932      	ldr	r1, [pc, #200]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800437c:	4313      	orrs	r3, r2
 800437e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004386:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800438a:	d105      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800438c:	4b2d      	ldr	r3, [pc, #180]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800438e:	68db      	ldr	r3, [r3, #12]
 8004390:	4a2c      	ldr	r2, [pc, #176]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004392:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004396:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d015      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80043a4:	4b27      	ldr	r3, [pc, #156]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b2:	4924      	ldr	r1, [pc, #144]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043c2:	d105      	bne.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043c4:	4b1f      	ldr	r3, [pc, #124]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	4a1e      	ldr	r2, [pc, #120]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043ce:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d015      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043dc:	4b19      	ldr	r3, [pc, #100]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ea:	4916      	ldr	r1, [pc, #88]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043fa:	d105      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043fc:	4b11      	ldr	r3, [pc, #68]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	4a10      	ldr	r2, [pc, #64]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004402:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004406:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d019      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004414:	4b0b      	ldr	r3, [pc, #44]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800441a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	4908      	ldr	r1, [pc, #32]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004424:	4313      	orrs	r3, r2
 8004426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800442e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004432:	d109      	bne.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004434:	4b03      	ldr	r3, [pc, #12]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	4a02      	ldr	r2, [pc, #8]	; (8004444 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800443a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800443e:	60d3      	str	r3, [r2, #12]
 8004440:	e002      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004442:	bf00      	nop
 8004444:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004450:	2b00      	cmp	r3, #0
 8004452:	d015      	beq.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004454:	4b29      	ldr	r3, [pc, #164]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004462:	4926      	ldr	r1, [pc, #152]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004464:	4313      	orrs	r3, r2
 8004466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800446e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004472:	d105      	bne.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004474:	4b21      	ldr	r3, [pc, #132]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	4a20      	ldr	r2, [pc, #128]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800447a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800447e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d015      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800448c:	4b1b      	ldr	r3, [pc, #108]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800448e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004492:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800449a:	4918      	ldr	r1, [pc, #96]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800449c:	4313      	orrs	r3, r2
 800449e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044aa:	d105      	bne.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80044ac:	4b13      	ldr	r3, [pc, #76]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	4a12      	ldr	r2, [pc, #72]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80044b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044b6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d015      	beq.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80044c4:	4b0d      	ldr	r3, [pc, #52]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80044c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d2:	490a      	ldr	r1, [pc, #40]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80044e2:	d105      	bne.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044e4:	4b05      	ldr	r3, [pc, #20]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	4a04      	ldr	r2, [pc, #16]	; (80044fc <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80044ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044ee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80044f0:	7cbb      	ldrb	r3, [r7, #18]
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3718      	adds	r7, #24
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	40021000 	.word	0x40021000

08004500 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004500:	b580      	push	{r7, lr}
 8004502:	b082      	sub	sp, #8
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e049      	b.n	80045a6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004518:	b2db      	uxtb	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d106      	bne.n	800452c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7fe f802 	bl	8002530 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2202      	movs	r2, #2
 8004530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	3304      	adds	r3, #4
 800453c:	4619      	mov	r1, r3
 800453e:	4610      	mov	r0, r2
 8004540:	f000 fc0e 	bl	8004d60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
	...

080045b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b084      	sub	sp, #16
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
 80045b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d109      	bne.n	80045d4 <HAL_TIM_PWM_Start+0x24>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	bf14      	ite	ne
 80045cc:	2301      	movne	r3, #1
 80045ce:	2300      	moveq	r3, #0
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	e03c      	b.n	800464e <HAL_TIM_PWM_Start+0x9e>
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	d109      	bne.n	80045ee <HAL_TIM_PWM_Start+0x3e>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	bf14      	ite	ne
 80045e6:	2301      	movne	r3, #1
 80045e8:	2300      	moveq	r3, #0
 80045ea:	b2db      	uxtb	r3, r3
 80045ec:	e02f      	b.n	800464e <HAL_TIM_PWM_Start+0x9e>
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	2b08      	cmp	r3, #8
 80045f2:	d109      	bne.n	8004608 <HAL_TIM_PWM_Start+0x58>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	bf14      	ite	ne
 8004600:	2301      	movne	r3, #1
 8004602:	2300      	moveq	r3, #0
 8004604:	b2db      	uxtb	r3, r3
 8004606:	e022      	b.n	800464e <HAL_TIM_PWM_Start+0x9e>
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	2b0c      	cmp	r3, #12
 800460c:	d109      	bne.n	8004622 <HAL_TIM_PWM_Start+0x72>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b01      	cmp	r3, #1
 8004618:	bf14      	ite	ne
 800461a:	2301      	movne	r3, #1
 800461c:	2300      	moveq	r3, #0
 800461e:	b2db      	uxtb	r3, r3
 8004620:	e015      	b.n	800464e <HAL_TIM_PWM_Start+0x9e>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b10      	cmp	r3, #16
 8004626:	d109      	bne.n	800463c <HAL_TIM_PWM_Start+0x8c>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800462e:	b2db      	uxtb	r3, r3
 8004630:	2b01      	cmp	r3, #1
 8004632:	bf14      	ite	ne
 8004634:	2301      	movne	r3, #1
 8004636:	2300      	moveq	r3, #0
 8004638:	b2db      	uxtb	r3, r3
 800463a:	e008      	b.n	800464e <HAL_TIM_PWM_Start+0x9e>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b01      	cmp	r3, #1
 8004646:	bf14      	ite	ne
 8004648:	2301      	movne	r3, #1
 800464a:	2300      	moveq	r3, #0
 800464c:	b2db      	uxtb	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e0a6      	b.n	80047a4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d104      	bne.n	8004666 <HAL_TIM_PWM_Start+0xb6>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2202      	movs	r2, #2
 8004660:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004664:	e023      	b.n	80046ae <HAL_TIM_PWM_Start+0xfe>
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	2b04      	cmp	r3, #4
 800466a:	d104      	bne.n	8004676 <HAL_TIM_PWM_Start+0xc6>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2202      	movs	r2, #2
 8004670:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004674:	e01b      	b.n	80046ae <HAL_TIM_PWM_Start+0xfe>
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	2b08      	cmp	r3, #8
 800467a:	d104      	bne.n	8004686 <HAL_TIM_PWM_Start+0xd6>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004684:	e013      	b.n	80046ae <HAL_TIM_PWM_Start+0xfe>
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	2b0c      	cmp	r3, #12
 800468a:	d104      	bne.n	8004696 <HAL_TIM_PWM_Start+0xe6>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2202      	movs	r2, #2
 8004690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004694:	e00b      	b.n	80046ae <HAL_TIM_PWM_Start+0xfe>
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	2b10      	cmp	r3, #16
 800469a:	d104      	bne.n	80046a6 <HAL_TIM_PWM_Start+0xf6>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046a4:	e003      	b.n	80046ae <HAL_TIM_PWM_Start+0xfe>
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2202      	movs	r2, #2
 80046aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2201      	movs	r2, #1
 80046b4:	6839      	ldr	r1, [r7, #0]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f000 ff24 	bl	8005504 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a3a      	ldr	r2, [pc, #232]	; (80047ac <HAL_TIM_PWM_Start+0x1fc>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d018      	beq.n	80046f8 <HAL_TIM_PWM_Start+0x148>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a39      	ldr	r2, [pc, #228]	; (80047b0 <HAL_TIM_PWM_Start+0x200>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d013      	beq.n	80046f8 <HAL_TIM_PWM_Start+0x148>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a37      	ldr	r2, [pc, #220]	; (80047b4 <HAL_TIM_PWM_Start+0x204>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d00e      	beq.n	80046f8 <HAL_TIM_PWM_Start+0x148>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a36      	ldr	r2, [pc, #216]	; (80047b8 <HAL_TIM_PWM_Start+0x208>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d009      	beq.n	80046f8 <HAL_TIM_PWM_Start+0x148>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a34      	ldr	r2, [pc, #208]	; (80047bc <HAL_TIM_PWM_Start+0x20c>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d004      	beq.n	80046f8 <HAL_TIM_PWM_Start+0x148>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a33      	ldr	r2, [pc, #204]	; (80047c0 <HAL_TIM_PWM_Start+0x210>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d101      	bne.n	80046fc <HAL_TIM_PWM_Start+0x14c>
 80046f8:	2301      	movs	r3, #1
 80046fa:	e000      	b.n	80046fe <HAL_TIM_PWM_Start+0x14e>
 80046fc:	2300      	movs	r3, #0
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d007      	beq.n	8004712 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004710:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a25      	ldr	r2, [pc, #148]	; (80047ac <HAL_TIM_PWM_Start+0x1fc>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d022      	beq.n	8004762 <HAL_TIM_PWM_Start+0x1b2>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004724:	d01d      	beq.n	8004762 <HAL_TIM_PWM_Start+0x1b2>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a26      	ldr	r2, [pc, #152]	; (80047c4 <HAL_TIM_PWM_Start+0x214>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d018      	beq.n	8004762 <HAL_TIM_PWM_Start+0x1b2>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a24      	ldr	r2, [pc, #144]	; (80047c8 <HAL_TIM_PWM_Start+0x218>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d013      	beq.n	8004762 <HAL_TIM_PWM_Start+0x1b2>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a23      	ldr	r2, [pc, #140]	; (80047cc <HAL_TIM_PWM_Start+0x21c>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d00e      	beq.n	8004762 <HAL_TIM_PWM_Start+0x1b2>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a19      	ldr	r2, [pc, #100]	; (80047b0 <HAL_TIM_PWM_Start+0x200>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d009      	beq.n	8004762 <HAL_TIM_PWM_Start+0x1b2>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a18      	ldr	r2, [pc, #96]	; (80047b4 <HAL_TIM_PWM_Start+0x204>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d004      	beq.n	8004762 <HAL_TIM_PWM_Start+0x1b2>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a18      	ldr	r2, [pc, #96]	; (80047c0 <HAL_TIM_PWM_Start+0x210>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d115      	bne.n	800478e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	4b19      	ldr	r3, [pc, #100]	; (80047d0 <HAL_TIM_PWM_Start+0x220>)
 800476a:	4013      	ands	r3, r2
 800476c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2b06      	cmp	r3, #6
 8004772:	d015      	beq.n	80047a0 <HAL_TIM_PWM_Start+0x1f0>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800477a:	d011      	beq.n	80047a0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f042 0201 	orr.w	r2, r2, #1
 800478a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800478c:	e008      	b.n	80047a0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f042 0201 	orr.w	r2, r2, #1
 800479c:	601a      	str	r2, [r3, #0]
 800479e:	e000      	b.n	80047a2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	40012c00 	.word	0x40012c00
 80047b0:	40013400 	.word	0x40013400
 80047b4:	40014000 	.word	0x40014000
 80047b8:	40014400 	.word	0x40014400
 80047bc:	40014800 	.word	0x40014800
 80047c0:	40015000 	.word	0x40015000
 80047c4:	40000400 	.word	0x40000400
 80047c8:	40000800 	.word	0x40000800
 80047cc:	40000c00 	.word	0x40000c00
 80047d0:	00010007 	.word	0x00010007

080047d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b082      	sub	sp, #8
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	691b      	ldr	r3, [r3, #16]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b02      	cmp	r3, #2
 80047e8:	d122      	bne.n	8004830 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b02      	cmp	r3, #2
 80047f6:	d11b      	bne.n	8004830 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f06f 0202 	mvn.w	r2, #2
 8004800:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2201      	movs	r2, #1
 8004806:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	f003 0303 	and.w	r3, r3, #3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 fa84 	bl	8004d24 <HAL_TIM_IC_CaptureCallback>
 800481c:	e005      	b.n	800482a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 fa76 	bl	8004d10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 fa87 	bl	8004d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	f003 0304 	and.w	r3, r3, #4
 800483a:	2b04      	cmp	r3, #4
 800483c:	d122      	bne.n	8004884 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	f003 0304 	and.w	r3, r3, #4
 8004848:	2b04      	cmp	r3, #4
 800484a:	d11b      	bne.n	8004884 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f06f 0204 	mvn.w	r2, #4
 8004854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2202      	movs	r2, #2
 800485a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004866:	2b00      	cmp	r3, #0
 8004868:	d003      	beq.n	8004872 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fa5a 	bl	8004d24 <HAL_TIM_IC_CaptureCallback>
 8004870:	e005      	b.n	800487e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 fa4c 	bl	8004d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 fa5d 	bl	8004d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	f003 0308 	and.w	r3, r3, #8
 800488e:	2b08      	cmp	r3, #8
 8004890:	d122      	bne.n	80048d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	f003 0308 	and.w	r3, r3, #8
 800489c:	2b08      	cmp	r3, #8
 800489e:	d11b      	bne.n	80048d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f06f 0208 	mvn.w	r2, #8
 80048a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2204      	movs	r2, #4
 80048ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	69db      	ldr	r3, [r3, #28]
 80048b6:	f003 0303 	and.w	r3, r3, #3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d003      	beq.n	80048c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 fa30 	bl	8004d24 <HAL_TIM_IC_CaptureCallback>
 80048c4:	e005      	b.n	80048d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 fa22 	bl	8004d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 fa33 	bl	8004d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	f003 0310 	and.w	r3, r3, #16
 80048e2:	2b10      	cmp	r3, #16
 80048e4:	d122      	bne.n	800492c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	f003 0310 	and.w	r3, r3, #16
 80048f0:	2b10      	cmp	r3, #16
 80048f2:	d11b      	bne.n	800492c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f06f 0210 	mvn.w	r2, #16
 80048fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2208      	movs	r2, #8
 8004902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	69db      	ldr	r3, [r3, #28]
 800490a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800490e:	2b00      	cmp	r3, #0
 8004910:	d003      	beq.n	800491a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 fa06 	bl	8004d24 <HAL_TIM_IC_CaptureCallback>
 8004918:	e005      	b.n	8004926 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 f9f8 	bl	8004d10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 fa09 	bl	8004d38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2200      	movs	r2, #0
 800492a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b01      	cmp	r3, #1
 8004938:	d10e      	bne.n	8004958 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	f003 0301 	and.w	r3, r3, #1
 8004944:	2b01      	cmp	r3, #1
 8004946:	d107      	bne.n	8004958 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f06f 0201 	mvn.w	r2, #1
 8004950:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f9d2 	bl	8004cfc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004962:	2b80      	cmp	r3, #128	; 0x80
 8004964:	d10e      	bne.n	8004984 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004970:	2b80      	cmp	r3, #128	; 0x80
 8004972:	d107      	bne.n	8004984 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800497c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 ff38 	bl	80057f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004992:	d10e      	bne.n	80049b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499e:	2b80      	cmp	r3, #128	; 0x80
 80049a0:	d107      	bne.n	80049b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f000 ff2b 	bl	8005808 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049bc:	2b40      	cmp	r3, #64	; 0x40
 80049be:	d10e      	bne.n	80049de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ca:	2b40      	cmp	r3, #64	; 0x40
 80049cc:	d107      	bne.n	80049de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f9b7 	bl	8004d4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	691b      	ldr	r3, [r3, #16]
 80049e4:	f003 0320 	and.w	r3, r3, #32
 80049e8:	2b20      	cmp	r3, #32
 80049ea:	d10e      	bne.n	8004a0a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	f003 0320 	and.w	r3, r3, #32
 80049f6:	2b20      	cmp	r3, #32
 80049f8:	d107      	bne.n	8004a0a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f06f 0220 	mvn.w	r2, #32
 8004a02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 feeb 	bl	80057e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a18:	d10f      	bne.n	8004a3a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a28:	d107      	bne.n	8004a3a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004a32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 fef1 	bl	800581c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a44:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a48:	d10f      	bne.n	8004a6a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a58:	d107      	bne.n	8004a6a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004a62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 fee3 	bl	8005830 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a78:	d10f      	bne.n	8004a9a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a84:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a88:	d107      	bne.n	8004a9a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 fed5 	bl	8005844 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004aa4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004aa8:	d10f      	bne.n	8004aca <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ab4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ab8:	d107      	bne.n	8004aca <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004ac2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 fec7 	bl	8005858 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004aca:	bf00      	nop
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
	...

08004ad4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b086      	sub	sp, #24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d101      	bne.n	8004af2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004aee:	2302      	movs	r3, #2
 8004af0:	e0ff      	b.n	8004cf2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b14      	cmp	r3, #20
 8004afe:	f200 80f0 	bhi.w	8004ce2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004b02:	a201      	add	r2, pc, #4	; (adr r2, 8004b08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b08:	08004b5d 	.word	0x08004b5d
 8004b0c:	08004ce3 	.word	0x08004ce3
 8004b10:	08004ce3 	.word	0x08004ce3
 8004b14:	08004ce3 	.word	0x08004ce3
 8004b18:	08004b9d 	.word	0x08004b9d
 8004b1c:	08004ce3 	.word	0x08004ce3
 8004b20:	08004ce3 	.word	0x08004ce3
 8004b24:	08004ce3 	.word	0x08004ce3
 8004b28:	08004bdf 	.word	0x08004bdf
 8004b2c:	08004ce3 	.word	0x08004ce3
 8004b30:	08004ce3 	.word	0x08004ce3
 8004b34:	08004ce3 	.word	0x08004ce3
 8004b38:	08004c1f 	.word	0x08004c1f
 8004b3c:	08004ce3 	.word	0x08004ce3
 8004b40:	08004ce3 	.word	0x08004ce3
 8004b44:	08004ce3 	.word	0x08004ce3
 8004b48:	08004c61 	.word	0x08004c61
 8004b4c:	08004ce3 	.word	0x08004ce3
 8004b50:	08004ce3 	.word	0x08004ce3
 8004b54:	08004ce3 	.word	0x08004ce3
 8004b58:	08004ca1 	.word	0x08004ca1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	68b9      	ldr	r1, [r7, #8]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 f9a4 	bl	8004eb0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	699a      	ldr	r2, [r3, #24]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f042 0208 	orr.w	r2, r2, #8
 8004b76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	699a      	ldr	r2, [r3, #24]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 0204 	bic.w	r2, r2, #4
 8004b86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	6999      	ldr	r1, [r3, #24]
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	691a      	ldr	r2, [r3, #16]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	619a      	str	r2, [r3, #24]
      break;
 8004b9a:	e0a5      	b.n	8004ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	68b9      	ldr	r1, [r7, #8]
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 fa1e 	bl	8004fe4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	699a      	ldr	r2, [r3, #24]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	699a      	ldr	r2, [r3, #24]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6999      	ldr	r1, [r3, #24]
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	021a      	lsls	r2, r3, #8
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	430a      	orrs	r2, r1
 8004bda:	619a      	str	r2, [r3, #24]
      break;
 8004bdc:	e084      	b.n	8004ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	68b9      	ldr	r1, [r7, #8]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 fa91 	bl	800510c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	69da      	ldr	r2, [r3, #28]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f042 0208 	orr.w	r2, r2, #8
 8004bf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	69da      	ldr	r2, [r3, #28]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0204 	bic.w	r2, r2, #4
 8004c08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	69d9      	ldr	r1, [r3, #28]
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	691a      	ldr	r2, [r3, #16]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	61da      	str	r2, [r3, #28]
      break;
 8004c1c:	e064      	b.n	8004ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68b9      	ldr	r1, [r7, #8]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f000 fb03 	bl	8005230 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	69da      	ldr	r2, [r3, #28]
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	69da      	ldr	r2, [r3, #28]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	69d9      	ldr	r1, [r3, #28]
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	021a      	lsls	r2, r3, #8
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	430a      	orrs	r2, r1
 8004c5c:	61da      	str	r2, [r3, #28]
      break;
 8004c5e:	e043      	b.n	8004ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68b9      	ldr	r1, [r7, #8]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 fb76 	bl	8005358 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 0208 	orr.w	r2, r2, #8
 8004c7a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 0204 	bic.w	r2, r2, #4
 8004c8a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	691a      	ldr	r2, [r3, #16]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004c9e:	e023      	b.n	8004ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68b9      	ldr	r1, [r7, #8]
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f000 fbc0 	bl	800542c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cca:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	021a      	lsls	r2, r3, #8
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	430a      	orrs	r2, r1
 8004cde:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004ce0:	e002      	b.n	8004ce8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	75fb      	strb	r3, [r7, #23]
      break;
 8004ce6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3718      	adds	r7, #24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop

08004cfc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d40:	bf00      	nop
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a46      	ldr	r2, [pc, #280]	; (8004e8c <TIM_Base_SetConfig+0x12c>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d017      	beq.n	8004da8 <TIM_Base_SetConfig+0x48>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d7e:	d013      	beq.n	8004da8 <TIM_Base_SetConfig+0x48>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a43      	ldr	r2, [pc, #268]	; (8004e90 <TIM_Base_SetConfig+0x130>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d00f      	beq.n	8004da8 <TIM_Base_SetConfig+0x48>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a42      	ldr	r2, [pc, #264]	; (8004e94 <TIM_Base_SetConfig+0x134>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d00b      	beq.n	8004da8 <TIM_Base_SetConfig+0x48>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	4a41      	ldr	r2, [pc, #260]	; (8004e98 <TIM_Base_SetConfig+0x138>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d007      	beq.n	8004da8 <TIM_Base_SetConfig+0x48>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	4a40      	ldr	r2, [pc, #256]	; (8004e9c <TIM_Base_SetConfig+0x13c>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d003      	beq.n	8004da8 <TIM_Base_SetConfig+0x48>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	4a3f      	ldr	r2, [pc, #252]	; (8004ea0 <TIM_Base_SetConfig+0x140>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d108      	bne.n	8004dba <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a33      	ldr	r2, [pc, #204]	; (8004e8c <TIM_Base_SetConfig+0x12c>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d023      	beq.n	8004e0a <TIM_Base_SetConfig+0xaa>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc8:	d01f      	beq.n	8004e0a <TIM_Base_SetConfig+0xaa>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a30      	ldr	r2, [pc, #192]	; (8004e90 <TIM_Base_SetConfig+0x130>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d01b      	beq.n	8004e0a <TIM_Base_SetConfig+0xaa>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	4a2f      	ldr	r2, [pc, #188]	; (8004e94 <TIM_Base_SetConfig+0x134>)
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d017      	beq.n	8004e0a <TIM_Base_SetConfig+0xaa>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	4a2e      	ldr	r2, [pc, #184]	; (8004e98 <TIM_Base_SetConfig+0x138>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d013      	beq.n	8004e0a <TIM_Base_SetConfig+0xaa>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4a2d      	ldr	r2, [pc, #180]	; (8004e9c <TIM_Base_SetConfig+0x13c>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d00f      	beq.n	8004e0a <TIM_Base_SetConfig+0xaa>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	4a2d      	ldr	r2, [pc, #180]	; (8004ea4 <TIM_Base_SetConfig+0x144>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d00b      	beq.n	8004e0a <TIM_Base_SetConfig+0xaa>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a2c      	ldr	r2, [pc, #176]	; (8004ea8 <TIM_Base_SetConfig+0x148>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d007      	beq.n	8004e0a <TIM_Base_SetConfig+0xaa>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4a2b      	ldr	r2, [pc, #172]	; (8004eac <TIM_Base_SetConfig+0x14c>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d003      	beq.n	8004e0a <TIM_Base_SetConfig+0xaa>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a26      	ldr	r2, [pc, #152]	; (8004ea0 <TIM_Base_SetConfig+0x140>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d108      	bne.n	8004e1c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	689a      	ldr	r2, [r3, #8]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	4a12      	ldr	r2, [pc, #72]	; (8004e8c <TIM_Base_SetConfig+0x12c>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d013      	beq.n	8004e70 <TIM_Base_SetConfig+0x110>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	4a14      	ldr	r2, [pc, #80]	; (8004e9c <TIM_Base_SetConfig+0x13c>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d00f      	beq.n	8004e70 <TIM_Base_SetConfig+0x110>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	4a14      	ldr	r2, [pc, #80]	; (8004ea4 <TIM_Base_SetConfig+0x144>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d00b      	beq.n	8004e70 <TIM_Base_SetConfig+0x110>
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a13      	ldr	r2, [pc, #76]	; (8004ea8 <TIM_Base_SetConfig+0x148>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d007      	beq.n	8004e70 <TIM_Base_SetConfig+0x110>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a12      	ldr	r2, [pc, #72]	; (8004eac <TIM_Base_SetConfig+0x14c>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d003      	beq.n	8004e70 <TIM_Base_SetConfig+0x110>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a0d      	ldr	r2, [pc, #52]	; (8004ea0 <TIM_Base_SetConfig+0x140>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d103      	bne.n	8004e78 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	691a      	ldr	r2, [r3, #16]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	615a      	str	r2, [r3, #20]
}
 8004e7e:	bf00      	nop
 8004e80:	3714      	adds	r7, #20
 8004e82:	46bd      	mov	sp, r7
 8004e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e88:	4770      	bx	lr
 8004e8a:	bf00      	nop
 8004e8c:	40012c00 	.word	0x40012c00
 8004e90:	40000400 	.word	0x40000400
 8004e94:	40000800 	.word	0x40000800
 8004e98:	40000c00 	.word	0x40000c00
 8004e9c:	40013400 	.word	0x40013400
 8004ea0:	40015000 	.word	0x40015000
 8004ea4:	40014000 	.word	0x40014000
 8004ea8:	40014400 	.word	0x40014400
 8004eac:	40014800 	.word	0x40014800

08004eb0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b087      	sub	sp, #28
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	f023 0201 	bic.w	r2, r3, #1
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ede:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	f023 0303 	bic.w	r3, r3, #3
 8004eea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ef6:	697b      	ldr	r3, [r7, #20]
 8004ef8:	f023 0302 	bic.w	r3, r3, #2
 8004efc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a30      	ldr	r2, [pc, #192]	; (8004fcc <TIM_OC1_SetConfig+0x11c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d013      	beq.n	8004f38 <TIM_OC1_SetConfig+0x88>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a2f      	ldr	r2, [pc, #188]	; (8004fd0 <TIM_OC1_SetConfig+0x120>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d00f      	beq.n	8004f38 <TIM_OC1_SetConfig+0x88>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a2e      	ldr	r2, [pc, #184]	; (8004fd4 <TIM_OC1_SetConfig+0x124>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d00b      	beq.n	8004f38 <TIM_OC1_SetConfig+0x88>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a2d      	ldr	r2, [pc, #180]	; (8004fd8 <TIM_OC1_SetConfig+0x128>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d007      	beq.n	8004f38 <TIM_OC1_SetConfig+0x88>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a2c      	ldr	r2, [pc, #176]	; (8004fdc <TIM_OC1_SetConfig+0x12c>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d003      	beq.n	8004f38 <TIM_OC1_SetConfig+0x88>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a2b      	ldr	r2, [pc, #172]	; (8004fe0 <TIM_OC1_SetConfig+0x130>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d10c      	bne.n	8004f52 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f023 0308 	bic.w	r3, r3, #8
 8004f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f023 0304 	bic.w	r3, r3, #4
 8004f50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a1d      	ldr	r2, [pc, #116]	; (8004fcc <TIM_OC1_SetConfig+0x11c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d013      	beq.n	8004f82 <TIM_OC1_SetConfig+0xd2>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a1c      	ldr	r2, [pc, #112]	; (8004fd0 <TIM_OC1_SetConfig+0x120>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d00f      	beq.n	8004f82 <TIM_OC1_SetConfig+0xd2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a1b      	ldr	r2, [pc, #108]	; (8004fd4 <TIM_OC1_SetConfig+0x124>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d00b      	beq.n	8004f82 <TIM_OC1_SetConfig+0xd2>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a1a      	ldr	r2, [pc, #104]	; (8004fd8 <TIM_OC1_SetConfig+0x128>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d007      	beq.n	8004f82 <TIM_OC1_SetConfig+0xd2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a19      	ldr	r2, [pc, #100]	; (8004fdc <TIM_OC1_SetConfig+0x12c>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d003      	beq.n	8004f82 <TIM_OC1_SetConfig+0xd2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a18      	ldr	r2, [pc, #96]	; (8004fe0 <TIM_OC1_SetConfig+0x130>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d111      	bne.n	8004fa6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	621a      	str	r2, [r3, #32]
}
 8004fc0:	bf00      	nop
 8004fc2:	371c      	adds	r7, #28
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr
 8004fcc:	40012c00 	.word	0x40012c00
 8004fd0:	40013400 	.word	0x40013400
 8004fd4:	40014000 	.word	0x40014000
 8004fd8:	40014400 	.word	0x40014400
 8004fdc:	40014800 	.word	0x40014800
 8004fe0:	40015000 	.word	0x40015000

08004fe4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b087      	sub	sp, #28
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	f023 0210 	bic.w	r2, r3, #16
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a1b      	ldr	r3, [r3, #32]
 8004ffe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	699b      	ldr	r3, [r3, #24]
 800500a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005012:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800501e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	021b      	lsls	r3, r3, #8
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	4313      	orrs	r3, r2
 800502a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f023 0320 	bic.w	r3, r3, #32
 8005032:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	011b      	lsls	r3, r3, #4
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	4313      	orrs	r3, r2
 800503e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a2c      	ldr	r2, [pc, #176]	; (80050f4 <TIM_OC2_SetConfig+0x110>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d007      	beq.n	8005058 <TIM_OC2_SetConfig+0x74>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a2b      	ldr	r2, [pc, #172]	; (80050f8 <TIM_OC2_SetConfig+0x114>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d003      	beq.n	8005058 <TIM_OC2_SetConfig+0x74>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a2a      	ldr	r2, [pc, #168]	; (80050fc <TIM_OC2_SetConfig+0x118>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d10d      	bne.n	8005074 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800505e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	011b      	lsls	r3, r3, #4
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	4313      	orrs	r3, r2
 800506a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005072:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a1f      	ldr	r2, [pc, #124]	; (80050f4 <TIM_OC2_SetConfig+0x110>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d013      	beq.n	80050a4 <TIM_OC2_SetConfig+0xc0>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a1e      	ldr	r2, [pc, #120]	; (80050f8 <TIM_OC2_SetConfig+0x114>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d00f      	beq.n	80050a4 <TIM_OC2_SetConfig+0xc0>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a1e      	ldr	r2, [pc, #120]	; (8005100 <TIM_OC2_SetConfig+0x11c>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d00b      	beq.n	80050a4 <TIM_OC2_SetConfig+0xc0>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a1d      	ldr	r2, [pc, #116]	; (8005104 <TIM_OC2_SetConfig+0x120>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d007      	beq.n	80050a4 <TIM_OC2_SetConfig+0xc0>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a1c      	ldr	r2, [pc, #112]	; (8005108 <TIM_OC2_SetConfig+0x124>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d003      	beq.n	80050a4 <TIM_OC2_SetConfig+0xc0>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a17      	ldr	r2, [pc, #92]	; (80050fc <TIM_OC2_SetConfig+0x118>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d113      	bne.n	80050cc <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80050aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80050b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	4313      	orrs	r3, r2
 80050be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	621a      	str	r2, [r3, #32]
}
 80050e6:	bf00      	nop
 80050e8:	371c      	adds	r7, #28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	40012c00 	.word	0x40012c00
 80050f8:	40013400 	.word	0x40013400
 80050fc:	40015000 	.word	0x40015000
 8005100:	40014000 	.word	0x40014000
 8005104:	40014400 	.word	0x40014400
 8005108:	40014800 	.word	0x40014800

0800510c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800510c:	b480      	push	{r7}
 800510e:	b087      	sub	sp, #28
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	69db      	ldr	r3, [r3, #28]
 8005132:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800513a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800513e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f023 0303 	bic.w	r3, r3, #3
 8005146:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	4313      	orrs	r3, r2
 8005150:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005158:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	021b      	lsls	r3, r3, #8
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	4313      	orrs	r3, r2
 8005164:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a2b      	ldr	r2, [pc, #172]	; (8005218 <TIM_OC3_SetConfig+0x10c>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d007      	beq.n	800517e <TIM_OC3_SetConfig+0x72>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a2a      	ldr	r2, [pc, #168]	; (800521c <TIM_OC3_SetConfig+0x110>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d003      	beq.n	800517e <TIM_OC3_SetConfig+0x72>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a29      	ldr	r2, [pc, #164]	; (8005220 <TIM_OC3_SetConfig+0x114>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d10d      	bne.n	800519a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005184:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	021b      	lsls	r3, r3, #8
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	4313      	orrs	r3, r2
 8005190:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005198:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a1e      	ldr	r2, [pc, #120]	; (8005218 <TIM_OC3_SetConfig+0x10c>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d013      	beq.n	80051ca <TIM_OC3_SetConfig+0xbe>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a1d      	ldr	r2, [pc, #116]	; (800521c <TIM_OC3_SetConfig+0x110>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d00f      	beq.n	80051ca <TIM_OC3_SetConfig+0xbe>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a1d      	ldr	r2, [pc, #116]	; (8005224 <TIM_OC3_SetConfig+0x118>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d00b      	beq.n	80051ca <TIM_OC3_SetConfig+0xbe>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a1c      	ldr	r2, [pc, #112]	; (8005228 <TIM_OC3_SetConfig+0x11c>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d007      	beq.n	80051ca <TIM_OC3_SetConfig+0xbe>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a1b      	ldr	r2, [pc, #108]	; (800522c <TIM_OC3_SetConfig+0x120>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d003      	beq.n	80051ca <TIM_OC3_SetConfig+0xbe>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a16      	ldr	r2, [pc, #88]	; (8005220 <TIM_OC3_SetConfig+0x114>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d113      	bne.n	80051f2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	011b      	lsls	r3, r3, #4
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	011b      	lsls	r3, r3, #4
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	685a      	ldr	r2, [r3, #4]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	621a      	str	r2, [r3, #32]
}
 800520c:	bf00      	nop
 800520e:	371c      	adds	r7, #28
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr
 8005218:	40012c00 	.word	0x40012c00
 800521c:	40013400 	.word	0x40013400
 8005220:	40015000 	.word	0x40015000
 8005224:	40014000 	.word	0x40014000
 8005228:	40014400 	.word	0x40014400
 800522c:	40014800 	.word	0x40014800

08005230 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005230:	b480      	push	{r7}
 8005232:	b087      	sub	sp, #28
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	69db      	ldr	r3, [r3, #28]
 8005256:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800525e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800526a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	021b      	lsls	r3, r3, #8
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	4313      	orrs	r3, r2
 8005276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800527e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	031b      	lsls	r3, r3, #12
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	4313      	orrs	r3, r2
 800528a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a2c      	ldr	r2, [pc, #176]	; (8005340 <TIM_OC4_SetConfig+0x110>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d007      	beq.n	80052a4 <TIM_OC4_SetConfig+0x74>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a2b      	ldr	r2, [pc, #172]	; (8005344 <TIM_OC4_SetConfig+0x114>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d003      	beq.n	80052a4 <TIM_OC4_SetConfig+0x74>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a2a      	ldr	r2, [pc, #168]	; (8005348 <TIM_OC4_SetConfig+0x118>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d10d      	bne.n	80052c0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	031b      	lsls	r3, r3, #12
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052be:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a1f      	ldr	r2, [pc, #124]	; (8005340 <TIM_OC4_SetConfig+0x110>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d013      	beq.n	80052f0 <TIM_OC4_SetConfig+0xc0>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a1e      	ldr	r2, [pc, #120]	; (8005344 <TIM_OC4_SetConfig+0x114>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d00f      	beq.n	80052f0 <TIM_OC4_SetConfig+0xc0>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a1e      	ldr	r2, [pc, #120]	; (800534c <TIM_OC4_SetConfig+0x11c>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d00b      	beq.n	80052f0 <TIM_OC4_SetConfig+0xc0>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a1d      	ldr	r2, [pc, #116]	; (8005350 <TIM_OC4_SetConfig+0x120>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d007      	beq.n	80052f0 <TIM_OC4_SetConfig+0xc0>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a1c      	ldr	r2, [pc, #112]	; (8005354 <TIM_OC4_SetConfig+0x124>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d003      	beq.n	80052f0 <TIM_OC4_SetConfig+0xc0>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a17      	ldr	r2, [pc, #92]	; (8005348 <TIM_OC4_SetConfig+0x118>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d113      	bne.n	8005318 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052f6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80052fe:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	019b      	lsls	r3, r3, #6
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	4313      	orrs	r3, r2
 800530a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	019b      	lsls	r3, r3, #6
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	4313      	orrs	r3, r2
 8005316:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	621a      	str	r2, [r3, #32]
}
 8005332:	bf00      	nop
 8005334:	371c      	adds	r7, #28
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	40012c00 	.word	0x40012c00
 8005344:	40013400 	.word	0x40013400
 8005348:	40015000 	.word	0x40015000
 800534c:	40014000 	.word	0x40014000
 8005350:	40014400 	.word	0x40014400
 8005354:	40014800 	.word	0x40014800

08005358 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005358:	b480      	push	{r7}
 800535a:	b087      	sub	sp, #28
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800537e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800538a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68fa      	ldr	r2, [r7, #12]
 8005392:	4313      	orrs	r3, r2
 8005394:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800539c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	041b      	lsls	r3, r3, #16
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	4a19      	ldr	r2, [pc, #100]	; (8005414 <TIM_OC5_SetConfig+0xbc>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d013      	beq.n	80053da <TIM_OC5_SetConfig+0x82>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	4a18      	ldr	r2, [pc, #96]	; (8005418 <TIM_OC5_SetConfig+0xc0>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d00f      	beq.n	80053da <TIM_OC5_SetConfig+0x82>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4a17      	ldr	r2, [pc, #92]	; (800541c <TIM_OC5_SetConfig+0xc4>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	d00b      	beq.n	80053da <TIM_OC5_SetConfig+0x82>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	4a16      	ldr	r2, [pc, #88]	; (8005420 <TIM_OC5_SetConfig+0xc8>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d007      	beq.n	80053da <TIM_OC5_SetConfig+0x82>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	4a15      	ldr	r2, [pc, #84]	; (8005424 <TIM_OC5_SetConfig+0xcc>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d003      	beq.n	80053da <TIM_OC5_SetConfig+0x82>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	4a14      	ldr	r2, [pc, #80]	; (8005428 <TIM_OC5_SetConfig+0xd0>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d109      	bne.n	80053ee <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	021b      	lsls	r3, r3, #8
 80053e8:	697a      	ldr	r2, [r7, #20]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	685a      	ldr	r2, [r3, #4]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	693a      	ldr	r2, [r7, #16]
 8005406:	621a      	str	r2, [r3, #32]
}
 8005408:	bf00      	nop
 800540a:	371c      	adds	r7, #28
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr
 8005414:	40012c00 	.word	0x40012c00
 8005418:	40013400 	.word	0x40013400
 800541c:	40014000 	.word	0x40014000
 8005420:	40014400 	.word	0x40014400
 8005424:	40014800 	.word	0x40014800
 8005428:	40015000 	.word	0x40015000

0800542c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800542c:	b480      	push	{r7}
 800542e:	b087      	sub	sp, #28
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800545a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800545e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	021b      	lsls	r3, r3, #8
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	4313      	orrs	r3, r2
 800546a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005472:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	051b      	lsls	r3, r3, #20
 800547a:	693a      	ldr	r2, [r7, #16]
 800547c:	4313      	orrs	r3, r2
 800547e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a1a      	ldr	r2, [pc, #104]	; (80054ec <TIM_OC6_SetConfig+0xc0>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d013      	beq.n	80054b0 <TIM_OC6_SetConfig+0x84>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a19      	ldr	r2, [pc, #100]	; (80054f0 <TIM_OC6_SetConfig+0xc4>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d00f      	beq.n	80054b0 <TIM_OC6_SetConfig+0x84>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a18      	ldr	r2, [pc, #96]	; (80054f4 <TIM_OC6_SetConfig+0xc8>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d00b      	beq.n	80054b0 <TIM_OC6_SetConfig+0x84>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a17      	ldr	r2, [pc, #92]	; (80054f8 <TIM_OC6_SetConfig+0xcc>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d007      	beq.n	80054b0 <TIM_OC6_SetConfig+0x84>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a16      	ldr	r2, [pc, #88]	; (80054fc <TIM_OC6_SetConfig+0xd0>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d003      	beq.n	80054b0 <TIM_OC6_SetConfig+0x84>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4a15      	ldr	r2, [pc, #84]	; (8005500 <TIM_OC6_SetConfig+0xd4>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d109      	bne.n	80054c4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054b6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	695b      	ldr	r3, [r3, #20]
 80054bc:	029b      	lsls	r3, r3, #10
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68fa      	ldr	r2, [r7, #12]
 80054ce:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685a      	ldr	r2, [r3, #4]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	693a      	ldr	r2, [r7, #16]
 80054dc:	621a      	str	r2, [r3, #32]
}
 80054de:	bf00      	nop
 80054e0:	371c      	adds	r7, #28
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	40012c00 	.word	0x40012c00
 80054f0:	40013400 	.word	0x40013400
 80054f4:	40014000 	.word	0x40014000
 80054f8:	40014400 	.word	0x40014400
 80054fc:	40014800 	.word	0x40014800
 8005500:	40015000 	.word	0x40015000

08005504 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005504:	b480      	push	{r7}
 8005506:	b087      	sub	sp, #28
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	f003 031f 	and.w	r3, r3, #31
 8005516:	2201      	movs	r2, #1
 8005518:	fa02 f303 	lsl.w	r3, r2, r3
 800551c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6a1a      	ldr	r2, [r3, #32]
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	43db      	mvns	r3, r3
 8005526:	401a      	ands	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6a1a      	ldr	r2, [r3, #32]
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	f003 031f 	and.w	r3, r3, #31
 8005536:	6879      	ldr	r1, [r7, #4]
 8005538:	fa01 f303 	lsl.w	r3, r1, r3
 800553c:	431a      	orrs	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	621a      	str	r2, [r3, #32]
}
 8005542:	bf00      	nop
 8005544:	371c      	adds	r7, #28
 8005546:	46bd      	mov	sp, r7
 8005548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554c:	4770      	bx	lr
	...

08005550 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005560:	2b01      	cmp	r3, #1
 8005562:	d101      	bne.n	8005568 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005564:	2302      	movs	r3, #2
 8005566:	e074      	b.n	8005652 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2202      	movs	r2, #2
 8005574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a34      	ldr	r2, [pc, #208]	; (8005660 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d009      	beq.n	80055a6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a33      	ldr	r2, [pc, #204]	; (8005664 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d004      	beq.n	80055a6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a31      	ldr	r2, [pc, #196]	; (8005668 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d108      	bne.n	80055b8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80055ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	68fa      	ldr	r2, [r7, #12]
 80055b4:	4313      	orrs	r3, r2
 80055b6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80055be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68fa      	ldr	r2, [r7, #12]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68fa      	ldr	r2, [r7, #12]
 80055d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a21      	ldr	r2, [pc, #132]	; (8005660 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d022      	beq.n	8005626 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055e8:	d01d      	beq.n	8005626 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a1f      	ldr	r2, [pc, #124]	; (800566c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d018      	beq.n	8005626 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a1d      	ldr	r2, [pc, #116]	; (8005670 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d013      	beq.n	8005626 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a1c      	ldr	r2, [pc, #112]	; (8005674 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d00e      	beq.n	8005626 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a15      	ldr	r2, [pc, #84]	; (8005664 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d009      	beq.n	8005626 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a18      	ldr	r2, [pc, #96]	; (8005678 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005618:	4293      	cmp	r3, r2
 800561a:	d004      	beq.n	8005626 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a11      	ldr	r2, [pc, #68]	; (8005668 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d10c      	bne.n	8005640 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800562c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	4313      	orrs	r3, r2
 8005636:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68ba      	ldr	r2, [r7, #8]
 800563e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	40012c00 	.word	0x40012c00
 8005664:	40013400 	.word	0x40013400
 8005668:	40015000 	.word	0x40015000
 800566c:	40000400 	.word	0x40000400
 8005670:	40000800 	.word	0x40000800
 8005674:	40000c00 	.word	0x40000c00
 8005678:	40014000 	.word	0x40014000

0800567c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005686:	2300      	movs	r3, #0
 8005688:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005690:	2b01      	cmp	r3, #1
 8005692:	d101      	bne.n	8005698 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005694:	2302      	movs	r3, #2
 8005696:	e096      	b.n	80057c6 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	695b      	ldr	r3, [r3, #20]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fe:	4313      	orrs	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	041b      	lsls	r3, r3, #16
 800570e:	4313      	orrs	r3, r2
 8005710:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a2f      	ldr	r2, [pc, #188]	; (80057d4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d009      	beq.n	8005730 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a2d      	ldr	r2, [pc, #180]	; (80057d8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d004      	beq.n	8005730 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a2c      	ldr	r2, [pc, #176]	; (80057dc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d106      	bne.n	800573e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	69db      	ldr	r3, [r3, #28]
 800573a:	4313      	orrs	r3, r2
 800573c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a24      	ldr	r2, [pc, #144]	; (80057d4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d009      	beq.n	800575c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a22      	ldr	r2, [pc, #136]	; (80057d8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d004      	beq.n	800575c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a21      	ldr	r2, [pc, #132]	; (80057dc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d12b      	bne.n	80057b4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005766:	051b      	lsls	r3, r3, #20
 8005768:	4313      	orrs	r3, r2
 800576a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	4313      	orrs	r3, r2
 8005778:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005784:	4313      	orrs	r3, r2
 8005786:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a11      	ldr	r2, [pc, #68]	; (80057d4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d009      	beq.n	80057a6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a10      	ldr	r2, [pc, #64]	; (80057d8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d004      	beq.n	80057a6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a0e      	ldr	r2, [pc, #56]	; (80057dc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d106      	bne.n	80057b4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b0:	4313      	orrs	r3, r2
 80057b2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	40012c00 	.word	0x40012c00
 80057d8:	40013400 	.word	0x40013400
 80057dc:	40015000 	.word	0x40015000

080057e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b083      	sub	sp, #12
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057fc:	bf00      	nop
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr

08005808 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005808:	b480      	push	{r7}
 800580a:	b083      	sub	sp, #12
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005810:	bf00      	nop
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005830:	b480      	push	{r7}
 8005832:	b083      	sub	sp, #12
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005838:	bf00      	nop
 800583a:	370c      	adds	r7, #12
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800584c:	bf00      	nop
 800584e:	370c      	adds	r7, #12
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005860:	bf00      	nop
 8005862:	370c      	adds	r7, #12
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e042      	b.n	8005904 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005884:	2b00      	cmp	r3, #0
 8005886:	d106      	bne.n	8005896 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2200      	movs	r2, #0
 800588c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f7fc fdad 	bl	80023f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2224      	movs	r2, #36	; 0x24
 800589a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f022 0201 	bic.w	r2, r2, #1
 80058ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 fb64 	bl	8005f7c <UART_SetConfig>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d101      	bne.n	80058be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e022      	b.n	8005904 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d002      	beq.n	80058cc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 fe54 	bl	8006574 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689a      	ldr	r2, [r3, #8]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f042 0201 	orr.w	r2, r2, #1
 80058fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 fedb 	bl	80066b8 <UART_CheckIdleState>
 8005902:	4603      	mov	r3, r0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3708      	adds	r7, #8
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b0ba      	sub	sp, #232	; 0xe8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	69db      	ldr	r3, [r3, #28]
 800591a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005932:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005936:	f640 030f 	movw	r3, #2063	; 0x80f
 800593a:	4013      	ands	r3, r2
 800593c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005940:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005944:	2b00      	cmp	r3, #0
 8005946:	d11b      	bne.n	8005980 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800594c:	f003 0320 	and.w	r3, r3, #32
 8005950:	2b00      	cmp	r3, #0
 8005952:	d015      	beq.n	8005980 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005958:	f003 0320 	and.w	r3, r3, #32
 800595c:	2b00      	cmp	r3, #0
 800595e:	d105      	bne.n	800596c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005960:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d009      	beq.n	8005980 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005970:	2b00      	cmp	r3, #0
 8005972:	f000 82d6 	beq.w	8005f22 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	4798      	blx	r3
      }
      return;
 800597e:	e2d0      	b.n	8005f22 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005980:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005984:	2b00      	cmp	r3, #0
 8005986:	f000 811f 	beq.w	8005bc8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800598a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800598e:	4b8b      	ldr	r3, [pc, #556]	; (8005bbc <HAL_UART_IRQHandler+0x2b0>)
 8005990:	4013      	ands	r3, r2
 8005992:	2b00      	cmp	r3, #0
 8005994:	d106      	bne.n	80059a4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005996:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800599a:	4b89      	ldr	r3, [pc, #548]	; (8005bc0 <HAL_UART_IRQHandler+0x2b4>)
 800599c:	4013      	ands	r3, r2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	f000 8112 	beq.w	8005bc8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80059a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059a8:	f003 0301 	and.w	r3, r3, #1
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d011      	beq.n	80059d4 <HAL_UART_IRQHandler+0xc8>
 80059b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00b      	beq.n	80059d4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	2201      	movs	r2, #1
 80059c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059ca:	f043 0201 	orr.w	r2, r3, #1
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80059d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059d8:	f003 0302 	and.w	r3, r3, #2
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d011      	beq.n	8005a04 <HAL_UART_IRQHandler+0xf8>
 80059e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059e4:	f003 0301 	and.w	r3, r3, #1
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00b      	beq.n	8005a04 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2202      	movs	r2, #2
 80059f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059fa:	f043 0204 	orr.w	r2, r3, #4
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a08:	f003 0304 	and.w	r3, r3, #4
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d011      	beq.n	8005a34 <HAL_UART_IRQHandler+0x128>
 8005a10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00b      	beq.n	8005a34 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2204      	movs	r2, #4
 8005a22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a2a:	f043 0202 	orr.w	r2, r3, #2
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a38:	f003 0308 	and.w	r3, r3, #8
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d017      	beq.n	8005a70 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005a40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a44:	f003 0320 	and.w	r3, r3, #32
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d105      	bne.n	8005a58 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005a4c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005a50:	4b5a      	ldr	r3, [pc, #360]	; (8005bbc <HAL_UART_IRQHandler+0x2b0>)
 8005a52:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d00b      	beq.n	8005a70 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	2208      	movs	r2, #8
 8005a5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a66:	f043 0208 	orr.w	r2, r3, #8
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d012      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x196>
 8005a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a80:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d00c      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a98:	f043 0220 	orr.w	r2, r3, #32
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f000 823c 	beq.w	8005f26 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ab2:	f003 0320 	and.w	r3, r3, #32
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d013      	beq.n	8005ae2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005aba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005abe:	f003 0320 	and.w	r3, r3, #32
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d105      	bne.n	8005ad2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005ac6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d007      	beq.n	8005ae2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ae8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af6:	2b40      	cmp	r3, #64	; 0x40
 8005af8:	d005      	beq.n	8005b06 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005afa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005afe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d04f      	beq.n	8005ba6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 fee9 	bl	80068de <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b16:	2b40      	cmp	r3, #64	; 0x40
 8005b18:	d141      	bne.n	8005b9e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	3308      	adds	r3, #8
 8005b20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b28:	e853 3f00 	ldrex	r3, [r3]
 8005b2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005b30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	3308      	adds	r3, #8
 8005b42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005b46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005b4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005b52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005b56:	e841 2300 	strex	r3, r2, [r1]
 8005b5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005b5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1d9      	bne.n	8005b1a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d013      	beq.n	8005b96 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b72:	4a14      	ldr	r2, [pc, #80]	; (8005bc4 <HAL_UART_IRQHandler+0x2b8>)
 8005b74:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fd fa4d 	bl	800301a <HAL_DMA_Abort_IT>
 8005b80:	4603      	mov	r3, r0
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d017      	beq.n	8005bb6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005b90:	4610      	mov	r0, r2
 8005b92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b94:	e00f      	b.n	8005bb6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 f9da 	bl	8005f50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b9c:	e00b      	b.n	8005bb6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f9d6 	bl	8005f50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ba4:	e007      	b.n	8005bb6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 f9d2 	bl	8005f50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005bb4:	e1b7      	b.n	8005f26 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bb6:	bf00      	nop
    return;
 8005bb8:	e1b5      	b.n	8005f26 <HAL_UART_IRQHandler+0x61a>
 8005bba:	bf00      	nop
 8005bbc:	10000001 	.word	0x10000001
 8005bc0:	04000120 	.word	0x04000120
 8005bc4:	080069ab 	.word	0x080069ab

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	f040 814a 	bne.w	8005e66 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005bd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bd6:	f003 0310 	and.w	r3, r3, #16
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	f000 8143 	beq.w	8005e66 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005be0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005be4:	f003 0310 	and.w	r3, r3, #16
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	f000 813c 	beq.w	8005e66 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2210      	movs	r2, #16
 8005bf4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c00:	2b40      	cmp	r3, #64	; 0x40
 8005c02:	f040 80b5 	bne.w	8005d70 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005c12:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f000 8187 	beq.w	8005f2a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c26:	429a      	cmp	r2, r3
 8005c28:	f080 817f 	bcs.w	8005f2a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005c32:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0320 	and.w	r3, r3, #32
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f040 8086 	bne.w	8005d54 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c54:	e853 3f00 	ldrex	r3, [r3]
 8005c58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005c5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005c60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005c76:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c82:	e841 2300 	strex	r3, r2, [r1]
 8005c86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1da      	bne.n	8005c48 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	3308      	adds	r3, #8
 8005c98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c9c:	e853 3f00 	ldrex	r3, [r3]
 8005ca0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005ca2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ca4:	f023 0301 	bic.w	r3, r3, #1
 8005ca8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	3308      	adds	r3, #8
 8005cb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005cb6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005cba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cbc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005cbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005cc2:	e841 2300 	strex	r3, r2, [r1]
 8005cc6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005cc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1e1      	bne.n	8005c92 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	3308      	adds	r3, #8
 8005cd4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005cd8:	e853 3f00 	ldrex	r3, [r3]
 8005cdc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005cde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ce0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ce4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3308      	adds	r3, #8
 8005cee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005cf2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005cf4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005cf8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005cfa:	e841 2300 	strex	r3, r2, [r1]
 8005cfe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005d00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1e3      	bne.n	8005cce <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2220      	movs	r2, #32
 8005d0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d1c:	e853 3f00 	ldrex	r3, [r3]
 8005d20:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d24:	f023 0310 	bic.w	r3, r3, #16
 8005d28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	461a      	mov	r2, r3
 8005d32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005d36:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d38:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005d3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005d3e:	e841 2300 	strex	r3, r2, [r1]
 8005d42:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005d44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d1e4      	bne.n	8005d14 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7fd f90a 	bl	8002f68 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	4619      	mov	r1, r3
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 f8fb 	bl	8005f64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005d6e:	e0dc      	b.n	8005f2a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	1ad3      	subs	r3, r2, r3
 8005d80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f000 80ce 	beq.w	8005f2e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8005d92:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f000 80c9 	beq.w	8005f2e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da4:	e853 3f00 	ldrex	r3, [r3]
 8005da8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005db0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	461a      	mov	r2, r3
 8005dba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005dbe:	647b      	str	r3, [r7, #68]	; 0x44
 8005dc0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005dc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dc6:	e841 2300 	strex	r3, r2, [r1]
 8005dca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d1e4      	bne.n	8005d9c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	3308      	adds	r3, #8
 8005dd8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ddc:	e853 3f00 	ldrex	r3, [r3]
 8005de0:	623b      	str	r3, [r7, #32]
   return(result);
 8005de2:	6a3b      	ldr	r3, [r7, #32]
 8005de4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005de8:	f023 0301 	bic.w	r3, r3, #1
 8005dec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	3308      	adds	r3, #8
 8005df6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005dfa:	633a      	str	r2, [r7, #48]	; 0x30
 8005dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005e00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e02:	e841 2300 	strex	r3, r2, [r1]
 8005e06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1e1      	bne.n	8005dd2 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2220      	movs	r2, #32
 8005e12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	e853 3f00 	ldrex	r3, [r3]
 8005e2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f023 0310 	bic.w	r3, r3, #16
 8005e36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005e44:	61fb      	str	r3, [r7, #28]
 8005e46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e48:	69b9      	ldr	r1, [r7, #24]
 8005e4a:	69fa      	ldr	r2, [r7, #28]
 8005e4c:	e841 2300 	strex	r3, r2, [r1]
 8005e50:	617b      	str	r3, [r7, #20]
   return(result);
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d1e4      	bne.n	8005e22 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e58:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 f880 	bl	8005f64 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e64:	e063      	b.n	8005f2e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00e      	beq.n	8005e90 <HAL_UART_IRQHandler+0x584>
 8005e72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d008      	beq.n	8005e90 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005e86:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 fdcf 	bl	8006a2c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e8e:	e051      	b.n	8005f34 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d014      	beq.n	8005ec6 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005e9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ea0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d105      	bne.n	8005eb4 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005ea8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005eac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d008      	beq.n	8005ec6 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d03a      	beq.n	8005f32 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	4798      	blx	r3
    }
    return;
 8005ec4:	e035      	b.n	8005f32 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d009      	beq.n	8005ee6 <HAL_UART_IRQHandler+0x5da>
 8005ed2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d003      	beq.n	8005ee6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 fd79 	bl	80069d6 <UART_EndTransmit_IT>
    return;
 8005ee4:	e026      	b.n	8005f34 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005eea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d009      	beq.n	8005f06 <HAL_UART_IRQHandler+0x5fa>
 8005ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ef6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d003      	beq.n	8005f06 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 fda8 	bl	8006a54 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f04:	e016      	b.n	8005f34 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005f06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d010      	beq.n	8005f34 <HAL_UART_IRQHandler+0x628>
 8005f12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	da0c      	bge.n	8005f34 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 fd90 	bl	8006a40 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f20:	e008      	b.n	8005f34 <HAL_UART_IRQHandler+0x628>
      return;
 8005f22:	bf00      	nop
 8005f24:	e006      	b.n	8005f34 <HAL_UART_IRQHandler+0x628>
    return;
 8005f26:	bf00      	nop
 8005f28:	e004      	b.n	8005f34 <HAL_UART_IRQHandler+0x628>
      return;
 8005f2a:	bf00      	nop
 8005f2c:	e002      	b.n	8005f34 <HAL_UART_IRQHandler+0x628>
      return;
 8005f2e:	bf00      	nop
 8005f30:	e000      	b.n	8005f34 <HAL_UART_IRQHandler+0x628>
    return;
 8005f32:	bf00      	nop
  }
}
 8005f34:	37e8      	adds	r7, #232	; 0xe8
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}
 8005f3a:	bf00      	nop

08005f3c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f70:	bf00      	nop
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f80:	b08c      	sub	sp, #48	; 0x30
 8005f82:	af00      	add	r7, sp, #0
 8005f84:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f86:	2300      	movs	r3, #0
 8005f88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	689a      	ldr	r2, [r3, #8]
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	691b      	ldr	r3, [r3, #16]
 8005f94:	431a      	orrs	r2, r3
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	695b      	ldr	r3, [r3, #20]
 8005f9a:	431a      	orrs	r2, r3
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	69db      	ldr	r3, [r3, #28]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	4baa      	ldr	r3, [pc, #680]	; (8006254 <UART_SetConfig+0x2d8>)
 8005fac:	4013      	ands	r3, r2
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	6812      	ldr	r2, [r2, #0]
 8005fb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fb4:	430b      	orrs	r3, r1
 8005fb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	68da      	ldr	r2, [r3, #12]
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	699b      	ldr	r3, [r3, #24]
 8005fd2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a9f      	ldr	r2, [pc, #636]	; (8006258 <UART_SetConfig+0x2dc>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d004      	beq.n	8005fe8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	6a1b      	ldr	r3, [r3, #32]
 8005fe2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005ff2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005ff6:	697a      	ldr	r2, [r7, #20]
 8005ff8:	6812      	ldr	r2, [r2, #0]
 8005ffa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ffc:	430b      	orrs	r3, r1
 8005ffe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006006:	f023 010f 	bic.w	r1, r3, #15
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	430a      	orrs	r2, r1
 8006014:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a90      	ldr	r2, [pc, #576]	; (800625c <UART_SetConfig+0x2e0>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d125      	bne.n	800606c <UART_SetConfig+0xf0>
 8006020:	4b8f      	ldr	r3, [pc, #572]	; (8006260 <UART_SetConfig+0x2e4>)
 8006022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006026:	f003 0303 	and.w	r3, r3, #3
 800602a:	2b03      	cmp	r3, #3
 800602c:	d81a      	bhi.n	8006064 <UART_SetConfig+0xe8>
 800602e:	a201      	add	r2, pc, #4	; (adr r2, 8006034 <UART_SetConfig+0xb8>)
 8006030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006034:	08006045 	.word	0x08006045
 8006038:	08006055 	.word	0x08006055
 800603c:	0800604d 	.word	0x0800604d
 8006040:	0800605d 	.word	0x0800605d
 8006044:	2301      	movs	r3, #1
 8006046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800604a:	e116      	b.n	800627a <UART_SetConfig+0x2fe>
 800604c:	2302      	movs	r3, #2
 800604e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006052:	e112      	b.n	800627a <UART_SetConfig+0x2fe>
 8006054:	2304      	movs	r3, #4
 8006056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800605a:	e10e      	b.n	800627a <UART_SetConfig+0x2fe>
 800605c:	2308      	movs	r3, #8
 800605e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006062:	e10a      	b.n	800627a <UART_SetConfig+0x2fe>
 8006064:	2310      	movs	r3, #16
 8006066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800606a:	e106      	b.n	800627a <UART_SetConfig+0x2fe>
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a7c      	ldr	r2, [pc, #496]	; (8006264 <UART_SetConfig+0x2e8>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d138      	bne.n	80060e8 <UART_SetConfig+0x16c>
 8006076:	4b7a      	ldr	r3, [pc, #488]	; (8006260 <UART_SetConfig+0x2e4>)
 8006078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800607c:	f003 030c 	and.w	r3, r3, #12
 8006080:	2b0c      	cmp	r3, #12
 8006082:	d82d      	bhi.n	80060e0 <UART_SetConfig+0x164>
 8006084:	a201      	add	r2, pc, #4	; (adr r2, 800608c <UART_SetConfig+0x110>)
 8006086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800608a:	bf00      	nop
 800608c:	080060c1 	.word	0x080060c1
 8006090:	080060e1 	.word	0x080060e1
 8006094:	080060e1 	.word	0x080060e1
 8006098:	080060e1 	.word	0x080060e1
 800609c:	080060d1 	.word	0x080060d1
 80060a0:	080060e1 	.word	0x080060e1
 80060a4:	080060e1 	.word	0x080060e1
 80060a8:	080060e1 	.word	0x080060e1
 80060ac:	080060c9 	.word	0x080060c9
 80060b0:	080060e1 	.word	0x080060e1
 80060b4:	080060e1 	.word	0x080060e1
 80060b8:	080060e1 	.word	0x080060e1
 80060bc:	080060d9 	.word	0x080060d9
 80060c0:	2300      	movs	r3, #0
 80060c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060c6:	e0d8      	b.n	800627a <UART_SetConfig+0x2fe>
 80060c8:	2302      	movs	r3, #2
 80060ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060ce:	e0d4      	b.n	800627a <UART_SetConfig+0x2fe>
 80060d0:	2304      	movs	r3, #4
 80060d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060d6:	e0d0      	b.n	800627a <UART_SetConfig+0x2fe>
 80060d8:	2308      	movs	r3, #8
 80060da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060de:	e0cc      	b.n	800627a <UART_SetConfig+0x2fe>
 80060e0:	2310      	movs	r3, #16
 80060e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060e6:	e0c8      	b.n	800627a <UART_SetConfig+0x2fe>
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a5e      	ldr	r2, [pc, #376]	; (8006268 <UART_SetConfig+0x2ec>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d125      	bne.n	800613e <UART_SetConfig+0x1c2>
 80060f2:	4b5b      	ldr	r3, [pc, #364]	; (8006260 <UART_SetConfig+0x2e4>)
 80060f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80060fc:	2b30      	cmp	r3, #48	; 0x30
 80060fe:	d016      	beq.n	800612e <UART_SetConfig+0x1b2>
 8006100:	2b30      	cmp	r3, #48	; 0x30
 8006102:	d818      	bhi.n	8006136 <UART_SetConfig+0x1ba>
 8006104:	2b20      	cmp	r3, #32
 8006106:	d00a      	beq.n	800611e <UART_SetConfig+0x1a2>
 8006108:	2b20      	cmp	r3, #32
 800610a:	d814      	bhi.n	8006136 <UART_SetConfig+0x1ba>
 800610c:	2b00      	cmp	r3, #0
 800610e:	d002      	beq.n	8006116 <UART_SetConfig+0x19a>
 8006110:	2b10      	cmp	r3, #16
 8006112:	d008      	beq.n	8006126 <UART_SetConfig+0x1aa>
 8006114:	e00f      	b.n	8006136 <UART_SetConfig+0x1ba>
 8006116:	2300      	movs	r3, #0
 8006118:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800611c:	e0ad      	b.n	800627a <UART_SetConfig+0x2fe>
 800611e:	2302      	movs	r3, #2
 8006120:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006124:	e0a9      	b.n	800627a <UART_SetConfig+0x2fe>
 8006126:	2304      	movs	r3, #4
 8006128:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800612c:	e0a5      	b.n	800627a <UART_SetConfig+0x2fe>
 800612e:	2308      	movs	r3, #8
 8006130:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006134:	e0a1      	b.n	800627a <UART_SetConfig+0x2fe>
 8006136:	2310      	movs	r3, #16
 8006138:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800613c:	e09d      	b.n	800627a <UART_SetConfig+0x2fe>
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a4a      	ldr	r2, [pc, #296]	; (800626c <UART_SetConfig+0x2f0>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d125      	bne.n	8006194 <UART_SetConfig+0x218>
 8006148:	4b45      	ldr	r3, [pc, #276]	; (8006260 <UART_SetConfig+0x2e4>)
 800614a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800614e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006152:	2bc0      	cmp	r3, #192	; 0xc0
 8006154:	d016      	beq.n	8006184 <UART_SetConfig+0x208>
 8006156:	2bc0      	cmp	r3, #192	; 0xc0
 8006158:	d818      	bhi.n	800618c <UART_SetConfig+0x210>
 800615a:	2b80      	cmp	r3, #128	; 0x80
 800615c:	d00a      	beq.n	8006174 <UART_SetConfig+0x1f8>
 800615e:	2b80      	cmp	r3, #128	; 0x80
 8006160:	d814      	bhi.n	800618c <UART_SetConfig+0x210>
 8006162:	2b00      	cmp	r3, #0
 8006164:	d002      	beq.n	800616c <UART_SetConfig+0x1f0>
 8006166:	2b40      	cmp	r3, #64	; 0x40
 8006168:	d008      	beq.n	800617c <UART_SetConfig+0x200>
 800616a:	e00f      	b.n	800618c <UART_SetConfig+0x210>
 800616c:	2300      	movs	r3, #0
 800616e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006172:	e082      	b.n	800627a <UART_SetConfig+0x2fe>
 8006174:	2302      	movs	r3, #2
 8006176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800617a:	e07e      	b.n	800627a <UART_SetConfig+0x2fe>
 800617c:	2304      	movs	r3, #4
 800617e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006182:	e07a      	b.n	800627a <UART_SetConfig+0x2fe>
 8006184:	2308      	movs	r3, #8
 8006186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800618a:	e076      	b.n	800627a <UART_SetConfig+0x2fe>
 800618c:	2310      	movs	r3, #16
 800618e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006192:	e072      	b.n	800627a <UART_SetConfig+0x2fe>
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a35      	ldr	r2, [pc, #212]	; (8006270 <UART_SetConfig+0x2f4>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d12a      	bne.n	80061f4 <UART_SetConfig+0x278>
 800619e:	4b30      	ldr	r3, [pc, #192]	; (8006260 <UART_SetConfig+0x2e4>)
 80061a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061ac:	d01a      	beq.n	80061e4 <UART_SetConfig+0x268>
 80061ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061b2:	d81b      	bhi.n	80061ec <UART_SetConfig+0x270>
 80061b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061b8:	d00c      	beq.n	80061d4 <UART_SetConfig+0x258>
 80061ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061be:	d815      	bhi.n	80061ec <UART_SetConfig+0x270>
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d003      	beq.n	80061cc <UART_SetConfig+0x250>
 80061c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061c8:	d008      	beq.n	80061dc <UART_SetConfig+0x260>
 80061ca:	e00f      	b.n	80061ec <UART_SetConfig+0x270>
 80061cc:	2300      	movs	r3, #0
 80061ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061d2:	e052      	b.n	800627a <UART_SetConfig+0x2fe>
 80061d4:	2302      	movs	r3, #2
 80061d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061da:	e04e      	b.n	800627a <UART_SetConfig+0x2fe>
 80061dc:	2304      	movs	r3, #4
 80061de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061e2:	e04a      	b.n	800627a <UART_SetConfig+0x2fe>
 80061e4:	2308      	movs	r3, #8
 80061e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061ea:	e046      	b.n	800627a <UART_SetConfig+0x2fe>
 80061ec:	2310      	movs	r3, #16
 80061ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061f2:	e042      	b.n	800627a <UART_SetConfig+0x2fe>
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a17      	ldr	r2, [pc, #92]	; (8006258 <UART_SetConfig+0x2dc>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d13a      	bne.n	8006274 <UART_SetConfig+0x2f8>
 80061fe:	4b18      	ldr	r3, [pc, #96]	; (8006260 <UART_SetConfig+0x2e4>)
 8006200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006204:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006208:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800620c:	d01a      	beq.n	8006244 <UART_SetConfig+0x2c8>
 800620e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006212:	d81b      	bhi.n	800624c <UART_SetConfig+0x2d0>
 8006214:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006218:	d00c      	beq.n	8006234 <UART_SetConfig+0x2b8>
 800621a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800621e:	d815      	bhi.n	800624c <UART_SetConfig+0x2d0>
 8006220:	2b00      	cmp	r3, #0
 8006222:	d003      	beq.n	800622c <UART_SetConfig+0x2b0>
 8006224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006228:	d008      	beq.n	800623c <UART_SetConfig+0x2c0>
 800622a:	e00f      	b.n	800624c <UART_SetConfig+0x2d0>
 800622c:	2300      	movs	r3, #0
 800622e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006232:	e022      	b.n	800627a <UART_SetConfig+0x2fe>
 8006234:	2302      	movs	r3, #2
 8006236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800623a:	e01e      	b.n	800627a <UART_SetConfig+0x2fe>
 800623c:	2304      	movs	r3, #4
 800623e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006242:	e01a      	b.n	800627a <UART_SetConfig+0x2fe>
 8006244:	2308      	movs	r3, #8
 8006246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800624a:	e016      	b.n	800627a <UART_SetConfig+0x2fe>
 800624c:	2310      	movs	r3, #16
 800624e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006252:	e012      	b.n	800627a <UART_SetConfig+0x2fe>
 8006254:	cfff69f3 	.word	0xcfff69f3
 8006258:	40008000 	.word	0x40008000
 800625c:	40013800 	.word	0x40013800
 8006260:	40021000 	.word	0x40021000
 8006264:	40004400 	.word	0x40004400
 8006268:	40004800 	.word	0x40004800
 800626c:	40004c00 	.word	0x40004c00
 8006270:	40005000 	.word	0x40005000
 8006274:	2310      	movs	r3, #16
 8006276:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	4aae      	ldr	r2, [pc, #696]	; (8006538 <UART_SetConfig+0x5bc>)
 8006280:	4293      	cmp	r3, r2
 8006282:	f040 8097 	bne.w	80063b4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006286:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800628a:	2b08      	cmp	r3, #8
 800628c:	d823      	bhi.n	80062d6 <UART_SetConfig+0x35a>
 800628e:	a201      	add	r2, pc, #4	; (adr r2, 8006294 <UART_SetConfig+0x318>)
 8006290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006294:	080062b9 	.word	0x080062b9
 8006298:	080062d7 	.word	0x080062d7
 800629c:	080062c1 	.word	0x080062c1
 80062a0:	080062d7 	.word	0x080062d7
 80062a4:	080062c7 	.word	0x080062c7
 80062a8:	080062d7 	.word	0x080062d7
 80062ac:	080062d7 	.word	0x080062d7
 80062b0:	080062d7 	.word	0x080062d7
 80062b4:	080062cf 	.word	0x080062cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062b8:	f7fd fe62 	bl	8003f80 <HAL_RCC_GetPCLK1Freq>
 80062bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062be:	e010      	b.n	80062e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80062c0:	4b9e      	ldr	r3, [pc, #632]	; (800653c <UART_SetConfig+0x5c0>)
 80062c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80062c4:	e00d      	b.n	80062e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062c6:	f7fd fded 	bl	8003ea4 <HAL_RCC_GetSysClockFreq>
 80062ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80062cc:	e009      	b.n	80062e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80062d4:	e005      	b.n	80062e2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80062d6:	2300      	movs	r3, #0
 80062d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80062e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80062e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f000 8130 	beq.w	800654a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ee:	4a94      	ldr	r2, [pc, #592]	; (8006540 <UART_SetConfig+0x5c4>)
 80062f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062f4:	461a      	mov	r2, r3
 80062f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80062fc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	685a      	ldr	r2, [r3, #4]
 8006302:	4613      	mov	r3, r2
 8006304:	005b      	lsls	r3, r3, #1
 8006306:	4413      	add	r3, r2
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	429a      	cmp	r2, r3
 800630c:	d305      	bcc.n	800631a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	429a      	cmp	r2, r3
 8006318:	d903      	bls.n	8006322 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006320:	e113      	b.n	800654a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006324:	2200      	movs	r2, #0
 8006326:	60bb      	str	r3, [r7, #8]
 8006328:	60fa      	str	r2, [r7, #12]
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632e:	4a84      	ldr	r2, [pc, #528]	; (8006540 <UART_SetConfig+0x5c4>)
 8006330:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006334:	b29b      	uxth	r3, r3
 8006336:	2200      	movs	r2, #0
 8006338:	603b      	str	r3, [r7, #0]
 800633a:	607a      	str	r2, [r7, #4]
 800633c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006340:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006344:	f7f9 ff68 	bl	8000218 <__aeabi_uldivmod>
 8006348:	4602      	mov	r2, r0
 800634a:	460b      	mov	r3, r1
 800634c:	4610      	mov	r0, r2
 800634e:	4619      	mov	r1, r3
 8006350:	f04f 0200 	mov.w	r2, #0
 8006354:	f04f 0300 	mov.w	r3, #0
 8006358:	020b      	lsls	r3, r1, #8
 800635a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800635e:	0202      	lsls	r2, r0, #8
 8006360:	6979      	ldr	r1, [r7, #20]
 8006362:	6849      	ldr	r1, [r1, #4]
 8006364:	0849      	lsrs	r1, r1, #1
 8006366:	2000      	movs	r0, #0
 8006368:	460c      	mov	r4, r1
 800636a:	4605      	mov	r5, r0
 800636c:	eb12 0804 	adds.w	r8, r2, r4
 8006370:	eb43 0905 	adc.w	r9, r3, r5
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	469a      	mov	sl, r3
 800637c:	4693      	mov	fp, r2
 800637e:	4652      	mov	r2, sl
 8006380:	465b      	mov	r3, fp
 8006382:	4640      	mov	r0, r8
 8006384:	4649      	mov	r1, r9
 8006386:	f7f9 ff47 	bl	8000218 <__aeabi_uldivmod>
 800638a:	4602      	mov	r2, r0
 800638c:	460b      	mov	r3, r1
 800638e:	4613      	mov	r3, r2
 8006390:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006392:	6a3b      	ldr	r3, [r7, #32]
 8006394:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006398:	d308      	bcc.n	80063ac <UART_SetConfig+0x430>
 800639a:	6a3b      	ldr	r3, [r7, #32]
 800639c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063a0:	d204      	bcs.n	80063ac <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	6a3a      	ldr	r2, [r7, #32]
 80063a8:	60da      	str	r2, [r3, #12]
 80063aa:	e0ce      	b.n	800654a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80063b2:	e0ca      	b.n	800654a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	69db      	ldr	r3, [r3, #28]
 80063b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063bc:	d166      	bne.n	800648c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80063be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80063c2:	2b08      	cmp	r3, #8
 80063c4:	d827      	bhi.n	8006416 <UART_SetConfig+0x49a>
 80063c6:	a201      	add	r2, pc, #4	; (adr r2, 80063cc <UART_SetConfig+0x450>)
 80063c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063cc:	080063f1 	.word	0x080063f1
 80063d0:	080063f9 	.word	0x080063f9
 80063d4:	08006401 	.word	0x08006401
 80063d8:	08006417 	.word	0x08006417
 80063dc:	08006407 	.word	0x08006407
 80063e0:	08006417 	.word	0x08006417
 80063e4:	08006417 	.word	0x08006417
 80063e8:	08006417 	.word	0x08006417
 80063ec:	0800640f 	.word	0x0800640f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063f0:	f7fd fdc6 	bl	8003f80 <HAL_RCC_GetPCLK1Freq>
 80063f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80063f6:	e014      	b.n	8006422 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063f8:	f7fd fdd8 	bl	8003fac <HAL_RCC_GetPCLK2Freq>
 80063fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80063fe:	e010      	b.n	8006422 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006400:	4b4e      	ldr	r3, [pc, #312]	; (800653c <UART_SetConfig+0x5c0>)
 8006402:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006404:	e00d      	b.n	8006422 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006406:	f7fd fd4d 	bl	8003ea4 <HAL_RCC_GetSysClockFreq>
 800640a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800640c:	e009      	b.n	8006422 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800640e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006412:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006414:	e005      	b.n	8006422 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006416:	2300      	movs	r3, #0
 8006418:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006420:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006424:	2b00      	cmp	r3, #0
 8006426:	f000 8090 	beq.w	800654a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800642e:	4a44      	ldr	r2, [pc, #272]	; (8006540 <UART_SetConfig+0x5c4>)
 8006430:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006434:	461a      	mov	r2, r3
 8006436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006438:	fbb3 f3f2 	udiv	r3, r3, r2
 800643c:	005a      	lsls	r2, r3, #1
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	085b      	lsrs	r3, r3, #1
 8006444:	441a      	add	r2, r3
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	685b      	ldr	r3, [r3, #4]
 800644a:	fbb2 f3f3 	udiv	r3, r2, r3
 800644e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006450:	6a3b      	ldr	r3, [r7, #32]
 8006452:	2b0f      	cmp	r3, #15
 8006454:	d916      	bls.n	8006484 <UART_SetConfig+0x508>
 8006456:	6a3b      	ldr	r3, [r7, #32]
 8006458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800645c:	d212      	bcs.n	8006484 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800645e:	6a3b      	ldr	r3, [r7, #32]
 8006460:	b29b      	uxth	r3, r3
 8006462:	f023 030f 	bic.w	r3, r3, #15
 8006466:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006468:	6a3b      	ldr	r3, [r7, #32]
 800646a:	085b      	lsrs	r3, r3, #1
 800646c:	b29b      	uxth	r3, r3
 800646e:	f003 0307 	and.w	r3, r3, #7
 8006472:	b29a      	uxth	r2, r3
 8006474:	8bfb      	ldrh	r3, [r7, #30]
 8006476:	4313      	orrs	r3, r2
 8006478:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	8bfa      	ldrh	r2, [r7, #30]
 8006480:	60da      	str	r2, [r3, #12]
 8006482:	e062      	b.n	800654a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800648a:	e05e      	b.n	800654a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800648c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006490:	2b08      	cmp	r3, #8
 8006492:	d828      	bhi.n	80064e6 <UART_SetConfig+0x56a>
 8006494:	a201      	add	r2, pc, #4	; (adr r2, 800649c <UART_SetConfig+0x520>)
 8006496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649a:	bf00      	nop
 800649c:	080064c1 	.word	0x080064c1
 80064a0:	080064c9 	.word	0x080064c9
 80064a4:	080064d1 	.word	0x080064d1
 80064a8:	080064e7 	.word	0x080064e7
 80064ac:	080064d7 	.word	0x080064d7
 80064b0:	080064e7 	.word	0x080064e7
 80064b4:	080064e7 	.word	0x080064e7
 80064b8:	080064e7 	.word	0x080064e7
 80064bc:	080064df 	.word	0x080064df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064c0:	f7fd fd5e 	bl	8003f80 <HAL_RCC_GetPCLK1Freq>
 80064c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80064c6:	e014      	b.n	80064f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064c8:	f7fd fd70 	bl	8003fac <HAL_RCC_GetPCLK2Freq>
 80064cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80064ce:	e010      	b.n	80064f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064d0:	4b1a      	ldr	r3, [pc, #104]	; (800653c <UART_SetConfig+0x5c0>)
 80064d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80064d4:	e00d      	b.n	80064f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064d6:	f7fd fce5 	bl	8003ea4 <HAL_RCC_GetSysClockFreq>
 80064da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80064dc:	e009      	b.n	80064f2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80064e4:	e005      	b.n	80064f2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80064e6:	2300      	movs	r3, #0
 80064e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80064f0:	bf00      	nop
    }

    if (pclk != 0U)
 80064f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d028      	beq.n	800654a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fc:	4a10      	ldr	r2, [pc, #64]	; (8006540 <UART_SetConfig+0x5c4>)
 80064fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006502:	461a      	mov	r2, r3
 8006504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006506:	fbb3 f2f2 	udiv	r2, r3, r2
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	085b      	lsrs	r3, r3, #1
 8006510:	441a      	add	r2, r3
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	fbb2 f3f3 	udiv	r3, r2, r3
 800651a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800651c:	6a3b      	ldr	r3, [r7, #32]
 800651e:	2b0f      	cmp	r3, #15
 8006520:	d910      	bls.n	8006544 <UART_SetConfig+0x5c8>
 8006522:	6a3b      	ldr	r3, [r7, #32]
 8006524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006528:	d20c      	bcs.n	8006544 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800652a:	6a3b      	ldr	r3, [r7, #32]
 800652c:	b29a      	uxth	r2, r3
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	60da      	str	r2, [r3, #12]
 8006534:	e009      	b.n	800654a <UART_SetConfig+0x5ce>
 8006536:	bf00      	nop
 8006538:	40008000 	.word	0x40008000
 800653c:	00f42400 	.word	0x00f42400
 8006540:	08006cf8 	.word	0x08006cf8
      }
      else
      {
        ret = HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	2201      	movs	r2, #1
 800654e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	2201      	movs	r2, #1
 8006556:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	2200      	movs	r2, #0
 800655e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	2200      	movs	r2, #0
 8006564:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006566:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800656a:	4618      	mov	r0, r3
 800656c:	3730      	adds	r7, #48	; 0x30
 800656e:	46bd      	mov	sp, r7
 8006570:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006574 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006580:	f003 0301 	and.w	r3, r3, #1
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00a      	beq.n	800659e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	430a      	orrs	r2, r1
 800659c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00a      	beq.n	80065c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	430a      	orrs	r2, r1
 80065be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c4:	f003 0304 	and.w	r3, r3, #4
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00a      	beq.n	80065e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	430a      	orrs	r2, r1
 80065e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e6:	f003 0308 	and.w	r3, r3, #8
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00a      	beq.n	8006604 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	430a      	orrs	r2, r1
 8006602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006608:	f003 0310 	and.w	r3, r3, #16
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00a      	beq.n	8006626 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	430a      	orrs	r2, r1
 8006624:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662a:	f003 0320 	and.w	r3, r3, #32
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00a      	beq.n	8006648 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	430a      	orrs	r2, r1
 8006646:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006650:	2b00      	cmp	r3, #0
 8006652:	d01a      	beq.n	800668a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	430a      	orrs	r2, r1
 8006668:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800666e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006672:	d10a      	bne.n	800668a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	430a      	orrs	r2, r1
 8006688:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800668e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00a      	beq.n	80066ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	430a      	orrs	r2, r1
 80066aa:	605a      	str	r2, [r3, #4]
  }
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b086      	sub	sp, #24
 80066bc:	af02      	add	r7, sp, #8
 80066be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066c8:	f7fc f946 	bl	8002958 <HAL_GetTick>
 80066cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0308 	and.w	r3, r3, #8
 80066d8:	2b08      	cmp	r3, #8
 80066da:	d10e      	bne.n	80066fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066e0:	9300      	str	r3, [sp, #0]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 f82f 	bl	800674e <UART_WaitOnFlagUntilTimeout>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d001      	beq.n	80066fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e025      	b.n	8006746 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0304 	and.w	r3, r3, #4
 8006704:	2b04      	cmp	r3, #4
 8006706:	d10e      	bne.n	8006726 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006708:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f819 	bl	800674e <UART_WaitOnFlagUntilTimeout>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e00f      	b.n	8006746 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2220      	movs	r2, #32
 800672a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2220      	movs	r2, #32
 8006732:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b09c      	sub	sp, #112	; 0x70
 8006752:	af00      	add	r7, sp, #0
 8006754:	60f8      	str	r0, [r7, #12]
 8006756:	60b9      	str	r1, [r7, #8]
 8006758:	603b      	str	r3, [r7, #0]
 800675a:	4613      	mov	r3, r2
 800675c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800675e:	e0a9      	b.n	80068b4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006760:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006766:	f000 80a5 	beq.w	80068b4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800676a:	f7fc f8f5 	bl	8002958 <HAL_GetTick>
 800676e:	4602      	mov	r2, r0
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	1ad3      	subs	r3, r2, r3
 8006774:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006776:	429a      	cmp	r2, r3
 8006778:	d302      	bcc.n	8006780 <UART_WaitOnFlagUntilTimeout+0x32>
 800677a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800677c:	2b00      	cmp	r3, #0
 800677e:	d140      	bne.n	8006802 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006788:	e853 3f00 	ldrex	r3, [r3]
 800678c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800678e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006790:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006794:	667b      	str	r3, [r7, #100]	; 0x64
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	461a      	mov	r2, r3
 800679c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800679e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067a0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80067a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80067a6:	e841 2300 	strex	r3, r2, [r1]
 80067aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80067ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1e6      	bne.n	8006780 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	3308      	adds	r3, #8
 80067b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067bc:	e853 3f00 	ldrex	r3, [r3]
 80067c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c4:	f023 0301 	bic.w	r3, r3, #1
 80067c8:	663b      	str	r3, [r7, #96]	; 0x60
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	3308      	adds	r3, #8
 80067d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80067d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80067d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80067d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067da:	e841 2300 	strex	r3, r2, [r1]
 80067de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80067e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1e5      	bne.n	80067b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2220      	movs	r2, #32
 80067ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2220      	movs	r2, #32
 80067f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80067fe:	2303      	movs	r3, #3
 8006800:	e069      	b.n	80068d6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0304 	and.w	r3, r3, #4
 800680c:	2b00      	cmp	r3, #0
 800680e:	d051      	beq.n	80068b4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	69db      	ldr	r3, [r3, #28]
 8006816:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800681a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800681e:	d149      	bne.n	80068b4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006828:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006832:	e853 3f00 	ldrex	r3, [r3]
 8006836:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800683e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	461a      	mov	r2, r3
 8006846:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006848:	637b      	str	r3, [r7, #52]	; 0x34
 800684a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800684e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006850:	e841 2300 	strex	r3, r2, [r1]
 8006854:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006858:	2b00      	cmp	r3, #0
 800685a:	d1e6      	bne.n	800682a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	3308      	adds	r3, #8
 8006862:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	e853 3f00 	ldrex	r3, [r3]
 800686a:	613b      	str	r3, [r7, #16]
   return(result);
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	f023 0301 	bic.w	r3, r3, #1
 8006872:	66bb      	str	r3, [r7, #104]	; 0x68
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	3308      	adds	r3, #8
 800687a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800687c:	623a      	str	r2, [r7, #32]
 800687e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006880:	69f9      	ldr	r1, [r7, #28]
 8006882:	6a3a      	ldr	r2, [r7, #32]
 8006884:	e841 2300 	strex	r3, r2, [r1]
 8006888:	61bb      	str	r3, [r7, #24]
   return(result);
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d1e5      	bne.n	800685c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2220      	movs	r2, #32
 8006894:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2220      	movs	r2, #32
 800689c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2220      	movs	r2, #32
 80068a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e010      	b.n	80068d6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	69da      	ldr	r2, [r3, #28]
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	4013      	ands	r3, r2
 80068be:	68ba      	ldr	r2, [r7, #8]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	bf0c      	ite	eq
 80068c4:	2301      	moveq	r3, #1
 80068c6:	2300      	movne	r3, #0
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	461a      	mov	r2, r3
 80068cc:	79fb      	ldrb	r3, [r7, #7]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	f43f af46 	beq.w	8006760 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3770      	adds	r7, #112	; 0x70
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068de:	b480      	push	{r7}
 80068e0:	b095      	sub	sp, #84	; 0x54
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ee:	e853 3f00 	ldrex	r3, [r3]
 80068f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80068f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	461a      	mov	r2, r3
 8006902:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006904:	643b      	str	r3, [r7, #64]	; 0x40
 8006906:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006908:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800690a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800690c:	e841 2300 	strex	r3, r2, [r1]
 8006910:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1e6      	bne.n	80068e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	3308      	adds	r3, #8
 800691e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006920:	6a3b      	ldr	r3, [r7, #32]
 8006922:	e853 3f00 	ldrex	r3, [r3]
 8006926:	61fb      	str	r3, [r7, #28]
   return(result);
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800692e:	f023 0301 	bic.w	r3, r3, #1
 8006932:	64bb      	str	r3, [r7, #72]	; 0x48
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	3308      	adds	r3, #8
 800693a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800693c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800693e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006940:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006942:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006944:	e841 2300 	strex	r3, r2, [r1]
 8006948:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1e3      	bne.n	8006918 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006954:	2b01      	cmp	r3, #1
 8006956:	d118      	bne.n	800698a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	e853 3f00 	ldrex	r3, [r3]
 8006964:	60bb      	str	r3, [r7, #8]
   return(result);
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	f023 0310 	bic.w	r3, r3, #16
 800696c:	647b      	str	r3, [r7, #68]	; 0x44
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	461a      	mov	r2, r3
 8006974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006976:	61bb      	str	r3, [r7, #24]
 8006978:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697a:	6979      	ldr	r1, [r7, #20]
 800697c:	69ba      	ldr	r2, [r7, #24]
 800697e:	e841 2300 	strex	r3, r2, [r1]
 8006982:	613b      	str	r3, [r7, #16]
   return(result);
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1e6      	bne.n	8006958 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2220      	movs	r2, #32
 800698e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	671a      	str	r2, [r3, #112]	; 0x70
}
 800699e:	bf00      	nop
 80069a0:	3754      	adds	r7, #84	; 0x54
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr

080069aa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069aa:	b580      	push	{r7, lr}
 80069ac:	b084      	sub	sp, #16
 80069ae:	af00      	add	r7, sp, #0
 80069b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f7ff fac1 	bl	8005f50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069ce:	bf00      	nop
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}

080069d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80069d6:	b580      	push	{r7, lr}
 80069d8:	b088      	sub	sp, #32
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	e853 3f00 	ldrex	r3, [r3]
 80069ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069f2:	61fb      	str	r3, [r7, #28]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	461a      	mov	r2, r3
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	61bb      	str	r3, [r7, #24]
 80069fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a00:	6979      	ldr	r1, [r7, #20]
 8006a02:	69ba      	ldr	r2, [r7, #24]
 8006a04:	e841 2300 	strex	r3, r2, [r1]
 8006a08:	613b      	str	r3, [r7, #16]
   return(result);
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d1e6      	bne.n	80069de <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2220      	movs	r2, #32
 8006a14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f7ff fa8c 	bl	8005f3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a24:	bf00      	nop
 8006a26:	3720      	adds	r7, #32
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006a34:	bf00      	nop
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b083      	sub	sp, #12
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006a48:	bf00      	nop
 8006a4a:	370c      	adds	r7, #12
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr

08006a54 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006a5c:	bf00      	nop
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d101      	bne.n	8006a7e <HAL_UARTEx_DisableFifoMode+0x16>
 8006a7a:	2302      	movs	r3, #2
 8006a7c:	e027      	b.n	8006ace <HAL_UARTEx_DisableFifoMode+0x66>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2201      	movs	r2, #1
 8006a82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2224      	movs	r2, #36	; 0x24
 8006a8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f022 0201 	bic.w	r2, r2, #1
 8006aa4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006aac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2220      	movs	r2, #32
 8006ac0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3714      	adds	r7, #20
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b084      	sub	sp, #16
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
 8006ae2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d101      	bne.n	8006af2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006aee:	2302      	movs	r3, #2
 8006af0:	e02d      	b.n	8006b4e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2224      	movs	r2, #36	; 0x24
 8006afe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681a      	ldr	r2, [r3, #0]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f022 0201 	bic.w	r2, r2, #1
 8006b18:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	689b      	ldr	r3, [r3, #8]
 8006b20:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	683a      	ldr	r2, [r7, #0]
 8006b2a:	430a      	orrs	r2, r1
 8006b2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f850 	bl	8006bd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2220      	movs	r2, #32
 8006b40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3710      	adds	r7, #16
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b084      	sub	sp, #16
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
 8006b5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d101      	bne.n	8006b6e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006b6a:	2302      	movs	r3, #2
 8006b6c:	e02d      	b.n	8006bca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2201      	movs	r2, #1
 8006b72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2224      	movs	r2, #36	; 0x24
 8006b7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f022 0201 	bic.w	r2, r2, #1
 8006b94:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	689b      	ldr	r3, [r3, #8]
 8006b9c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	683a      	ldr	r2, [r7, #0]
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 f812 	bl	8006bd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	68fa      	ldr	r2, [r7, #12]
 8006bb6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2220      	movs	r2, #32
 8006bbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
	...

08006bd4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b085      	sub	sp, #20
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d108      	bne.n	8006bf6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006bf4:	e031      	b.n	8006c5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006bf6:	2308      	movs	r3, #8
 8006bf8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006bfa:	2308      	movs	r3, #8
 8006bfc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	0e5b      	lsrs	r3, r3, #25
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	f003 0307 	and.w	r3, r3, #7
 8006c0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	0f5b      	lsrs	r3, r3, #29
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	f003 0307 	and.w	r3, r3, #7
 8006c1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c1e:	7bbb      	ldrb	r3, [r7, #14]
 8006c20:	7b3a      	ldrb	r2, [r7, #12]
 8006c22:	4911      	ldr	r1, [pc, #68]	; (8006c68 <UARTEx_SetNbDataToProcess+0x94>)
 8006c24:	5c8a      	ldrb	r2, [r1, r2]
 8006c26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006c2a:	7b3a      	ldrb	r2, [r7, #12]
 8006c2c:	490f      	ldr	r1, [pc, #60]	; (8006c6c <UARTEx_SetNbDataToProcess+0x98>)
 8006c2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c30:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c34:	b29a      	uxth	r2, r3
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c3c:	7bfb      	ldrb	r3, [r7, #15]
 8006c3e:	7b7a      	ldrb	r2, [r7, #13]
 8006c40:	4909      	ldr	r1, [pc, #36]	; (8006c68 <UARTEx_SetNbDataToProcess+0x94>)
 8006c42:	5c8a      	ldrb	r2, [r1, r2]
 8006c44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006c48:	7b7a      	ldrb	r2, [r7, #13]
 8006c4a:	4908      	ldr	r1, [pc, #32]	; (8006c6c <UARTEx_SetNbDataToProcess+0x98>)
 8006c4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006c5a:	bf00      	nop
 8006c5c:	3714      	adds	r7, #20
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	08006d10 	.word	0x08006d10
 8006c6c:	08006d18 	.word	0x08006d18

08006c70 <__libc_init_array>:
 8006c70:	b570      	push	{r4, r5, r6, lr}
 8006c72:	4d0d      	ldr	r5, [pc, #52]	; (8006ca8 <__libc_init_array+0x38>)
 8006c74:	4c0d      	ldr	r4, [pc, #52]	; (8006cac <__libc_init_array+0x3c>)
 8006c76:	1b64      	subs	r4, r4, r5
 8006c78:	10a4      	asrs	r4, r4, #2
 8006c7a:	2600      	movs	r6, #0
 8006c7c:	42a6      	cmp	r6, r4
 8006c7e:	d109      	bne.n	8006c94 <__libc_init_array+0x24>
 8006c80:	4d0b      	ldr	r5, [pc, #44]	; (8006cb0 <__libc_init_array+0x40>)
 8006c82:	4c0c      	ldr	r4, [pc, #48]	; (8006cb4 <__libc_init_array+0x44>)
 8006c84:	f000 f820 	bl	8006cc8 <_init>
 8006c88:	1b64      	subs	r4, r4, r5
 8006c8a:	10a4      	asrs	r4, r4, #2
 8006c8c:	2600      	movs	r6, #0
 8006c8e:	42a6      	cmp	r6, r4
 8006c90:	d105      	bne.n	8006c9e <__libc_init_array+0x2e>
 8006c92:	bd70      	pop	{r4, r5, r6, pc}
 8006c94:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c98:	4798      	blx	r3
 8006c9a:	3601      	adds	r6, #1
 8006c9c:	e7ee      	b.n	8006c7c <__libc_init_array+0xc>
 8006c9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ca2:	4798      	blx	r3
 8006ca4:	3601      	adds	r6, #1
 8006ca6:	e7f2      	b.n	8006c8e <__libc_init_array+0x1e>
 8006ca8:	08006d28 	.word	0x08006d28
 8006cac:	08006d28 	.word	0x08006d28
 8006cb0:	08006d28 	.word	0x08006d28
 8006cb4:	08006d2c 	.word	0x08006d2c

08006cb8 <memset>:
 8006cb8:	4402      	add	r2, r0
 8006cba:	4603      	mov	r3, r0
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d100      	bne.n	8006cc2 <memset+0xa>
 8006cc0:	4770      	bx	lr
 8006cc2:	f803 1b01 	strb.w	r1, [r3], #1
 8006cc6:	e7f9      	b.n	8006cbc <memset+0x4>

08006cc8 <_init>:
 8006cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cca:	bf00      	nop
 8006ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cce:	bc08      	pop	{r3}
 8006cd0:	469e      	mov	lr, r3
 8006cd2:	4770      	bx	lr

08006cd4 <_fini>:
 8006cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd6:	bf00      	nop
 8006cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cda:	bc08      	pop	{r3}
 8006cdc:	469e      	mov	lr, r3
 8006cde:	4770      	bx	lr
