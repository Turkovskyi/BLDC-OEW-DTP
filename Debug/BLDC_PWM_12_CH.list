
BLDC_PWM_12_CH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007024  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080071fc  080071fc  000171fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800723c  0800723c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800723c  0800723c  0001723c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007244  08007244  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007244  08007244  00017244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007248  08007248  00017248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800724c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  2000000c  08007258  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002e4  08007258  000202e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000150ec  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028a2  00000000  00000000  0003516b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001320  00000000  00000000  00037a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ef4  00000000  00000000  00038d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026c5b  00000000  00000000  00039c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015e3b  00000000  00000000  0006087f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ff12a  00000000  00000000  000766ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000050d0  00000000  00000000  001757e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  0017a8b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080071e4 	.word	0x080071e4

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	080071e4 	.word	0x080071e4

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b098      	sub	sp, #96	; 0x60
 8000518:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051a:	f002 fb08 	bl	8002b2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051e:	f000 f9bd 	bl	800089c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000522:	f000 fd51 	bl	8000fc8 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000526:	f000 fa3f 	bl	80009a8 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 800052a:	f000 fad3 	bl	8000ad4 <MX_TIM1_Init>
  MX_DAC1_Init();
 800052e:	f000 fa01 	bl	8000934 <MX_DAC1_Init>
  MX_USART1_UART_Init();
 8000532:	f000 fa83 	bl	8000a3c <MX_USART1_UART_Init>
  MX_TIM8_Init();
 8000536:	f000 fc8f 	bl	8000e58 <MX_TIM8_Init>
  MX_TIM2_Init();
 800053a:	f000 fb83 	bl	8000c44 <MX_TIM2_Init>
  MX_TIM3_Init();
 800053e:	f000 fbfb 	bl	8000d38 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000542:	f000 fc51 	bl	8000de8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8000546:	48aa      	ldr	r0, [pc, #680]	; (80007f0 <main+0x2dc>)
 8000548:	f004 f9f0 	bl	800492c <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800054c:	2100      	movs	r1, #0
 800054e:	48a9      	ldr	r0, [pc, #676]	; (80007f4 <main+0x2e0>)
 8000550:	f004 fabc 	bl	8004acc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000554:	2104      	movs	r1, #4
 8000556:	48a7      	ldr	r0, [pc, #668]	; (80007f4 <main+0x2e0>)
 8000558:	f004 fab8 	bl	8004acc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800055c:	2108      	movs	r1, #8
 800055e:	48a5      	ldr	r0, [pc, #660]	; (80007f4 <main+0x2e0>)
 8000560:	f004 fab4 	bl	8004acc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000564:	210c      	movs	r1, #12
 8000566:	48a3      	ldr	r0, [pc, #652]	; (80007f4 <main+0x2e0>)
 8000568:	f004 fab0 	bl	8004acc <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800056c:	2100      	movs	r1, #0
 800056e:	48a2      	ldr	r0, [pc, #648]	; (80007f8 <main+0x2e4>)
 8000570:	f004 faac 	bl	8004acc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000574:	2104      	movs	r1, #4
 8000576:	48a0      	ldr	r0, [pc, #640]	; (80007f8 <main+0x2e4>)
 8000578:	f004 faa8 	bl	8004acc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800057c:	2108      	movs	r1, #8
 800057e:	489e      	ldr	r0, [pc, #632]	; (80007f8 <main+0x2e4>)
 8000580:	f004 faa4 	bl	8004acc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000584:	210c      	movs	r1, #12
 8000586:	489c      	ldr	r0, [pc, #624]	; (80007f8 <main+0x2e4>)
 8000588:	f004 faa0 	bl	8004acc <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800058c:	2100      	movs	r1, #0
 800058e:	489b      	ldr	r0, [pc, #620]	; (80007fc <main+0x2e8>)
 8000590:	f004 fa9c 	bl	8004acc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000594:	2104      	movs	r1, #4
 8000596:	4899      	ldr	r0, [pc, #612]	; (80007fc <main+0x2e8>)
 8000598:	f004 fa98 	bl	8004acc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800059c:	2108      	movs	r1, #8
 800059e:	4897      	ldr	r0, [pc, #604]	; (80007fc <main+0x2e8>)
 80005a0:	f004 fa94 	bl	8004acc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80005a4:	210c      	movs	r1, #12
 80005a6:	4895      	ldr	r0, [pc, #596]	; (80007fc <main+0x2e8>)
 80005a8:	f004 fa90 	bl	8004acc <HAL_TIM_PWM_Start>


  PWM1 = 0;
 80005ac:	4b94      	ldr	r3, [pc, #592]	; (8000800 <main+0x2ec>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	801a      	strh	r2, [r3, #0]
  PWM2 = 0;
 80005b2:	4b94      	ldr	r3, [pc, #592]	; (8000804 <main+0x2f0>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	801a      	strh	r2, [r3, #0]
  PWM3 = 0;
 80005b8:	4b93      	ldr	r3, [pc, #588]	; (8000808 <main+0x2f4>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	801a      	strh	r2, [r3, #0]
  PWM4 = 0;
 80005be:	4b93      	ldr	r3, [pc, #588]	; (800080c <main+0x2f8>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	801a      	strh	r2, [r3, #0]
//  TIM8->CCR3 = 2048;
//  TIM8->CCR4 = 2048;
  uint32_t timer;
  uint32_t time;

  uint8_t currentState = 0;
 80005c4:	2300      	movs	r3, #0
 80005c6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
		InverterX(2) - low switches are on, high switches are off
		InverterX(3) - 120 deg. commutation with PWM
		InverterX(4) - 120 deg. commutation without PWM
		*/

		time = HAL_GetTick();
 80005ca:	f002 fb15 	bl	8002bf8 <HAL_GetTick>
 80005ce:	6578      	str	r0, [r7, #84]	; 0x54

		switch (currentState)
 80005d0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80005d4:	2b08      	cmp	r3, #8
 80005d6:	d8f8      	bhi.n	80005ca <main+0xb6>
 80005d8:	a201      	add	r2, pc, #4	; (adr r2, 80005e0 <main+0xcc>)
 80005da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005de:	bf00      	nop
 80005e0:	08000605 	.word	0x08000605
 80005e4:	08000635 	.word	0x08000635
 80005e8:	0800069d 	.word	0x0800069d
 80005ec:	080006cd 	.word	0x080006cd
 80005f0:	08000731 	.word	0x08000731
 80005f4:	08000761 	.word	0x08000761
 80005f8:	080007bf 	.word	0x080007bf
 80005fc:	08000811 	.word	0x08000811
 8000600:	08000873 	.word	0x08000873
		{
		case 0:
			Inverter1(1);
 8000604:	2001      	movs	r0, #1
 8000606:	f001 fa37 	bl	8001a78 <Inverter1>
			Inverter2(1);
 800060a:	2001      	movs	r0, #1
 800060c:	f001 fcc4 	bl	8001f98 <Inverter2>
			Inverter3(1);
 8000610:	2001      	movs	r0, #1
 8000612:	f001 fb79 	bl	8001d08 <Inverter3>
			Inverter4(1);
 8000616:	2001      	movs	r0, #1
 8000618:	f001 fe2a 	bl	8002270 <Inverter4>
			if (time >= 3000)
 800061c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800061e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8000622:	4293      	cmp	r3, r2
 8000624:	f240 8132 	bls.w	800088c <main+0x378>
			{
				stateOffTime[0] = time;
 8000628:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800062a:	607b      	str	r3, [r7, #4]
				currentState = 1;
 800062c:	2301      	movs	r3, #1
 800062e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

			}


			break;
 8000632:	e12b      	b.n	800088c <main+0x378>
		case 1:
			if (time >= timer)
 8000634:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000636:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000638:	429a      	cmp	r2, r3
 800063a:	d30f      	bcc.n	800065c <main+0x148>
			{
				timer = time + 20;
 800063c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800063e:	3314      	adds	r3, #20
 8000640:	65fb      	str	r3, [r7, #92]	; 0x5c
				PWM1 += 10;
 8000642:	4b6f      	ldr	r3, [pc, #444]	; (8000800 <main+0x2ec>)
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	b29b      	uxth	r3, r3
 8000648:	330a      	adds	r3, #10
 800064a:	b29a      	uxth	r2, r3
 800064c:	4b6c      	ldr	r3, [pc, #432]	; (8000800 <main+0x2ec>)
 800064e:	801a      	strh	r2, [r3, #0]
				PWM2 += 10;
 8000650:	4b6c      	ldr	r3, [pc, #432]	; (8000804 <main+0x2f0>)
 8000652:	881b      	ldrh	r3, [r3, #0]
 8000654:	330a      	adds	r3, #10
 8000656:	b29a      	uxth	r2, r3
 8000658:	4b6a      	ldr	r3, [pc, #424]	; (8000804 <main+0x2f0>)
 800065a:	801a      	strh	r2, [r3, #0]
			}

			if (PWM1 > 4095)
 800065c:	4b68      	ldr	r3, [pc, #416]	; (8000800 <main+0x2ec>)
 800065e:	881b      	ldrh	r3, [r3, #0]
 8000660:	b29b      	uxth	r3, r3
 8000662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000666:	d30c      	bcc.n	8000682 <main+0x16e>
			{
				PWM1 = 4095;
 8000668:	4b65      	ldr	r3, [pc, #404]	; (8000800 <main+0x2ec>)
 800066a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800066e:	801a      	strh	r2, [r3, #0]
				PWM2 = 4095;
 8000670:	4b64      	ldr	r3, [pc, #400]	; (8000804 <main+0x2f0>)
 8000672:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000676:	801a      	strh	r2, [r3, #0]
				currentState = 2;
 8000678:	2302      	movs	r3, #2
 800067a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
				stateOffTime[1] = time;
 800067e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000680:	60bb      	str	r3, [r7, #8]
			}
//			PWM1 = 2000;
//			PWM2 = 2000;

			Inverter1(3);
 8000682:	2003      	movs	r0, #3
 8000684:	f001 f9f8 	bl	8001a78 <Inverter1>
			Inverter2(3);
 8000688:	2003      	movs	r0, #3
 800068a:	f001 fc85 	bl	8001f98 <Inverter2>
			Inverter3(2);
 800068e:	2002      	movs	r0, #2
 8000690:	f001 fb3a 	bl	8001d08 <Inverter3>
			Inverter4(2);
 8000694:	2002      	movs	r0, #2
 8000696:	f001 fdeb 	bl	8002270 <Inverter4>
			break;
 800069a:	e0f9      	b.n	8000890 <main+0x37c>

		case 2:

			if ((time -stateOffTime[1]) >=4000)
 800069c:	68bb      	ldr	r3, [r7, #8]
 800069e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80006a6:	d304      	bcc.n	80006b2 <main+0x19e>
			{
				currentState = 3;
 80006a8:	2303      	movs	r3, #3
 80006aa:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
				stateOffTime[2] = time;
 80006ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80006b0:	60fb      	str	r3, [r7, #12]
			}

			Inverter1(4);
 80006b2:	2004      	movs	r0, #4
 80006b4:	f001 f9e0 	bl	8001a78 <Inverter1>
			Inverter2(1);
 80006b8:	2001      	movs	r0, #1
 80006ba:	f001 fc6d 	bl	8001f98 <Inverter2>
			Inverter3(2);
 80006be:	2002      	movs	r0, #2
 80006c0:	f001 fb22 	bl	8001d08 <Inverter3>
			Inverter4(1);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f001 fdd3 	bl	8002270 <Inverter4>
			break;
 80006ca:	e0e1      	b.n	8000890 <main+0x37c>

		case 3:
			if (time >= timer)
 80006cc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80006ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d30e      	bcc.n	80006f2 <main+0x1de>
			{
				timer = time + 20;
 80006d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80006d6:	3314      	adds	r3, #20
 80006d8:	65fb      	str	r3, [r7, #92]	; 0x5c
				PWM3 += 10;
 80006da:	4b4b      	ldr	r3, [pc, #300]	; (8000808 <main+0x2f4>)
 80006dc:	881b      	ldrh	r3, [r3, #0]
 80006de:	330a      	adds	r3, #10
 80006e0:	b29a      	uxth	r2, r3
 80006e2:	4b49      	ldr	r3, [pc, #292]	; (8000808 <main+0x2f4>)
 80006e4:	801a      	strh	r2, [r3, #0]
				PWM4 += 10;
 80006e6:	4b49      	ldr	r3, [pc, #292]	; (800080c <main+0x2f8>)
 80006e8:	881b      	ldrh	r3, [r3, #0]
 80006ea:	330a      	adds	r3, #10
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	4b47      	ldr	r3, [pc, #284]	; (800080c <main+0x2f8>)
 80006f0:	801a      	strh	r2, [r3, #0]
			}

			if (PWM3 > 4095)
 80006f2:	4b45      	ldr	r3, [pc, #276]	; (8000808 <main+0x2f4>)
 80006f4:	881b      	ldrh	r3, [r3, #0]
 80006f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006fa:	d30c      	bcc.n	8000716 <main+0x202>
			{
				PWM3 = 4095;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <main+0x2f4>)
 80006fe:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000702:	801a      	strh	r2, [r3, #0]
				PWM4 = 4095;
 8000704:	4b41      	ldr	r3, [pc, #260]	; (800080c <main+0x2f8>)
 8000706:	f640 72ff 	movw	r2, #4095	; 0xfff
 800070a:	801a      	strh	r2, [r3, #0]
				currentState = 4;
 800070c:	2304      	movs	r3, #4
 800070e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
				stateOffTime[3] = time;
 8000712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000714:	613b      	str	r3, [r7, #16]
			}
//			PWM1 = 2000;
//			PWM2 = 2000;

			Inverter1(4);
 8000716:	2004      	movs	r0, #4
 8000718:	f001 f9ae 	bl	8001a78 <Inverter1>
			Inverter2(4);
 800071c:	2004      	movs	r0, #4
 800071e:	f001 fc3b 	bl	8001f98 <Inverter2>
			Inverter3(3);
 8000722:	2003      	movs	r0, #3
 8000724:	f001 faf0 	bl	8001d08 <Inverter3>
			Inverter4(3);
 8000728:	2003      	movs	r0, #3
 800072a:	f001 fda1 	bl	8002270 <Inverter4>
			break;
 800072e:	e0af      	b.n	8000890 <main+0x37c>

		case 4:
		if ((time -stateOffTime[3]) >=4000)
 8000730:	693b      	ldr	r3, [r7, #16]
 8000732:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800073a:	d304      	bcc.n	8000746 <main+0x232>
		{
			currentState = 5;
 800073c:	2305      	movs	r3, #5
 800073e:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			stateOffTime[2] = time;
 8000742:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000744:	60fb      	str	r3, [r7, #12]
		}

		Inverter1(4);
 8000746:	2004      	movs	r0, #4
 8000748:	f001 f996 	bl	8001a78 <Inverter1>
		Inverter2(1);
 800074c:	2001      	movs	r0, #1
 800074e:	f001 fc23 	bl	8001f98 <Inverter2>
		Inverter3(4);
 8000752:	2004      	movs	r0, #4
 8000754:	f001 fad8 	bl	8001d08 <Inverter3>
		Inverter4(1);
 8000758:	2001      	movs	r0, #1
 800075a:	f001 fd89 	bl	8002270 <Inverter4>
		break;
 800075e:	e097      	b.n	8000890 <main+0x37c>

		case 5:
			if (time >= timer)
 8000760:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000762:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000764:	429a      	cmp	r2, r3
 8000766:	d30e      	bcc.n	8000786 <main+0x272>
			{
				timer = time + 20;
 8000768:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800076a:	3314      	adds	r3, #20
 800076c:	65fb      	str	r3, [r7, #92]	; 0x5c
				PWM3 -= 10;
 800076e:	4b26      	ldr	r3, [pc, #152]	; (8000808 <main+0x2f4>)
 8000770:	881b      	ldrh	r3, [r3, #0]
 8000772:	3b0a      	subs	r3, #10
 8000774:	b29a      	uxth	r2, r3
 8000776:	4b24      	ldr	r3, [pc, #144]	; (8000808 <main+0x2f4>)
 8000778:	801a      	strh	r2, [r3, #0]
				PWM4 -= 10;
 800077a:	4b24      	ldr	r3, [pc, #144]	; (800080c <main+0x2f8>)
 800077c:	881b      	ldrh	r3, [r3, #0]
 800077e:	3b0a      	subs	r3, #10
 8000780:	b29a      	uxth	r2, r3
 8000782:	4b22      	ldr	r3, [pc, #136]	; (800080c <main+0x2f8>)
 8000784:	801a      	strh	r2, [r3, #0]
			}

			if (PWM3 < 10)
 8000786:	4b20      	ldr	r3, [pc, #128]	; (8000808 <main+0x2f4>)
 8000788:	881b      	ldrh	r3, [r3, #0]
 800078a:	2b09      	cmp	r3, #9
 800078c:	d80a      	bhi.n	80007a4 <main+0x290>
			{
				PWM3 = 0;
 800078e:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <main+0x2f4>)
 8000790:	2200      	movs	r2, #0
 8000792:	801a      	strh	r2, [r3, #0]
				PWM4 = 0;
 8000794:	4b1d      	ldr	r3, [pc, #116]	; (800080c <main+0x2f8>)
 8000796:	2200      	movs	r2, #0
 8000798:	801a      	strh	r2, [r3, #0]
				currentState = 6;
 800079a:	2306      	movs	r3, #6
 800079c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
				stateOffTime[5] = time;
 80007a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80007a2:	61bb      	str	r3, [r7, #24]
			}
//			PWM1 = 2000;
//			PWM2 = 2000;

			Inverter1(4);
 80007a4:	2004      	movs	r0, #4
 80007a6:	f001 f967 	bl	8001a78 <Inverter1>
			Inverter2(4);
 80007aa:	2004      	movs	r0, #4
 80007ac:	f001 fbf4 	bl	8001f98 <Inverter2>
			Inverter3(3);
 80007b0:	2003      	movs	r0, #3
 80007b2:	f001 faa9 	bl	8001d08 <Inverter3>
			Inverter4(3);
 80007b6:	2003      	movs	r0, #3
 80007b8:	f001 fd5a 	bl	8002270 <Inverter4>
			break;
 80007bc:	e068      	b.n	8000890 <main+0x37c>

		case 6:
			if ((time -stateOffTime[5]) >=4000)
 80007be:	69bb      	ldr	r3, [r7, #24]
 80007c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80007c2:	1ad3      	subs	r3, r2, r3
 80007c4:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80007c8:	d304      	bcc.n	80007d4 <main+0x2c0>
			{
				currentState = 7;
 80007ca:	2307      	movs	r3, #7
 80007cc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
				stateOffTime[6] = time;
 80007d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80007d2:	61fb      	str	r3, [r7, #28]
			}

			Inverter1(4);
 80007d4:	2004      	movs	r0, #4
 80007d6:	f001 f94f 	bl	8001a78 <Inverter1>
			Inverter2(1);
 80007da:	2001      	movs	r0, #1
 80007dc:	f001 fbdc 	bl	8001f98 <Inverter2>
			Inverter3(2);
 80007e0:	2002      	movs	r0, #2
 80007e2:	f001 fa91 	bl	8001d08 <Inverter3>
			Inverter4(1);
 80007e6:	2001      	movs	r0, #1
 80007e8:	f001 fd42 	bl	8002270 <Inverter4>
			break;
 80007ec:	e050      	b.n	8000890 <main+0x37c>
 80007ee:	bf00      	nop
 80007f0:	20000240 	.word	0x20000240
 80007f4:	2000015c 	.word	0x2000015c
 80007f8:	200001a8 	.word	0x200001a8
 80007fc:	2000028c 	.word	0x2000028c
 8000800:	200002d8 	.word	0x200002d8
 8000804:	200002da 	.word	0x200002da
 8000808:	200002dc 	.word	0x200002dc
 800080c:	200002de 	.word	0x200002de

		case 7:
			if (time >= timer)
 8000810:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000812:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000814:	429a      	cmp	r2, r3
 8000816:	d30f      	bcc.n	8000838 <main+0x324>
			{
				timer = time + 20;
 8000818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800081a:	3314      	adds	r3, #20
 800081c:	65fb      	str	r3, [r7, #92]	; 0x5c
				PWM1 = PWM1 - 10;
 800081e:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <main+0x380>)
 8000820:	881b      	ldrh	r3, [r3, #0]
 8000822:	b29b      	uxth	r3, r3
 8000824:	3b0a      	subs	r3, #10
 8000826:	b29a      	uxth	r2, r3
 8000828:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <main+0x380>)
 800082a:	801a      	strh	r2, [r3, #0]
				PWM2 -= 10;
 800082c:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <main+0x384>)
 800082e:	881b      	ldrh	r3, [r3, #0]
 8000830:	3b0a      	subs	r3, #10
 8000832:	b29a      	uxth	r2, r3
 8000834:	4b18      	ldr	r3, [pc, #96]	; (8000898 <main+0x384>)
 8000836:	801a      	strh	r2, [r3, #0]
			}

			if (PWM1 < 10)
 8000838:	4b16      	ldr	r3, [pc, #88]	; (8000894 <main+0x380>)
 800083a:	881b      	ldrh	r3, [r3, #0]
 800083c:	b29b      	uxth	r3, r3
 800083e:	2b09      	cmp	r3, #9
 8000840:	d80a      	bhi.n	8000858 <main+0x344>
			{
				PWM1 = 0;
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <main+0x380>)
 8000844:	2200      	movs	r2, #0
 8000846:	801a      	strh	r2, [r3, #0]
				PWM2 = 0;
 8000848:	4b13      	ldr	r3, [pc, #76]	; (8000898 <main+0x384>)
 800084a:	2200      	movs	r2, #0
 800084c:	801a      	strh	r2, [r3, #0]
				currentState = 8;
 800084e:	2308      	movs	r3, #8
 8000850:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
				stateOffTime[7] = time;
 8000854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000856:	623b      	str	r3, [r7, #32]
			}

			Inverter1(3);
 8000858:	2003      	movs	r0, #3
 800085a:	f001 f90d 	bl	8001a78 <Inverter1>
			Inverter2(3);
 800085e:	2003      	movs	r0, #3
 8000860:	f001 fb9a 	bl	8001f98 <Inverter2>
			Inverter3(2);
 8000864:	2002      	movs	r0, #2
 8000866:	f001 fa4f 	bl	8001d08 <Inverter3>
			Inverter4(2);
 800086a:	2002      	movs	r0, #2
 800086c:	f001 fd00 	bl	8002270 <Inverter4>
			break;
 8000870:	e00e      	b.n	8000890 <main+0x37c>

		case 8:
			Inverter1(1);
 8000872:	2001      	movs	r0, #1
 8000874:	f001 f900 	bl	8001a78 <Inverter1>
			Inverter2(1);
 8000878:	2001      	movs	r0, #1
 800087a:	f001 fb8d 	bl	8001f98 <Inverter2>
			Inverter3(1);
 800087e:	2001      	movs	r0, #1
 8000880:	f001 fa42 	bl	8001d08 <Inverter3>
			Inverter4(1);
 8000884:	2001      	movs	r0, #1
 8000886:	f001 fcf3 	bl	8002270 <Inverter4>
 800088a:	e69e      	b.n	80005ca <main+0xb6>
			break;
 800088c:	bf00      	nop
 800088e:	e69c      	b.n	80005ca <main+0xb6>
		time = HAL_GetTick();
 8000890:	e69b      	b.n	80005ca <main+0xb6>
 8000892:	bf00      	nop
 8000894:	200002d8 	.word	0x200002d8
 8000898:	200002da 	.word	0x200002da

0800089c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b094      	sub	sp, #80	; 0x50
 80008a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a2:	f107 0318 	add.w	r3, r7, #24
 80008a6:	2238      	movs	r2, #56	; 0x38
 80008a8:	2100      	movs	r1, #0
 80008aa:	4618      	mov	r0, r3
 80008ac:	f006 fc6e 	bl	800718c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b0:	1d3b      	adds	r3, r7, #4
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80008be:	2000      	movs	r0, #0
 80008c0:	f002 ffa6 	bl	8003810 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008c4:	2302      	movs	r3, #2
 80008c6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ce:	2340      	movs	r3, #64	; 0x40
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008d2:	2302      	movs	r3, #2
 80008d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008d6:	2302      	movs	r3, #2
 80008d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80008da:	2304      	movs	r3, #4
 80008dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80008de:	2355      	movs	r3, #85	; 0x55
 80008e0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008e2:	2302      	movs	r3, #2
 80008e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008e6:	2302      	movs	r3, #2
 80008e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008ea:	2302      	movs	r3, #2
 80008ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ee:	f107 0318 	add.w	r3, r7, #24
 80008f2:	4618      	mov	r0, r3
 80008f4:	f003 f840 	bl	8003978 <HAL_RCC_OscConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80008fe:	f001 fe23 	bl	8002548 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000902:	230f      	movs	r3, #15
 8000904:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000906:	2303      	movs	r3, #3
 8000908:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090a:	2300      	movs	r3, #0
 800090c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	2104      	movs	r1, #4
 800091a:	4618      	mov	r0, r3
 800091c:	f003 fb44 	bl	8003fa8 <HAL_RCC_ClockConfig>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000926:	f001 fe0f 	bl	8002548 <Error_Handler>
  }
}
 800092a:	bf00      	nop
 800092c:	3750      	adds	r7, #80	; 0x50
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
	...

08000934 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08c      	sub	sp, #48	; 0x30
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800093a:	463b      	mov	r3, r7
 800093c:	2230      	movs	r2, #48	; 0x30
 800093e:	2100      	movs	r1, #0
 8000940:	4618      	mov	r0, r3
 8000942:	f006 fc23 	bl	800718c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000946:	4b16      	ldr	r3, [pc, #88]	; (80009a0 <MX_DAC1_Init+0x6c>)
 8000948:	4a16      	ldr	r2, [pc, #88]	; (80009a4 <MX_DAC1_Init+0x70>)
 800094a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800094c:	4814      	ldr	r0, [pc, #80]	; (80009a0 <MX_DAC1_Init+0x6c>)
 800094e:	f002 fa90 	bl	8002e72 <HAL_DAC_Init>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000958:	f001 fdf6 	bl	8002548 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800095c:	2302      	movs	r3, #2
 800095e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000960:	2300      	movs	r3, #0
 8000962:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000964:	2300      	movs	r3, #0
 8000966:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000968:	2300      	movs	r3, #0
 800096a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800096c:	2300      	movs	r3, #0
 800096e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000970:	2300      	movs	r3, #0
 8000972:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000978:	2301      	movs	r3, #1
 800097a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800097c:	2300      	movs	r3, #0
 800097e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000980:	463b      	mov	r3, r7
 8000982:	2200      	movs	r2, #0
 8000984:	4619      	mov	r1, r3
 8000986:	4806      	ldr	r0, [pc, #24]	; (80009a0 <MX_DAC1_Init+0x6c>)
 8000988:	f002 fafa 	bl	8002f80 <HAL_DAC_ConfigChannel>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000992:	f001 fdd9 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	3730      	adds	r7, #48	; 0x30
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000028 	.word	0x20000028
 80009a4:	50000800 	.word	0x50000800

080009a8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80009ac:	4b20      	ldr	r3, [pc, #128]	; (8000a30 <MX_LPUART1_UART_Init+0x88>)
 80009ae:	4a21      	ldr	r2, [pc, #132]	; (8000a34 <MX_LPUART1_UART_Init+0x8c>)
 80009b0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80009b2:	4b1f      	ldr	r3, [pc, #124]	; (8000a30 <MX_LPUART1_UART_Init+0x88>)
 80009b4:	4a20      	ldr	r2, [pc, #128]	; (8000a38 <MX_LPUART1_UART_Init+0x90>)
 80009b6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009b8:	4b1d      	ldr	r3, [pc, #116]	; (8000a30 <MX_LPUART1_UART_Init+0x88>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80009be:	4b1c      	ldr	r3, [pc, #112]	; (8000a30 <MX_LPUART1_UART_Init+0x88>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80009c4:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <MX_LPUART1_UART_Init+0x88>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80009ca:	4b19      	ldr	r3, [pc, #100]	; (8000a30 <MX_LPUART1_UART_Init+0x88>)
 80009cc:	220c      	movs	r2, #12
 80009ce:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009d0:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <MX_LPUART1_UART_Init+0x88>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d6:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <MX_LPUART1_UART_Init+0x88>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_LPUART1_UART_Init+0x88>)
 80009de:	2200      	movs	r2, #0
 80009e0:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <MX_LPUART1_UART_Init+0x88>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80009e8:	4811      	ldr	r0, [pc, #68]	; (8000a30 <MX_LPUART1_UART_Init+0x88>)
 80009ea:	f005 f9cd 	bl	8005d88 <HAL_UART_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 80009f4:	f001 fda8 	bl	8002548 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f8:	2100      	movs	r1, #0
 80009fa:	480d      	ldr	r0, [pc, #52]	; (8000a30 <MX_LPUART1_UART_Init+0x88>)
 80009fc:	f006 fafb 	bl	8006ff6 <HAL_UARTEx_SetTxFifoThreshold>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8000a06:	f001 fd9f 	bl	8002548 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4808      	ldr	r0, [pc, #32]	; (8000a30 <MX_LPUART1_UART_Init+0x88>)
 8000a0e:	f006 fb30 	bl	8007072 <HAL_UARTEx_SetRxFifoThreshold>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000a18:	f001 fd96 	bl	8002548 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000a1c:	4804      	ldr	r0, [pc, #16]	; (8000a30 <MX_LPUART1_UART_Init+0x88>)
 8000a1e:	f006 fab1 	bl	8006f84 <HAL_UARTEx_DisableFifoMode>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000a28:	f001 fd8e 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	2000003c 	.word	0x2000003c
 8000a34:	40008000 	.word	0x40008000
 8000a38:	00033324 	.word	0x00033324

08000a3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a40:	4b22      	ldr	r3, [pc, #136]	; (8000acc <MX_USART1_UART_Init+0x90>)
 8000a42:	4a23      	ldr	r2, [pc, #140]	; (8000ad0 <MX_USART1_UART_Init+0x94>)
 8000a44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a46:	4b21      	ldr	r3, [pc, #132]	; (8000acc <MX_USART1_UART_Init+0x90>)
 8000a48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4e:	4b1f      	ldr	r3, [pc, #124]	; (8000acc <MX_USART1_UART_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a54:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <MX_USART1_UART_Init+0x90>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a5a:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <MX_USART1_UART_Init+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a60:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <MX_USART1_UART_Init+0x90>)
 8000a62:	220c      	movs	r2, #12
 8000a64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a66:	4b19      	ldr	r3, [pc, #100]	; (8000acc <MX_USART1_UART_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a6c:	4b17      	ldr	r3, [pc, #92]	; (8000acc <MX_USART1_UART_Init+0x90>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a72:	4b16      	ldr	r3, [pc, #88]	; (8000acc <MX_USART1_UART_Init+0x90>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a78:	4b14      	ldr	r3, [pc, #80]	; (8000acc <MX_USART1_UART_Init+0x90>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a7e:	4b13      	ldr	r3, [pc, #76]	; (8000acc <MX_USART1_UART_Init+0x90>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a84:	4811      	ldr	r0, [pc, #68]	; (8000acc <MX_USART1_UART_Init+0x90>)
 8000a86:	f005 f97f 	bl	8005d88 <HAL_UART_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a90:	f001 fd5a 	bl	8002548 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a94:	2100      	movs	r1, #0
 8000a96:	480d      	ldr	r0, [pc, #52]	; (8000acc <MX_USART1_UART_Init+0x90>)
 8000a98:	f006 faad 	bl	8006ff6 <HAL_UARTEx_SetTxFifoThreshold>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000aa2:	f001 fd51 	bl	8002548 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4808      	ldr	r0, [pc, #32]	; (8000acc <MX_USART1_UART_Init+0x90>)
 8000aaa:	f006 fae2 	bl	8007072 <HAL_UARTEx_SetRxFifoThreshold>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ab4:	f001 fd48 	bl	8002548 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ab8:	4804      	ldr	r0, [pc, #16]	; (8000acc <MX_USART1_UART_Init+0x90>)
 8000aba:	f006 fa63 	bl	8006f84 <HAL_UARTEx_DisableFifoMode>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ac4:	f001 fd40 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	200000cc 	.word	0x200000cc
 8000ad0:	40013800 	.word	0x40013800

08000ad4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b098      	sub	sp, #96	; 0x60
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ada:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ade:	2200      	movs	r2, #0
 8000ae0:	601a      	str	r2, [r3, #0]
 8000ae2:	605a      	str	r2, [r3, #4]
 8000ae4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ae6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
 8000af4:	611a      	str	r2, [r3, #16]
 8000af6:	615a      	str	r2, [r3, #20]
 8000af8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	2234      	movs	r2, #52	; 0x34
 8000afe:	2100      	movs	r1, #0
 8000b00:	4618      	mov	r0, r3
 8000b02:	f006 fb43 	bl	800718c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b06:	4b4d      	ldr	r3, [pc, #308]	; (8000c3c <MX_TIM1_Init+0x168>)
 8000b08:	4a4d      	ldr	r2, [pc, #308]	; (8000c40 <MX_TIM1_Init+0x16c>)
 8000b0a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b0c:	4b4b      	ldr	r3, [pc, #300]	; (8000c3c <MX_TIM1_Init+0x168>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000b12:	4b4a      	ldr	r3, [pc, #296]	; (8000c3c <MX_TIM1_Init+0x168>)
 8000b14:	2220      	movs	r2, #32
 8000b16:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4095;
 8000b18:	4b48      	ldr	r3, [pc, #288]	; (8000c3c <MX_TIM1_Init+0x168>)
 8000b1a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b1e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b20:	4b46      	ldr	r3, [pc, #280]	; (8000c3c <MX_TIM1_Init+0x168>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b26:	4b45      	ldr	r3, [pc, #276]	; (8000c3c <MX_TIM1_Init+0x168>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b2c:	4b43      	ldr	r3, [pc, #268]	; (8000c3c <MX_TIM1_Init+0x168>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b32:	4842      	ldr	r0, [pc, #264]	; (8000c3c <MX_TIM1_Init+0x168>)
 8000b34:	f003 ff72 	bl	8004a1c <HAL_TIM_PWM_Init>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000b3e:	f001 fd03 	bl	8002548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b42:	2300      	movs	r3, #0
 8000b44:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b46:	2300      	movs	r3, #0
 8000b48:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b4e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b52:	4619      	mov	r1, r3
 8000b54:	4839      	ldr	r0, [pc, #228]	; (8000c3c <MX_TIM1_Init+0x168>)
 8000b56:	f004 ff89 	bl	8005a6c <HAL_TIMEx_MasterConfigSynchronization>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b60:	f001 fcf2 	bl	8002548 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b64:	2360      	movs	r3, #96	; 0x60
 8000b66:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b70:	2300      	movs	r3, #0
 8000b72:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b80:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b84:	2200      	movs	r2, #0
 8000b86:	4619      	mov	r1, r3
 8000b88:	482c      	ldr	r0, [pc, #176]	; (8000c3c <MX_TIM1_Init+0x168>)
 8000b8a:	f004 fa31 	bl	8004ff0 <HAL_TIM_PWM_ConfigChannel>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000b94:	f001 fcd8 	bl	8002548 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b98:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b9c:	2204      	movs	r2, #4
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4826      	ldr	r0, [pc, #152]	; (8000c3c <MX_TIM1_Init+0x168>)
 8000ba2:	f004 fa25 	bl	8004ff0 <HAL_TIM_PWM_ConfigChannel>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000bac:	f001 fccc 	bl	8002548 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bb0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bb4:	2208      	movs	r2, #8
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4820      	ldr	r0, [pc, #128]	; (8000c3c <MX_TIM1_Init+0x168>)
 8000bba:	f004 fa19 	bl	8004ff0 <HAL_TIM_PWM_ConfigChannel>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000bc4:	f001 fcc0 	bl	8002548 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bc8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bcc:	220c      	movs	r2, #12
 8000bce:	4619      	mov	r1, r3
 8000bd0:	481a      	ldr	r0, [pc, #104]	; (8000c3c <MX_TIM1_Init+0x168>)
 8000bd2:	f004 fa0d 	bl	8004ff0 <HAL_TIM_PWM_ConfigChannel>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000bdc:	f001 fcb4 	bl	8002548 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000bf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000bf8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c02:	2300      	movs	r3, #0
 8000c04:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000c0a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000c10:	2300      	movs	r3, #0
 8000c12:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c14:	2300      	movs	r3, #0
 8000c16:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4807      	ldr	r0, [pc, #28]	; (8000c3c <MX_TIM1_Init+0x168>)
 8000c1e:	f004 ffbb 	bl	8005b98 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8000c28:	f001 fc8e 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c2c:	4803      	ldr	r0, [pc, #12]	; (8000c3c <MX_TIM1_Init+0x168>)
 8000c2e:	f001 fe21 	bl	8002874 <HAL_TIM_MspPostInit>

}
 8000c32:	bf00      	nop
 8000c34:	3760      	adds	r7, #96	; 0x60
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	2000015c 	.word	0x2000015c
 8000c40:	40012c00 	.word	0x40012c00

08000c44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c4a:	f107 031c 	add.w	r3, r7, #28
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]
 8000c54:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c56:	463b      	mov	r3, r7
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
 8000c64:	615a      	str	r2, [r3, #20]
 8000c66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c68:	4b32      	ldr	r3, [pc, #200]	; (8000d34 <MX_TIM2_Init+0xf0>)
 8000c6a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c70:	4b30      	ldr	r3, [pc, #192]	; (8000d34 <MX_TIM2_Init+0xf0>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000c76:	4b2f      	ldr	r3, [pc, #188]	; (8000d34 <MX_TIM2_Init+0xf0>)
 8000c78:	2220      	movs	r2, #32
 8000c7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4095;
 8000c7c:	4b2d      	ldr	r3, [pc, #180]	; (8000d34 <MX_TIM2_Init+0xf0>)
 8000c7e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000c82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c84:	4b2b      	ldr	r3, [pc, #172]	; (8000d34 <MX_TIM2_Init+0xf0>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8a:	4b2a      	ldr	r3, [pc, #168]	; (8000d34 <MX_TIM2_Init+0xf0>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c90:	4828      	ldr	r0, [pc, #160]	; (8000d34 <MX_TIM2_Init+0xf0>)
 8000c92:	f003 fec3 	bl	8004a1c <HAL_TIM_PWM_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000c9c:	f001 fc54 	bl	8002548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ca8:	f107 031c 	add.w	r3, r7, #28
 8000cac:	4619      	mov	r1, r3
 8000cae:	4821      	ldr	r0, [pc, #132]	; (8000d34 <MX_TIM2_Init+0xf0>)
 8000cb0:	f004 fedc 	bl	8005a6c <HAL_TIMEx_MasterConfigSynchronization>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000cba:	f001 fc45 	bl	8002548 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cbe:	2360      	movs	r3, #96	; 0x60
 8000cc0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cce:	463b      	mov	r3, r7
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4817      	ldr	r0, [pc, #92]	; (8000d34 <MX_TIM2_Init+0xf0>)
 8000cd6:	f004 f98b 	bl	8004ff0 <HAL_TIM_PWM_ConfigChannel>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000ce0:	f001 fc32 	bl	8002548 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ce4:	463b      	mov	r3, r7
 8000ce6:	2204      	movs	r2, #4
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4812      	ldr	r0, [pc, #72]	; (8000d34 <MX_TIM2_Init+0xf0>)
 8000cec:	f004 f980 	bl	8004ff0 <HAL_TIM_PWM_ConfigChannel>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000cf6:	f001 fc27 	bl	8002548 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cfa:	463b      	mov	r3, r7
 8000cfc:	2208      	movs	r2, #8
 8000cfe:	4619      	mov	r1, r3
 8000d00:	480c      	ldr	r0, [pc, #48]	; (8000d34 <MX_TIM2_Init+0xf0>)
 8000d02:	f004 f975 	bl	8004ff0 <HAL_TIM_PWM_ConfigChannel>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000d0c:	f001 fc1c 	bl	8002548 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d10:	463b      	mov	r3, r7
 8000d12:	220c      	movs	r2, #12
 8000d14:	4619      	mov	r1, r3
 8000d16:	4807      	ldr	r0, [pc, #28]	; (8000d34 <MX_TIM2_Init+0xf0>)
 8000d18:	f004 f96a 	bl	8004ff0 <HAL_TIM_PWM_ConfigChannel>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8000d22:	f001 fc11 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d26:	4803      	ldr	r0, [pc, #12]	; (8000d34 <MX_TIM2_Init+0xf0>)
 8000d28:	f001 fda4 	bl	8002874 <HAL_TIM_MspPostInit>

}
 8000d2c:	bf00      	nop
 8000d2e:	3728      	adds	r7, #40	; 0x28
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	200001a8 	.word	0x200001a8

08000d38 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	; 0x28
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d3e:	f107 031c 	add.w	r3, r7, #28
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d4a:	463b      	mov	r3, r7
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
 8000d58:	615a      	str	r2, [r3, #20]
 8000d5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d5c:	4b20      	ldr	r3, [pc, #128]	; (8000de0 <MX_TIM3_Init+0xa8>)
 8000d5e:	4a21      	ldr	r2, [pc, #132]	; (8000de4 <MX_TIM3_Init+0xac>)
 8000d60:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5;
 8000d62:	4b1f      	ldr	r3, [pc, #124]	; (8000de0 <MX_TIM3_Init+0xa8>)
 8000d64:	2205      	movs	r2, #5
 8000d66:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d68:	4b1d      	ldr	r3, [pc, #116]	; (8000de0 <MX_TIM3_Init+0xa8>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d6e:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <MX_TIM3_Init+0xa8>)
 8000d70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d74:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d76:	4b1a      	ldr	r3, [pc, #104]	; (8000de0 <MX_TIM3_Init+0xa8>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d7c:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <MX_TIM3_Init+0xa8>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d82:	4817      	ldr	r0, [pc, #92]	; (8000de0 <MX_TIM3_Init+0xa8>)
 8000d84:	f003 fe4a 	bl	8004a1c <HAL_TIM_PWM_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000d8e:	f001 fbdb 	bl	8002548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d96:	2300      	movs	r3, #0
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d9a:	f107 031c 	add.w	r3, r7, #28
 8000d9e:	4619      	mov	r1, r3
 8000da0:	480f      	ldr	r0, [pc, #60]	; (8000de0 <MX_TIM3_Init+0xa8>)
 8000da2:	f004 fe63 	bl	8005a6c <HAL_TIMEx_MasterConfigSynchronization>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000dac:	f001 fbcc 	bl	8002548 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000db0:	2360      	movs	r3, #96	; 0x60
 8000db2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 16000;
 8000db4:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8000db8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dc2:	463b      	mov	r3, r7
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4805      	ldr	r0, [pc, #20]	; (8000de0 <MX_TIM3_Init+0xa8>)
 8000dca:	f004 f911 	bl	8004ff0 <HAL_TIM_PWM_ConfigChannel>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000dd4:	f001 fbb8 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	3728      	adds	r7, #40	; 0x28
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	200001f4 	.word	0x200001f4
 8000de4:	40000400 	.word	0x40000400

08000de8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000df8:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <MX_TIM6_Init+0x68>)
 8000dfa:	4a16      	ldr	r2, [pc, #88]	; (8000e54 <MX_TIM6_Init+0x6c>)
 8000dfc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 4095;
 8000dfe:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <MX_TIM6_Init+0x68>)
 8000e00:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000e04:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e06:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <MX_TIM6_Init+0x68>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000e0c:	4b10      	ldr	r3, [pc, #64]	; (8000e50 <MX_TIM6_Init+0x68>)
 8000e0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e12:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e14:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <MX_TIM6_Init+0x68>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e1a:	480d      	ldr	r0, [pc, #52]	; (8000e50 <MX_TIM6_Init+0x68>)
 8000e1c:	f003 fd2e 	bl	800487c <HAL_TIM_Base_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000e26:	f001 fb8f 	bl	8002548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	4619      	mov	r1, r3
 8000e36:	4806      	ldr	r0, [pc, #24]	; (8000e50 <MX_TIM6_Init+0x68>)
 8000e38:	f004 fe18 	bl	8005a6c <HAL_TIMEx_MasterConfigSynchronization>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8000e42:	f001 fb81 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	20000240 	.word	0x20000240
 8000e54:	40001000 	.word	0x40001000

08000e58 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b098      	sub	sp, #96	; 0x60
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e5e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e62:	2200      	movs	r2, #0
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	605a      	str	r2, [r3, #4]
 8000e68:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e6a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	605a      	str	r2, [r3, #4]
 8000e74:	609a      	str	r2, [r3, #8]
 8000e76:	60da      	str	r2, [r3, #12]
 8000e78:	611a      	str	r2, [r3, #16]
 8000e7a:	615a      	str	r2, [r3, #20]
 8000e7c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	2234      	movs	r2, #52	; 0x34
 8000e82:	2100      	movs	r1, #0
 8000e84:	4618      	mov	r0, r3
 8000e86:	f006 f981 	bl	800718c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000e8a:	4b4d      	ldr	r3, [pc, #308]	; (8000fc0 <MX_TIM8_Init+0x168>)
 8000e8c:	4a4d      	ldr	r2, [pc, #308]	; (8000fc4 <MX_TIM8_Init+0x16c>)
 8000e8e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000e90:	4b4b      	ldr	r3, [pc, #300]	; (8000fc0 <MX_TIM8_Init+0x168>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000e96:	4b4a      	ldr	r3, [pc, #296]	; (8000fc0 <MX_TIM8_Init+0x168>)
 8000e98:	2220      	movs	r2, #32
 8000e9a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 4095;
 8000e9c:	4b48      	ldr	r3, [pc, #288]	; (8000fc0 <MX_TIM8_Init+0x168>)
 8000e9e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000ea2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea4:	4b46      	ldr	r3, [pc, #280]	; (8000fc0 <MX_TIM8_Init+0x168>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000eaa:	4b45      	ldr	r3, [pc, #276]	; (8000fc0 <MX_TIM8_Init+0x168>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb0:	4b43      	ldr	r3, [pc, #268]	; (8000fc0 <MX_TIM8_Init+0x168>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000eb6:	4842      	ldr	r0, [pc, #264]	; (8000fc0 <MX_TIM8_Init+0x168>)
 8000eb8:	f003 fdb0 	bl	8004a1c <HAL_TIM_PWM_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000ec2:	f001 fb41 	bl	8002548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000ed2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4839      	ldr	r0, [pc, #228]	; (8000fc0 <MX_TIM8_Init+0x168>)
 8000eda:	f004 fdc7 	bl	8005a6c <HAL_TIMEx_MasterConfigSynchronization>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000ee4:	f001 fb30 	bl	8002548 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ee8:	2360      	movs	r3, #96	; 0x60
 8000eea:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000eec:	2300      	movs	r3, #0
 8000eee:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000efc:	2300      	movs	r3, #0
 8000efe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f00:	2300      	movs	r3, #0
 8000f02:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f04:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f08:	2200      	movs	r2, #0
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	482c      	ldr	r0, [pc, #176]	; (8000fc0 <MX_TIM8_Init+0x168>)
 8000f0e:	f004 f86f 	bl	8004ff0 <HAL_TIM_PWM_ConfigChannel>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000f18:	f001 fb16 	bl	8002548 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f1c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f20:	2204      	movs	r2, #4
 8000f22:	4619      	mov	r1, r3
 8000f24:	4826      	ldr	r0, [pc, #152]	; (8000fc0 <MX_TIM8_Init+0x168>)
 8000f26:	f004 f863 	bl	8004ff0 <HAL_TIM_PWM_ConfigChannel>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8000f30:	f001 fb0a 	bl	8002548 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f34:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f38:	2208      	movs	r2, #8
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4820      	ldr	r0, [pc, #128]	; (8000fc0 <MX_TIM8_Init+0x168>)
 8000f3e:	f004 f857 	bl	8004ff0 <HAL_TIM_PWM_ConfigChannel>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8000f48:	f001 fafe 	bl	8002548 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f4c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000f50:	220c      	movs	r2, #12
 8000f52:	4619      	mov	r1, r3
 8000f54:	481a      	ldr	r0, [pc, #104]	; (8000fc0 <MX_TIM8_Init+0x168>)
 8000f56:	f004 f84b 	bl	8004ff0 <HAL_TIM_PWM_ConfigChannel>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <MX_TIM8_Init+0x10c>
  {
    Error_Handler();
 8000f60:	f001 faf2 	bl	8002548 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f64:	2300      	movs	r3, #0
 8000f66:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f7c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000f82:	2300      	movs	r3, #0
 8000f84:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f86:	2300      	movs	r3, #0
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f8e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f90:	2300      	movs	r3, #0
 8000f92:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000f94:	2300      	movs	r3, #0
 8000f96:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000f9c:	1d3b      	adds	r3, r7, #4
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4807      	ldr	r0, [pc, #28]	; (8000fc0 <MX_TIM8_Init+0x168>)
 8000fa2:	f004 fdf9 	bl	8005b98 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM8_Init+0x158>
  {
    Error_Handler();
 8000fac:	f001 facc 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000fb0:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <MX_TIM8_Init+0x168>)
 8000fb2:	f001 fc5f 	bl	8002874 <HAL_TIM_MspPostInit>

}
 8000fb6:	bf00      	nop
 8000fb8:	3760      	adds	r7, #96	; 0x60
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	2000028c 	.word	0x2000028c
 8000fc4:	40013400 	.word	0x40013400

08000fc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b08a      	sub	sp, #40	; 0x28
 8000fcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
 8000fd8:	609a      	str	r2, [r3, #8]
 8000fda:	60da      	str	r2, [r3, #12]
 8000fdc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fde:	4b47      	ldr	r3, [pc, #284]	; (80010fc <MX_GPIO_Init+0x134>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	4a46      	ldr	r2, [pc, #280]	; (80010fc <MX_GPIO_Init+0x134>)
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fea:	4b44      	ldr	r3, [pc, #272]	; (80010fc <MX_GPIO_Init+0x134>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	613b      	str	r3, [r7, #16]
 8000ff4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ff6:	4b41      	ldr	r3, [pc, #260]	; (80010fc <MX_GPIO_Init+0x134>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	4a40      	ldr	r2, [pc, #256]	; (80010fc <MX_GPIO_Init+0x134>)
 8000ffc:	f043 0320 	orr.w	r3, r3, #32
 8001000:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001002:	4b3e      	ldr	r3, [pc, #248]	; (80010fc <MX_GPIO_Init+0x134>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	f003 0320 	and.w	r3, r3, #32
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	4b3b      	ldr	r3, [pc, #236]	; (80010fc <MX_GPIO_Init+0x134>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	4a3a      	ldr	r2, [pc, #232]	; (80010fc <MX_GPIO_Init+0x134>)
 8001014:	f043 0301 	orr.w	r3, r3, #1
 8001018:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101a:	4b38      	ldr	r3, [pc, #224]	; (80010fc <MX_GPIO_Init+0x134>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	f003 0301 	and.w	r3, r3, #1
 8001022:	60bb      	str	r3, [r7, #8]
 8001024:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001026:	4b35      	ldr	r3, [pc, #212]	; (80010fc <MX_GPIO_Init+0x134>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	4a34      	ldr	r2, [pc, #208]	; (80010fc <MX_GPIO_Init+0x134>)
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001032:	4b32      	ldr	r3, [pc, #200]	; (80010fc <MX_GPIO_Init+0x134>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SD_A_3_Pin|SD_B_3_Pin|SD_C_3_Pin|SD_A_4_Pin
 800103e:	2200      	movs	r2, #0
 8001040:	f44f 51cf 	mov.w	r1, #6624	; 0x19e0
 8001044:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001048:	f002 fba6 	bl	8003798 <HAL_GPIO_WritePin>
                          |SD_B_4_Pin|SD_C_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_B_1_Pin|SD_C_1_Pin|SD_A_1_Pin|Toggle_pin_Pin
 800104c:	2200      	movs	r2, #0
 800104e:	f24e 4107 	movw	r1, #58375	; 0xe407
 8001052:	482b      	ldr	r0, [pc, #172]	; (8001100 <MX_GPIO_Init+0x138>)
 8001054:	f002 fba0 	bl	8003798 <HAL_GPIO_WritePin>
                          |SD_A_2_Pin|SD_B_2_Pin|SD_C_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001058:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800105c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800105e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001062:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4619      	mov	r1, r3
 800106e:	4825      	ldr	r0, [pc, #148]	; (8001104 <MX_GPIO_Init+0x13c>)
 8001070:	f002 f9f8 	bl	8003464 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_A_3_Pin SD_B_3_Pin SD_C_3_Pin SD_A_4_Pin
                           SD_B_4_Pin SD_C_4_Pin */
  GPIO_InitStruct.Pin = SD_A_3_Pin|SD_B_3_Pin|SD_C_3_Pin|SD_A_4_Pin
 8001074:	f44f 53cf 	mov.w	r3, #6624	; 0x19e0
 8001078:	617b      	str	r3, [r7, #20]
                          |SD_B_4_Pin|SD_C_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800107a:	2301      	movs	r3, #1
 800107c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001082:	2300      	movs	r3, #0
 8001084:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	4619      	mov	r1, r3
 800108c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001090:	f002 f9e8 	bl	8003464 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_B_1_Pin SD_C_1_Pin SD_A_1_Pin Toggle_pin_Pin
                           SD_A_2_Pin SD_B_2_Pin SD_C_2_Pin */
  GPIO_InitStruct.Pin = SD_B_1_Pin|SD_C_1_Pin|SD_A_1_Pin|Toggle_pin_Pin
 8001094:	f24e 4307 	movw	r3, #58375	; 0xe407
 8001098:	617b      	str	r3, [r7, #20]
                          |SD_A_2_Pin|SD_B_2_Pin|SD_C_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109a:	2301      	movs	r3, #1
 800109c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2300      	movs	r3, #0
 80010a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	4814      	ldr	r0, [pc, #80]	; (8001100 <MX_GPIO_Init+0x138>)
 80010ae:	f002 f9d9 	bl	8003464 <HAL_GPIO_Init>

  /*Configure GPIO pins : HS4_Pin HS5_Pin HS6_Pin */
  GPIO_InitStruct.Pin = HS4_Pin|HS5_Pin|HS6_Pin;
 80010b2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80010b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010bc:	2302      	movs	r3, #2
 80010be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4619      	mov	r1, r3
 80010c6:	480f      	ldr	r0, [pc, #60]	; (8001104 <MX_GPIO_Init+0x13c>)
 80010c8:	f002 f9cc 	bl	8003464 <HAL_GPIO_Init>

  /*Configure GPIO pins : HS1_Pin HS2_Pin HS3_Pin */
  GPIO_InitStruct.Pin = HS1_Pin|HS2_Pin|HS3_Pin;
 80010cc:	2370      	movs	r3, #112	; 0x70
 80010ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010d4:	2302      	movs	r3, #2
 80010d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4619      	mov	r1, r3
 80010de:	4808      	ldr	r0, [pc, #32]	; (8001100 <MX_GPIO_Init+0x138>)
 80010e0:	f002 f9c0 	bl	8003464 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2100      	movs	r1, #0
 80010e8:	2028      	movs	r0, #40	; 0x28
 80010ea:	f001 fe8e 	bl	8002e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010ee:	2028      	movs	r0, #40	; 0x28
 80010f0:	f001 fea5 	bl	8002e3e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010f4:	bf00      	nop
 80010f6:	3728      	adds	r7, #40	; 0x28
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40021000 	.word	0x40021000
 8001100:	48000400 	.word	0x48000400
 8001104:	48000800 	.word	0x48000800

08001108 <state0_inv1>:

//void HAL_TIM_PWM_PulseFinishedCallback (TIM_HandleTypeDef * htim){
//HAL_GPIO_TogglePin (GPIOB, Toggle_pin_Pin);
//}

void state0_inv1() {
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0

	IN_A_1 = 0;
 800110c:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <state0_inv1+0x38>)
 800110e:	2200      	movs	r2, #0
 8001110:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_1;
 8001112:	2201      	movs	r2, #1
 8001114:	2104      	movs	r1, #4
 8001116:	480b      	ldr	r0, [pc, #44]	; (8001144 <state0_inv1+0x3c>)
 8001118:	f002 fb3e 	bl	8003798 <HAL_GPIO_WritePin>

	IN_B_1 = 0;
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <state0_inv1+0x38>)
 800111e:	2200      	movs	r2, #0
 8001120:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_1;
 8001122:	2201      	movs	r2, #1
 8001124:	2101      	movs	r1, #1
 8001126:	4807      	ldr	r0, [pc, #28]	; (8001144 <state0_inv1+0x3c>)
 8001128:	f002 fb36 	bl	8003798 <HAL_GPIO_WritePin>

	IN_C_1 = 0;
 800112c:	4b04      	ldr	r3, [pc, #16]	; (8001140 <state0_inv1+0x38>)
 800112e:	2200      	movs	r2, #0
 8001130:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_1;
 8001132:	2201      	movs	r2, #1
 8001134:	2102      	movs	r1, #2
 8001136:	4803      	ldr	r0, [pc, #12]	; (8001144 <state0_inv1+0x3c>)
 8001138:	f002 fb2e 	bl	8003798 <HAL_GPIO_WritePin>

}
 800113c:	bf00      	nop
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40012c00 	.word	0x40012c00
 8001144:	48000400 	.word	0x48000400

08001148 <state1_inv1>:

void state1_inv1() {
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0

	IN_A_1 = 0;
 800114c:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <state1_inv1+0x3c>)
 800114e:	2200      	movs	r2, #0
 8001150:	635a      	str	r2, [r3, #52]	; 0x34
	RESET_SD_A_1;
 8001152:	2200      	movs	r2, #0
 8001154:	2104      	movs	r1, #4
 8001156:	480c      	ldr	r0, [pc, #48]	; (8001188 <state1_inv1+0x40>)
 8001158:	f002 fb1e 	bl	8003798 <HAL_GPIO_WritePin>

	IN_B_1 = PWM1;
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <state1_inv1+0x44>)
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	b29a      	uxth	r2, r3
 8001162:	4b08      	ldr	r3, [pc, #32]	; (8001184 <state1_inv1+0x3c>)
 8001164:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_1;
 8001166:	2201      	movs	r2, #1
 8001168:	2101      	movs	r1, #1
 800116a:	4807      	ldr	r0, [pc, #28]	; (8001188 <state1_inv1+0x40>)
 800116c:	f002 fb14 	bl	8003798 <HAL_GPIO_WritePin>

	IN_C_1 = 0;
 8001170:	4b04      	ldr	r3, [pc, #16]	; (8001184 <state1_inv1+0x3c>)
 8001172:	2200      	movs	r2, #0
 8001174:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_1;
 8001176:	2201      	movs	r2, #1
 8001178:	2102      	movs	r1, #2
 800117a:	4803      	ldr	r0, [pc, #12]	; (8001188 <state1_inv1+0x40>)
 800117c:	f002 fb0c 	bl	8003798 <HAL_GPIO_WritePin>
//		TIM1->CCR2 = PWM1;
//		TIM1->CCR3 = PWM1;
//    	HAL_GPIO_WritePin(GPIOB, SD_A_1_Pin, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(GPIOB, SD_B_1_Pin, GPIO_PIN_SET);
//		HAL_GPIO_WritePin(GPIOB, SD_C_1_Pin, GPIO_PIN_RESET);
}
 8001180:	bf00      	nop
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40012c00 	.word	0x40012c00
 8001188:	48000400 	.word	0x48000400
 800118c:	200002d8 	.word	0x200002d8

08001190 <state2_inv1>:
void state2_inv1() {
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0

	IN_A_1 = PWM1;
 8001194:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <state2_inv1+0x3c>)
 8001196:	881b      	ldrh	r3, [r3, #0]
 8001198:	b29a      	uxth	r2, r3
 800119a:	4b0d      	ldr	r3, [pc, #52]	; (80011d0 <state2_inv1+0x40>)
 800119c:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_1;
 800119e:	2201      	movs	r2, #1
 80011a0:	2104      	movs	r1, #4
 80011a2:	480c      	ldr	r0, [pc, #48]	; (80011d4 <state2_inv1+0x44>)
 80011a4:	f002 faf8 	bl	8003798 <HAL_GPIO_WritePin>

	IN_B_1 = 0;
 80011a8:	4b09      	ldr	r3, [pc, #36]	; (80011d0 <state2_inv1+0x40>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	639a      	str	r2, [r3, #56]	; 0x38
	RESET_SD_B_1;
 80011ae:	2200      	movs	r2, #0
 80011b0:	2101      	movs	r1, #1
 80011b2:	4808      	ldr	r0, [pc, #32]	; (80011d4 <state2_inv1+0x44>)
 80011b4:	f002 faf0 	bl	8003798 <HAL_GPIO_WritePin>

	IN_C_1 = 0;
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <state2_inv1+0x40>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_1;
 80011be:	2201      	movs	r2, #1
 80011c0:	2102      	movs	r1, #2
 80011c2:	4804      	ldr	r0, [pc, #16]	; (80011d4 <state2_inv1+0x44>)
 80011c4:	f002 fae8 	bl	8003798 <HAL_GPIO_WritePin>
//		TIM1->CCR2 = 0;
//		TIM1->CCR3 = PWM1;
//    	HAL_GPIO_WritePin(GPIOB, SD_A_1_Pin, GPIO_PIN_SET);
//		HAL_GPIO_WritePin(GPIOB, SD_B_1_Pin, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(GPIOB, SD_C_1_Pin, GPIO_PIN_RESET);
}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	200002d8 	.word	0x200002d8
 80011d0:	40012c00 	.word	0x40012c00
 80011d4:	48000400 	.word	0x48000400

080011d8 <state3_inv1>:

void state3_inv1() {
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0

	IN_A_1 = PWM1;
 80011dc:	4b0d      	ldr	r3, [pc, #52]	; (8001214 <state3_inv1+0x3c>)
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	4b0d      	ldr	r3, [pc, #52]	; (8001218 <state3_inv1+0x40>)
 80011e4:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_1;
 80011e6:	2201      	movs	r2, #1
 80011e8:	2104      	movs	r1, #4
 80011ea:	480c      	ldr	r0, [pc, #48]	; (800121c <state3_inv1+0x44>)
 80011ec:	f002 fad4 	bl	8003798 <HAL_GPIO_WritePin>

	IN_B_1 = 0;
 80011f0:	4b09      	ldr	r3, [pc, #36]	; (8001218 <state3_inv1+0x40>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_1;
 80011f6:	2201      	movs	r2, #1
 80011f8:	2101      	movs	r1, #1
 80011fa:	4808      	ldr	r0, [pc, #32]	; (800121c <state3_inv1+0x44>)
 80011fc:	f002 facc 	bl	8003798 <HAL_GPIO_WritePin>

	IN_C_1 = 0;
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <state3_inv1+0x40>)
 8001202:	2200      	movs	r2, #0
 8001204:	63da      	str	r2, [r3, #60]	; 0x3c
	RESET_SD_C_1;
 8001206:	2200      	movs	r2, #0
 8001208:	2102      	movs	r1, #2
 800120a:	4804      	ldr	r0, [pc, #16]	; (800121c <state3_inv1+0x44>)
 800120c:	f002 fac4 	bl	8003798 <HAL_GPIO_WritePin>
//		TIM1->CCR2 = PWM1;
//		TIM1->CCR3 = 0;
//    	HAL_GPIO_WritePin(GPIOB, SD_A_1_Pin, GPIO_PIN_SET);
//		HAL_GPIO_WritePin(GPIOB, SD_B_1_Pin, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(GPIOB, SD_C_1_Pin, GPIO_PIN_RESET);
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	200002d8 	.word	0x200002d8
 8001218:	40012c00 	.word	0x40012c00
 800121c:	48000400 	.word	0x48000400

08001220 <state4_inv1>:

void state4_inv1() {
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0

	IN_A_1 = 0;
 8001224:	4b0d      	ldr	r3, [pc, #52]	; (800125c <state4_inv1+0x3c>)
 8001226:	2200      	movs	r2, #0
 8001228:	635a      	str	r2, [r3, #52]	; 0x34
	RESET_SD_A_1;
 800122a:	2200      	movs	r2, #0
 800122c:	2104      	movs	r1, #4
 800122e:	480c      	ldr	r0, [pc, #48]	; (8001260 <state4_inv1+0x40>)
 8001230:	f002 fab2 	bl	8003798 <HAL_GPIO_WritePin>

	IN_B_1 = 0;
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <state4_inv1+0x3c>)
 8001236:	2200      	movs	r2, #0
 8001238:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_1;
 800123a:	2201      	movs	r2, #1
 800123c:	2101      	movs	r1, #1
 800123e:	4808      	ldr	r0, [pc, #32]	; (8001260 <state4_inv1+0x40>)
 8001240:	f002 faaa 	bl	8003798 <HAL_GPIO_WritePin>

	IN_C_1 = PWM1;
 8001244:	4b07      	ldr	r3, [pc, #28]	; (8001264 <state4_inv1+0x44>)
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	b29a      	uxth	r2, r3
 800124a:	4b04      	ldr	r3, [pc, #16]	; (800125c <state4_inv1+0x3c>)
 800124c:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_1;
 800124e:	2201      	movs	r2, #1
 8001250:	2102      	movs	r1, #2
 8001252:	4803      	ldr	r0, [pc, #12]	; (8001260 <state4_inv1+0x40>)
 8001254:	f002 faa0 	bl	8003798 <HAL_GPIO_WritePin>
//		TIM1->CCR2 = PWM1;
//		TIM1->CCR3 = PWM1;
//    	HAL_GPIO_WritePin(GPIOB, SD_A_1_Pin, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(GPIOB, SD_B_1_Pin, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(GPIOB, SD_C_1_Pin, GPIO_PIN_SET);
}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40012c00 	.word	0x40012c00
 8001260:	48000400 	.word	0x48000400
 8001264:	200002d8 	.word	0x200002d8

08001268 <state5_inv1>:

void state5_inv1() {
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0

	IN_A_1 = 0;
 800126c:	4b0d      	ldr	r3, [pc, #52]	; (80012a4 <state5_inv1+0x3c>)
 800126e:	2200      	movs	r2, #0
 8001270:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_1;
 8001272:	2201      	movs	r2, #1
 8001274:	2104      	movs	r1, #4
 8001276:	480c      	ldr	r0, [pc, #48]	; (80012a8 <state5_inv1+0x40>)
 8001278:	f002 fa8e 	bl	8003798 <HAL_GPIO_WritePin>

	IN_B_1 = 0;
 800127c:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <state5_inv1+0x3c>)
 800127e:	2200      	movs	r2, #0
 8001280:	639a      	str	r2, [r3, #56]	; 0x38
	RESET_SD_B_1;
 8001282:	2200      	movs	r2, #0
 8001284:	2101      	movs	r1, #1
 8001286:	4808      	ldr	r0, [pc, #32]	; (80012a8 <state5_inv1+0x40>)
 8001288:	f002 fa86 	bl	8003798 <HAL_GPIO_WritePin>

	IN_C_1 = PWM1;
 800128c:	4b07      	ldr	r3, [pc, #28]	; (80012ac <state5_inv1+0x44>)
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	b29a      	uxth	r2, r3
 8001292:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <state5_inv1+0x3c>)
 8001294:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_1;
 8001296:	2201      	movs	r2, #1
 8001298:	2102      	movs	r1, #2
 800129a:	4803      	ldr	r0, [pc, #12]	; (80012a8 <state5_inv1+0x40>)
 800129c:	f002 fa7c 	bl	8003798 <HAL_GPIO_WritePin>
//	TIM1->CCR2 = 0;
//	TIM1->CCR3 = PWM1;
//	HAL_GPIO_WritePin(GPIOB, SD_A_1_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(GPIOB, SD_B_1_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(GPIOB, SD_C_1_Pin, GPIO_PIN_SET);
}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40012c00 	.word	0x40012c00
 80012a8:	48000400 	.word	0x48000400
 80012ac:	200002d8 	.word	0x200002d8

080012b0 <state6_inv1>:

void state6_inv1() {
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0

	IN_A_1 = 0;
 80012b4:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <state6_inv1+0x3c>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_1;
 80012ba:	2201      	movs	r2, #1
 80012bc:	2104      	movs	r1, #4
 80012be:	480c      	ldr	r0, [pc, #48]	; (80012f0 <state6_inv1+0x40>)
 80012c0:	f002 fa6a 	bl	8003798 <HAL_GPIO_WritePin>

	IN_B_1 = PWM1;
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <state6_inv1+0x44>)
 80012c6:	881b      	ldrh	r3, [r3, #0]
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	4b08      	ldr	r3, [pc, #32]	; (80012ec <state6_inv1+0x3c>)
 80012cc:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_1;
 80012ce:	2201      	movs	r2, #1
 80012d0:	2101      	movs	r1, #1
 80012d2:	4807      	ldr	r0, [pc, #28]	; (80012f0 <state6_inv1+0x40>)
 80012d4:	f002 fa60 	bl	8003798 <HAL_GPIO_WritePin>

	IN_C_1 = 0;
 80012d8:	4b04      	ldr	r3, [pc, #16]	; (80012ec <state6_inv1+0x3c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	63da      	str	r2, [r3, #60]	; 0x3c
	RESET_SD_C_1;
 80012de:	2200      	movs	r2, #0
 80012e0:	2102      	movs	r1, #2
 80012e2:	4803      	ldr	r0, [pc, #12]	; (80012f0 <state6_inv1+0x40>)
 80012e4:	f002 fa58 	bl	8003798 <HAL_GPIO_WritePin>
//		TIM1->CCR2 = PWM1;
//		TIM1->CCR3 = 0;
//    	HAL_GPIO_WritePin(GPIOB, SD_A_1_Pin, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(GPIOB, SD_B_1_Pin, GPIO_PIN_SET);
//		HAL_GPIO_WritePin(GPIOB, SD_C_1_Pin, GPIO_PIN_RESET);
}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	40012c00 	.word	0x40012c00
 80012f0:	48000400 	.word	0x48000400
 80012f4:	200002d8 	.word	0x200002d8

080012f8 <stateOff_inv1>:

void stateOff_inv1() {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0

	IN_A_1 = 0;
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <stateOff_inv1+0x38>)
 80012fe:	2200      	movs	r2, #0
 8001300:	635a      	str	r2, [r3, #52]	; 0x34
	RESET_SD_A_1;
 8001302:	2200      	movs	r2, #0
 8001304:	2104      	movs	r1, #4
 8001306:	480b      	ldr	r0, [pc, #44]	; (8001334 <stateOff_inv1+0x3c>)
 8001308:	f002 fa46 	bl	8003798 <HAL_GPIO_WritePin>


	IN_B_1 = 0;
 800130c:	4b08      	ldr	r3, [pc, #32]	; (8001330 <stateOff_inv1+0x38>)
 800130e:	2200      	movs	r2, #0
 8001310:	639a      	str	r2, [r3, #56]	; 0x38
	RESET_SD_B_1;
 8001312:	2200      	movs	r2, #0
 8001314:	2101      	movs	r1, #1
 8001316:	4807      	ldr	r0, [pc, #28]	; (8001334 <stateOff_inv1+0x3c>)
 8001318:	f002 fa3e 	bl	8003798 <HAL_GPIO_WritePin>


	IN_C_1 = 0;
 800131c:	4b04      	ldr	r3, [pc, #16]	; (8001330 <stateOff_inv1+0x38>)
 800131e:	2200      	movs	r2, #0
 8001320:	63da      	str	r2, [r3, #60]	; 0x3c
	RESET_SD_C_1;
 8001322:	2200      	movs	r2, #0
 8001324:	2102      	movs	r1, #2
 8001326:	4803      	ldr	r0, [pc, #12]	; (8001334 <stateOff_inv1+0x3c>)
 8001328:	f002 fa36 	bl	8003798 <HAL_GPIO_WritePin>

}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40012c00 	.word	0x40012c00
 8001334:	48000400 	.word	0x48000400

08001338 <state0_inv2>:


//Inverter 2
void state0_inv2() {
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
	IN_A_2 = 0;
 800133c:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <state0_inv2+0x40>)
 800133e:	2200      	movs	r2, #0
 8001340:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_2;
 8001342:	2201      	movs	r2, #1
 8001344:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001348:	480c      	ldr	r0, [pc, #48]	; (800137c <state0_inv2+0x44>)
 800134a:	f002 fa25 	bl	8003798 <HAL_GPIO_WritePin>

	IN_B_2 = 0;
 800134e:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <state0_inv2+0x40>)
 8001350:	2200      	movs	r2, #0
 8001352:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_2;
 8001354:	2201      	movs	r2, #1
 8001356:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800135a:	4808      	ldr	r0, [pc, #32]	; (800137c <state0_inv2+0x44>)
 800135c:	f002 fa1c 	bl	8003798 <HAL_GPIO_WritePin>

	IN_C_2 = 0;
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <state0_inv2+0x40>)
 8001362:	2200      	movs	r2, #0
 8001364:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_2;
 8001366:	2201      	movs	r2, #1
 8001368:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800136c:	4803      	ldr	r0, [pc, #12]	; (800137c <state0_inv2+0x44>)
 800136e:	f002 fa13 	bl	8003798 <HAL_GPIO_WritePin>
}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40013400 	.word	0x40013400
 800137c:	48000400 	.word	0x48000400

08001380 <state1_inv2>:


void state1_inv2() {
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
	IN_A_2 = 0;
 8001384:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <state1_inv2+0x40>)
 8001386:	2200      	movs	r2, #0
 8001388:	635a      	str	r2, [r3, #52]	; 0x34
	RESET_SD_A_2;
 800138a:	2200      	movs	r2, #0
 800138c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001390:	480c      	ldr	r0, [pc, #48]	; (80013c4 <state1_inv2+0x44>)
 8001392:	f002 fa01 	bl	8003798 <HAL_GPIO_WritePin>

	IN_B_2 = PWM2;
 8001396:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <state1_inv2+0x48>)
 8001398:	881a      	ldrh	r2, [r3, #0]
 800139a:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <state1_inv2+0x40>)
 800139c:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_2;
 800139e:	2201      	movs	r2, #1
 80013a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013a4:	4807      	ldr	r0, [pc, #28]	; (80013c4 <state1_inv2+0x44>)
 80013a6:	f002 f9f7 	bl	8003798 <HAL_GPIO_WritePin>

	IN_C_2 = 0;
 80013aa:	4b05      	ldr	r3, [pc, #20]	; (80013c0 <state1_inv2+0x40>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_2;
 80013b0:	2201      	movs	r2, #1
 80013b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013b6:	4803      	ldr	r0, [pc, #12]	; (80013c4 <state1_inv2+0x44>)
 80013b8:	f002 f9ee 	bl	8003798 <HAL_GPIO_WritePin>
}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40013400 	.word	0x40013400
 80013c4:	48000400 	.word	0x48000400
 80013c8:	200002da 	.word	0x200002da

080013cc <state2_inv2>:
void state2_inv2() {
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
	IN_A_2 = PWM2;
 80013d0:	4b0e      	ldr	r3, [pc, #56]	; (800140c <state2_inv2+0x40>)
 80013d2:	881a      	ldrh	r2, [r3, #0]
 80013d4:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <state2_inv2+0x44>)
 80013d6:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_2;
 80013d8:	2201      	movs	r2, #1
 80013da:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013de:	480d      	ldr	r0, [pc, #52]	; (8001414 <state2_inv2+0x48>)
 80013e0:	f002 f9da 	bl	8003798 <HAL_GPIO_WritePin>

	IN_B_2 = 0;
 80013e4:	4b0a      	ldr	r3, [pc, #40]	; (8001410 <state2_inv2+0x44>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	639a      	str	r2, [r3, #56]	; 0x38
	RESET_SD_B_2;
 80013ea:	2200      	movs	r2, #0
 80013ec:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013f0:	4808      	ldr	r0, [pc, #32]	; (8001414 <state2_inv2+0x48>)
 80013f2:	f002 f9d1 	bl	8003798 <HAL_GPIO_WritePin>

	IN_C_2 = 0;
 80013f6:	4b06      	ldr	r3, [pc, #24]	; (8001410 <state2_inv2+0x44>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_2;
 80013fc:	2201      	movs	r2, #1
 80013fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001402:	4804      	ldr	r0, [pc, #16]	; (8001414 <state2_inv2+0x48>)
 8001404:	f002 f9c8 	bl	8003798 <HAL_GPIO_WritePin>
}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}
 800140c:	200002da 	.word	0x200002da
 8001410:	40013400 	.word	0x40013400
 8001414:	48000400 	.word	0x48000400

08001418 <state3_inv2>:
void state3_inv2() {
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
	IN_A_2 = PWM2;
 800141c:	4b0e      	ldr	r3, [pc, #56]	; (8001458 <state3_inv2+0x40>)
 800141e:	881a      	ldrh	r2, [r3, #0]
 8001420:	4b0e      	ldr	r3, [pc, #56]	; (800145c <state3_inv2+0x44>)
 8001422:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_2;
 8001424:	2201      	movs	r2, #1
 8001426:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800142a:	480d      	ldr	r0, [pc, #52]	; (8001460 <state3_inv2+0x48>)
 800142c:	f002 f9b4 	bl	8003798 <HAL_GPIO_WritePin>

	IN_B_2 = 0;
 8001430:	4b0a      	ldr	r3, [pc, #40]	; (800145c <state3_inv2+0x44>)
 8001432:	2200      	movs	r2, #0
 8001434:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_2;
 8001436:	2201      	movs	r2, #1
 8001438:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800143c:	4808      	ldr	r0, [pc, #32]	; (8001460 <state3_inv2+0x48>)
 800143e:	f002 f9ab 	bl	8003798 <HAL_GPIO_WritePin>

	IN_C_2 = 0;
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <state3_inv2+0x44>)
 8001444:	2200      	movs	r2, #0
 8001446:	63da      	str	r2, [r3, #60]	; 0x3c
	RESET_SD_C_2;
 8001448:	2200      	movs	r2, #0
 800144a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800144e:	4804      	ldr	r0, [pc, #16]	; (8001460 <state3_inv2+0x48>)
 8001450:	f002 f9a2 	bl	8003798 <HAL_GPIO_WritePin>
}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}
 8001458:	200002da 	.word	0x200002da
 800145c:	40013400 	.word	0x40013400
 8001460:	48000400 	.word	0x48000400

08001464 <state4_inv2>:
void state4_inv2() {
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	IN_A_2 = 0;
 8001468:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <state4_inv2+0x40>)
 800146a:	2200      	movs	r2, #0
 800146c:	635a      	str	r2, [r3, #52]	; 0x34
	RESET_SD_A_2;
 800146e:	2200      	movs	r2, #0
 8001470:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001474:	480c      	ldr	r0, [pc, #48]	; (80014a8 <state4_inv2+0x44>)
 8001476:	f002 f98f 	bl	8003798 <HAL_GPIO_WritePin>

	IN_B_2 = 0;
 800147a:	4b0a      	ldr	r3, [pc, #40]	; (80014a4 <state4_inv2+0x40>)
 800147c:	2200      	movs	r2, #0
 800147e:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_2;
 8001480:	2201      	movs	r2, #1
 8001482:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001486:	4808      	ldr	r0, [pc, #32]	; (80014a8 <state4_inv2+0x44>)
 8001488:	f002 f986 	bl	8003798 <HAL_GPIO_WritePin>

	IN_C_2 = PWM2;
 800148c:	4b07      	ldr	r3, [pc, #28]	; (80014ac <state4_inv2+0x48>)
 800148e:	881a      	ldrh	r2, [r3, #0]
 8001490:	4b04      	ldr	r3, [pc, #16]	; (80014a4 <state4_inv2+0x40>)
 8001492:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_2;
 8001494:	2201      	movs	r2, #1
 8001496:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800149a:	4803      	ldr	r0, [pc, #12]	; (80014a8 <state4_inv2+0x44>)
 800149c:	f002 f97c 	bl	8003798 <HAL_GPIO_WritePin>
}
 80014a0:	bf00      	nop
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40013400 	.word	0x40013400
 80014a8:	48000400 	.word	0x48000400
 80014ac:	200002da 	.word	0x200002da

080014b0 <state5_inv2>:
void state5_inv2() {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
	IN_A_2 = 0;
 80014b4:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <state5_inv2+0x40>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_2;
 80014ba:	2201      	movs	r2, #1
 80014bc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014c0:	480c      	ldr	r0, [pc, #48]	; (80014f4 <state5_inv2+0x44>)
 80014c2:	f002 f969 	bl	8003798 <HAL_GPIO_WritePin>

	IN_B_2 = 0;
 80014c6:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <state5_inv2+0x40>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	639a      	str	r2, [r3, #56]	; 0x38
	RESET_SD_B_2;
 80014cc:	2200      	movs	r2, #0
 80014ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014d2:	4808      	ldr	r0, [pc, #32]	; (80014f4 <state5_inv2+0x44>)
 80014d4:	f002 f960 	bl	8003798 <HAL_GPIO_WritePin>

	IN_C_2 = PWM2;
 80014d8:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <state5_inv2+0x48>)
 80014da:	881a      	ldrh	r2, [r3, #0]
 80014dc:	4b04      	ldr	r3, [pc, #16]	; (80014f0 <state5_inv2+0x40>)
 80014de:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_2;
 80014e0:	2201      	movs	r2, #1
 80014e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014e6:	4803      	ldr	r0, [pc, #12]	; (80014f4 <state5_inv2+0x44>)
 80014e8:	f002 f956 	bl	8003798 <HAL_GPIO_WritePin>
}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40013400 	.word	0x40013400
 80014f4:	48000400 	.word	0x48000400
 80014f8:	200002da 	.word	0x200002da

080014fc <state6_inv2>:
void state6_inv2() {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
	IN_A_2 = 0;
 8001500:	4b0e      	ldr	r3, [pc, #56]	; (800153c <state6_inv2+0x40>)
 8001502:	2200      	movs	r2, #0
 8001504:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_2;
 8001506:	2201      	movs	r2, #1
 8001508:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800150c:	480c      	ldr	r0, [pc, #48]	; (8001540 <state6_inv2+0x44>)
 800150e:	f002 f943 	bl	8003798 <HAL_GPIO_WritePin>

	IN_B_2 = PWM2;
 8001512:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <state6_inv2+0x48>)
 8001514:	881a      	ldrh	r2, [r3, #0]
 8001516:	4b09      	ldr	r3, [pc, #36]	; (800153c <state6_inv2+0x40>)
 8001518:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_2;
 800151a:	2201      	movs	r2, #1
 800151c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001520:	4807      	ldr	r0, [pc, #28]	; (8001540 <state6_inv2+0x44>)
 8001522:	f002 f939 	bl	8003798 <HAL_GPIO_WritePin>

	IN_C_2 = 0;
 8001526:	4b05      	ldr	r3, [pc, #20]	; (800153c <state6_inv2+0x40>)
 8001528:	2200      	movs	r2, #0
 800152a:	63da      	str	r2, [r3, #60]	; 0x3c
	RESET_SD_C_2;
 800152c:	2200      	movs	r2, #0
 800152e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001532:	4803      	ldr	r0, [pc, #12]	; (8001540 <state6_inv2+0x44>)
 8001534:	f002 f930 	bl	8003798 <HAL_GPIO_WritePin>
}
 8001538:	bf00      	nop
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40013400 	.word	0x40013400
 8001540:	48000400 	.word	0x48000400
 8001544:	200002da 	.word	0x200002da

08001548 <stateOff_inv2>:

void stateOff_inv2() {
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
	IN_A_2 = 0;
 800154c:	4b0e      	ldr	r3, [pc, #56]	; (8001588 <stateOff_inv2+0x40>)
 800154e:	2200      	movs	r2, #0
 8001550:	635a      	str	r2, [r3, #52]	; 0x34
	RESET_SD_A_2;
 8001552:	2200      	movs	r2, #0
 8001554:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001558:	480c      	ldr	r0, [pc, #48]	; (800158c <stateOff_inv2+0x44>)
 800155a:	f002 f91d 	bl	8003798 <HAL_GPIO_WritePin>

	IN_B_2 = 0;
 800155e:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <stateOff_inv2+0x40>)
 8001560:	2200      	movs	r2, #0
 8001562:	639a      	str	r2, [r3, #56]	; 0x38
	RESET_SD_B_2;
 8001564:	2200      	movs	r2, #0
 8001566:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800156a:	4808      	ldr	r0, [pc, #32]	; (800158c <stateOff_inv2+0x44>)
 800156c:	f002 f914 	bl	8003798 <HAL_GPIO_WritePin>

	IN_C_2 = 0;
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <stateOff_inv2+0x40>)
 8001572:	2200      	movs	r2, #0
 8001574:	63da      	str	r2, [r3, #60]	; 0x3c
	RESET_SD_C_2;
 8001576:	2200      	movs	r2, #0
 8001578:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800157c:	4803      	ldr	r0, [pc, #12]	; (800158c <stateOff_inv2+0x44>)
 800157e:	f002 f90b 	bl	8003798 <HAL_GPIO_WritePin>
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40013400 	.word	0x40013400
 800158c:	48000400 	.word	0x48000400

08001590 <state0_inv3>:

//Inverter 3
void state0_inv3() {
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
	IN_A_3 = 0;
 8001594:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001598:	2200      	movs	r2, #0
 800159a:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_3;
 800159c:	2201      	movs	r2, #1
 800159e:	2120      	movs	r1, #32
 80015a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015a4:	f002 f8f8 	bl	8003798 <HAL_GPIO_WritePin>

	IN_B_3 = 0;
 80015a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015ac:	2200      	movs	r2, #0
 80015ae:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_3;
 80015b0:	2201      	movs	r2, #1
 80015b2:	2140      	movs	r1, #64	; 0x40
 80015b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b8:	f002 f8ee 	bl	8003798 <HAL_GPIO_WritePin>

	IN_C_3 = 0;
 80015bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015c0:	2200      	movs	r2, #0
 80015c2:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_3;
 80015c4:	2201      	movs	r2, #1
 80015c6:	2180      	movs	r1, #128	; 0x80
 80015c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015cc:	f002 f8e4 	bl	8003798 <HAL_GPIO_WritePin>
}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <state1_inv3>:

void state1_inv3() {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
	IN_A_3 = 0;
 80015d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015dc:	2200      	movs	r2, #0
 80015de:	635a      	str	r2, [r3, #52]	; 0x34
	RESET_SD_A_3;
 80015e0:	2200      	movs	r2, #0
 80015e2:	2120      	movs	r1, #32
 80015e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e8:	f002 f8d6 	bl	8003798 <HAL_GPIO_WritePin>

	IN_B_3 = 0;
 80015ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015f0:	2200      	movs	r2, #0
 80015f2:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_3;
 80015f4:	2201      	movs	r2, #1
 80015f6:	2140      	movs	r1, #64	; 0x40
 80015f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015fc:	f002 f8cc 	bl	8003798 <HAL_GPIO_WritePin>

	IN_C_3 = PWM3;
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <state1_inv3+0x48>)
 8001602:	881a      	ldrh	r2, [r3, #0]
 8001604:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001608:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_3;
 800160a:	2201      	movs	r2, #1
 800160c:	2180      	movs	r1, #128	; 0x80
 800160e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001612:	f002 f8c1 	bl	8003798 <HAL_GPIO_WritePin>
}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	200002dc 	.word	0x200002dc

08001620 <state2_inv3>:
void state2_inv3() {
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
	IN_A_3 = 0;
 8001624:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001628:	2200      	movs	r2, #0
 800162a:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_3;
 800162c:	2201      	movs	r2, #1
 800162e:	2120      	movs	r1, #32
 8001630:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001634:	f002 f8b0 	bl	8003798 <HAL_GPIO_WritePin>

	IN_B_3 = 0;
 8001638:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800163c:	2200      	movs	r2, #0
 800163e:	639a      	str	r2, [r3, #56]	; 0x38
	RESET_SD_B_3;
 8001640:	2200      	movs	r2, #0
 8001642:	2140      	movs	r1, #64	; 0x40
 8001644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001648:	f002 f8a6 	bl	8003798 <HAL_GPIO_WritePin>

	IN_C_3 = PWM3;
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <state2_inv3+0x48>)
 800164e:	881a      	ldrh	r2, [r3, #0]
 8001650:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001654:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_3;
 8001656:	2201      	movs	r2, #1
 8001658:	2180      	movs	r1, #128	; 0x80
 800165a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800165e:	f002 f89b 	bl	8003798 <HAL_GPIO_WritePin>
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200002dc 	.word	0x200002dc

0800166c <state3_inv3>:
void state3_inv3() {
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
	IN_A_3 = 0;
 8001670:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001674:	2200      	movs	r2, #0
 8001676:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_3;
 8001678:	2201      	movs	r2, #1
 800167a:	2120      	movs	r1, #32
 800167c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001680:	f002 f88a 	bl	8003798 <HAL_GPIO_WritePin>

	IN_B_3 = PWM3;
 8001684:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <state3_inv3+0x48>)
 8001686:	881a      	ldrh	r2, [r3, #0]
 8001688:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800168c:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_3;
 800168e:	2201      	movs	r2, #1
 8001690:	2140      	movs	r1, #64	; 0x40
 8001692:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001696:	f002 f87f 	bl	8003798 <HAL_GPIO_WritePin>

	IN_C_3 = 0;
 800169a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800169e:	2200      	movs	r2, #0
 80016a0:	63da      	str	r2, [r3, #60]	; 0x3c
	RESET_SD_C_3;
 80016a2:	2200      	movs	r2, #0
 80016a4:	2180      	movs	r1, #128	; 0x80
 80016a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016aa:	f002 f875 	bl	8003798 <HAL_GPIO_WritePin>
}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200002dc 	.word	0x200002dc

080016b8 <state4_inv3>:
void state4_inv3() {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
	IN_A_3 = 0;
 80016bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016c0:	2200      	movs	r2, #0
 80016c2:	635a      	str	r2, [r3, #52]	; 0x34
	RESET_SD_A_3;
 80016c4:	2200      	movs	r2, #0
 80016c6:	2120      	movs	r1, #32
 80016c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016cc:	f002 f864 	bl	8003798 <HAL_GPIO_WritePin>

	IN_B_3 = PWM3;
 80016d0:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <state4_inv3+0x48>)
 80016d2:	881a      	ldrh	r2, [r3, #0]
 80016d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016d8:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_3;
 80016da:	2201      	movs	r2, #1
 80016dc:	2140      	movs	r1, #64	; 0x40
 80016de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e2:	f002 f859 	bl	8003798 <HAL_GPIO_WritePin>

	IN_C_3 = 0;
 80016e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016ea:	2200      	movs	r2, #0
 80016ec:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_3;
 80016ee:	2201      	movs	r2, #1
 80016f0:	2180      	movs	r1, #128	; 0x80
 80016f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f6:	f002 f84f 	bl	8003798 <HAL_GPIO_WritePin>
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	200002dc 	.word	0x200002dc

08001704 <state5_inv3>:
void state5_inv3() {
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
	IN_A_3 = PWM3;
 8001708:	4b10      	ldr	r3, [pc, #64]	; (800174c <state5_inv3+0x48>)
 800170a:	881a      	ldrh	r2, [r3, #0]
 800170c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001710:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_3;
 8001712:	2201      	movs	r2, #1
 8001714:	2120      	movs	r1, #32
 8001716:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800171a:	f002 f83d 	bl	8003798 <HAL_GPIO_WritePin>

	IN_B_3 = 0;
 800171e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001722:	2200      	movs	r2, #0
 8001724:	639a      	str	r2, [r3, #56]	; 0x38
	RESET_SD_B_3;
 8001726:	2200      	movs	r2, #0
 8001728:	2140      	movs	r1, #64	; 0x40
 800172a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800172e:	f002 f833 	bl	8003798 <HAL_GPIO_WritePin>

	IN_C_3 = 0;
 8001732:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001736:	2200      	movs	r2, #0
 8001738:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_3;
 800173a:	2201      	movs	r2, #1
 800173c:	2180      	movs	r1, #128	; 0x80
 800173e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001742:	f002 f829 	bl	8003798 <HAL_GPIO_WritePin>
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200002dc 	.word	0x200002dc

08001750 <state6_inv3>:
void state6_inv3() {
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
	IN_A_3 = PWM3;
 8001754:	4b10      	ldr	r3, [pc, #64]	; (8001798 <state6_inv3+0x48>)
 8001756:	881a      	ldrh	r2, [r3, #0]
 8001758:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800175c:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_3;
 800175e:	2201      	movs	r2, #1
 8001760:	2120      	movs	r1, #32
 8001762:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001766:	f002 f817 	bl	8003798 <HAL_GPIO_WritePin>

	IN_B_3 = 0;
 800176a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800176e:	2200      	movs	r2, #0
 8001770:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_3;
 8001772:	2201      	movs	r2, #1
 8001774:	2140      	movs	r1, #64	; 0x40
 8001776:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800177a:	f002 f80d 	bl	8003798 <HAL_GPIO_WritePin>

	IN_C_3 = 0;
 800177e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001782:	2200      	movs	r2, #0
 8001784:	63da      	str	r2, [r3, #60]	; 0x3c
	RESET_SD_C_3;
 8001786:	2200      	movs	r2, #0
 8001788:	2180      	movs	r1, #128	; 0x80
 800178a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800178e:	f002 f803 	bl	8003798 <HAL_GPIO_WritePin>
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200002dc 	.word	0x200002dc

0800179c <stateOff_inv3>:

void stateOff_inv3() {
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
	IN_A_3 = 0;
 80017a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017a4:	2200      	movs	r2, #0
 80017a6:	635a      	str	r2, [r3, #52]	; 0x34
	RESET_SD_A_3;
 80017a8:	2200      	movs	r2, #0
 80017aa:	2120      	movs	r1, #32
 80017ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017b0:	f001 fff2 	bl	8003798 <HAL_GPIO_WritePin>

	IN_B_3 = 0;
 80017b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017b8:	2200      	movs	r2, #0
 80017ba:	639a      	str	r2, [r3, #56]	; 0x38
	RESET_SD_B_3;
 80017bc:	2200      	movs	r2, #0
 80017be:	2140      	movs	r1, #64	; 0x40
 80017c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c4:	f001 ffe8 	bl	8003798 <HAL_GPIO_WritePin>

	IN_C_3 = 0;
 80017c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017cc:	2200      	movs	r2, #0
 80017ce:	63da      	str	r2, [r3, #60]	; 0x3c
	RESET_SD_C_3;
 80017d0:	2200      	movs	r2, #0
 80017d2:	2180      	movs	r1, #128	; 0x80
 80017d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d8:	f001 ffde 	bl	8003798 <HAL_GPIO_WritePin>
}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}

080017e0 <state0_inv4>:


	//Inverter 4
void state0_inv4() {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
	IN_A_4 = 0;
 80017e4:	4b10      	ldr	r3, [pc, #64]	; (8001828 <state0_inv4+0x48>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_A_4;
 80017ea:	2201      	movs	r2, #1
 80017ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f4:	f001 ffd0 	bl	8003798 <HAL_GPIO_WritePin>

	IN_B_4 = 0;
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <state0_inv4+0x4c>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_B_4;
 80017fe:	2201      	movs	r2, #1
 8001800:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001804:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001808:	f001 ffc6 	bl	8003798 <HAL_GPIO_WritePin>

	IN_C_4 = 0;
 800180c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001810:	2200      	movs	r2, #0
 8001812:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_C_4;
 8001814:	2201      	movs	r2, #1
 8001816:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800181a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800181e:	f001 ffbb 	bl	8003798 <HAL_GPIO_WritePin>
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40012c00 	.word	0x40012c00
 800182c:	40013400 	.word	0x40013400

08001830 <state1_inv4>:

void state1_inv4() {
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
	IN_A_4 = 0;
 8001834:	4b10      	ldr	r3, [pc, #64]	; (8001878 <state1_inv4+0x48>)
 8001836:	2200      	movs	r2, #0
 8001838:	641a      	str	r2, [r3, #64]	; 0x40
	RESET_SD_A_4;
 800183a:	2200      	movs	r2, #0
 800183c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001844:	f001 ffa8 	bl	8003798 <HAL_GPIO_WritePin>

	IN_B_4 = 0;
 8001848:	4b0c      	ldr	r3, [pc, #48]	; (800187c <state1_inv4+0x4c>)
 800184a:	2200      	movs	r2, #0
 800184c:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_B_4;
 800184e:	2201      	movs	r2, #1
 8001850:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001854:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001858:	f001 ff9e 	bl	8003798 <HAL_GPIO_WritePin>

	IN_C_4 = PWM4;
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <state1_inv4+0x50>)
 800185e:	881a      	ldrh	r2, [r3, #0]
 8001860:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001864:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_C_4;
 8001866:	2201      	movs	r2, #1
 8001868:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800186c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001870:	f001 ff92 	bl	8003798 <HAL_GPIO_WritePin>
}
 8001874:	bf00      	nop
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40012c00 	.word	0x40012c00
 800187c:	40013400 	.word	0x40013400
 8001880:	200002de 	.word	0x200002de

08001884 <state2_inv4>:
void state2_inv4() {
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
	IN_A_4 = 0;
 8001888:	4b10      	ldr	r3, [pc, #64]	; (80018cc <state2_inv4+0x48>)
 800188a:	2200      	movs	r2, #0
 800188c:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_A_4;
 800188e:	2201      	movs	r2, #1
 8001890:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001898:	f001 ff7e 	bl	8003798 <HAL_GPIO_WritePin>

	IN_B_4 = 0;
 800189c:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <state2_inv4+0x4c>)
 800189e:	2200      	movs	r2, #0
 80018a0:	641a      	str	r2, [r3, #64]	; 0x40
	RESET_SD_B_4;
 80018a2:	2200      	movs	r2, #0
 80018a4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ac:	f001 ff74 	bl	8003798 <HAL_GPIO_WritePin>

	IN_C_4 = PWM4;
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <state2_inv4+0x50>)
 80018b2:	881a      	ldrh	r2, [r3, #0]
 80018b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018b8:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_C_4;
 80018ba:	2201      	movs	r2, #1
 80018bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c4:	f001 ff68 	bl	8003798 <HAL_GPIO_WritePin>
}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40012c00 	.word	0x40012c00
 80018d0:	40013400 	.word	0x40013400
 80018d4:	200002de 	.word	0x200002de

080018d8 <state3_inv4>:
void state3_inv4() {
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
	IN_A_4 = 0;
 80018dc:	4b10      	ldr	r3, [pc, #64]	; (8001920 <state3_inv4+0x48>)
 80018de:	2200      	movs	r2, #0
 80018e0:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_A_4;
 80018e2:	2201      	movs	r2, #1
 80018e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ec:	f001 ff54 	bl	8003798 <HAL_GPIO_WritePin>

	IN_B_4 = PWM4;
 80018f0:	4b0c      	ldr	r3, [pc, #48]	; (8001924 <state3_inv4+0x4c>)
 80018f2:	881a      	ldrh	r2, [r3, #0]
 80018f4:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <state3_inv4+0x50>)
 80018f6:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_B_4;
 80018f8:	2201      	movs	r2, #1
 80018fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001902:	f001 ff49 	bl	8003798 <HAL_GPIO_WritePin>

	IN_C_4 = 0;
 8001906:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800190a:	2200      	movs	r2, #0
 800190c:	641a      	str	r2, [r3, #64]	; 0x40
	RESET_SD_C_4;
 800190e:	2200      	movs	r2, #0
 8001910:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001914:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001918:	f001 ff3e 	bl	8003798 <HAL_GPIO_WritePin>
}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40012c00 	.word	0x40012c00
 8001924:	200002de 	.word	0x200002de
 8001928:	40013400 	.word	0x40013400

0800192c <state4_inv4>:
void state4_inv4() {
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
	IN_A_4 = 0;
 8001930:	4b10      	ldr	r3, [pc, #64]	; (8001974 <state4_inv4+0x48>)
 8001932:	2200      	movs	r2, #0
 8001934:	641a      	str	r2, [r3, #64]	; 0x40
	RESET_SD_A_4;
 8001936:	2200      	movs	r2, #0
 8001938:	f44f 7180 	mov.w	r1, #256	; 0x100
 800193c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001940:	f001 ff2a 	bl	8003798 <HAL_GPIO_WritePin>

	IN_B_4 = PWM4;
 8001944:	4b0c      	ldr	r3, [pc, #48]	; (8001978 <state4_inv4+0x4c>)
 8001946:	881a      	ldrh	r2, [r3, #0]
 8001948:	4b0c      	ldr	r3, [pc, #48]	; (800197c <state4_inv4+0x50>)
 800194a:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_B_4;
 800194c:	2201      	movs	r2, #1
 800194e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001952:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001956:	f001 ff1f 	bl	8003798 <HAL_GPIO_WritePin>

	IN_C_4 = 0;
 800195a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800195e:	2200      	movs	r2, #0
 8001960:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_C_4;
 8001962:	2201      	movs	r2, #1
 8001964:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800196c:	f001 ff14 	bl	8003798 <HAL_GPIO_WritePin>
}
 8001970:	bf00      	nop
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40012c00 	.word	0x40012c00
 8001978:	200002de 	.word	0x200002de
 800197c:	40013400 	.word	0x40013400

08001980 <state5_inv4>:
void state5_inv4() {
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
	IN_A_4 = PWM4;
 8001984:	4b10      	ldr	r3, [pc, #64]	; (80019c8 <state5_inv4+0x48>)
 8001986:	881a      	ldrh	r2, [r3, #0]
 8001988:	4b10      	ldr	r3, [pc, #64]	; (80019cc <state5_inv4+0x4c>)
 800198a:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_A_4;
 800198c:	2201      	movs	r2, #1
 800198e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001992:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001996:	f001 feff 	bl	8003798 <HAL_GPIO_WritePin>

	IN_B_4 = 0;
 800199a:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <state5_inv4+0x50>)
 800199c:	2200      	movs	r2, #0
 800199e:	641a      	str	r2, [r3, #64]	; 0x40
	RESET_SD_B_4;
 80019a0:	2200      	movs	r2, #0
 80019a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019aa:	f001 fef5 	bl	8003798 <HAL_GPIO_WritePin>

	IN_C_4 = 0;
 80019ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019b2:	2200      	movs	r2, #0
 80019b4:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_C_4;
 80019b6:	2201      	movs	r2, #1
 80019b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c0:	f001 feea 	bl	8003798 <HAL_GPIO_WritePin>
}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	200002de 	.word	0x200002de
 80019cc:	40012c00 	.word	0x40012c00
 80019d0:	40013400 	.word	0x40013400

080019d4 <state6_inv4>:
void state6_inv4() {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0

	IN_A_4 = PWM4;
 80019d8:	4b10      	ldr	r3, [pc, #64]	; (8001a1c <state6_inv4+0x48>)
 80019da:	881a      	ldrh	r2, [r3, #0]
 80019dc:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <state6_inv4+0x4c>)
 80019de:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_A_4;
 80019e0:	2201      	movs	r2, #1
 80019e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ea:	f001 fed5 	bl	8003798 <HAL_GPIO_WritePin>

	IN_B_4 = 0;
 80019ee:	4b0d      	ldr	r3, [pc, #52]	; (8001a24 <state6_inv4+0x50>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_B_4;
 80019f4:	2201      	movs	r2, #1
 80019f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019fe:	f001 fecb 	bl	8003798 <HAL_GPIO_WritePin>

	IN_C_4 = 0;
 8001a02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a06:	2200      	movs	r2, #0
 8001a08:	641a      	str	r2, [r3, #64]	; 0x40
	RESET_SD_C_4;
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a14:	f001 fec0 	bl	8003798 <HAL_GPIO_WritePin>
}
 8001a18:	bf00      	nop
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	200002de 	.word	0x200002de
 8001a20:	40012c00 	.word	0x40012c00
 8001a24:	40013400 	.word	0x40013400

08001a28 <stateOff_inv4>:

void stateOff_inv4() {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0

	IN_A_4 = 0;
 8001a2c:	4b10      	ldr	r3, [pc, #64]	; (8001a70 <stateOff_inv4+0x48>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	641a      	str	r2, [r3, #64]	; 0x40
	RESET_SD_A_4;
 8001a32:	2200      	movs	r2, #0
 8001a34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a3c:	f001 feac 	bl	8003798 <HAL_GPIO_WritePin>

	IN_B_4 = 0;
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <stateOff_inv4+0x4c>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	641a      	str	r2, [r3, #64]	; 0x40
	RESET_SD_B_4;
 8001a46:	2200      	movs	r2, #0
 8001a48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001a4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a50:	f001 fea2 	bl	8003798 <HAL_GPIO_WritePin>

	IN_C_4 = 0;
 8001a54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a58:	2200      	movs	r2, #0
 8001a5a:	641a      	str	r2, [r3, #64]	; 0x40
	RESET_SD_C_4;
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a66:	f001 fe97 	bl	8003798 <HAL_GPIO_WritePin>
}
 8001a6a:	bf00      	nop
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40012c00 	.word	0x40012c00
 8001a74:	40013400 	.word	0x40013400

08001a78 <Inverter1>:
		state6_inv2();
		state6_inv4();
	}
}

void Inverter1(uint8_t inv_mode) {
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
	inv_mode == 2- low switches are on, high switches are off
	inv_mode == 3- 120 deg. commutation with PWM
	inv_mode == 4- 120 deg. commutation without PWM
	*/

	if (inv_mode == 1) {
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d102      	bne.n	8001a8e <Inverter1+0x16>
		stateOff_inv1();
 8001a88:	f7ff fc36 	bl	80012f8 <stateOff_inv1>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
			state6_inv1();
		}
	}
}
 8001a8c:	e134      	b.n	8001cf8 <Inverter1+0x280>
	else if (inv_mode == 2) {
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d102      	bne.n	8001a9a <Inverter1+0x22>
		state0_inv1();
 8001a94:	f7ff fb38 	bl	8001108 <state0_inv1>
}
 8001a98:	e12e      	b.n	8001cf8 <Inverter1+0x280>
	else if (inv_mode == 3) {
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	2b03      	cmp	r3, #3
 8001a9e:	f040 8093 	bne.w	8001bc8 <Inverter1+0x150>
		if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin) && HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001aa2:	2110      	movs	r1, #16
 8001aa4:	4896      	ldr	r0, [pc, #600]	; (8001d00 <Inverter1+0x288>)
 8001aa6:	f001 fe5f 	bl	8003768 <HAL_GPIO_ReadPin>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d010      	beq.n	8001ad2 <Inverter1+0x5a>
 8001ab0:	2120      	movs	r1, #32
 8001ab2:	4893      	ldr	r0, [pc, #588]	; (8001d00 <Inverter1+0x288>)
 8001ab4:	f001 fe58 	bl	8003768 <HAL_GPIO_ReadPin>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d009      	beq.n	8001ad2 <Inverter1+0x5a>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001abe:	2140      	movs	r1, #64	; 0x40
 8001ac0:	488f      	ldr	r0, [pc, #572]	; (8001d00 <Inverter1+0x288>)
 8001ac2:	f001 fe51 	bl	8003768 <HAL_GPIO_ReadPin>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d102      	bne.n	8001ad2 <Inverter1+0x5a>
			state1_inv1();
 8001acc:	f7ff fb3c 	bl	8001148 <state1_inv1>
 8001ad0:	e112      	b.n	8001cf8 <Inverter1+0x280>
		else if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001ad2:	2110      	movs	r1, #16
 8001ad4:	488a      	ldr	r0, [pc, #552]	; (8001d00 <Inverter1+0x288>)
 8001ad6:	f001 fe47 	bl	8003768 <HAL_GPIO_ReadPin>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d010      	beq.n	8001b02 <Inverter1+0x8a>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001ae0:	2120      	movs	r1, #32
 8001ae2:	4887      	ldr	r0, [pc, #540]	; (8001d00 <Inverter1+0x288>)
 8001ae4:	f001 fe40 	bl	8003768 <HAL_GPIO_ReadPin>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d109      	bne.n	8001b02 <Inverter1+0x8a>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001aee:	2140      	movs	r1, #64	; 0x40
 8001af0:	4883      	ldr	r0, [pc, #524]	; (8001d00 <Inverter1+0x288>)
 8001af2:	f001 fe39 	bl	8003768 <HAL_GPIO_ReadPin>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d102      	bne.n	8001b02 <Inverter1+0x8a>
			state2_inv1();
 8001afc:	f7ff fb48 	bl	8001190 <state2_inv1>
 8001b00:	e0fa      	b.n	8001cf8 <Inverter1+0x280>
		else if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001b02:	2110      	movs	r1, #16
 8001b04:	487e      	ldr	r0, [pc, #504]	; (8001d00 <Inverter1+0x288>)
 8001b06:	f001 fe2f 	bl	8003768 <HAL_GPIO_ReadPin>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d010      	beq.n	8001b32 <Inverter1+0xba>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001b10:	2120      	movs	r1, #32
 8001b12:	487b      	ldr	r0, [pc, #492]	; (8001d00 <Inverter1+0x288>)
 8001b14:	f001 fe28 	bl	8003768 <HAL_GPIO_ReadPin>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d109      	bne.n	8001b32 <Inverter1+0xba>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001b1e:	2140      	movs	r1, #64	; 0x40
 8001b20:	4877      	ldr	r0, [pc, #476]	; (8001d00 <Inverter1+0x288>)
 8001b22:	f001 fe21 	bl	8003768 <HAL_GPIO_ReadPin>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d002      	beq.n	8001b32 <Inverter1+0xba>
			state3_inv1();
 8001b2c:	f7ff fb54 	bl	80011d8 <state3_inv1>
 8001b30:	e0e2      	b.n	8001cf8 <Inverter1+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001b32:	2110      	movs	r1, #16
 8001b34:	4872      	ldr	r0, [pc, #456]	; (8001d00 <Inverter1+0x288>)
 8001b36:	f001 fe17 	bl	8003768 <HAL_GPIO_ReadPin>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d110      	bne.n	8001b62 <Inverter1+0xea>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001b40:	2120      	movs	r1, #32
 8001b42:	486f      	ldr	r0, [pc, #444]	; (8001d00 <Inverter1+0x288>)
 8001b44:	f001 fe10 	bl	8003768 <HAL_GPIO_ReadPin>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d109      	bne.n	8001b62 <Inverter1+0xea>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001b4e:	2140      	movs	r1, #64	; 0x40
 8001b50:	486b      	ldr	r0, [pc, #428]	; (8001d00 <Inverter1+0x288>)
 8001b52:	f001 fe09 	bl	8003768 <HAL_GPIO_ReadPin>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d002      	beq.n	8001b62 <Inverter1+0xea>
			state4_inv1();
 8001b5c:	f7ff fb60 	bl	8001220 <state4_inv1>
 8001b60:	e0ca      	b.n	8001cf8 <Inverter1+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001b62:	2110      	movs	r1, #16
 8001b64:	4866      	ldr	r0, [pc, #408]	; (8001d00 <Inverter1+0x288>)
 8001b66:	f001 fdff 	bl	8003768 <HAL_GPIO_ReadPin>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d110      	bne.n	8001b92 <Inverter1+0x11a>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001b70:	2120      	movs	r1, #32
 8001b72:	4863      	ldr	r0, [pc, #396]	; (8001d00 <Inverter1+0x288>)
 8001b74:	f001 fdf8 	bl	8003768 <HAL_GPIO_ReadPin>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d009      	beq.n	8001b92 <Inverter1+0x11a>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001b7e:	2140      	movs	r1, #64	; 0x40
 8001b80:	485f      	ldr	r0, [pc, #380]	; (8001d00 <Inverter1+0x288>)
 8001b82:	f001 fdf1 	bl	8003768 <HAL_GPIO_ReadPin>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d002      	beq.n	8001b92 <Inverter1+0x11a>
			state5_inv1();
 8001b8c:	f7ff fb6c 	bl	8001268 <state5_inv1>
 8001b90:	e0b2      	b.n	8001cf8 <Inverter1+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001b92:	2110      	movs	r1, #16
 8001b94:	485a      	ldr	r0, [pc, #360]	; (8001d00 <Inverter1+0x288>)
 8001b96:	f001 fde7 	bl	8003768 <HAL_GPIO_ReadPin>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f040 80ab 	bne.w	8001cf8 <Inverter1+0x280>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001ba2:	2120      	movs	r1, #32
 8001ba4:	4856      	ldr	r0, [pc, #344]	; (8001d00 <Inverter1+0x288>)
 8001ba6:	f001 fddf 	bl	8003768 <HAL_GPIO_ReadPin>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 80a3 	beq.w	8001cf8 <Inverter1+0x280>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001bb2:	2140      	movs	r1, #64	; 0x40
 8001bb4:	4852      	ldr	r0, [pc, #328]	; (8001d00 <Inverter1+0x288>)
 8001bb6:	f001 fdd7 	bl	8003768 <HAL_GPIO_ReadPin>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f040 809b 	bne.w	8001cf8 <Inverter1+0x280>
			state6_inv1();
 8001bc2:	f7ff fb75 	bl	80012b0 <state6_inv1>
}
 8001bc6:	e097      	b.n	8001cf8 <Inverter1+0x280>
		else if (inv_mode == 4) {
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	f040 8094 	bne.w	8001cf8 <Inverter1+0x280>
			PWM1= 4095;
 8001bd0:	4b4c      	ldr	r3, [pc, #304]	; (8001d04 <Inverter1+0x28c>)
 8001bd2:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001bd6:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin) && HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001bd8:	2110      	movs	r1, #16
 8001bda:	4849      	ldr	r0, [pc, #292]	; (8001d00 <Inverter1+0x288>)
 8001bdc:	f001 fdc4 	bl	8003768 <HAL_GPIO_ReadPin>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d010      	beq.n	8001c08 <Inverter1+0x190>
 8001be6:	2120      	movs	r1, #32
 8001be8:	4845      	ldr	r0, [pc, #276]	; (8001d00 <Inverter1+0x288>)
 8001bea:	f001 fdbd 	bl	8003768 <HAL_GPIO_ReadPin>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d009      	beq.n	8001c08 <Inverter1+0x190>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001bf4:	2140      	movs	r1, #64	; 0x40
 8001bf6:	4842      	ldr	r0, [pc, #264]	; (8001d00 <Inverter1+0x288>)
 8001bf8:	f001 fdb6 	bl	8003768 <HAL_GPIO_ReadPin>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d102      	bne.n	8001c08 <Inverter1+0x190>
			state1_inv1();
 8001c02:	f7ff faa1 	bl	8001148 <state1_inv1>
 8001c06:	e077      	b.n	8001cf8 <Inverter1+0x280>
		else if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001c08:	2110      	movs	r1, #16
 8001c0a:	483d      	ldr	r0, [pc, #244]	; (8001d00 <Inverter1+0x288>)
 8001c0c:	f001 fdac 	bl	8003768 <HAL_GPIO_ReadPin>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d010      	beq.n	8001c38 <Inverter1+0x1c0>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001c16:	2120      	movs	r1, #32
 8001c18:	4839      	ldr	r0, [pc, #228]	; (8001d00 <Inverter1+0x288>)
 8001c1a:	f001 fda5 	bl	8003768 <HAL_GPIO_ReadPin>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d109      	bne.n	8001c38 <Inverter1+0x1c0>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001c24:	2140      	movs	r1, #64	; 0x40
 8001c26:	4836      	ldr	r0, [pc, #216]	; (8001d00 <Inverter1+0x288>)
 8001c28:	f001 fd9e 	bl	8003768 <HAL_GPIO_ReadPin>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d102      	bne.n	8001c38 <Inverter1+0x1c0>
			state2_inv1();
 8001c32:	f7ff faad 	bl	8001190 <state2_inv1>
 8001c36:	e05f      	b.n	8001cf8 <Inverter1+0x280>
		else if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001c38:	2110      	movs	r1, #16
 8001c3a:	4831      	ldr	r0, [pc, #196]	; (8001d00 <Inverter1+0x288>)
 8001c3c:	f001 fd94 	bl	8003768 <HAL_GPIO_ReadPin>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d010      	beq.n	8001c68 <Inverter1+0x1f0>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001c46:	2120      	movs	r1, #32
 8001c48:	482d      	ldr	r0, [pc, #180]	; (8001d00 <Inverter1+0x288>)
 8001c4a:	f001 fd8d 	bl	8003768 <HAL_GPIO_ReadPin>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d109      	bne.n	8001c68 <Inverter1+0x1f0>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001c54:	2140      	movs	r1, #64	; 0x40
 8001c56:	482a      	ldr	r0, [pc, #168]	; (8001d00 <Inverter1+0x288>)
 8001c58:	f001 fd86 	bl	8003768 <HAL_GPIO_ReadPin>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d002      	beq.n	8001c68 <Inverter1+0x1f0>
			state3_inv1();
 8001c62:	f7ff fab9 	bl	80011d8 <state3_inv1>
 8001c66:	e047      	b.n	8001cf8 <Inverter1+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001c68:	2110      	movs	r1, #16
 8001c6a:	4825      	ldr	r0, [pc, #148]	; (8001d00 <Inverter1+0x288>)
 8001c6c:	f001 fd7c 	bl	8003768 <HAL_GPIO_ReadPin>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d110      	bne.n	8001c98 <Inverter1+0x220>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001c76:	2120      	movs	r1, #32
 8001c78:	4821      	ldr	r0, [pc, #132]	; (8001d00 <Inverter1+0x288>)
 8001c7a:	f001 fd75 	bl	8003768 <HAL_GPIO_ReadPin>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d109      	bne.n	8001c98 <Inverter1+0x220>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001c84:	2140      	movs	r1, #64	; 0x40
 8001c86:	481e      	ldr	r0, [pc, #120]	; (8001d00 <Inverter1+0x288>)
 8001c88:	f001 fd6e 	bl	8003768 <HAL_GPIO_ReadPin>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d002      	beq.n	8001c98 <Inverter1+0x220>
			state4_inv1();
 8001c92:	f7ff fac5 	bl	8001220 <state4_inv1>
 8001c96:	e02f      	b.n	8001cf8 <Inverter1+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001c98:	2110      	movs	r1, #16
 8001c9a:	4819      	ldr	r0, [pc, #100]	; (8001d00 <Inverter1+0x288>)
 8001c9c:	f001 fd64 	bl	8003768 <HAL_GPIO_ReadPin>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d110      	bne.n	8001cc8 <Inverter1+0x250>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001ca6:	2120      	movs	r1, #32
 8001ca8:	4815      	ldr	r0, [pc, #84]	; (8001d00 <Inverter1+0x288>)
 8001caa:	f001 fd5d 	bl	8003768 <HAL_GPIO_ReadPin>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d009      	beq.n	8001cc8 <Inverter1+0x250>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001cb4:	2140      	movs	r1, #64	; 0x40
 8001cb6:	4812      	ldr	r0, [pc, #72]	; (8001d00 <Inverter1+0x288>)
 8001cb8:	f001 fd56 	bl	8003768 <HAL_GPIO_ReadPin>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d002      	beq.n	8001cc8 <Inverter1+0x250>
			state5_inv1();
 8001cc2:	f7ff fad1 	bl	8001268 <state5_inv1>
 8001cc6:	e017      	b.n	8001cf8 <Inverter1+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001cc8:	2110      	movs	r1, #16
 8001cca:	480d      	ldr	r0, [pc, #52]	; (8001d00 <Inverter1+0x288>)
 8001ccc:	f001 fd4c 	bl	8003768 <HAL_GPIO_ReadPin>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d110      	bne.n	8001cf8 <Inverter1+0x280>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001cd6:	2120      	movs	r1, #32
 8001cd8:	4809      	ldr	r0, [pc, #36]	; (8001d00 <Inverter1+0x288>)
 8001cda:	f001 fd45 	bl	8003768 <HAL_GPIO_ReadPin>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d009      	beq.n	8001cf8 <Inverter1+0x280>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001ce4:	2140      	movs	r1, #64	; 0x40
 8001ce6:	4806      	ldr	r0, [pc, #24]	; (8001d00 <Inverter1+0x288>)
 8001ce8:	f001 fd3e 	bl	8003768 <HAL_GPIO_ReadPin>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d102      	bne.n	8001cf8 <Inverter1+0x280>
			state6_inv1();
 8001cf2:	f7ff fadd 	bl	80012b0 <state6_inv1>
}
 8001cf6:	e7ff      	b.n	8001cf8 <Inverter1+0x280>
 8001cf8:	bf00      	nop
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	48000400 	.word	0x48000400
 8001d04:	200002d8 	.word	0x200002d8

08001d08 <Inverter3>:
void Inverter3(uint8_t inv_mode) {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	4603      	mov	r3, r0
 8001d10:	71fb      	strb	r3, [r7, #7]
	if (inv_mode == 1) {
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d102      	bne.n	8001d1e <Inverter3+0x16>
		stateOff_inv3();
 8001d18:	f7ff fd40 	bl	800179c <stateOff_inv3>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
			state6_inv3();
		}
	}
}
 8001d1c:	e134      	b.n	8001f88 <Inverter3+0x280>
	else if (inv_mode == 2) {
 8001d1e:	79fb      	ldrb	r3, [r7, #7]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d102      	bne.n	8001d2a <Inverter3+0x22>
		state0_inv3();
 8001d24:	f7ff fc34 	bl	8001590 <state0_inv3>
}
 8001d28:	e12e      	b.n	8001f88 <Inverter3+0x280>
	else if (inv_mode == 3) {
 8001d2a:	79fb      	ldrb	r3, [r7, #7]
 8001d2c:	2b03      	cmp	r3, #3
 8001d2e:	f040 8093 	bne.w	8001e58 <Inverter3+0x150>
		if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin) && HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001d32:	2110      	movs	r1, #16
 8001d34:	4896      	ldr	r0, [pc, #600]	; (8001f90 <Inverter3+0x288>)
 8001d36:	f001 fd17 	bl	8003768 <HAL_GPIO_ReadPin>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d010      	beq.n	8001d62 <Inverter3+0x5a>
 8001d40:	2120      	movs	r1, #32
 8001d42:	4893      	ldr	r0, [pc, #588]	; (8001f90 <Inverter3+0x288>)
 8001d44:	f001 fd10 	bl	8003768 <HAL_GPIO_ReadPin>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d009      	beq.n	8001d62 <Inverter3+0x5a>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001d4e:	2140      	movs	r1, #64	; 0x40
 8001d50:	488f      	ldr	r0, [pc, #572]	; (8001f90 <Inverter3+0x288>)
 8001d52:	f001 fd09 	bl	8003768 <HAL_GPIO_ReadPin>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d102      	bne.n	8001d62 <Inverter3+0x5a>
			state1_inv3();
 8001d5c:	f7ff fc3a 	bl	80015d4 <state1_inv3>
 8001d60:	e112      	b.n	8001f88 <Inverter3+0x280>
		else if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001d62:	2110      	movs	r1, #16
 8001d64:	488a      	ldr	r0, [pc, #552]	; (8001f90 <Inverter3+0x288>)
 8001d66:	f001 fcff 	bl	8003768 <HAL_GPIO_ReadPin>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d010      	beq.n	8001d92 <Inverter3+0x8a>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001d70:	2120      	movs	r1, #32
 8001d72:	4887      	ldr	r0, [pc, #540]	; (8001f90 <Inverter3+0x288>)
 8001d74:	f001 fcf8 	bl	8003768 <HAL_GPIO_ReadPin>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d109      	bne.n	8001d92 <Inverter3+0x8a>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001d7e:	2140      	movs	r1, #64	; 0x40
 8001d80:	4883      	ldr	r0, [pc, #524]	; (8001f90 <Inverter3+0x288>)
 8001d82:	f001 fcf1 	bl	8003768 <HAL_GPIO_ReadPin>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d102      	bne.n	8001d92 <Inverter3+0x8a>
			state2_inv3();
 8001d8c:	f7ff fc48 	bl	8001620 <state2_inv3>
 8001d90:	e0fa      	b.n	8001f88 <Inverter3+0x280>
		else if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001d92:	2110      	movs	r1, #16
 8001d94:	487e      	ldr	r0, [pc, #504]	; (8001f90 <Inverter3+0x288>)
 8001d96:	f001 fce7 	bl	8003768 <HAL_GPIO_ReadPin>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d010      	beq.n	8001dc2 <Inverter3+0xba>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001da0:	2120      	movs	r1, #32
 8001da2:	487b      	ldr	r0, [pc, #492]	; (8001f90 <Inverter3+0x288>)
 8001da4:	f001 fce0 	bl	8003768 <HAL_GPIO_ReadPin>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d109      	bne.n	8001dc2 <Inverter3+0xba>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001dae:	2140      	movs	r1, #64	; 0x40
 8001db0:	4877      	ldr	r0, [pc, #476]	; (8001f90 <Inverter3+0x288>)
 8001db2:	f001 fcd9 	bl	8003768 <HAL_GPIO_ReadPin>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d002      	beq.n	8001dc2 <Inverter3+0xba>
			state3_inv3();
 8001dbc:	f7ff fc56 	bl	800166c <state3_inv3>
 8001dc0:	e0e2      	b.n	8001f88 <Inverter3+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001dc2:	2110      	movs	r1, #16
 8001dc4:	4872      	ldr	r0, [pc, #456]	; (8001f90 <Inverter3+0x288>)
 8001dc6:	f001 fccf 	bl	8003768 <HAL_GPIO_ReadPin>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d110      	bne.n	8001df2 <Inverter3+0xea>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001dd0:	2120      	movs	r1, #32
 8001dd2:	486f      	ldr	r0, [pc, #444]	; (8001f90 <Inverter3+0x288>)
 8001dd4:	f001 fcc8 	bl	8003768 <HAL_GPIO_ReadPin>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d109      	bne.n	8001df2 <Inverter3+0xea>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001dde:	2140      	movs	r1, #64	; 0x40
 8001de0:	486b      	ldr	r0, [pc, #428]	; (8001f90 <Inverter3+0x288>)
 8001de2:	f001 fcc1 	bl	8003768 <HAL_GPIO_ReadPin>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d002      	beq.n	8001df2 <Inverter3+0xea>
			state4_inv3();
 8001dec:	f7ff fc64 	bl	80016b8 <state4_inv3>
 8001df0:	e0ca      	b.n	8001f88 <Inverter3+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001df2:	2110      	movs	r1, #16
 8001df4:	4866      	ldr	r0, [pc, #408]	; (8001f90 <Inverter3+0x288>)
 8001df6:	f001 fcb7 	bl	8003768 <HAL_GPIO_ReadPin>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d110      	bne.n	8001e22 <Inverter3+0x11a>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001e00:	2120      	movs	r1, #32
 8001e02:	4863      	ldr	r0, [pc, #396]	; (8001f90 <Inverter3+0x288>)
 8001e04:	f001 fcb0 	bl	8003768 <HAL_GPIO_ReadPin>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d009      	beq.n	8001e22 <Inverter3+0x11a>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001e0e:	2140      	movs	r1, #64	; 0x40
 8001e10:	485f      	ldr	r0, [pc, #380]	; (8001f90 <Inverter3+0x288>)
 8001e12:	f001 fca9 	bl	8003768 <HAL_GPIO_ReadPin>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d002      	beq.n	8001e22 <Inverter3+0x11a>
			state5_inv3();
 8001e1c:	f7ff fc72 	bl	8001704 <state5_inv3>
 8001e20:	e0b2      	b.n	8001f88 <Inverter3+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001e22:	2110      	movs	r1, #16
 8001e24:	485a      	ldr	r0, [pc, #360]	; (8001f90 <Inverter3+0x288>)
 8001e26:	f001 fc9f 	bl	8003768 <HAL_GPIO_ReadPin>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f040 80ab 	bne.w	8001f88 <Inverter3+0x280>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001e32:	2120      	movs	r1, #32
 8001e34:	4856      	ldr	r0, [pc, #344]	; (8001f90 <Inverter3+0x288>)
 8001e36:	f001 fc97 	bl	8003768 <HAL_GPIO_ReadPin>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	f000 80a3 	beq.w	8001f88 <Inverter3+0x280>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001e42:	2140      	movs	r1, #64	; 0x40
 8001e44:	4852      	ldr	r0, [pc, #328]	; (8001f90 <Inverter3+0x288>)
 8001e46:	f001 fc8f 	bl	8003768 <HAL_GPIO_ReadPin>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f040 809b 	bne.w	8001f88 <Inverter3+0x280>
			state6_inv3();
 8001e52:	f7ff fc7d 	bl	8001750 <state6_inv3>
}
 8001e56:	e097      	b.n	8001f88 <Inverter3+0x280>
		else if (inv_mode == 4) {
 8001e58:	79fb      	ldrb	r3, [r7, #7]
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	f040 8094 	bne.w	8001f88 <Inverter3+0x280>
			PWM3 = 4095;
 8001e60:	4b4c      	ldr	r3, [pc, #304]	; (8001f94 <Inverter3+0x28c>)
 8001e62:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001e66:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin) && HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001e68:	2110      	movs	r1, #16
 8001e6a:	4849      	ldr	r0, [pc, #292]	; (8001f90 <Inverter3+0x288>)
 8001e6c:	f001 fc7c 	bl	8003768 <HAL_GPIO_ReadPin>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d010      	beq.n	8001e98 <Inverter3+0x190>
 8001e76:	2120      	movs	r1, #32
 8001e78:	4845      	ldr	r0, [pc, #276]	; (8001f90 <Inverter3+0x288>)
 8001e7a:	f001 fc75 	bl	8003768 <HAL_GPIO_ReadPin>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d009      	beq.n	8001e98 <Inverter3+0x190>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001e84:	2140      	movs	r1, #64	; 0x40
 8001e86:	4842      	ldr	r0, [pc, #264]	; (8001f90 <Inverter3+0x288>)
 8001e88:	f001 fc6e 	bl	8003768 <HAL_GPIO_ReadPin>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d102      	bne.n	8001e98 <Inverter3+0x190>
			state1_inv3();
 8001e92:	f7ff fb9f 	bl	80015d4 <state1_inv3>
 8001e96:	e077      	b.n	8001f88 <Inverter3+0x280>
		else if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001e98:	2110      	movs	r1, #16
 8001e9a:	483d      	ldr	r0, [pc, #244]	; (8001f90 <Inverter3+0x288>)
 8001e9c:	f001 fc64 	bl	8003768 <HAL_GPIO_ReadPin>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d010      	beq.n	8001ec8 <Inverter3+0x1c0>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001ea6:	2120      	movs	r1, #32
 8001ea8:	4839      	ldr	r0, [pc, #228]	; (8001f90 <Inverter3+0x288>)
 8001eaa:	f001 fc5d 	bl	8003768 <HAL_GPIO_ReadPin>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d109      	bne.n	8001ec8 <Inverter3+0x1c0>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001eb4:	2140      	movs	r1, #64	; 0x40
 8001eb6:	4836      	ldr	r0, [pc, #216]	; (8001f90 <Inverter3+0x288>)
 8001eb8:	f001 fc56 	bl	8003768 <HAL_GPIO_ReadPin>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d102      	bne.n	8001ec8 <Inverter3+0x1c0>
			state2_inv3();
 8001ec2:	f7ff fbad 	bl	8001620 <state2_inv3>
 8001ec6:	e05f      	b.n	8001f88 <Inverter3+0x280>
		else if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001ec8:	2110      	movs	r1, #16
 8001eca:	4831      	ldr	r0, [pc, #196]	; (8001f90 <Inverter3+0x288>)
 8001ecc:	f001 fc4c 	bl	8003768 <HAL_GPIO_ReadPin>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d010      	beq.n	8001ef8 <Inverter3+0x1f0>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001ed6:	2120      	movs	r1, #32
 8001ed8:	482d      	ldr	r0, [pc, #180]	; (8001f90 <Inverter3+0x288>)
 8001eda:	f001 fc45 	bl	8003768 <HAL_GPIO_ReadPin>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d109      	bne.n	8001ef8 <Inverter3+0x1f0>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001ee4:	2140      	movs	r1, #64	; 0x40
 8001ee6:	482a      	ldr	r0, [pc, #168]	; (8001f90 <Inverter3+0x288>)
 8001ee8:	f001 fc3e 	bl	8003768 <HAL_GPIO_ReadPin>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d002      	beq.n	8001ef8 <Inverter3+0x1f0>
			state3_inv3();
 8001ef2:	f7ff fbbb 	bl	800166c <state3_inv3>
 8001ef6:	e047      	b.n	8001f88 <Inverter3+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001ef8:	2110      	movs	r1, #16
 8001efa:	4825      	ldr	r0, [pc, #148]	; (8001f90 <Inverter3+0x288>)
 8001efc:	f001 fc34 	bl	8003768 <HAL_GPIO_ReadPin>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d110      	bne.n	8001f28 <Inverter3+0x220>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001f06:	2120      	movs	r1, #32
 8001f08:	4821      	ldr	r0, [pc, #132]	; (8001f90 <Inverter3+0x288>)
 8001f0a:	f001 fc2d 	bl	8003768 <HAL_GPIO_ReadPin>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d109      	bne.n	8001f28 <Inverter3+0x220>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001f14:	2140      	movs	r1, #64	; 0x40
 8001f16:	481e      	ldr	r0, [pc, #120]	; (8001f90 <Inverter3+0x288>)
 8001f18:	f001 fc26 	bl	8003768 <HAL_GPIO_ReadPin>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d002      	beq.n	8001f28 <Inverter3+0x220>
			state4_inv3();
 8001f22:	f7ff fbc9 	bl	80016b8 <state4_inv3>
 8001f26:	e02f      	b.n	8001f88 <Inverter3+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001f28:	2110      	movs	r1, #16
 8001f2a:	4819      	ldr	r0, [pc, #100]	; (8001f90 <Inverter3+0x288>)
 8001f2c:	f001 fc1c 	bl	8003768 <HAL_GPIO_ReadPin>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d110      	bne.n	8001f58 <Inverter3+0x250>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001f36:	2120      	movs	r1, #32
 8001f38:	4815      	ldr	r0, [pc, #84]	; (8001f90 <Inverter3+0x288>)
 8001f3a:	f001 fc15 	bl	8003768 <HAL_GPIO_ReadPin>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d009      	beq.n	8001f58 <Inverter3+0x250>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001f44:	2140      	movs	r1, #64	; 0x40
 8001f46:	4812      	ldr	r0, [pc, #72]	; (8001f90 <Inverter3+0x288>)
 8001f48:	f001 fc0e 	bl	8003768 <HAL_GPIO_ReadPin>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d002      	beq.n	8001f58 <Inverter3+0x250>
			state5_inv3();
 8001f52:	f7ff fbd7 	bl	8001704 <state5_inv3>
 8001f56:	e017      	b.n	8001f88 <Inverter3+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001f58:	2110      	movs	r1, #16
 8001f5a:	480d      	ldr	r0, [pc, #52]	; (8001f90 <Inverter3+0x288>)
 8001f5c:	f001 fc04 	bl	8003768 <HAL_GPIO_ReadPin>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d110      	bne.n	8001f88 <Inverter3+0x280>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001f66:	2120      	movs	r1, #32
 8001f68:	4809      	ldr	r0, [pc, #36]	; (8001f90 <Inverter3+0x288>)
 8001f6a:	f001 fbfd 	bl	8003768 <HAL_GPIO_ReadPin>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d009      	beq.n	8001f88 <Inverter3+0x280>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001f74:	2140      	movs	r1, #64	; 0x40
 8001f76:	4806      	ldr	r0, [pc, #24]	; (8001f90 <Inverter3+0x288>)
 8001f78:	f001 fbf6 	bl	8003768 <HAL_GPIO_ReadPin>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d102      	bne.n	8001f88 <Inverter3+0x280>
			state6_inv3();
 8001f82:	f7ff fbe5 	bl	8001750 <state6_inv3>
}
 8001f86:	e7ff      	b.n	8001f88 <Inverter3+0x280>
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	48000400 	.word	0x48000400
 8001f94:	200002dc 	.word	0x200002dc

08001f98 <Inverter2>:
void Inverter2(uint8_t inv_mode) {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	71fb      	strb	r3, [r7, #7]
	if (inv_mode == 1) {
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d102      	bne.n	8001fae <Inverter2+0x16>
		stateOff_inv2();
 8001fa8:	f7ff face 	bl	8001548 <stateOff_inv2>
				&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
				&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
			state6_inv2();
		}
	}
}
 8001fac:	e158      	b.n	8002260 <Inverter2+0x2c8>
	else if (inv_mode == 2) {
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d102      	bne.n	8001fba <Inverter2+0x22>
		state0_inv2();
 8001fb4:	f7ff f9c0 	bl	8001338 <state0_inv2>
}
 8001fb8:	e152      	b.n	8002260 <Inverter2+0x2c8>
	else if (inv_mode == 3) {
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	2b03      	cmp	r3, #3
 8001fbe:	f040 80a5 	bne.w	800210c <Inverter2+0x174>
		if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8001fc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fc6:	48a8      	ldr	r0, [pc, #672]	; (8002268 <Inverter2+0x2d0>)
 8001fc8:	f001 fbce 	bl	8003768 <HAL_GPIO_ReadPin>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d012      	beq.n	8001ff8 <Inverter2+0x60>
					&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8001fd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fd6:	48a4      	ldr	r0, [pc, #656]	; (8002268 <Inverter2+0x2d0>)
 8001fd8:	f001 fbc6 	bl	8003768 <HAL_GPIO_ReadPin>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00a      	beq.n	8001ff8 <Inverter2+0x60>
					&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8001fe2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fe6:	48a0      	ldr	r0, [pc, #640]	; (8002268 <Inverter2+0x2d0>)
 8001fe8:	f001 fbbe 	bl	8003768 <HAL_GPIO_ReadPin>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d102      	bne.n	8001ff8 <Inverter2+0x60>
				state1_inv2();
 8001ff2:	f7ff f9c5 	bl	8001380 <state1_inv2>
 8001ff6:	e133      	b.n	8002260 <Inverter2+0x2c8>
			else if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8001ff8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ffc:	489a      	ldr	r0, [pc, #616]	; (8002268 <Inverter2+0x2d0>)
 8001ffe:	f001 fbb3 	bl	8003768 <HAL_GPIO_ReadPin>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d012      	beq.n	800202e <Inverter2+0x96>
					&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8002008:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800200c:	4896      	ldr	r0, [pc, #600]	; (8002268 <Inverter2+0x2d0>)
 800200e:	f001 fbab 	bl	8003768 <HAL_GPIO_ReadPin>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d10a      	bne.n	800202e <Inverter2+0x96>
					&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8002018:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800201c:	4892      	ldr	r0, [pc, #584]	; (8002268 <Inverter2+0x2d0>)
 800201e:	f001 fba3 	bl	8003768 <HAL_GPIO_ReadPin>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d102      	bne.n	800202e <Inverter2+0x96>
				state2_inv2();
 8002028:	f7ff f9d0 	bl	80013cc <state2_inv2>
 800202c:	e118      	b.n	8002260 <Inverter2+0x2c8>
			else if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 800202e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002032:	488d      	ldr	r0, [pc, #564]	; (8002268 <Inverter2+0x2d0>)
 8002034:	f001 fb98 	bl	8003768 <HAL_GPIO_ReadPin>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d012      	beq.n	8002064 <Inverter2+0xcc>
					&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 800203e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002042:	4889      	ldr	r0, [pc, #548]	; (8002268 <Inverter2+0x2d0>)
 8002044:	f001 fb90 	bl	8003768 <HAL_GPIO_ReadPin>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10a      	bne.n	8002064 <Inverter2+0xcc>
					&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 800204e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002052:	4885      	ldr	r0, [pc, #532]	; (8002268 <Inverter2+0x2d0>)
 8002054:	f001 fb88 	bl	8003768 <HAL_GPIO_ReadPin>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d002      	beq.n	8002064 <Inverter2+0xcc>
				state3_inv2();
 800205e:	f7ff f9db 	bl	8001418 <state3_inv2>
 8002062:	e0fd      	b.n	8002260 <Inverter2+0x2c8>
			else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8002064:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002068:	487f      	ldr	r0, [pc, #508]	; (8002268 <Inverter2+0x2d0>)
 800206a:	f001 fb7d 	bl	8003768 <HAL_GPIO_ReadPin>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d112      	bne.n	800209a <Inverter2+0x102>
					&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8002074:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002078:	487b      	ldr	r0, [pc, #492]	; (8002268 <Inverter2+0x2d0>)
 800207a:	f001 fb75 	bl	8003768 <HAL_GPIO_ReadPin>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10a      	bne.n	800209a <Inverter2+0x102>
					&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8002084:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002088:	4877      	ldr	r0, [pc, #476]	; (8002268 <Inverter2+0x2d0>)
 800208a:	f001 fb6d 	bl	8003768 <HAL_GPIO_ReadPin>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d002      	beq.n	800209a <Inverter2+0x102>
				state4_inv2();
 8002094:	f7ff f9e6 	bl	8001464 <state4_inv2>
 8002098:	e0e2      	b.n	8002260 <Inverter2+0x2c8>
			else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 800209a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800209e:	4872      	ldr	r0, [pc, #456]	; (8002268 <Inverter2+0x2d0>)
 80020a0:	f001 fb62 	bl	8003768 <HAL_GPIO_ReadPin>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d112      	bne.n	80020d0 <Inverter2+0x138>
					&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 80020aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020ae:	486e      	ldr	r0, [pc, #440]	; (8002268 <Inverter2+0x2d0>)
 80020b0:	f001 fb5a 	bl	8003768 <HAL_GPIO_ReadPin>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00a      	beq.n	80020d0 <Inverter2+0x138>
					&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 80020ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020be:	486a      	ldr	r0, [pc, #424]	; (8002268 <Inverter2+0x2d0>)
 80020c0:	f001 fb52 	bl	8003768 <HAL_GPIO_ReadPin>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d002      	beq.n	80020d0 <Inverter2+0x138>
				state5_inv2();
 80020ca:	f7ff f9f1 	bl	80014b0 <state5_inv2>
 80020ce:	e0c7      	b.n	8002260 <Inverter2+0x2c8>
			else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 80020d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020d4:	4864      	ldr	r0, [pc, #400]	; (8002268 <Inverter2+0x2d0>)
 80020d6:	f001 fb47 	bl	8003768 <HAL_GPIO_ReadPin>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f040 80bf 	bne.w	8002260 <Inverter2+0x2c8>
					&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 80020e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020e6:	4860      	ldr	r0, [pc, #384]	; (8002268 <Inverter2+0x2d0>)
 80020e8:	f001 fb3e 	bl	8003768 <HAL_GPIO_ReadPin>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f000 80b6 	beq.w	8002260 <Inverter2+0x2c8>
					&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 80020f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020f8:	485b      	ldr	r0, [pc, #364]	; (8002268 <Inverter2+0x2d0>)
 80020fa:	f001 fb35 	bl	8003768 <HAL_GPIO_ReadPin>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	f040 80ad 	bne.w	8002260 <Inverter2+0x2c8>
				state6_inv2();
 8002106:	f7ff f9f9 	bl	80014fc <state6_inv2>
}
 800210a:	e0a9      	b.n	8002260 <Inverter2+0x2c8>
	else if (inv_mode == 4) {
 800210c:	79fb      	ldrb	r3, [r7, #7]
 800210e:	2b04      	cmp	r3, #4
 8002110:	f040 80a6 	bne.w	8002260 <Inverter2+0x2c8>
		PWM2 = 4095;
 8002114:	4b55      	ldr	r3, [pc, #340]	; (800226c <Inverter2+0x2d4>)
 8002116:	f640 72ff 	movw	r2, #4095	; 0xfff
 800211a:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin) && HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 800211c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002120:	4851      	ldr	r0, [pc, #324]	; (8002268 <Inverter2+0x2d0>)
 8002122:	f001 fb21 	bl	8003768 <HAL_GPIO_ReadPin>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d012      	beq.n	8002152 <Inverter2+0x1ba>
 800212c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002130:	484d      	ldr	r0, [pc, #308]	; (8002268 <Inverter2+0x2d0>)
 8002132:	f001 fb19 	bl	8003768 <HAL_GPIO_ReadPin>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d00a      	beq.n	8002152 <Inverter2+0x1ba>
				&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 800213c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002140:	4849      	ldr	r0, [pc, #292]	; (8002268 <Inverter2+0x2d0>)
 8002142:	f001 fb11 	bl	8003768 <HAL_GPIO_ReadPin>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d102      	bne.n	8002152 <Inverter2+0x1ba>
			state1_inv2();
 800214c:	f7ff f918 	bl	8001380 <state1_inv2>
 8002150:	e086      	b.n	8002260 <Inverter2+0x2c8>
		else if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8002152:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002156:	4844      	ldr	r0, [pc, #272]	; (8002268 <Inverter2+0x2d0>)
 8002158:	f001 fb06 	bl	8003768 <HAL_GPIO_ReadPin>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d012      	beq.n	8002188 <Inverter2+0x1f0>
				&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8002162:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002166:	4840      	ldr	r0, [pc, #256]	; (8002268 <Inverter2+0x2d0>)
 8002168:	f001 fafe 	bl	8003768 <HAL_GPIO_ReadPin>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10a      	bne.n	8002188 <Inverter2+0x1f0>
				&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8002172:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002176:	483c      	ldr	r0, [pc, #240]	; (8002268 <Inverter2+0x2d0>)
 8002178:	f001 faf6 	bl	8003768 <HAL_GPIO_ReadPin>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d102      	bne.n	8002188 <Inverter2+0x1f0>
			state2_inv2();
 8002182:	f7ff f923 	bl	80013cc <state2_inv2>
 8002186:	e06b      	b.n	8002260 <Inverter2+0x2c8>
		else if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8002188:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800218c:	4836      	ldr	r0, [pc, #216]	; (8002268 <Inverter2+0x2d0>)
 800218e:	f001 faeb 	bl	8003768 <HAL_GPIO_ReadPin>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d012      	beq.n	80021be <Inverter2+0x226>
				&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8002198:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800219c:	4832      	ldr	r0, [pc, #200]	; (8002268 <Inverter2+0x2d0>)
 800219e:	f001 fae3 	bl	8003768 <HAL_GPIO_ReadPin>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10a      	bne.n	80021be <Inverter2+0x226>
				&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 80021a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021ac:	482e      	ldr	r0, [pc, #184]	; (8002268 <Inverter2+0x2d0>)
 80021ae:	f001 fadb 	bl	8003768 <HAL_GPIO_ReadPin>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d002      	beq.n	80021be <Inverter2+0x226>
			state3_inv2();
 80021b8:	f7ff f92e 	bl	8001418 <state3_inv2>
 80021bc:	e050      	b.n	8002260 <Inverter2+0x2c8>
		else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 80021be:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021c2:	4829      	ldr	r0, [pc, #164]	; (8002268 <Inverter2+0x2d0>)
 80021c4:	f001 fad0 	bl	8003768 <HAL_GPIO_ReadPin>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d112      	bne.n	80021f4 <Inverter2+0x25c>
				&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 80021ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021d2:	4825      	ldr	r0, [pc, #148]	; (8002268 <Inverter2+0x2d0>)
 80021d4:	f001 fac8 	bl	8003768 <HAL_GPIO_ReadPin>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10a      	bne.n	80021f4 <Inverter2+0x25c>
				&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 80021de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021e2:	4821      	ldr	r0, [pc, #132]	; (8002268 <Inverter2+0x2d0>)
 80021e4:	f001 fac0 	bl	8003768 <HAL_GPIO_ReadPin>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d002      	beq.n	80021f4 <Inverter2+0x25c>
			state4_inv2();
 80021ee:	f7ff f939 	bl	8001464 <state4_inv2>
 80021f2:	e035      	b.n	8002260 <Inverter2+0x2c8>
		else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 80021f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021f8:	481b      	ldr	r0, [pc, #108]	; (8002268 <Inverter2+0x2d0>)
 80021fa:	f001 fab5 	bl	8003768 <HAL_GPIO_ReadPin>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d112      	bne.n	800222a <Inverter2+0x292>
				&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8002204:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002208:	4817      	ldr	r0, [pc, #92]	; (8002268 <Inverter2+0x2d0>)
 800220a:	f001 faad 	bl	8003768 <HAL_GPIO_ReadPin>
 800220e:	4603      	mov	r3, r0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00a      	beq.n	800222a <Inverter2+0x292>
				&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8002214:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002218:	4813      	ldr	r0, [pc, #76]	; (8002268 <Inverter2+0x2d0>)
 800221a:	f001 faa5 	bl	8003768 <HAL_GPIO_ReadPin>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d002      	beq.n	800222a <Inverter2+0x292>
			state5_inv2();
 8002224:	f7ff f944 	bl	80014b0 <state5_inv2>
 8002228:	e01a      	b.n	8002260 <Inverter2+0x2c8>
		else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 800222a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800222e:	480e      	ldr	r0, [pc, #56]	; (8002268 <Inverter2+0x2d0>)
 8002230:	f001 fa9a 	bl	8003768 <HAL_GPIO_ReadPin>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d112      	bne.n	8002260 <Inverter2+0x2c8>
				&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 800223a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800223e:	480a      	ldr	r0, [pc, #40]	; (8002268 <Inverter2+0x2d0>)
 8002240:	f001 fa92 	bl	8003768 <HAL_GPIO_ReadPin>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d00a      	beq.n	8002260 <Inverter2+0x2c8>
				&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 800224a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800224e:	4806      	ldr	r0, [pc, #24]	; (8002268 <Inverter2+0x2d0>)
 8002250:	f001 fa8a 	bl	8003768 <HAL_GPIO_ReadPin>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d102      	bne.n	8002260 <Inverter2+0x2c8>
			state6_inv2();
 800225a:	f7ff f94f 	bl	80014fc <state6_inv2>
}
 800225e:	e7ff      	b.n	8002260 <Inverter2+0x2c8>
 8002260:	bf00      	nop
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	48000800 	.word	0x48000800
 800226c:	200002da 	.word	0x200002da

08002270 <Inverter4>:
void Inverter4(uint8_t inv_mode) {
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	71fb      	strb	r3, [r7, #7]
	if (inv_mode == 1) {
 800227a:	79fb      	ldrb	r3, [r7, #7]
 800227c:	2b01      	cmp	r3, #1
 800227e:	d102      	bne.n	8002286 <Inverter4+0x16>
		stateOff_inv4();
 8002280:	f7ff fbd2 	bl	8001a28 <stateOff_inv4>
				&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
				&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
			state6_inv4();
		}
	}
}
 8002284:	e158      	b.n	8002538 <Inverter4+0x2c8>
	else if (inv_mode == 2) {
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	2b02      	cmp	r3, #2
 800228a:	d102      	bne.n	8002292 <Inverter4+0x22>
		state0_inv4();
 800228c:	f7ff faa8 	bl	80017e0 <state0_inv4>
}
 8002290:	e152      	b.n	8002538 <Inverter4+0x2c8>
	else if (inv_mode == 3) {
 8002292:	79fb      	ldrb	r3, [r7, #7]
 8002294:	2b03      	cmp	r3, #3
 8002296:	f040 80a5 	bne.w	80023e4 <Inverter4+0x174>
		if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 800229a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800229e:	48a8      	ldr	r0, [pc, #672]	; (8002540 <Inverter4+0x2d0>)
 80022a0:	f001 fa62 	bl	8003768 <HAL_GPIO_ReadPin>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d012      	beq.n	80022d0 <Inverter4+0x60>
					&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 80022aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022ae:	48a4      	ldr	r0, [pc, #656]	; (8002540 <Inverter4+0x2d0>)
 80022b0:	f001 fa5a 	bl	8003768 <HAL_GPIO_ReadPin>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00a      	beq.n	80022d0 <Inverter4+0x60>
					&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 80022ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022be:	48a0      	ldr	r0, [pc, #640]	; (8002540 <Inverter4+0x2d0>)
 80022c0:	f001 fa52 	bl	8003768 <HAL_GPIO_ReadPin>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d102      	bne.n	80022d0 <Inverter4+0x60>
				state1_inv4();
 80022ca:	f7ff fab1 	bl	8001830 <state1_inv4>
 80022ce:	e133      	b.n	8002538 <Inverter4+0x2c8>
			else if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 80022d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022d4:	489a      	ldr	r0, [pc, #616]	; (8002540 <Inverter4+0x2d0>)
 80022d6:	f001 fa47 	bl	8003768 <HAL_GPIO_ReadPin>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d012      	beq.n	8002306 <Inverter4+0x96>
					&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 80022e0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022e4:	4896      	ldr	r0, [pc, #600]	; (8002540 <Inverter4+0x2d0>)
 80022e6:	f001 fa3f 	bl	8003768 <HAL_GPIO_ReadPin>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10a      	bne.n	8002306 <Inverter4+0x96>
					&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 80022f0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022f4:	4892      	ldr	r0, [pc, #584]	; (8002540 <Inverter4+0x2d0>)
 80022f6:	f001 fa37 	bl	8003768 <HAL_GPIO_ReadPin>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d102      	bne.n	8002306 <Inverter4+0x96>
				state2_inv4();
 8002300:	f7ff fac0 	bl	8001884 <state2_inv4>
 8002304:	e118      	b.n	8002538 <Inverter4+0x2c8>
			else if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8002306:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800230a:	488d      	ldr	r0, [pc, #564]	; (8002540 <Inverter4+0x2d0>)
 800230c:	f001 fa2c 	bl	8003768 <HAL_GPIO_ReadPin>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d012      	beq.n	800233c <Inverter4+0xcc>
					&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8002316:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800231a:	4889      	ldr	r0, [pc, #548]	; (8002540 <Inverter4+0x2d0>)
 800231c:	f001 fa24 	bl	8003768 <HAL_GPIO_ReadPin>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10a      	bne.n	800233c <Inverter4+0xcc>
					&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8002326:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800232a:	4885      	ldr	r0, [pc, #532]	; (8002540 <Inverter4+0x2d0>)
 800232c:	f001 fa1c 	bl	8003768 <HAL_GPIO_ReadPin>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d002      	beq.n	800233c <Inverter4+0xcc>
				state3_inv4();
 8002336:	f7ff facf 	bl	80018d8 <state3_inv4>
 800233a:	e0fd      	b.n	8002538 <Inverter4+0x2c8>
			else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 800233c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002340:	487f      	ldr	r0, [pc, #508]	; (8002540 <Inverter4+0x2d0>)
 8002342:	f001 fa11 	bl	8003768 <HAL_GPIO_ReadPin>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d112      	bne.n	8002372 <Inverter4+0x102>
					&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 800234c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002350:	487b      	ldr	r0, [pc, #492]	; (8002540 <Inverter4+0x2d0>)
 8002352:	f001 fa09 	bl	8003768 <HAL_GPIO_ReadPin>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10a      	bne.n	8002372 <Inverter4+0x102>
					&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 800235c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002360:	4877      	ldr	r0, [pc, #476]	; (8002540 <Inverter4+0x2d0>)
 8002362:	f001 fa01 	bl	8003768 <HAL_GPIO_ReadPin>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d002      	beq.n	8002372 <Inverter4+0x102>
				state4_inv4();
 800236c:	f7ff fade 	bl	800192c <state4_inv4>
 8002370:	e0e2      	b.n	8002538 <Inverter4+0x2c8>
			else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8002372:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002376:	4872      	ldr	r0, [pc, #456]	; (8002540 <Inverter4+0x2d0>)
 8002378:	f001 f9f6 	bl	8003768 <HAL_GPIO_ReadPin>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d112      	bne.n	80023a8 <Inverter4+0x138>
					&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8002382:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002386:	486e      	ldr	r0, [pc, #440]	; (8002540 <Inverter4+0x2d0>)
 8002388:	f001 f9ee 	bl	8003768 <HAL_GPIO_ReadPin>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d00a      	beq.n	80023a8 <Inverter4+0x138>
					&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8002392:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002396:	486a      	ldr	r0, [pc, #424]	; (8002540 <Inverter4+0x2d0>)
 8002398:	f001 f9e6 	bl	8003768 <HAL_GPIO_ReadPin>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d002      	beq.n	80023a8 <Inverter4+0x138>
				state5_inv4();
 80023a2:	f7ff faed 	bl	8001980 <state5_inv4>
 80023a6:	e0c7      	b.n	8002538 <Inverter4+0x2c8>
			else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 80023a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023ac:	4864      	ldr	r0, [pc, #400]	; (8002540 <Inverter4+0x2d0>)
 80023ae:	f001 f9db 	bl	8003768 <HAL_GPIO_ReadPin>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f040 80bf 	bne.w	8002538 <Inverter4+0x2c8>
					&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 80023ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023be:	4860      	ldr	r0, [pc, #384]	; (8002540 <Inverter4+0x2d0>)
 80023c0:	f001 f9d2 	bl	8003768 <HAL_GPIO_ReadPin>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	f000 80b6 	beq.w	8002538 <Inverter4+0x2c8>
					&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 80023cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023d0:	485b      	ldr	r0, [pc, #364]	; (8002540 <Inverter4+0x2d0>)
 80023d2:	f001 f9c9 	bl	8003768 <HAL_GPIO_ReadPin>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	f040 80ad 	bne.w	8002538 <Inverter4+0x2c8>
				state6_inv4();
 80023de:	f7ff faf9 	bl	80019d4 <state6_inv4>
}
 80023e2:	e0a9      	b.n	8002538 <Inverter4+0x2c8>
	else if (inv_mode == 4) {
 80023e4:	79fb      	ldrb	r3, [r7, #7]
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	f040 80a6 	bne.w	8002538 <Inverter4+0x2c8>
		PWM4 = 4095;
 80023ec:	4b55      	ldr	r3, [pc, #340]	; (8002544 <Inverter4+0x2d4>)
 80023ee:	f640 72ff 	movw	r2, #4095	; 0xfff
 80023f2:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin) && HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 80023f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023f8:	4851      	ldr	r0, [pc, #324]	; (8002540 <Inverter4+0x2d0>)
 80023fa:	f001 f9b5 	bl	8003768 <HAL_GPIO_ReadPin>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d012      	beq.n	800242a <Inverter4+0x1ba>
 8002404:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002408:	484d      	ldr	r0, [pc, #308]	; (8002540 <Inverter4+0x2d0>)
 800240a:	f001 f9ad 	bl	8003768 <HAL_GPIO_ReadPin>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00a      	beq.n	800242a <Inverter4+0x1ba>
				&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8002414:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002418:	4849      	ldr	r0, [pc, #292]	; (8002540 <Inverter4+0x2d0>)
 800241a:	f001 f9a5 	bl	8003768 <HAL_GPIO_ReadPin>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d102      	bne.n	800242a <Inverter4+0x1ba>
			state1_inv4();
 8002424:	f7ff fa04 	bl	8001830 <state1_inv4>
 8002428:	e086      	b.n	8002538 <Inverter4+0x2c8>
		else if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 800242a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800242e:	4844      	ldr	r0, [pc, #272]	; (8002540 <Inverter4+0x2d0>)
 8002430:	f001 f99a 	bl	8003768 <HAL_GPIO_ReadPin>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d012      	beq.n	8002460 <Inverter4+0x1f0>
				&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 800243a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800243e:	4840      	ldr	r0, [pc, #256]	; (8002540 <Inverter4+0x2d0>)
 8002440:	f001 f992 	bl	8003768 <HAL_GPIO_ReadPin>
 8002444:	4603      	mov	r3, r0
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10a      	bne.n	8002460 <Inverter4+0x1f0>
				&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 800244a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800244e:	483c      	ldr	r0, [pc, #240]	; (8002540 <Inverter4+0x2d0>)
 8002450:	f001 f98a 	bl	8003768 <HAL_GPIO_ReadPin>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d102      	bne.n	8002460 <Inverter4+0x1f0>
			state2_inv4();
 800245a:	f7ff fa13 	bl	8001884 <state2_inv4>
 800245e:	e06b      	b.n	8002538 <Inverter4+0x2c8>
		else if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8002460:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002464:	4836      	ldr	r0, [pc, #216]	; (8002540 <Inverter4+0x2d0>)
 8002466:	f001 f97f 	bl	8003768 <HAL_GPIO_ReadPin>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d012      	beq.n	8002496 <Inverter4+0x226>
				&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8002470:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002474:	4832      	ldr	r0, [pc, #200]	; (8002540 <Inverter4+0x2d0>)
 8002476:	f001 f977 	bl	8003768 <HAL_GPIO_ReadPin>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10a      	bne.n	8002496 <Inverter4+0x226>
				&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8002480:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002484:	482e      	ldr	r0, [pc, #184]	; (8002540 <Inverter4+0x2d0>)
 8002486:	f001 f96f 	bl	8003768 <HAL_GPIO_ReadPin>
 800248a:	4603      	mov	r3, r0
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <Inverter4+0x226>
			state3_inv4();
 8002490:	f7ff fa22 	bl	80018d8 <state3_inv4>
 8002494:	e050      	b.n	8002538 <Inverter4+0x2c8>
		else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8002496:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800249a:	4829      	ldr	r0, [pc, #164]	; (8002540 <Inverter4+0x2d0>)
 800249c:	f001 f964 	bl	8003768 <HAL_GPIO_ReadPin>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d112      	bne.n	80024cc <Inverter4+0x25c>
				&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 80024a6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024aa:	4825      	ldr	r0, [pc, #148]	; (8002540 <Inverter4+0x2d0>)
 80024ac:	f001 f95c 	bl	8003768 <HAL_GPIO_ReadPin>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10a      	bne.n	80024cc <Inverter4+0x25c>
				&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 80024b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024ba:	4821      	ldr	r0, [pc, #132]	; (8002540 <Inverter4+0x2d0>)
 80024bc:	f001 f954 	bl	8003768 <HAL_GPIO_ReadPin>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d002      	beq.n	80024cc <Inverter4+0x25c>
			state4_inv4();
 80024c6:	f7ff fa31 	bl	800192c <state4_inv4>
 80024ca:	e035      	b.n	8002538 <Inverter4+0x2c8>
		else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 80024cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024d0:	481b      	ldr	r0, [pc, #108]	; (8002540 <Inverter4+0x2d0>)
 80024d2:	f001 f949 	bl	8003768 <HAL_GPIO_ReadPin>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d112      	bne.n	8002502 <Inverter4+0x292>
				&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 80024dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024e0:	4817      	ldr	r0, [pc, #92]	; (8002540 <Inverter4+0x2d0>)
 80024e2:	f001 f941 	bl	8003768 <HAL_GPIO_ReadPin>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00a      	beq.n	8002502 <Inverter4+0x292>
				&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 80024ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024f0:	4813      	ldr	r0, [pc, #76]	; (8002540 <Inverter4+0x2d0>)
 80024f2:	f001 f939 	bl	8003768 <HAL_GPIO_ReadPin>
 80024f6:	4603      	mov	r3, r0
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d002      	beq.n	8002502 <Inverter4+0x292>
			state5_inv4();
 80024fc:	f7ff fa40 	bl	8001980 <state5_inv4>
 8002500:	e01a      	b.n	8002538 <Inverter4+0x2c8>
		else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8002502:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002506:	480e      	ldr	r0, [pc, #56]	; (8002540 <Inverter4+0x2d0>)
 8002508:	f001 f92e 	bl	8003768 <HAL_GPIO_ReadPin>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d112      	bne.n	8002538 <Inverter4+0x2c8>
				&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8002512:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002516:	480a      	ldr	r0, [pc, #40]	; (8002540 <Inverter4+0x2d0>)
 8002518:	f001 f926 	bl	8003768 <HAL_GPIO_ReadPin>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d00a      	beq.n	8002538 <Inverter4+0x2c8>
				&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8002522:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002526:	4806      	ldr	r0, [pc, #24]	; (8002540 <Inverter4+0x2d0>)
 8002528:	f001 f91e 	bl	8003768 <HAL_GPIO_ReadPin>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d102      	bne.n	8002538 <Inverter4+0x2c8>
			state6_inv4();
 8002532:	f7ff fa4f 	bl	80019d4 <state6_inv4>
}
 8002536:	e7ff      	b.n	8002538 <Inverter4+0x2c8>
 8002538:	bf00      	nop
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	48000800 	.word	0x48000800
 8002544:	200002de 	.word	0x200002de

08002548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800254c:	b672      	cpsid	i
}
 800254e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002550:	e7fe      	b.n	8002550 <Error_Handler+0x8>
	...

08002554 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800255a:	4b0f      	ldr	r3, [pc, #60]	; (8002598 <HAL_MspInit+0x44>)
 800255c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800255e:	4a0e      	ldr	r2, [pc, #56]	; (8002598 <HAL_MspInit+0x44>)
 8002560:	f043 0301 	orr.w	r3, r3, #1
 8002564:	6613      	str	r3, [r2, #96]	; 0x60
 8002566:	4b0c      	ldr	r3, [pc, #48]	; (8002598 <HAL_MspInit+0x44>)
 8002568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	607b      	str	r3, [r7, #4]
 8002570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002572:	4b09      	ldr	r3, [pc, #36]	; (8002598 <HAL_MspInit+0x44>)
 8002574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002576:	4a08      	ldr	r2, [pc, #32]	; (8002598 <HAL_MspInit+0x44>)
 8002578:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800257c:	6593      	str	r3, [r2, #88]	; 0x58
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_MspInit+0x44>)
 8002580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002582:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002586:	603b      	str	r3, [r7, #0]
 8002588:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800258a:	f001 f9e5 	bl	8003958 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	40021000 	.word	0x40021000

0800259c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b08a      	sub	sp, #40	; 0x28
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a4:	f107 0314 	add.w	r3, r7, #20
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	60da      	str	r2, [r3, #12]
 80025b2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a19      	ldr	r2, [pc, #100]	; (8002620 <HAL_DAC_MspInit+0x84>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d12c      	bne.n	8002618 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80025be:	4b19      	ldr	r3, [pc, #100]	; (8002624 <HAL_DAC_MspInit+0x88>)
 80025c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c2:	4a18      	ldr	r2, [pc, #96]	; (8002624 <HAL_DAC_MspInit+0x88>)
 80025c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025ca:	4b16      	ldr	r3, [pc, #88]	; (8002624 <HAL_DAC_MspInit+0x88>)
 80025cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025d2:	613b      	str	r3, [r7, #16]
 80025d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d6:	4b13      	ldr	r3, [pc, #76]	; (8002624 <HAL_DAC_MspInit+0x88>)
 80025d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025da:	4a12      	ldr	r2, [pc, #72]	; (8002624 <HAL_DAC_MspInit+0x88>)
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025e2:	4b10      	ldr	r3, [pc, #64]	; (8002624 <HAL_DAC_MspInit+0x88>)
 80025e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80025ee:	2310      	movs	r3, #16
 80025f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025f2:	2303      	movs	r3, #3
 80025f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f6:	2300      	movs	r3, #0
 80025f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025fa:	f107 0314 	add.w	r3, r7, #20
 80025fe:	4619      	mov	r1, r3
 8002600:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002604:	f000 ff2e 	bl	8003464 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002608:	2200      	movs	r2, #0
 800260a:	2100      	movs	r1, #0
 800260c:	2036      	movs	r0, #54	; 0x36
 800260e:	f000 fbfc 	bl	8002e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002612:	2036      	movs	r0, #54	; 0x36
 8002614:	f000 fc13 	bl	8002e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002618:	bf00      	nop
 800261a:	3728      	adds	r7, #40	; 0x28
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	50000800 	.word	0x50000800
 8002624:	40021000 	.word	0x40021000

08002628 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b0a0      	sub	sp, #128	; 0x80
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002630:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	60da      	str	r2, [r3, #12]
 800263e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002640:	f107 0318 	add.w	r3, r7, #24
 8002644:	2254      	movs	r2, #84	; 0x54
 8002646:	2100      	movs	r1, #0
 8002648:	4618      	mov	r0, r3
 800264a:	f004 fd9f 	bl	800718c <memset>
  if(huart->Instance==LPUART1)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a41      	ldr	r2, [pc, #260]	; (8002758 <HAL_UART_MspInit+0x130>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d137      	bne.n	80026c8 <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002658:	2320      	movs	r3, #32
 800265a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800265c:	2300      	movs	r3, #0
 800265e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002660:	f107 0318 	add.w	r3, r7, #24
 8002664:	4618      	mov	r0, r3
 8002666:	f001 febb 	bl	80043e0 <HAL_RCCEx_PeriphCLKConfig>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002670:	f7ff ff6a 	bl	8002548 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002674:	4b39      	ldr	r3, [pc, #228]	; (800275c <HAL_UART_MspInit+0x134>)
 8002676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002678:	4a38      	ldr	r2, [pc, #224]	; (800275c <HAL_UART_MspInit+0x134>)
 800267a:	f043 0301 	orr.w	r3, r3, #1
 800267e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8002680:	4b36      	ldr	r3, [pc, #216]	; (800275c <HAL_UART_MspInit+0x134>)
 8002682:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002684:	f003 0301 	and.w	r3, r3, #1
 8002688:	617b      	str	r3, [r7, #20]
 800268a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800268c:	4b33      	ldr	r3, [pc, #204]	; (800275c <HAL_UART_MspInit+0x134>)
 800268e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002690:	4a32      	ldr	r2, [pc, #200]	; (800275c <HAL_UART_MspInit+0x134>)
 8002692:	f043 0301 	orr.w	r3, r3, #1
 8002696:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002698:	4b30      	ldr	r3, [pc, #192]	; (800275c <HAL_UART_MspInit+0x134>)
 800269a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800269c:	f003 0301 	and.w	r3, r3, #1
 80026a0:	613b      	str	r3, [r7, #16]
 80026a2:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80026a4:	230c      	movs	r3, #12
 80026a6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a8:	2302      	movs	r3, #2
 80026aa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b0:	2300      	movs	r3, #0
 80026b2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80026b4:	230c      	movs	r3, #12
 80026b6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026bc:	4619      	mov	r1, r3
 80026be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026c2:	f000 fecf 	bl	8003464 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80026c6:	e042      	b.n	800274e <HAL_UART_MspInit+0x126>
  else if(huart->Instance==USART1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a24      	ldr	r2, [pc, #144]	; (8002760 <HAL_UART_MspInit+0x138>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d13d      	bne.n	800274e <HAL_UART_MspInit+0x126>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80026d2:	2301      	movs	r3, #1
 80026d4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80026d6:	2300      	movs	r3, #0
 80026d8:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026da:	f107 0318 	add.w	r3, r7, #24
 80026de:	4618      	mov	r0, r3
 80026e0:	f001 fe7e 	bl	80043e0 <HAL_RCCEx_PeriphCLKConfig>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_UART_MspInit+0xc6>
      Error_Handler();
 80026ea:	f7ff ff2d 	bl	8002548 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80026ee:	4b1b      	ldr	r3, [pc, #108]	; (800275c <HAL_UART_MspInit+0x134>)
 80026f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026f2:	4a1a      	ldr	r2, [pc, #104]	; (800275c <HAL_UART_MspInit+0x134>)
 80026f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026f8:	6613      	str	r3, [r2, #96]	; 0x60
 80026fa:	4b18      	ldr	r3, [pc, #96]	; (800275c <HAL_UART_MspInit+0x134>)
 80026fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002702:	60fb      	str	r3, [r7, #12]
 8002704:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002706:	4b15      	ldr	r3, [pc, #84]	; (800275c <HAL_UART_MspInit+0x134>)
 8002708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270a:	4a14      	ldr	r2, [pc, #80]	; (800275c <HAL_UART_MspInit+0x134>)
 800270c:	f043 0304 	orr.w	r3, r3, #4
 8002710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002712:	4b12      	ldr	r3, [pc, #72]	; (800275c <HAL_UART_MspInit+0x134>)
 8002714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002716:	f003 0304 	and.w	r3, r3, #4
 800271a:	60bb      	str	r3, [r7, #8]
 800271c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800271e:	2330      	movs	r3, #48	; 0x30
 8002720:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002722:	2302      	movs	r3, #2
 8002724:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002726:	2300      	movs	r3, #0
 8002728:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272a:	2300      	movs	r3, #0
 800272c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800272e:	2307      	movs	r3, #7
 8002730:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002732:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002736:	4619      	mov	r1, r3
 8002738:	480a      	ldr	r0, [pc, #40]	; (8002764 <HAL_UART_MspInit+0x13c>)
 800273a:	f000 fe93 	bl	8003464 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800273e:	2200      	movs	r2, #0
 8002740:	2100      	movs	r1, #0
 8002742:	2025      	movs	r0, #37	; 0x25
 8002744:	f000 fb61 	bl	8002e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002748:	2025      	movs	r0, #37	; 0x25
 800274a:	f000 fb78 	bl	8002e3e <HAL_NVIC_EnableIRQ>
}
 800274e:	bf00      	nop
 8002750:	3780      	adds	r7, #128	; 0x80
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40008000 	.word	0x40008000
 800275c:	40021000 	.word	0x40021000
 8002760:	40013800 	.word	0x40013800
 8002764:	48000800 	.word	0x48000800

08002768 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a28      	ldr	r2, [pc, #160]	; (8002818 <HAL_TIM_PWM_MspInit+0xb0>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d10c      	bne.n	8002794 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800277a:	4b28      	ldr	r3, [pc, #160]	; (800281c <HAL_TIM_PWM_MspInit+0xb4>)
 800277c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800277e:	4a27      	ldr	r2, [pc, #156]	; (800281c <HAL_TIM_PWM_MspInit+0xb4>)
 8002780:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002784:	6613      	str	r3, [r2, #96]	; 0x60
 8002786:	4b25      	ldr	r3, [pc, #148]	; (800281c <HAL_TIM_PWM_MspInit+0xb4>)
 8002788:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800278a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002792:	e03c      	b.n	800280e <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM2)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800279c:	d10c      	bne.n	80027b8 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800279e:	4b1f      	ldr	r3, [pc, #124]	; (800281c <HAL_TIM_PWM_MspInit+0xb4>)
 80027a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a2:	4a1e      	ldr	r2, [pc, #120]	; (800281c <HAL_TIM_PWM_MspInit+0xb4>)
 80027a4:	f043 0301 	orr.w	r3, r3, #1
 80027a8:	6593      	str	r3, [r2, #88]	; 0x58
 80027aa:	4b1c      	ldr	r3, [pc, #112]	; (800281c <HAL_TIM_PWM_MspInit+0xb4>)
 80027ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ae:	f003 0301 	and.w	r3, r3, #1
 80027b2:	613b      	str	r3, [r7, #16]
 80027b4:	693b      	ldr	r3, [r7, #16]
}
 80027b6:	e02a      	b.n	800280e <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM3)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a18      	ldr	r2, [pc, #96]	; (8002820 <HAL_TIM_PWM_MspInit+0xb8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d114      	bne.n	80027ec <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027c2:	4b16      	ldr	r3, [pc, #88]	; (800281c <HAL_TIM_PWM_MspInit+0xb4>)
 80027c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c6:	4a15      	ldr	r2, [pc, #84]	; (800281c <HAL_TIM_PWM_MspInit+0xb4>)
 80027c8:	f043 0302 	orr.w	r3, r3, #2
 80027cc:	6593      	str	r3, [r2, #88]	; 0x58
 80027ce:	4b13      	ldr	r3, [pc, #76]	; (800281c <HAL_TIM_PWM_MspInit+0xb4>)
 80027d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80027da:	2200      	movs	r2, #0
 80027dc:	2100      	movs	r1, #0
 80027de:	201d      	movs	r0, #29
 80027e0:	f000 fb13 	bl	8002e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80027e4:	201d      	movs	r0, #29
 80027e6:	f000 fb2a 	bl	8002e3e <HAL_NVIC_EnableIRQ>
}
 80027ea:	e010      	b.n	800280e <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM8)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a0c      	ldr	r2, [pc, #48]	; (8002824 <HAL_TIM_PWM_MspInit+0xbc>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d10b      	bne.n	800280e <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80027f6:	4b09      	ldr	r3, [pc, #36]	; (800281c <HAL_TIM_PWM_MspInit+0xb4>)
 80027f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027fa:	4a08      	ldr	r2, [pc, #32]	; (800281c <HAL_TIM_PWM_MspInit+0xb4>)
 80027fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002800:	6613      	str	r3, [r2, #96]	; 0x60
 8002802:	4b06      	ldr	r3, [pc, #24]	; (800281c <HAL_TIM_PWM_MspInit+0xb4>)
 8002804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002806:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800280a:	60bb      	str	r3, [r7, #8]
 800280c:	68bb      	ldr	r3, [r7, #8]
}
 800280e:	bf00      	nop
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	40012c00 	.word	0x40012c00
 800281c:	40021000 	.word	0x40021000
 8002820:	40000400 	.word	0x40000400
 8002824:	40013400 	.word	0x40013400

08002828 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a0d      	ldr	r2, [pc, #52]	; (800286c <HAL_TIM_Base_MspInit+0x44>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d113      	bne.n	8002862 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800283a:	4b0d      	ldr	r3, [pc, #52]	; (8002870 <HAL_TIM_Base_MspInit+0x48>)
 800283c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283e:	4a0c      	ldr	r2, [pc, #48]	; (8002870 <HAL_TIM_Base_MspInit+0x48>)
 8002840:	f043 0310 	orr.w	r3, r3, #16
 8002844:	6593      	str	r3, [r2, #88]	; 0x58
 8002846:	4b0a      	ldr	r3, [pc, #40]	; (8002870 <HAL_TIM_Base_MspInit+0x48>)
 8002848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284a:	f003 0310 	and.w	r3, r3, #16
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002852:	2200      	movs	r2, #0
 8002854:	2100      	movs	r1, #0
 8002856:	2036      	movs	r0, #54	; 0x36
 8002858:	f000 fad7 	bl	8002e0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800285c:	2036      	movs	r0, #54	; 0x36
 800285e:	f000 faee 	bl	8002e3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002862:	bf00      	nop
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40001000 	.word	0x40001000
 8002870:	40021000 	.word	0x40021000

08002874 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b08c      	sub	sp, #48	; 0x30
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800287c:	f107 031c 	add.w	r3, r7, #28
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	605a      	str	r2, [r3, #4]
 8002886:	609a      	str	r2, [r3, #8]
 8002888:	60da      	str	r2, [r3, #12]
 800288a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a5a      	ldr	r2, [pc, #360]	; (80029fc <HAL_TIM_MspPostInit+0x188>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d13a      	bne.n	800290c <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002896:	4b5a      	ldr	r3, [pc, #360]	; (8002a00 <HAL_TIM_MspPostInit+0x18c>)
 8002898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800289a:	4a59      	ldr	r2, [pc, #356]	; (8002a00 <HAL_TIM_MspPostInit+0x18c>)
 800289c:	f043 0304 	orr.w	r3, r3, #4
 80028a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028a2:	4b57      	ldr	r3, [pc, #348]	; (8002a00 <HAL_TIM_MspPostInit+0x18c>)
 80028a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a6:	f003 0304 	and.w	r3, r3, #4
 80028aa:	61bb      	str	r3, [r7, #24]
 80028ac:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028ae:	4b54      	ldr	r3, [pc, #336]	; (8002a00 <HAL_TIM_MspPostInit+0x18c>)
 80028b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028b2:	4a53      	ldr	r2, [pc, #332]	; (8002a00 <HAL_TIM_MspPostInit+0x18c>)
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028ba:	4b51      	ldr	r3, [pc, #324]	; (8002a00 <HAL_TIM_MspPostInit+0x18c>)
 80028bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	617b      	str	r3, [r7, #20]
 80028c4:	697b      	ldr	r3, [r7, #20]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC3     ------> TIM1_CH4
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 80028c6:	230b      	movs	r3, #11
 80028c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ca:	2302      	movs	r3, #2
 80028cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028d2:	2300      	movs	r3, #0
 80028d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80028d6:	2302      	movs	r3, #2
 80028d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028da:	f107 031c 	add.w	r3, r7, #28
 80028de:	4619      	mov	r1, r3
 80028e0:	4848      	ldr	r0, [pc, #288]	; (8002a04 <HAL_TIM_MspPostInit+0x190>)
 80028e2:	f000 fdbf 	bl	8003464 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80028e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ec:	2302      	movs	r3, #2
 80028ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f0:	2300      	movs	r3, #0
 80028f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028f4:	2300      	movs	r3, #0
 80028f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80028f8:	2306      	movs	r3, #6
 80028fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028fc:	f107 031c 	add.w	r3, r7, #28
 8002900:	4619      	mov	r1, r3
 8002902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002906:	f000 fdad 	bl	8003464 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800290a:	e073      	b.n	80029f4 <HAL_TIM_MspPostInit+0x180>
  else if(htim->Instance==TIM2)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002914:	d14c      	bne.n	80029b0 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002916:	4b3a      	ldr	r3, [pc, #232]	; (8002a00 <HAL_TIM_MspPostInit+0x18c>)
 8002918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291a:	4a39      	ldr	r2, [pc, #228]	; (8002a00 <HAL_TIM_MspPostInit+0x18c>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002922:	4b37      	ldr	r3, [pc, #220]	; (8002a00 <HAL_TIM_MspPostInit+0x18c>)
 8002924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	613b      	str	r3, [r7, #16]
 800292c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800292e:	4b34      	ldr	r3, [pc, #208]	; (8002a00 <HAL_TIM_MspPostInit+0x18c>)
 8002930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002932:	4a33      	ldr	r2, [pc, #204]	; (8002a00 <HAL_TIM_MspPostInit+0x18c>)
 8002934:	f043 0302 	orr.w	r3, r3, #2
 8002938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800293a:	4b31      	ldr	r3, [pc, #196]	; (8002a00 <HAL_TIM_MspPostInit+0x18c>)
 800293c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	60fb      	str	r3, [r7, #12]
 8002944:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002946:	2303      	movs	r3, #3
 8002948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800294a:	2302      	movs	r3, #2
 800294c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294e:	2300      	movs	r3, #0
 8002950:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002952:	2300      	movs	r3, #0
 8002954:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002956:	2301      	movs	r3, #1
 8002958:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800295a:	f107 031c 	add.w	r3, r7, #28
 800295e:	4619      	mov	r1, r3
 8002960:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002964:	f000 fd7e 	bl	8003464 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002968:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800296c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296e:	2302      	movs	r3, #2
 8002970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002972:	2300      	movs	r3, #0
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002976:	2300      	movs	r3, #0
 8002978:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800297a:	2301      	movs	r3, #1
 800297c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800297e:	f107 031c 	add.w	r3, r7, #28
 8002982:	4619      	mov	r1, r3
 8002984:	4820      	ldr	r0, [pc, #128]	; (8002a08 <HAL_TIM_MspPostInit+0x194>)
 8002986:	f000 fd6d 	bl	8003464 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800298a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800298e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002990:	2302      	movs	r3, #2
 8002992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002994:	2300      	movs	r3, #0
 8002996:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002998:	2300      	movs	r3, #0
 800299a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 800299c:	230a      	movs	r3, #10
 800299e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a0:	f107 031c 	add.w	r3, r7, #28
 80029a4:	4619      	mov	r1, r3
 80029a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029aa:	f000 fd5b 	bl	8003464 <HAL_GPIO_Init>
}
 80029ae:	e021      	b.n	80029f4 <HAL_TIM_MspPostInit+0x180>
  else if(htim->Instance==TIM8)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a15      	ldr	r2, [pc, #84]	; (8002a0c <HAL_TIM_MspPostInit+0x198>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d11c      	bne.n	80029f4 <HAL_TIM_MspPostInit+0x180>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029ba:	4b11      	ldr	r3, [pc, #68]	; (8002a00 <HAL_TIM_MspPostInit+0x18c>)
 80029bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029be:	4a10      	ldr	r2, [pc, #64]	; (8002a00 <HAL_TIM_MspPostInit+0x18c>)
 80029c0:	f043 0304 	orr.w	r3, r3, #4
 80029c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80029c6:	4b0e      	ldr	r3, [pc, #56]	; (8002a00 <HAL_TIM_MspPostInit+0x18c>)
 80029c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ca:	f003 0304 	and.w	r3, r3, #4
 80029ce:	60bb      	str	r3, [r7, #8]
 80029d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80029d2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80029d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d8:	2302      	movs	r3, #2
 80029da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029dc:	2300      	movs	r3, #0
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e0:	2300      	movs	r3, #0
 80029e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 80029e4:	2304      	movs	r3, #4
 80029e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029e8:	f107 031c 	add.w	r3, r7, #28
 80029ec:	4619      	mov	r1, r3
 80029ee:	4805      	ldr	r0, [pc, #20]	; (8002a04 <HAL_TIM_MspPostInit+0x190>)
 80029f0:	f000 fd38 	bl	8003464 <HAL_GPIO_Init>
}
 80029f4:	bf00      	nop
 80029f6:	3730      	adds	r7, #48	; 0x30
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	40012c00 	.word	0x40012c00
 8002a00:	40021000 	.word	0x40021000
 8002a04:	48000800 	.word	0x48000800
 8002a08:	48000400 	.word	0x48000400
 8002a0c:	40013400 	.word	0x40013400

08002a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a14:	e7fe      	b.n	8002a14 <NMI_Handler+0x4>

08002a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a16:	b480      	push	{r7}
 8002a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a1a:	e7fe      	b.n	8002a1a <HardFault_Handler+0x4>

08002a1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a20:	e7fe      	b.n	8002a20 <MemManage_Handler+0x4>

08002a22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a22:	b480      	push	{r7}
 8002a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a26:	e7fe      	b.n	8002a26 <BusFault_Handler+0x4>

08002a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a2c:	e7fe      	b.n	8002a2c <UsageFault_Handler+0x4>

08002a2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a32:	bf00      	nop
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a40:	bf00      	nop
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a5c:	f000 f8ba 	bl	8002bd4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a60:	bf00      	nop
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a68:	4802      	ldr	r0, [pc, #8]	; (8002a74 <TIM3_IRQHandler+0x10>)
 8002a6a:	f002 f941 	bl	8004cf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a6e:	bf00      	nop
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	200001f4 	.word	0x200001f4

08002a78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a7c:	4802      	ldr	r0, [pc, #8]	; (8002a88 <USART1_IRQHandler+0x10>)
 8002a7e:	f003 f9d3 	bl	8005e28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a82:	bf00      	nop
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	200000cc 	.word	0x200000cc

08002a8c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002a90:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002a94:	f000 fe98 	bl	80037c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002a98:	bf00      	nop
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002aa0:	4803      	ldr	r0, [pc, #12]	; (8002ab0 <TIM6_DAC_IRQHandler+0x14>)
 8002aa2:	f002 f925 	bl	8004cf0 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8002aa6:	4803      	ldr	r0, [pc, #12]	; (8002ab4 <TIM6_DAC_IRQHandler+0x18>)
 8002aa8:	f000 fa05 	bl	8002eb6 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002aac:	bf00      	nop
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	20000240 	.word	0x20000240
 8002ab4:	20000028 	.word	0x20000028

08002ab8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002abc:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <SystemInit+0x20>)
 8002abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac2:	4a05      	ldr	r2, [pc, #20]	; (8002ad8 <SystemInit+0x20>)
 8002ac4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ac8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002acc:	bf00      	nop
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	e000ed00 	.word	0xe000ed00

08002adc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002adc:	480d      	ldr	r0, [pc, #52]	; (8002b14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002ade:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ae0:	480d      	ldr	r0, [pc, #52]	; (8002b18 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ae2:	490e      	ldr	r1, [pc, #56]	; (8002b1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ae4:	4a0e      	ldr	r2, [pc, #56]	; (8002b20 <LoopForever+0xe>)
  movs r3, #0
 8002ae6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002ae8:	e002      	b.n	8002af0 <LoopCopyDataInit>

08002aea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002aec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aee:	3304      	adds	r3, #4

08002af0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002af0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002af2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002af4:	d3f9      	bcc.n	8002aea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002af6:	4a0b      	ldr	r2, [pc, #44]	; (8002b24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002af8:	4c0b      	ldr	r4, [pc, #44]	; (8002b28 <LoopForever+0x16>)
  movs r3, #0
 8002afa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002afc:	e001      	b.n	8002b02 <LoopFillZerobss>

08002afe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002afe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b00:	3204      	adds	r2, #4

08002b02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b04:	d3fb      	bcc.n	8002afe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002b06:	f7ff ffd7 	bl	8002ab8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b0a:	f004 fb47 	bl	800719c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b0e:	f7fd fd01 	bl	8000514 <main>

08002b12 <LoopForever>:

LoopForever:
    b LoopForever
 8002b12:	e7fe      	b.n	8002b12 <LoopForever>
  ldr   r0, =_estack
 8002b14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002b20:	0800724c 	.word	0x0800724c
  ldr r2, =_sbss
 8002b24:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002b28:	200002e4 	.word	0x200002e4

08002b2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b2c:	e7fe      	b.n	8002b2c <ADC1_2_IRQHandler>

08002b2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b082      	sub	sp, #8
 8002b32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002b34:	2300      	movs	r3, #0
 8002b36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b38:	2003      	movs	r0, #3
 8002b3a:	f000 f95b 	bl	8002df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b3e:	2000      	movs	r0, #0
 8002b40:	f000 f80e 	bl	8002b60 <HAL_InitTick>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	71fb      	strb	r3, [r7, #7]
 8002b4e:	e001      	b.n	8002b54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b50:	f7ff fd00 	bl	8002554 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b54:	79fb      	ldrb	r3, [r7, #7]

}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
	...

08002b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002b6c:	4b16      	ldr	r3, [pc, #88]	; (8002bc8 <HAL_InitTick+0x68>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d022      	beq.n	8002bba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002b74:	4b15      	ldr	r3, [pc, #84]	; (8002bcc <HAL_InitTick+0x6c>)
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	4b13      	ldr	r3, [pc, #76]	; (8002bc8 <HAL_InitTick+0x68>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002b80:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f000 f966 	bl	8002e5a <HAL_SYSTICK_Config>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10f      	bne.n	8002bb4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b0f      	cmp	r3, #15
 8002b98:	d809      	bhi.n	8002bae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba2:	f000 f932 	bl	8002e0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ba6:	4a0a      	ldr	r2, [pc, #40]	; (8002bd0 <HAL_InitTick+0x70>)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6013      	str	r3, [r2, #0]
 8002bac:	e007      	b.n	8002bbe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	73fb      	strb	r3, [r7, #15]
 8002bb2:	e004      	b.n	8002bbe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	73fb      	strb	r3, [r7, #15]
 8002bb8:	e001      	b.n	8002bbe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	20000008 	.word	0x20000008
 8002bcc:	20000000 	.word	0x20000000
 8002bd0:	20000004 	.word	0x20000004

08002bd4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bd8:	4b05      	ldr	r3, [pc, #20]	; (8002bf0 <HAL_IncTick+0x1c>)
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	4b05      	ldr	r3, [pc, #20]	; (8002bf4 <HAL_IncTick+0x20>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4413      	add	r3, r2
 8002be2:	4a03      	ldr	r2, [pc, #12]	; (8002bf0 <HAL_IncTick+0x1c>)
 8002be4:	6013      	str	r3, [r2, #0]
}
 8002be6:	bf00      	nop
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	200002e0 	.word	0x200002e0
 8002bf4:	20000008 	.word	0x20000008

08002bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8002bfc:	4b03      	ldr	r3, [pc, #12]	; (8002c0c <HAL_GetTick+0x14>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	200002e0 	.word	0x200002e0

08002c10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c18:	f7ff ffee 	bl	8002bf8 <HAL_GetTick>
 8002c1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c28:	d004      	beq.n	8002c34 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c2a:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <HAL_Delay+0x40>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68fa      	ldr	r2, [r7, #12]
 8002c30:	4413      	add	r3, r2
 8002c32:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c34:	bf00      	nop
 8002c36:	f7ff ffdf 	bl	8002bf8 <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d8f7      	bhi.n	8002c36 <HAL_Delay+0x26>
  {
  }
}
 8002c46:	bf00      	nop
 8002c48:	bf00      	nop
 8002c4a:	3710      	adds	r7, #16
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	20000008 	.word	0x20000008

08002c54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c64:	4b0c      	ldr	r3, [pc, #48]	; (8002c98 <__NVIC_SetPriorityGrouping+0x44>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c6a:	68ba      	ldr	r2, [r7, #8]
 8002c6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c70:	4013      	ands	r3, r2
 8002c72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c86:	4a04      	ldr	r2, [pc, #16]	; (8002c98 <__NVIC_SetPriorityGrouping+0x44>)
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	60d3      	str	r3, [r2, #12]
}
 8002c8c:	bf00      	nop
 8002c8e:	3714      	adds	r7, #20
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	e000ed00 	.word	0xe000ed00

08002c9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ca0:	4b04      	ldr	r3, [pc, #16]	; (8002cb4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	0a1b      	lsrs	r3, r3, #8
 8002ca6:	f003 0307 	and.w	r3, r3, #7
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	e000ed00 	.word	0xe000ed00

08002cb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	db0b      	blt.n	8002ce2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cca:	79fb      	ldrb	r3, [r7, #7]
 8002ccc:	f003 021f 	and.w	r2, r3, #31
 8002cd0:	4907      	ldr	r1, [pc, #28]	; (8002cf0 <__NVIC_EnableIRQ+0x38>)
 8002cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd6:	095b      	lsrs	r3, r3, #5
 8002cd8:	2001      	movs	r0, #1
 8002cda:	fa00 f202 	lsl.w	r2, r0, r2
 8002cde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	e000e100 	.word	0xe000e100

08002cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	6039      	str	r1, [r7, #0]
 8002cfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	db0a      	blt.n	8002d1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	b2da      	uxtb	r2, r3
 8002d0c:	490c      	ldr	r1, [pc, #48]	; (8002d40 <__NVIC_SetPriority+0x4c>)
 8002d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d12:	0112      	lsls	r2, r2, #4
 8002d14:	b2d2      	uxtb	r2, r2
 8002d16:	440b      	add	r3, r1
 8002d18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d1c:	e00a      	b.n	8002d34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	b2da      	uxtb	r2, r3
 8002d22:	4908      	ldr	r1, [pc, #32]	; (8002d44 <__NVIC_SetPriority+0x50>)
 8002d24:	79fb      	ldrb	r3, [r7, #7]
 8002d26:	f003 030f 	and.w	r3, r3, #15
 8002d2a:	3b04      	subs	r3, #4
 8002d2c:	0112      	lsls	r2, r2, #4
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	440b      	add	r3, r1
 8002d32:	761a      	strb	r2, [r3, #24]
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	e000e100 	.word	0xe000e100
 8002d44:	e000ed00 	.word	0xe000ed00

08002d48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b089      	sub	sp, #36	; 0x24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f1c3 0307 	rsb	r3, r3, #7
 8002d62:	2b04      	cmp	r3, #4
 8002d64:	bf28      	it	cs
 8002d66:	2304      	movcs	r3, #4
 8002d68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	3304      	adds	r3, #4
 8002d6e:	2b06      	cmp	r3, #6
 8002d70:	d902      	bls.n	8002d78 <NVIC_EncodePriority+0x30>
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	3b03      	subs	r3, #3
 8002d76:	e000      	b.n	8002d7a <NVIC_EncodePriority+0x32>
 8002d78:	2300      	movs	r3, #0
 8002d7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	fa02 f303 	lsl.w	r3, r2, r3
 8002d86:	43da      	mvns	r2, r3
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	401a      	ands	r2, r3
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d90:	f04f 31ff 	mov.w	r1, #4294967295
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	fa01 f303 	lsl.w	r3, r1, r3
 8002d9a:	43d9      	mvns	r1, r3
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da0:	4313      	orrs	r3, r2
         );
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	3724      	adds	r7, #36	; 0x24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
	...

08002db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dc0:	d301      	bcc.n	8002dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e00f      	b.n	8002de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dc6:	4a0a      	ldr	r2, [pc, #40]	; (8002df0 <SysTick_Config+0x40>)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dce:	210f      	movs	r1, #15
 8002dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8002dd4:	f7ff ff8e 	bl	8002cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dd8:	4b05      	ldr	r3, [pc, #20]	; (8002df0 <SysTick_Config+0x40>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dde:	4b04      	ldr	r3, [pc, #16]	; (8002df0 <SysTick_Config+0x40>)
 8002de0:	2207      	movs	r2, #7
 8002de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}
 8002dee:	bf00      	nop
 8002df0:	e000e010 	.word	0xe000e010

08002df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f7ff ff29 	bl	8002c54 <__NVIC_SetPriorityGrouping>
}
 8002e02:	bf00      	nop
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b086      	sub	sp, #24
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	4603      	mov	r3, r0
 8002e12:	60b9      	str	r1, [r7, #8]
 8002e14:	607a      	str	r2, [r7, #4]
 8002e16:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e18:	f7ff ff40 	bl	8002c9c <__NVIC_GetPriorityGrouping>
 8002e1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	68b9      	ldr	r1, [r7, #8]
 8002e22:	6978      	ldr	r0, [r7, #20]
 8002e24:	f7ff ff90 	bl	8002d48 <NVIC_EncodePriority>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e2e:	4611      	mov	r1, r2
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff ff5f 	bl	8002cf4 <__NVIC_SetPriority>
}
 8002e36:	bf00      	nop
 8002e38:	3718      	adds	r7, #24
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b082      	sub	sp, #8
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	4603      	mov	r3, r0
 8002e46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff ff33 	bl	8002cb8 <__NVIC_EnableIRQ>
}
 8002e52:	bf00      	nop
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b082      	sub	sp, #8
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f7ff ffa4 	bl	8002db0 <SysTick_Config>
 8002e68:	4603      	mov	r3, r0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b082      	sub	sp, #8
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e014      	b.n	8002eae <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	791b      	ldrb	r3, [r3, #4]
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d105      	bne.n	8002e9a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7ff fb81 	bl	800259c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2202      	movs	r2, #2
 8002e9e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ec8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ecc:	d120      	bne.n	8002f10 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ed4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ed8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002edc:	d118      	bne.n	8002f10 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2204      	movs	r2, #4
 8002ee2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	f043 0201 	orr.w	r2, r3, #1
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ef8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f08:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f82d 	bl	8002f6a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f1e:	d120      	bne.n	8002f62 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f2a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f2e:	d118      	bne.n	8002f62 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2204      	movs	r2, #4
 8002f34:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	f043 0202 	orr.w	r2, r3, #2
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002f4a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002f5a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	f000 f9b7 	bl	80032d0 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8002f62:	bf00      	nop
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b083      	sub	sp, #12
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002f72:	bf00      	nop
 8002f74:	370c      	adds	r7, #12
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
	...

08002f80 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08a      	sub	sp, #40	; 0x28
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	795b      	ldrb	r3, [r3, #5]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d101      	bne.n	8002f98 <HAL_DAC_ConfigChannel+0x18>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e192      	b.n	80032be <HAL_DAC_ConfigChannel+0x33e>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	2b04      	cmp	r3, #4
 8002faa:	d174      	bne.n	8003096 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002fac:	f7ff fe24 	bl	8002bf8 <HAL_GetTick>
 8002fb0:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d134      	bne.n	8003022 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002fb8:	e011      	b.n	8002fde <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002fba:	f7ff fe1d 	bl	8002bf8 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d90a      	bls.n	8002fde <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	f043 0208 	orr.w	r2, r3, #8
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2203      	movs	r2, #3
 8002fd8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e16f      	b.n	80032be <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d1e6      	bne.n	8002fba <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8002fec:	2001      	movs	r0, #1
 8002fee:	f7ff fe0f 	bl	8002c10 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ffa:	641a      	str	r2, [r3, #64]	; 0x40
 8002ffc:	e01e      	b.n	800303c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002ffe:	f7ff fdfb 	bl	8002bf8 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b01      	cmp	r3, #1
 800300a:	d90a      	bls.n	8003022 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	f043 0208 	orr.w	r2, r3, #8
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2203      	movs	r2, #3
 800301c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e14d      	b.n	80032be <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003028:	2b00      	cmp	r3, #0
 800302a:	dbe8      	blt.n	8002ffe <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 800302c:	2001      	movs	r0, #1
 800302e:	f7ff fdef 	bl	8002c10 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800303a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f003 0310 	and.w	r3, r3, #16
 8003048:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800304c:	fa01 f303 	lsl.w	r3, r1, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	ea02 0103 	and.w	r1, r2, r3
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	f003 0310 	and.w	r3, r3, #16
 8003060:	409a      	lsls	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f003 0310 	and.w	r3, r3, #16
 8003076:	21ff      	movs	r1, #255	; 0xff
 8003078:	fa01 f303 	lsl.w	r3, r1, r3
 800307c:	43db      	mvns	r3, r3
 800307e:	ea02 0103 	and.w	r1, r2, r3
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f003 0310 	and.w	r3, r3, #16
 800308c:	409a      	lsls	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	430a      	orrs	r2, r1
 8003094:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	2b01      	cmp	r3, #1
 800309c:	d11d      	bne.n	80030da <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f003 0310 	and.w	r3, r3, #16
 80030ac:	221f      	movs	r2, #31
 80030ae:	fa02 f303 	lsl.w	r3, r2, r3
 80030b2:	43db      	mvns	r3, r3
 80030b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b6:	4013      	ands	r3, r2
 80030b8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f003 0310 	and.w	r3, r3, #16
 80030c6:	69ba      	ldr	r2, [r7, #24]
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ce:	4313      	orrs	r3, r2
 80030d0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f003 0310 	and.w	r3, r3, #16
 80030e8:	2207      	movs	r2, #7
 80030ea:	fa02 f303 	lsl.w	r3, r2, r3
 80030ee:	43db      	mvns	r3, r3
 80030f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f2:	4013      	ands	r3, r2
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	699b      	ldr	r3, [r3, #24]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d102      	bne.n	8003104 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 80030fe:	2300      	movs	r3, #0
 8003100:	623b      	str	r3, [r7, #32]
 8003102:	e00f      	b.n	8003124 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	2b02      	cmp	r3, #2
 800310a:	d102      	bne.n	8003112 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800310c:	2301      	movs	r3, #1
 800310e:	623b      	str	r3, [r7, #32]
 8003110:	e008      	b.n	8003124 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d102      	bne.n	8003120 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800311a:	2301      	movs	r3, #1
 800311c:	623b      	str	r3, [r7, #32]
 800311e:	e001      	b.n	8003124 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003120:	2300      	movs	r3, #0
 8003122:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	695b      	ldr	r3, [r3, #20]
 800312c:	4313      	orrs	r3, r2
 800312e:	6a3a      	ldr	r2, [r7, #32]
 8003130:	4313      	orrs	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f003 0310 	and.w	r3, r3, #16
 800313a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	43db      	mvns	r3, r3
 8003144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003146:	4013      	ands	r3, r2
 8003148:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	791b      	ldrb	r3, [r3, #4]
 800314e:	2b01      	cmp	r3, #1
 8003150:	d102      	bne.n	8003158 <HAL_DAC_ConfigChannel+0x1d8>
 8003152:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003156:	e000      	b.n	800315a <HAL_DAC_ConfigChannel+0x1da>
 8003158:	2300      	movs	r3, #0
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	4313      	orrs	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f003 0310 	and.w	r3, r3, #16
 8003166:	f44f 7200 	mov.w	r2, #512	; 0x200
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	43db      	mvns	r3, r3
 8003170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003172:	4013      	ands	r3, r2
 8003174:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	795b      	ldrb	r3, [r3, #5]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d102      	bne.n	8003184 <HAL_DAC_ConfigChannel+0x204>
 800317e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003182:	e000      	b.n	8003186 <HAL_DAC_ConfigChannel+0x206>
 8003184:	2300      	movs	r3, #0
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	4313      	orrs	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003192:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2b02      	cmp	r3, #2
 800319a:	d114      	bne.n	80031c6 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800319c:	f001 f8a2 	bl	80042e4 <HAL_RCC_GetHCLKFreq>
 80031a0:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	4a48      	ldr	r2, [pc, #288]	; (80032c8 <HAL_DAC_ConfigChannel+0x348>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d904      	bls.n	80031b4 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80031aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031b0:	627b      	str	r3, [r7, #36]	; 0x24
 80031b2:	e00f      	b.n	80031d4 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	4a45      	ldr	r2, [pc, #276]	; (80032cc <HAL_DAC_ConfigChannel+0x34c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d90a      	bls.n	80031d2 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80031bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031c2:	627b      	str	r3, [r7, #36]	; 0x24
 80031c4:	e006      	b.n	80031d4 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031cc:	4313      	orrs	r3, r2
 80031ce:	627b      	str	r3, [r7, #36]	; 0x24
 80031d0:	e000      	b.n	80031d4 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80031d2:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f003 0310 	and.w	r3, r3, #16
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e2:	4313      	orrs	r3, r2
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6819      	ldr	r1, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f003 0310 	and.w	r3, r3, #16
 80031fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80031fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003202:	43da      	mvns	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	400a      	ands	r2, r1
 800320a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f003 0310 	and.w	r3, r3, #16
 800321a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	43db      	mvns	r3, r3
 8003224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003226:	4013      	ands	r3, r2
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	f003 0310 	and.w	r3, r3, #16
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800323e:	4313      	orrs	r3, r2
 8003240:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003248:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	6819      	ldr	r1, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f003 0310 	and.w	r3, r3, #16
 8003256:	22c0      	movs	r2, #192	; 0xc0
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	43da      	mvns	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	400a      	ands	r2, r1
 8003264:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	089b      	lsrs	r3, r3, #2
 800326c:	f003 030f 	and.w	r3, r3, #15
 8003270:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	089b      	lsrs	r3, r3, #2
 8003278:	021b      	lsls	r3, r3, #8
 800327a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	4313      	orrs	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f003 0310 	and.w	r3, r3, #16
 8003290:	f640 710f 	movw	r1, #3855	; 0xf0f
 8003294:	fa01 f303 	lsl.w	r3, r1, r3
 8003298:	43db      	mvns	r3, r3
 800329a:	ea02 0103 	and.w	r1, r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f003 0310 	and.w	r3, r3, #16
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	409a      	lsls	r2, r3
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2201      	movs	r2, #1
 80032b4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3728      	adds	r7, #40	; 0x28
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	09896800 	.word	0x09896800
 80032cc:	04c4b400 	.word	0x04c4b400

080032d0 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032ec:	2300      	movs	r3, #0
 80032ee:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d005      	beq.n	8003308 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2204      	movs	r2, #4
 8003300:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	73fb      	strb	r3, [r7, #15]
 8003306:	e037      	b.n	8003378 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 020e 	bic.w	r2, r2, #14
 8003316:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003322:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003326:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0201 	bic.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800333c:	f003 021f 	and.w	r2, r3, #31
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003344:	2101      	movs	r1, #1
 8003346:	fa01 f202 	lsl.w	r2, r1, r2
 800334a:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003354:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00c      	beq.n	8003378 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003368:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800336c:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003376:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003388:	7bfb      	ldrb	r3, [r7, #15]
}
 800338a:	4618      	mov	r0, r3
 800338c:	3714      	adds	r7, #20
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr

08003396 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b084      	sub	sp, #16
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800339e:	2300      	movs	r3, #0
 80033a0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d00d      	beq.n	80033ca <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2204      	movs	r2, #4
 80033b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	73fb      	strb	r3, [r7, #15]
 80033c8:	e047      	b.n	800345a <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f022 020e 	bic.w	r2, r2, #14
 80033d8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f022 0201 	bic.w	r2, r2, #1
 80033e8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fe:	f003 021f 	and.w	r2, r3, #31
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	2101      	movs	r1, #1
 8003408:	fa01 f202 	lsl.w	r2, r1, r2
 800340c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003416:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00c      	beq.n	800343a <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800342a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800342e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003438:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	4798      	blx	r3
    }
  }
  return status;
 800345a:	7bfb      	ldrb	r3, [r7, #15]
}
 800345c:	4618      	mov	r0, r3
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003464:	b480      	push	{r7}
 8003466:	b087      	sub	sp, #28
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800346e:	2300      	movs	r3, #0
 8003470:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003472:	e15a      	b.n	800372a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	2101      	movs	r1, #1
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	fa01 f303 	lsl.w	r3, r1, r3
 8003480:	4013      	ands	r3, r2
 8003482:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2b00      	cmp	r3, #0
 8003488:	f000 814c 	beq.w	8003724 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f003 0303 	and.w	r3, r3, #3
 8003494:	2b01      	cmp	r3, #1
 8003496:	d005      	beq.n	80034a4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80034a0:	2b02      	cmp	r3, #2
 80034a2:	d130      	bne.n	8003506 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	2203      	movs	r2, #3
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	43db      	mvns	r3, r3
 80034b6:	693a      	ldr	r2, [r7, #16]
 80034b8:	4013      	ands	r3, r2
 80034ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	005b      	lsls	r3, r3, #1
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	693a      	ldr	r2, [r7, #16]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80034da:	2201      	movs	r2, #1
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	43db      	mvns	r3, r3
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4013      	ands	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	091b      	lsrs	r3, r3, #4
 80034f0:	f003 0201 	and.w	r2, r3, #1
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	2b03      	cmp	r3, #3
 8003510:	d017      	beq.n	8003542 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	68db      	ldr	r3, [r3, #12]
 8003516:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	2203      	movs	r2, #3
 800351e:	fa02 f303 	lsl.w	r3, r2, r3
 8003522:	43db      	mvns	r3, r3
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	4013      	ands	r3, r2
 8003528:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	689a      	ldr	r2, [r3, #8]
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	693a      	ldr	r2, [r7, #16]
 8003538:	4313      	orrs	r3, r2
 800353a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f003 0303 	and.w	r3, r3, #3
 800354a:	2b02      	cmp	r3, #2
 800354c:	d123      	bne.n	8003596 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	08da      	lsrs	r2, r3, #3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	3208      	adds	r2, #8
 8003556:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800355a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	f003 0307 	and.w	r3, r3, #7
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	220f      	movs	r2, #15
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	43db      	mvns	r3, r3
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4013      	ands	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	691a      	ldr	r2, [r3, #16]
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	4313      	orrs	r3, r2
 8003586:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	08da      	lsrs	r2, r3, #3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3208      	adds	r2, #8
 8003590:	6939      	ldr	r1, [r7, #16]
 8003592:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	005b      	lsls	r3, r3, #1
 80035a0:	2203      	movs	r2, #3
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	43db      	mvns	r3, r3
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	4013      	ands	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f003 0203 	and.w	r2, r3, #3
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	f000 80a6 	beq.w	8003724 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035d8:	4b5b      	ldr	r3, [pc, #364]	; (8003748 <HAL_GPIO_Init+0x2e4>)
 80035da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035dc:	4a5a      	ldr	r2, [pc, #360]	; (8003748 <HAL_GPIO_Init+0x2e4>)
 80035de:	f043 0301 	orr.w	r3, r3, #1
 80035e2:	6613      	str	r3, [r2, #96]	; 0x60
 80035e4:	4b58      	ldr	r3, [pc, #352]	; (8003748 <HAL_GPIO_Init+0x2e4>)
 80035e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	60bb      	str	r3, [r7, #8]
 80035ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035f0:	4a56      	ldr	r2, [pc, #344]	; (800374c <HAL_GPIO_Init+0x2e8>)
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	089b      	lsrs	r3, r3, #2
 80035f6:	3302      	adds	r3, #2
 80035f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f003 0303 	and.w	r3, r3, #3
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	220f      	movs	r2, #15
 8003608:	fa02 f303 	lsl.w	r3, r2, r3
 800360c:	43db      	mvns	r3, r3
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	4013      	ands	r3, r2
 8003612:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800361a:	d01f      	beq.n	800365c <HAL_GPIO_Init+0x1f8>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a4c      	ldr	r2, [pc, #304]	; (8003750 <HAL_GPIO_Init+0x2ec>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d019      	beq.n	8003658 <HAL_GPIO_Init+0x1f4>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a4b      	ldr	r2, [pc, #300]	; (8003754 <HAL_GPIO_Init+0x2f0>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d013      	beq.n	8003654 <HAL_GPIO_Init+0x1f0>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a4a      	ldr	r2, [pc, #296]	; (8003758 <HAL_GPIO_Init+0x2f4>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d00d      	beq.n	8003650 <HAL_GPIO_Init+0x1ec>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	4a49      	ldr	r2, [pc, #292]	; (800375c <HAL_GPIO_Init+0x2f8>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d007      	beq.n	800364c <HAL_GPIO_Init+0x1e8>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a48      	ldr	r2, [pc, #288]	; (8003760 <HAL_GPIO_Init+0x2fc>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d101      	bne.n	8003648 <HAL_GPIO_Init+0x1e4>
 8003644:	2305      	movs	r3, #5
 8003646:	e00a      	b.n	800365e <HAL_GPIO_Init+0x1fa>
 8003648:	2306      	movs	r3, #6
 800364a:	e008      	b.n	800365e <HAL_GPIO_Init+0x1fa>
 800364c:	2304      	movs	r3, #4
 800364e:	e006      	b.n	800365e <HAL_GPIO_Init+0x1fa>
 8003650:	2303      	movs	r3, #3
 8003652:	e004      	b.n	800365e <HAL_GPIO_Init+0x1fa>
 8003654:	2302      	movs	r3, #2
 8003656:	e002      	b.n	800365e <HAL_GPIO_Init+0x1fa>
 8003658:	2301      	movs	r3, #1
 800365a:	e000      	b.n	800365e <HAL_GPIO_Init+0x1fa>
 800365c:	2300      	movs	r3, #0
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	f002 0203 	and.w	r2, r2, #3
 8003664:	0092      	lsls	r2, r2, #2
 8003666:	4093      	lsls	r3, r2
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	4313      	orrs	r3, r2
 800366c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800366e:	4937      	ldr	r1, [pc, #220]	; (800374c <HAL_GPIO_Init+0x2e8>)
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	089b      	lsrs	r3, r3, #2
 8003674:	3302      	adds	r3, #2
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800367c:	4b39      	ldr	r3, [pc, #228]	; (8003764 <HAL_GPIO_Init+0x300>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	43db      	mvns	r3, r3
 8003686:	693a      	ldr	r2, [r7, #16]
 8003688:	4013      	ands	r3, r2
 800368a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003698:	693a      	ldr	r2, [r7, #16]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4313      	orrs	r3, r2
 800369e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80036a0:	4a30      	ldr	r2, [pc, #192]	; (8003764 <HAL_GPIO_Init+0x300>)
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80036a6:	4b2f      	ldr	r3, [pc, #188]	; (8003764 <HAL_GPIO_Init+0x300>)
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	43db      	mvns	r3, r3
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	4013      	ands	r3, r2
 80036b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	4313      	orrs	r3, r2
 80036c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80036ca:	4a26      	ldr	r2, [pc, #152]	; (8003764 <HAL_GPIO_Init+0x300>)
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80036d0:	4b24      	ldr	r3, [pc, #144]	; (8003764 <HAL_GPIO_Init+0x300>)
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	43db      	mvns	r3, r3
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	4013      	ands	r3, r2
 80036de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d003      	beq.n	80036f4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80036ec:	693a      	ldr	r2, [r7, #16]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80036f4:	4a1b      	ldr	r2, [pc, #108]	; (8003764 <HAL_GPIO_Init+0x300>)
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80036fa:	4b1a      	ldr	r3, [pc, #104]	; (8003764 <HAL_GPIO_Init+0x300>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	43db      	mvns	r3, r3
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	4013      	ands	r3, r2
 8003708:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d003      	beq.n	800371e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4313      	orrs	r3, r2
 800371c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800371e:	4a11      	ldr	r2, [pc, #68]	; (8003764 <HAL_GPIO_Init+0x300>)
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	3301      	adds	r3, #1
 8003728:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	fa22 f303 	lsr.w	r3, r2, r3
 8003734:	2b00      	cmp	r3, #0
 8003736:	f47f ae9d 	bne.w	8003474 <HAL_GPIO_Init+0x10>
  }
}
 800373a:	bf00      	nop
 800373c:	bf00      	nop
 800373e:	371c      	adds	r7, #28
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	40021000 	.word	0x40021000
 800374c:	40010000 	.word	0x40010000
 8003750:	48000400 	.word	0x48000400
 8003754:	48000800 	.word	0x48000800
 8003758:	48000c00 	.word	0x48000c00
 800375c:	48001000 	.word	0x48001000
 8003760:	48001400 	.word	0x48001400
 8003764:	40010400 	.word	0x40010400

08003768 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	460b      	mov	r3, r1
 8003772:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691a      	ldr	r2, [r3, #16]
 8003778:	887b      	ldrh	r3, [r7, #2]
 800377a:	4013      	ands	r3, r2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d002      	beq.n	8003786 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003780:	2301      	movs	r3, #1
 8003782:	73fb      	strb	r3, [r7, #15]
 8003784:	e001      	b.n	800378a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003786:	2300      	movs	r3, #0
 8003788:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800378a:	7bfb      	ldrb	r3, [r7, #15]
}
 800378c:	4618      	mov	r0, r3
 800378e:	3714      	adds	r7, #20
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	807b      	strh	r3, [r7, #2]
 80037a4:	4613      	mov	r3, r2
 80037a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037a8:	787b      	ldrb	r3, [r7, #1]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037ae:	887a      	ldrh	r2, [r7, #2]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037b4:	e002      	b.n	80037bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037b6:	887a      	ldrh	r2, [r7, #2]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	4603      	mov	r3, r0
 80037d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80037d2:	4b08      	ldr	r3, [pc, #32]	; (80037f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037d4:	695a      	ldr	r2, [r3, #20]
 80037d6:	88fb      	ldrh	r3, [r7, #6]
 80037d8:	4013      	ands	r3, r2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d006      	beq.n	80037ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80037de:	4a05      	ldr	r2, [pc, #20]	; (80037f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80037e0:	88fb      	ldrh	r3, [r7, #6]
 80037e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80037e4:	88fb      	ldrh	r3, [r7, #6]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 f806 	bl	80037f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80037ec:	bf00      	nop
 80037ee:	3708      	adds	r7, #8
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	40010400 	.word	0x40010400

080037f8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	4603      	mov	r3, r0
 8003800:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
	...

08003810 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003810:	b480      	push	{r7}
 8003812:	b085      	sub	sp, #20
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d141      	bne.n	80038a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800381e:	4b4b      	ldr	r3, [pc, #300]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003826:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800382a:	d131      	bne.n	8003890 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800382c:	4b47      	ldr	r3, [pc, #284]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800382e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003832:	4a46      	ldr	r2, [pc, #280]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003838:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800383c:	4b43      	ldr	r3, [pc, #268]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003844:	4a41      	ldr	r2, [pc, #260]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003846:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800384a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800384c:	4b40      	ldr	r3, [pc, #256]	; (8003950 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2232      	movs	r2, #50	; 0x32
 8003852:	fb02 f303 	mul.w	r3, r2, r3
 8003856:	4a3f      	ldr	r2, [pc, #252]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003858:	fba2 2303 	umull	r2, r3, r2, r3
 800385c:	0c9b      	lsrs	r3, r3, #18
 800385e:	3301      	adds	r3, #1
 8003860:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003862:	e002      	b.n	800386a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	3b01      	subs	r3, #1
 8003868:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800386a:	4b38      	ldr	r3, [pc, #224]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003876:	d102      	bne.n	800387e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1f2      	bne.n	8003864 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800387e:	4b33      	ldr	r3, [pc, #204]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800388a:	d158      	bne.n	800393e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e057      	b.n	8003940 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003890:	4b2e      	ldr	r3, [pc, #184]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003892:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003896:	4a2d      	ldr	r2, [pc, #180]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800389c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80038a0:	e04d      	b.n	800393e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038a8:	d141      	bne.n	800392e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80038aa:	4b28      	ldr	r3, [pc, #160]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80038b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038b6:	d131      	bne.n	800391c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80038b8:	4b24      	ldr	r3, [pc, #144]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038be:	4a23      	ldr	r2, [pc, #140]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80038c8:	4b20      	ldr	r3, [pc, #128]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80038d0:	4a1e      	ldr	r2, [pc, #120]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80038d8:	4b1d      	ldr	r3, [pc, #116]	; (8003950 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2232      	movs	r2, #50	; 0x32
 80038de:	fb02 f303 	mul.w	r3, r2, r3
 80038e2:	4a1c      	ldr	r2, [pc, #112]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80038e4:	fba2 2303 	umull	r2, r3, r2, r3
 80038e8:	0c9b      	lsrs	r3, r3, #18
 80038ea:	3301      	adds	r3, #1
 80038ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038ee:	e002      	b.n	80038f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	3b01      	subs	r3, #1
 80038f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80038f6:	4b15      	ldr	r3, [pc, #84]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003902:	d102      	bne.n	800390a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f2      	bne.n	80038f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800390a:	4b10      	ldr	r3, [pc, #64]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800390c:	695b      	ldr	r3, [r3, #20]
 800390e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003916:	d112      	bne.n	800393e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003918:	2303      	movs	r3, #3
 800391a:	e011      	b.n	8003940 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800391c:	4b0b      	ldr	r3, [pc, #44]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800391e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003922:	4a0a      	ldr	r2, [pc, #40]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003924:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003928:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800392c:	e007      	b.n	800393e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800392e:	4b07      	ldr	r3, [pc, #28]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003936:	4a05      	ldr	r2, [pc, #20]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003938:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800393c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	40007000 	.word	0x40007000
 8003950:	20000000 	.word	0x20000000
 8003954:	431bde83 	.word	0x431bde83

08003958 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800395c:	4b05      	ldr	r3, [pc, #20]	; (8003974 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	4a04      	ldr	r2, [pc, #16]	; (8003974 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003962:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003966:	6093      	str	r3, [r2, #8]
}
 8003968:	bf00      	nop
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	40007000 	.word	0x40007000

08003978 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b088      	sub	sp, #32
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d101      	bne.n	800398a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e306      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d075      	beq.n	8003a82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003996:	4b97      	ldr	r3, [pc, #604]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 030c 	and.w	r3, r3, #12
 800399e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039a0:	4b94      	ldr	r3, [pc, #592]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	f003 0303 	and.w	r3, r3, #3
 80039a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	2b0c      	cmp	r3, #12
 80039ae:	d102      	bne.n	80039b6 <HAL_RCC_OscConfig+0x3e>
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	2b03      	cmp	r3, #3
 80039b4:	d002      	beq.n	80039bc <HAL_RCC_OscConfig+0x44>
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	2b08      	cmp	r3, #8
 80039ba:	d10b      	bne.n	80039d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039bc:	4b8d      	ldr	r3, [pc, #564]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d05b      	beq.n	8003a80 <HAL_RCC_OscConfig+0x108>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d157      	bne.n	8003a80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e2e1      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039dc:	d106      	bne.n	80039ec <HAL_RCC_OscConfig+0x74>
 80039de:	4b85      	ldr	r3, [pc, #532]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a84      	ldr	r2, [pc, #528]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 80039e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	e01d      	b.n	8003a28 <HAL_RCC_OscConfig+0xb0>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039f4:	d10c      	bne.n	8003a10 <HAL_RCC_OscConfig+0x98>
 80039f6:	4b7f      	ldr	r3, [pc, #508]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a7e      	ldr	r2, [pc, #504]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 80039fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a00:	6013      	str	r3, [r2, #0]
 8003a02:	4b7c      	ldr	r3, [pc, #496]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a7b      	ldr	r2, [pc, #492]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	e00b      	b.n	8003a28 <HAL_RCC_OscConfig+0xb0>
 8003a10:	4b78      	ldr	r3, [pc, #480]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a77      	ldr	r2, [pc, #476]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a1a:	6013      	str	r3, [r2, #0]
 8003a1c:	4b75      	ldr	r3, [pc, #468]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a74      	ldr	r2, [pc, #464]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003a22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d013      	beq.n	8003a58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a30:	f7ff f8e2 	bl	8002bf8 <HAL_GetTick>
 8003a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a36:	e008      	b.n	8003a4a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a38:	f7ff f8de 	bl	8002bf8 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	1ad3      	subs	r3, r2, r3
 8003a42:	2b64      	cmp	r3, #100	; 0x64
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e2a6      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a4a:	4b6a      	ldr	r3, [pc, #424]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d0f0      	beq.n	8003a38 <HAL_RCC_OscConfig+0xc0>
 8003a56:	e014      	b.n	8003a82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a58:	f7ff f8ce 	bl	8002bf8 <HAL_GetTick>
 8003a5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a5e:	e008      	b.n	8003a72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a60:	f7ff f8ca 	bl	8002bf8 <HAL_GetTick>
 8003a64:	4602      	mov	r2, r0
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	1ad3      	subs	r3, r2, r3
 8003a6a:	2b64      	cmp	r3, #100	; 0x64
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e292      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a72:	4b60      	ldr	r3, [pc, #384]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1f0      	bne.n	8003a60 <HAL_RCC_OscConfig+0xe8>
 8003a7e:	e000      	b.n	8003a82 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 0302 	and.w	r3, r3, #2
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d075      	beq.n	8003b7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a8e:	4b59      	ldr	r3, [pc, #356]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 030c 	and.w	r3, r3, #12
 8003a96:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a98:	4b56      	ldr	r3, [pc, #344]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f003 0303 	and.w	r3, r3, #3
 8003aa0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	2b0c      	cmp	r3, #12
 8003aa6:	d102      	bne.n	8003aae <HAL_RCC_OscConfig+0x136>
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	2b02      	cmp	r3, #2
 8003aac:	d002      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x13c>
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	2b04      	cmp	r3, #4
 8003ab2:	d11f      	bne.n	8003af4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ab4:	4b4f      	ldr	r3, [pc, #316]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d005      	beq.n	8003acc <HAL_RCC_OscConfig+0x154>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d101      	bne.n	8003acc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e265      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003acc:	4b49      	ldr	r3, [pc, #292]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	061b      	lsls	r3, r3, #24
 8003ada:	4946      	ldr	r1, [pc, #280]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ae0:	4b45      	ldr	r3, [pc, #276]	; (8003bf8 <HAL_RCC_OscConfig+0x280>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff f83b 	bl	8002b60 <HAL_InitTick>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d043      	beq.n	8003b78 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e251      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d023      	beq.n	8003b44 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003afc:	4b3d      	ldr	r3, [pc, #244]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a3c      	ldr	r2, [pc, #240]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b08:	f7ff f876 	bl	8002bf8 <HAL_GetTick>
 8003b0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b0e:	e008      	b.n	8003b22 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b10:	f7ff f872 	bl	8002bf8 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	2b02      	cmp	r3, #2
 8003b1c:	d901      	bls.n	8003b22 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	e23a      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b22:	4b34      	ldr	r3, [pc, #208]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0f0      	beq.n	8003b10 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b2e:	4b31      	ldr	r3, [pc, #196]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	061b      	lsls	r3, r3, #24
 8003b3c:	492d      	ldr	r1, [pc, #180]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	604b      	str	r3, [r1, #4]
 8003b42:	e01a      	b.n	8003b7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b44:	4b2b      	ldr	r3, [pc, #172]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a2a      	ldr	r2, [pc, #168]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003b4a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b50:	f7ff f852 	bl	8002bf8 <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b58:	f7ff f84e 	bl	8002bf8 <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e216      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b6a:	4b22      	ldr	r3, [pc, #136]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1f0      	bne.n	8003b58 <HAL_RCC_OscConfig+0x1e0>
 8003b76:	e000      	b.n	8003b7a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b78:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d041      	beq.n	8003c0a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	695b      	ldr	r3, [r3, #20]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d01c      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b8e:	4b19      	ldr	r3, [pc, #100]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b94:	4a17      	ldr	r2, [pc, #92]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003b96:	f043 0301 	orr.w	r3, r3, #1
 8003b9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b9e:	f7ff f82b 	bl	8002bf8 <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ba6:	f7ff f827 	bl	8002bf8 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e1ef      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bb8:	4b0e      	ldr	r3, [pc, #56]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d0ef      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x22e>
 8003bc6:	e020      	b.n	8003c0a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bc8:	4b0a      	ldr	r3, [pc, #40]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003bca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bce:	4a09      	ldr	r2, [pc, #36]	; (8003bf4 <HAL_RCC_OscConfig+0x27c>)
 8003bd0:	f023 0301 	bic.w	r3, r3, #1
 8003bd4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd8:	f7ff f80e 	bl	8002bf8 <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bde:	e00d      	b.n	8003bfc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003be0:	f7ff f80a 	bl	8002bf8 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d906      	bls.n	8003bfc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e1d2      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>
 8003bf2:	bf00      	nop
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bfc:	4b8c      	ldr	r3, [pc, #560]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1ea      	bne.n	8003be0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0304 	and.w	r3, r3, #4
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	f000 80a6 	beq.w	8003d64 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c1c:	4b84      	ldr	r3, [pc, #528]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <HAL_RCC_OscConfig+0x2b4>
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e000      	b.n	8003c2e <HAL_RCC_OscConfig+0x2b6>
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d00d      	beq.n	8003c4e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c32:	4b7f      	ldr	r3, [pc, #508]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c36:	4a7e      	ldr	r2, [pc, #504]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c3c:	6593      	str	r3, [r2, #88]	; 0x58
 8003c3e:	4b7c      	ldr	r3, [pc, #496]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c46:	60fb      	str	r3, [r7, #12]
 8003c48:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c4e:	4b79      	ldr	r3, [pc, #484]	; (8003e34 <HAL_RCC_OscConfig+0x4bc>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d118      	bne.n	8003c8c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c5a:	4b76      	ldr	r3, [pc, #472]	; (8003e34 <HAL_RCC_OscConfig+0x4bc>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a75      	ldr	r2, [pc, #468]	; (8003e34 <HAL_RCC_OscConfig+0x4bc>)
 8003c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c66:	f7fe ffc7 	bl	8002bf8 <HAL_GetTick>
 8003c6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c6c:	e008      	b.n	8003c80 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c6e:	f7fe ffc3 	bl	8002bf8 <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	2b02      	cmp	r3, #2
 8003c7a:	d901      	bls.n	8003c80 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e18b      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c80:	4b6c      	ldr	r3, [pc, #432]	; (8003e34 <HAL_RCC_OscConfig+0x4bc>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0f0      	beq.n	8003c6e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	689b      	ldr	r3, [r3, #8]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d108      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x32e>
 8003c94:	4b66      	ldr	r3, [pc, #408]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c9a:	4a65      	ldr	r2, [pc, #404]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003c9c:	f043 0301 	orr.w	r3, r3, #1
 8003ca0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ca4:	e024      	b.n	8003cf0 <HAL_RCC_OscConfig+0x378>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	2b05      	cmp	r3, #5
 8003cac:	d110      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x358>
 8003cae:	4b60      	ldr	r3, [pc, #384]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb4:	4a5e      	ldr	r2, [pc, #376]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003cb6:	f043 0304 	orr.w	r3, r3, #4
 8003cba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cbe:	4b5c      	ldr	r3, [pc, #368]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc4:	4a5a      	ldr	r2, [pc, #360]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003cc6:	f043 0301 	orr.w	r3, r3, #1
 8003cca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cce:	e00f      	b.n	8003cf0 <HAL_RCC_OscConfig+0x378>
 8003cd0:	4b57      	ldr	r3, [pc, #348]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd6:	4a56      	ldr	r2, [pc, #344]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003cd8:	f023 0301 	bic.w	r3, r3, #1
 8003cdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ce0:	4b53      	ldr	r3, [pc, #332]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ce6:	4a52      	ldr	r2, [pc, #328]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003ce8:	f023 0304 	bic.w	r3, r3, #4
 8003cec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d016      	beq.n	8003d26 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf8:	f7fe ff7e 	bl	8002bf8 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cfe:	e00a      	b.n	8003d16 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d00:	f7fe ff7a 	bl	8002bf8 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d901      	bls.n	8003d16 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e140      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d16:	4b46      	ldr	r3, [pc, #280]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0ed      	beq.n	8003d00 <HAL_RCC_OscConfig+0x388>
 8003d24:	e015      	b.n	8003d52 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d26:	f7fe ff67 	bl	8002bf8 <HAL_GetTick>
 8003d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d2c:	e00a      	b.n	8003d44 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d2e:	f7fe ff63 	bl	8002bf8 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e129      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d44:	4b3a      	ldr	r3, [pc, #232]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1ed      	bne.n	8003d2e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003d52:	7ffb      	ldrb	r3, [r7, #31]
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d105      	bne.n	8003d64 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d58:	4b35      	ldr	r3, [pc, #212]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5c:	4a34      	ldr	r2, [pc, #208]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003d5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d62:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0320 	and.w	r3, r3, #32
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d03c      	beq.n	8003dea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	699b      	ldr	r3, [r3, #24]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d01c      	beq.n	8003db2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d78:	4b2d      	ldr	r3, [pc, #180]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003d7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d7e:	4a2c      	ldr	r2, [pc, #176]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003d80:	f043 0301 	orr.w	r3, r3, #1
 8003d84:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d88:	f7fe ff36 	bl	8002bf8 <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d90:	f7fe ff32 	bl	8002bf8 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e0fa      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003da2:	4b23      	ldr	r3, [pc, #140]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003da4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d0ef      	beq.n	8003d90 <HAL_RCC_OscConfig+0x418>
 8003db0:	e01b      	b.n	8003dea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003db2:	4b1f      	ldr	r3, [pc, #124]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003db4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003db8:	4a1d      	ldr	r2, [pc, #116]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003dba:	f023 0301 	bic.w	r3, r3, #1
 8003dbe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc2:	f7fe ff19 	bl	8002bf8 <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003dc8:	e008      	b.n	8003ddc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003dca:	f7fe ff15 	bl	8002bf8 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e0dd      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ddc:	4b14      	ldr	r3, [pc, #80]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003dde:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1ef      	bne.n	8003dca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 80d1 	beq.w	8003f96 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003df4:	4b0e      	ldr	r3, [pc, #56]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f003 030c 	and.w	r3, r3, #12
 8003dfc:	2b0c      	cmp	r3, #12
 8003dfe:	f000 808b 	beq.w	8003f18 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69db      	ldr	r3, [r3, #28]
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d15e      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e0a:	4b09      	ldr	r3, [pc, #36]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a08      	ldr	r2, [pc, #32]	; (8003e30 <HAL_RCC_OscConfig+0x4b8>)
 8003e10:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e16:	f7fe feef 	bl	8002bf8 <HAL_GetTick>
 8003e1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e1c:	e00c      	b.n	8003e38 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e1e:	f7fe feeb 	bl	8002bf8 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d905      	bls.n	8003e38 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e0b3      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>
 8003e30:	40021000 	.word	0x40021000
 8003e34:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e38:	4b59      	ldr	r3, [pc, #356]	; (8003fa0 <HAL_RCC_OscConfig+0x628>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1ec      	bne.n	8003e1e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e44:	4b56      	ldr	r3, [pc, #344]	; (8003fa0 <HAL_RCC_OscConfig+0x628>)
 8003e46:	68da      	ldr	r2, [r3, #12]
 8003e48:	4b56      	ldr	r3, [pc, #344]	; (8003fa4 <HAL_RCC_OscConfig+0x62c>)
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	6a11      	ldr	r1, [r2, #32]
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e54:	3a01      	subs	r2, #1
 8003e56:	0112      	lsls	r2, r2, #4
 8003e58:	4311      	orrs	r1, r2
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003e5e:	0212      	lsls	r2, r2, #8
 8003e60:	4311      	orrs	r1, r2
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e66:	0852      	lsrs	r2, r2, #1
 8003e68:	3a01      	subs	r2, #1
 8003e6a:	0552      	lsls	r2, r2, #21
 8003e6c:	4311      	orrs	r1, r2
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e72:	0852      	lsrs	r2, r2, #1
 8003e74:	3a01      	subs	r2, #1
 8003e76:	0652      	lsls	r2, r2, #25
 8003e78:	4311      	orrs	r1, r2
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003e7e:	06d2      	lsls	r2, r2, #27
 8003e80:	430a      	orrs	r2, r1
 8003e82:	4947      	ldr	r1, [pc, #284]	; (8003fa0 <HAL_RCC_OscConfig+0x628>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e88:	4b45      	ldr	r3, [pc, #276]	; (8003fa0 <HAL_RCC_OscConfig+0x628>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a44      	ldr	r2, [pc, #272]	; (8003fa0 <HAL_RCC_OscConfig+0x628>)
 8003e8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e92:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e94:	4b42      	ldr	r3, [pc, #264]	; (8003fa0 <HAL_RCC_OscConfig+0x628>)
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	4a41      	ldr	r2, [pc, #260]	; (8003fa0 <HAL_RCC_OscConfig+0x628>)
 8003e9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e9e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea0:	f7fe feaa 	bl	8002bf8 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea8:	f7fe fea6 	bl	8002bf8 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e06e      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003eba:	4b39      	ldr	r3, [pc, #228]	; (8003fa0 <HAL_RCC_OscConfig+0x628>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d0f0      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x530>
 8003ec6:	e066      	b.n	8003f96 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ec8:	4b35      	ldr	r3, [pc, #212]	; (8003fa0 <HAL_RCC_OscConfig+0x628>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a34      	ldr	r2, [pc, #208]	; (8003fa0 <HAL_RCC_OscConfig+0x628>)
 8003ece:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ed2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003ed4:	4b32      	ldr	r3, [pc, #200]	; (8003fa0 <HAL_RCC_OscConfig+0x628>)
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	4a31      	ldr	r2, [pc, #196]	; (8003fa0 <HAL_RCC_OscConfig+0x628>)
 8003eda:	f023 0303 	bic.w	r3, r3, #3
 8003ede:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003ee0:	4b2f      	ldr	r3, [pc, #188]	; (8003fa0 <HAL_RCC_OscConfig+0x628>)
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	4a2e      	ldr	r2, [pc, #184]	; (8003fa0 <HAL_RCC_OscConfig+0x628>)
 8003ee6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef0:	f7fe fe82 	bl	8002bf8 <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ef8:	f7fe fe7e 	bl	8002bf8 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e046      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f0a:	4b25      	ldr	r3, [pc, #148]	; (8003fa0 <HAL_RCC_OscConfig+0x628>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1f0      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x580>
 8003f16:	e03e      	b.n	8003f96 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	2b01      	cmp	r3, #1
 8003f1e:	d101      	bne.n	8003f24 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e039      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003f24:	4b1e      	ldr	r3, [pc, #120]	; (8003fa0 <HAL_RCC_OscConfig+0x628>)
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f003 0203 	and.w	r2, r3, #3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a1b      	ldr	r3, [r3, #32]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d12c      	bne.n	8003f92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f42:	3b01      	subs	r3, #1
 8003f44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d123      	bne.n	8003f92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f54:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d11b      	bne.n	8003f92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f64:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d113      	bne.n	8003f92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f74:	085b      	lsrs	r3, r3, #1
 8003f76:	3b01      	subs	r3, #1
 8003f78:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d109      	bne.n	8003f92 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f88:	085b      	lsrs	r3, r3, #1
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d001      	beq.n	8003f96 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3720      	adds	r7, #32
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	019f800c 	.word	0x019f800c

08003fa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e11e      	b.n	80041fe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fc0:	4b91      	ldr	r3, [pc, #580]	; (8004208 <HAL_RCC_ClockConfig+0x260>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 030f 	and.w	r3, r3, #15
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d910      	bls.n	8003ff0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fce:	4b8e      	ldr	r3, [pc, #568]	; (8004208 <HAL_RCC_ClockConfig+0x260>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f023 020f 	bic.w	r2, r3, #15
 8003fd6:	498c      	ldr	r1, [pc, #560]	; (8004208 <HAL_RCC_ClockConfig+0x260>)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fde:	4b8a      	ldr	r3, [pc, #552]	; (8004208 <HAL_RCC_ClockConfig+0x260>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	683a      	ldr	r2, [r7, #0]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d001      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e106      	b.n	80041fe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d073      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	2b03      	cmp	r3, #3
 8004002:	d129      	bne.n	8004058 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004004:	4b81      	ldr	r3, [pc, #516]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d101      	bne.n	8004014 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e0f4      	b.n	80041fe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004014:	f000 f99e 	bl	8004354 <RCC_GetSysClockFreqFromPLLSource>
 8004018:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	4a7c      	ldr	r2, [pc, #496]	; (8004210 <HAL_RCC_ClockConfig+0x268>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d93f      	bls.n	80040a2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004022:	4b7a      	ldr	r3, [pc, #488]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d009      	beq.n	8004042 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004036:	2b00      	cmp	r3, #0
 8004038:	d033      	beq.n	80040a2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800403e:	2b00      	cmp	r3, #0
 8004040:	d12f      	bne.n	80040a2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004042:	4b72      	ldr	r3, [pc, #456]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800404a:	4a70      	ldr	r2, [pc, #448]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 800404c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004050:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004052:	2380      	movs	r3, #128	; 0x80
 8004054:	617b      	str	r3, [r7, #20]
 8004056:	e024      	b.n	80040a2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	2b02      	cmp	r3, #2
 800405e:	d107      	bne.n	8004070 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004060:	4b6a      	ldr	r3, [pc, #424]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d109      	bne.n	8004080 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e0c6      	b.n	80041fe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004070:	4b66      	ldr	r3, [pc, #408]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e0be      	b.n	80041fe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004080:	f000 f8ce 	bl	8004220 <HAL_RCC_GetSysClockFreq>
 8004084:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	4a61      	ldr	r2, [pc, #388]	; (8004210 <HAL_RCC_ClockConfig+0x268>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d909      	bls.n	80040a2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800408e:	4b5f      	ldr	r3, [pc, #380]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004096:	4a5d      	ldr	r2, [pc, #372]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 8004098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800409c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800409e:	2380      	movs	r3, #128	; 0x80
 80040a0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040a2:	4b5a      	ldr	r3, [pc, #360]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f023 0203 	bic.w	r2, r3, #3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	4957      	ldr	r1, [pc, #348]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040b4:	f7fe fda0 	bl	8002bf8 <HAL_GetTick>
 80040b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ba:	e00a      	b.n	80040d2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040bc:	f7fe fd9c 	bl	8002bf8 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e095      	b.n	80041fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040d2:	4b4e      	ldr	r3, [pc, #312]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f003 020c 	and.w	r2, r3, #12
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d1eb      	bne.n	80040bc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d023      	beq.n	8004138 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0304 	and.w	r3, r3, #4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d005      	beq.n	8004108 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040fc:	4b43      	ldr	r3, [pc, #268]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	4a42      	ldr	r2, [pc, #264]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 8004102:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004106:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0308 	and.w	r3, r3, #8
 8004110:	2b00      	cmp	r3, #0
 8004112:	d007      	beq.n	8004124 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004114:	4b3d      	ldr	r3, [pc, #244]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800411c:	4a3b      	ldr	r2, [pc, #236]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 800411e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004122:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004124:	4b39      	ldr	r3, [pc, #228]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	4936      	ldr	r1, [pc, #216]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 8004132:	4313      	orrs	r3, r2
 8004134:	608b      	str	r3, [r1, #8]
 8004136:	e008      	b.n	800414a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	2b80      	cmp	r3, #128	; 0x80
 800413c:	d105      	bne.n	800414a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800413e:	4b33      	ldr	r3, [pc, #204]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	4a32      	ldr	r2, [pc, #200]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 8004144:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004148:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800414a:	4b2f      	ldr	r3, [pc, #188]	; (8004208 <HAL_RCC_ClockConfig+0x260>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 030f 	and.w	r3, r3, #15
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	429a      	cmp	r2, r3
 8004156:	d21d      	bcs.n	8004194 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004158:	4b2b      	ldr	r3, [pc, #172]	; (8004208 <HAL_RCC_ClockConfig+0x260>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f023 020f 	bic.w	r2, r3, #15
 8004160:	4929      	ldr	r1, [pc, #164]	; (8004208 <HAL_RCC_ClockConfig+0x260>)
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	4313      	orrs	r3, r2
 8004166:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004168:	f7fe fd46 	bl	8002bf8 <HAL_GetTick>
 800416c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800416e:	e00a      	b.n	8004186 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004170:	f7fe fd42 	bl	8002bf8 <HAL_GetTick>
 8004174:	4602      	mov	r2, r0
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	1ad3      	subs	r3, r2, r3
 800417a:	f241 3288 	movw	r2, #5000	; 0x1388
 800417e:	4293      	cmp	r3, r2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e03b      	b.n	80041fe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004186:	4b20      	ldr	r3, [pc, #128]	; (8004208 <HAL_RCC_ClockConfig+0x260>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 030f 	and.w	r3, r3, #15
 800418e:	683a      	ldr	r2, [r7, #0]
 8004190:	429a      	cmp	r2, r3
 8004192:	d1ed      	bne.n	8004170 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b00      	cmp	r3, #0
 800419e:	d008      	beq.n	80041b2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041a0:	4b1a      	ldr	r3, [pc, #104]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	4917      	ldr	r1, [pc, #92]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f003 0308 	and.w	r3, r3, #8
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d009      	beq.n	80041d2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041be:	4b13      	ldr	r3, [pc, #76]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	490f      	ldr	r1, [pc, #60]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 80041ce:	4313      	orrs	r3, r2
 80041d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041d2:	f000 f825 	bl	8004220 <HAL_RCC_GetSysClockFreq>
 80041d6:	4602      	mov	r2, r0
 80041d8:	4b0c      	ldr	r3, [pc, #48]	; (800420c <HAL_RCC_ClockConfig+0x264>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	091b      	lsrs	r3, r3, #4
 80041de:	f003 030f 	and.w	r3, r3, #15
 80041e2:	490c      	ldr	r1, [pc, #48]	; (8004214 <HAL_RCC_ClockConfig+0x26c>)
 80041e4:	5ccb      	ldrb	r3, [r1, r3]
 80041e6:	f003 031f 	and.w	r3, r3, #31
 80041ea:	fa22 f303 	lsr.w	r3, r2, r3
 80041ee:	4a0a      	ldr	r2, [pc, #40]	; (8004218 <HAL_RCC_ClockConfig+0x270>)
 80041f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80041f2:	4b0a      	ldr	r3, [pc, #40]	; (800421c <HAL_RCC_ClockConfig+0x274>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7fe fcb2 	bl	8002b60 <HAL_InitTick>
 80041fc:	4603      	mov	r3, r0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3718      	adds	r7, #24
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	40022000 	.word	0x40022000
 800420c:	40021000 	.word	0x40021000
 8004210:	04c4b400 	.word	0x04c4b400
 8004214:	080071fc 	.word	0x080071fc
 8004218:	20000000 	.word	0x20000000
 800421c:	20000004 	.word	0x20000004

08004220 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004220:	b480      	push	{r7}
 8004222:	b087      	sub	sp, #28
 8004224:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004226:	4b2c      	ldr	r3, [pc, #176]	; (80042d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f003 030c 	and.w	r3, r3, #12
 800422e:	2b04      	cmp	r3, #4
 8004230:	d102      	bne.n	8004238 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004232:	4b2a      	ldr	r3, [pc, #168]	; (80042dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004234:	613b      	str	r3, [r7, #16]
 8004236:	e047      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004238:	4b27      	ldr	r3, [pc, #156]	; (80042d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	f003 030c 	and.w	r3, r3, #12
 8004240:	2b08      	cmp	r3, #8
 8004242:	d102      	bne.n	800424a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004244:	4b26      	ldr	r3, [pc, #152]	; (80042e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004246:	613b      	str	r3, [r7, #16]
 8004248:	e03e      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800424a:	4b23      	ldr	r3, [pc, #140]	; (80042d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f003 030c 	and.w	r3, r3, #12
 8004252:	2b0c      	cmp	r3, #12
 8004254:	d136      	bne.n	80042c4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004256:	4b20      	ldr	r3, [pc, #128]	; (80042d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	f003 0303 	and.w	r3, r3, #3
 800425e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004260:	4b1d      	ldr	r3, [pc, #116]	; (80042d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	091b      	lsrs	r3, r3, #4
 8004266:	f003 030f 	and.w	r3, r3, #15
 800426a:	3301      	adds	r3, #1
 800426c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2b03      	cmp	r3, #3
 8004272:	d10c      	bne.n	800428e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004274:	4a1a      	ldr	r2, [pc, #104]	; (80042e0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	fbb2 f3f3 	udiv	r3, r2, r3
 800427c:	4a16      	ldr	r2, [pc, #88]	; (80042d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800427e:	68d2      	ldr	r2, [r2, #12]
 8004280:	0a12      	lsrs	r2, r2, #8
 8004282:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004286:	fb02 f303 	mul.w	r3, r2, r3
 800428a:	617b      	str	r3, [r7, #20]
      break;
 800428c:	e00c      	b.n	80042a8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800428e:	4a13      	ldr	r2, [pc, #76]	; (80042dc <HAL_RCC_GetSysClockFreq+0xbc>)
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	fbb2 f3f3 	udiv	r3, r2, r3
 8004296:	4a10      	ldr	r2, [pc, #64]	; (80042d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004298:	68d2      	ldr	r2, [r2, #12]
 800429a:	0a12      	lsrs	r2, r2, #8
 800429c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042a0:	fb02 f303 	mul.w	r3, r2, r3
 80042a4:	617b      	str	r3, [r7, #20]
      break;
 80042a6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80042a8:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	0e5b      	lsrs	r3, r3, #25
 80042ae:	f003 0303 	and.w	r3, r3, #3
 80042b2:	3301      	adds	r3, #1
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c0:	613b      	str	r3, [r7, #16]
 80042c2:	e001      	b.n	80042c8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80042c4:	2300      	movs	r3, #0
 80042c6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80042c8:	693b      	ldr	r3, [r7, #16]
}
 80042ca:	4618      	mov	r0, r3
 80042cc:	371c      	adds	r7, #28
 80042ce:	46bd      	mov	sp, r7
 80042d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d4:	4770      	bx	lr
 80042d6:	bf00      	nop
 80042d8:	40021000 	.word	0x40021000
 80042dc:	00f42400 	.word	0x00f42400
 80042e0:	016e3600 	.word	0x016e3600

080042e4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042e4:	b480      	push	{r7}
 80042e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042e8:	4b03      	ldr	r3, [pc, #12]	; (80042f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80042ea:	681b      	ldr	r3, [r3, #0]
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr
 80042f6:	bf00      	nop
 80042f8:	20000000 	.word	0x20000000

080042fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004300:	f7ff fff0 	bl	80042e4 <HAL_RCC_GetHCLKFreq>
 8004304:	4602      	mov	r2, r0
 8004306:	4b06      	ldr	r3, [pc, #24]	; (8004320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	0a1b      	lsrs	r3, r3, #8
 800430c:	f003 0307 	and.w	r3, r3, #7
 8004310:	4904      	ldr	r1, [pc, #16]	; (8004324 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004312:	5ccb      	ldrb	r3, [r1, r3]
 8004314:	f003 031f 	and.w	r3, r3, #31
 8004318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800431c:	4618      	mov	r0, r3
 800431e:	bd80      	pop	{r7, pc}
 8004320:	40021000 	.word	0x40021000
 8004324:	0800720c 	.word	0x0800720c

08004328 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800432c:	f7ff ffda 	bl	80042e4 <HAL_RCC_GetHCLKFreq>
 8004330:	4602      	mov	r2, r0
 8004332:	4b06      	ldr	r3, [pc, #24]	; (800434c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	0adb      	lsrs	r3, r3, #11
 8004338:	f003 0307 	and.w	r3, r3, #7
 800433c:	4904      	ldr	r1, [pc, #16]	; (8004350 <HAL_RCC_GetPCLK2Freq+0x28>)
 800433e:	5ccb      	ldrb	r3, [r1, r3]
 8004340:	f003 031f 	and.w	r3, r3, #31
 8004344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004348:	4618      	mov	r0, r3
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40021000 	.word	0x40021000
 8004350:	0800720c 	.word	0x0800720c

08004354 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004354:	b480      	push	{r7}
 8004356:	b087      	sub	sp, #28
 8004358:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800435a:	4b1e      	ldr	r3, [pc, #120]	; (80043d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	f003 0303 	and.w	r3, r3, #3
 8004362:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004364:	4b1b      	ldr	r3, [pc, #108]	; (80043d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	091b      	lsrs	r3, r3, #4
 800436a:	f003 030f 	and.w	r3, r3, #15
 800436e:	3301      	adds	r3, #1
 8004370:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	2b03      	cmp	r3, #3
 8004376:	d10c      	bne.n	8004392 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004378:	4a17      	ldr	r2, [pc, #92]	; (80043d8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004380:	4a14      	ldr	r2, [pc, #80]	; (80043d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004382:	68d2      	ldr	r2, [r2, #12]
 8004384:	0a12      	lsrs	r2, r2, #8
 8004386:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800438a:	fb02 f303 	mul.w	r3, r2, r3
 800438e:	617b      	str	r3, [r7, #20]
    break;
 8004390:	e00c      	b.n	80043ac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004392:	4a12      	ldr	r2, [pc, #72]	; (80043dc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	fbb2 f3f3 	udiv	r3, r2, r3
 800439a:	4a0e      	ldr	r2, [pc, #56]	; (80043d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800439c:	68d2      	ldr	r2, [r2, #12]
 800439e:	0a12      	lsrs	r2, r2, #8
 80043a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80043a4:	fb02 f303 	mul.w	r3, r2, r3
 80043a8:	617b      	str	r3, [r7, #20]
    break;
 80043aa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80043ac:	4b09      	ldr	r3, [pc, #36]	; (80043d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	0e5b      	lsrs	r3, r3, #25
 80043b2:	f003 0303 	and.w	r3, r3, #3
 80043b6:	3301      	adds	r3, #1
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80043bc:	697a      	ldr	r2, [r7, #20]
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80043c6:	687b      	ldr	r3, [r7, #4]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	371c      	adds	r7, #28
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr
 80043d4:	40021000 	.word	0x40021000
 80043d8:	016e3600 	.word	0x016e3600
 80043dc:	00f42400 	.word	0x00f42400

080043e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043e8:	2300      	movs	r3, #0
 80043ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043ec:	2300      	movs	r3, #0
 80043ee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 8098 	beq.w	800452e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043fe:	2300      	movs	r3, #0
 8004400:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004402:	4b43      	ldr	r3, [pc, #268]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d10d      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800440e:	4b40      	ldr	r3, [pc, #256]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004412:	4a3f      	ldr	r2, [pc, #252]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004418:	6593      	str	r3, [r2, #88]	; 0x58
 800441a:	4b3d      	ldr	r3, [pc, #244]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800441c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800441e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004422:	60bb      	str	r3, [r7, #8]
 8004424:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004426:	2301      	movs	r3, #1
 8004428:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800442a:	4b3a      	ldr	r3, [pc, #232]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a39      	ldr	r2, [pc, #228]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004434:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004436:	f7fe fbdf 	bl	8002bf8 <HAL_GetTick>
 800443a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800443c:	e009      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800443e:	f7fe fbdb 	bl	8002bf8 <HAL_GetTick>
 8004442:	4602      	mov	r2, r0
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	1ad3      	subs	r3, r2, r3
 8004448:	2b02      	cmp	r3, #2
 800444a:	d902      	bls.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800444c:	2303      	movs	r3, #3
 800444e:	74fb      	strb	r3, [r7, #19]
        break;
 8004450:	e005      	b.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004452:	4b30      	ldr	r3, [pc, #192]	; (8004514 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0ef      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800445e:	7cfb      	ldrb	r3, [r7, #19]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d159      	bne.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004464:	4b2a      	ldr	r3, [pc, #168]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800446a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800446e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d01e      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	429a      	cmp	r2, r3
 800447e:	d019      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004480:	4b23      	ldr	r3, [pc, #140]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800448a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800448c:	4b20      	ldr	r3, [pc, #128]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800448e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004492:	4a1f      	ldr	r2, [pc, #124]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800449c:	4b1c      	ldr	r3, [pc, #112]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800449e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a2:	4a1b      	ldr	r2, [pc, #108]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80044ac:	4a18      	ldr	r2, [pc, #96]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	f003 0301 	and.w	r3, r3, #1
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d016      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044be:	f7fe fb9b 	bl	8002bf8 <HAL_GetTick>
 80044c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044c4:	e00b      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044c6:	f7fe fb97 	bl	8002bf8 <HAL_GetTick>
 80044ca:	4602      	mov	r2, r0
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d902      	bls.n	80044de <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	74fb      	strb	r3, [r7, #19]
            break;
 80044dc:	e006      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044de:	4b0c      	ldr	r3, [pc, #48]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0ec      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80044ec:	7cfb      	ldrb	r3, [r7, #19]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d10b      	bne.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80044f2:	4b07      	ldr	r3, [pc, #28]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80044f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004500:	4903      	ldr	r1, [pc, #12]	; (8004510 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004502:	4313      	orrs	r3, r2
 8004504:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004508:	e008      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800450a:	7cfb      	ldrb	r3, [r7, #19]
 800450c:	74bb      	strb	r3, [r7, #18]
 800450e:	e005      	b.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004510:	40021000 	.word	0x40021000
 8004514:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004518:	7cfb      	ldrb	r3, [r7, #19]
 800451a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800451c:	7c7b      	ldrb	r3, [r7, #17]
 800451e:	2b01      	cmp	r3, #1
 8004520:	d105      	bne.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004522:	4ba7      	ldr	r3, [pc, #668]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004526:	4aa6      	ldr	r2, [pc, #664]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004528:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800452c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00a      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800453a:	4ba1      	ldr	r3, [pc, #644]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800453c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004540:	f023 0203 	bic.w	r2, r3, #3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	499d      	ldr	r1, [pc, #628]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800454a:	4313      	orrs	r3, r2
 800454c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00a      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800455c:	4b98      	ldr	r3, [pc, #608]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800455e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004562:	f023 020c 	bic.w	r2, r3, #12
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	4995      	ldr	r1, [pc, #596]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800456c:	4313      	orrs	r3, r2
 800456e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0304 	and.w	r3, r3, #4
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00a      	beq.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800457e:	4b90      	ldr	r3, [pc, #576]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004584:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	498c      	ldr	r1, [pc, #560]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800458e:	4313      	orrs	r3, r2
 8004590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0308 	and.w	r3, r3, #8
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00a      	beq.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045a0:	4b87      	ldr	r3, [pc, #540]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	4984      	ldr	r1, [pc, #528]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0310 	and.w	r3, r3, #16
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045c2:	4b7f      	ldr	r3, [pc, #508]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	497b      	ldr	r1, [pc, #492]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0320 	and.w	r3, r3, #32
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00a      	beq.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045e4:	4b76      	ldr	r3, [pc, #472]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	4973      	ldr	r1, [pc, #460]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00a      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004606:	4b6e      	ldr	r3, [pc, #440]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800460c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	496a      	ldr	r1, [pc, #424]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004616:	4313      	orrs	r3, r2
 8004618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004624:	2b00      	cmp	r3, #0
 8004626:	d00a      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004628:	4b65      	ldr	r3, [pc, #404]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800462a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a1b      	ldr	r3, [r3, #32]
 8004636:	4962      	ldr	r1, [pc, #392]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004638:	4313      	orrs	r3, r2
 800463a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00a      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800464a:	4b5d      	ldr	r3, [pc, #372]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800464c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004650:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004658:	4959      	ldr	r1, [pc, #356]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800465a:	4313      	orrs	r3, r2
 800465c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00a      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800466c:	4b54      	ldr	r3, [pc, #336]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800466e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004672:	f023 0203 	bic.w	r2, r3, #3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800467a:	4951      	ldr	r1, [pc, #324]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800467c:	4313      	orrs	r3, r2
 800467e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00a      	beq.n	80046a4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800468e:	4b4c      	ldr	r3, [pc, #304]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004694:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469c:	4948      	ldr	r1, [pc, #288]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d015      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046b0:	4b43      	ldr	r3, [pc, #268]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046be:	4940      	ldr	r1, [pc, #256]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046ce:	d105      	bne.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046d0:	4b3b      	ldr	r3, [pc, #236]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	4a3a      	ldr	r2, [pc, #232]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046da:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d015      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80046e8:	4b35      	ldr	r3, [pc, #212]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046f6:	4932      	ldr	r1, [pc, #200]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004702:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004706:	d105      	bne.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004708:	4b2d      	ldr	r3, [pc, #180]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	4a2c      	ldr	r2, [pc, #176]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800470e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004712:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800471c:	2b00      	cmp	r3, #0
 800471e:	d015      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004720:	4b27      	ldr	r3, [pc, #156]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004726:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472e:	4924      	ldr	r1, [pc, #144]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004730:	4313      	orrs	r3, r2
 8004732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800473e:	d105      	bne.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004740:	4b1f      	ldr	r3, [pc, #124]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	4a1e      	ldr	r2, [pc, #120]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004746:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800474a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d015      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004758:	4b19      	ldr	r3, [pc, #100]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800475a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004766:	4916      	ldr	r1, [pc, #88]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004768:	4313      	orrs	r3, r2
 800476a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004772:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004776:	d105      	bne.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004778:	4b11      	ldr	r3, [pc, #68]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	4a10      	ldr	r2, [pc, #64]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800477e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004782:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d019      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004790:	4b0b      	ldr	r3, [pc, #44]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004796:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	4908      	ldr	r1, [pc, #32]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047ae:	d109      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047b0:	4b03      	ldr	r3, [pc, #12]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	4a02      	ldr	r2, [pc, #8]	; (80047c0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80047b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047ba:	60d3      	str	r3, [r2, #12]
 80047bc:	e002      	b.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80047be:	bf00      	nop
 80047c0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d015      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80047d0:	4b29      	ldr	r3, [pc, #164]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047de:	4926      	ldr	r1, [pc, #152]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047e0:	4313      	orrs	r3, r2
 80047e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80047ee:	d105      	bne.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80047f0:	4b21      	ldr	r3, [pc, #132]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	4a20      	ldr	r2, [pc, #128]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80047f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047fa:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d015      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004808:	4b1b      	ldr	r3, [pc, #108]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800480a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800480e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004816:	4918      	ldr	r1, [pc, #96]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004818:	4313      	orrs	r3, r2
 800481a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004822:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004826:	d105      	bne.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004828:	4b13      	ldr	r3, [pc, #76]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	4a12      	ldr	r2, [pc, #72]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800482e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004832:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d015      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004840:	4b0d      	ldr	r3, [pc, #52]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004842:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004846:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800484e:	490a      	ldr	r1, [pc, #40]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004850:	4313      	orrs	r3, r2
 8004852:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800485a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800485e:	d105      	bne.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004860:	4b05      	ldr	r3, [pc, #20]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	4a04      	ldr	r2, [pc, #16]	; (8004878 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004866:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800486a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800486c:	7cbb      	ldrb	r3, [r7, #18]
}
 800486e:	4618      	mov	r0, r3
 8004870:	3718      	adds	r7, #24
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	40021000 	.word	0x40021000

0800487c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e049      	b.n	8004922 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004894:	b2db      	uxtb	r3, r3
 8004896:	2b00      	cmp	r3, #0
 8004898:	d106      	bne.n	80048a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7fd ffc0 	bl	8002828 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	3304      	adds	r3, #4
 80048b8:	4619      	mov	r1, r3
 80048ba:	4610      	mov	r0, r2
 80048bc:	f000 fcde 	bl	800527c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2201      	movs	r2, #1
 80048c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2201      	movs	r2, #1
 80048d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2201      	movs	r2, #1
 80048dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2201      	movs	r2, #1
 80048fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2201      	movs	r2, #1
 800490c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2201      	movs	r2, #1
 800491c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3708      	adds	r7, #8
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
	...

0800492c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800493a:	b2db      	uxtb	r3, r3
 800493c:	2b01      	cmp	r3, #1
 800493e:	d001      	beq.n	8004944 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e054      	b.n	80049ee <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68da      	ldr	r2, [r3, #12]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f042 0201 	orr.w	r2, r2, #1
 800495a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a26      	ldr	r2, [pc, #152]	; (80049fc <HAL_TIM_Base_Start_IT+0xd0>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d022      	beq.n	80049ac <HAL_TIM_Base_Start_IT+0x80>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800496e:	d01d      	beq.n	80049ac <HAL_TIM_Base_Start_IT+0x80>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a22      	ldr	r2, [pc, #136]	; (8004a00 <HAL_TIM_Base_Start_IT+0xd4>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d018      	beq.n	80049ac <HAL_TIM_Base_Start_IT+0x80>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a21      	ldr	r2, [pc, #132]	; (8004a04 <HAL_TIM_Base_Start_IT+0xd8>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d013      	beq.n	80049ac <HAL_TIM_Base_Start_IT+0x80>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a1f      	ldr	r2, [pc, #124]	; (8004a08 <HAL_TIM_Base_Start_IT+0xdc>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d00e      	beq.n	80049ac <HAL_TIM_Base_Start_IT+0x80>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a1e      	ldr	r2, [pc, #120]	; (8004a0c <HAL_TIM_Base_Start_IT+0xe0>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d009      	beq.n	80049ac <HAL_TIM_Base_Start_IT+0x80>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a1c      	ldr	r2, [pc, #112]	; (8004a10 <HAL_TIM_Base_Start_IT+0xe4>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d004      	beq.n	80049ac <HAL_TIM_Base_Start_IT+0x80>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a1b      	ldr	r2, [pc, #108]	; (8004a14 <HAL_TIM_Base_Start_IT+0xe8>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d115      	bne.n	80049d8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689a      	ldr	r2, [r3, #8]
 80049b2:	4b19      	ldr	r3, [pc, #100]	; (8004a18 <HAL_TIM_Base_Start_IT+0xec>)
 80049b4:	4013      	ands	r3, r2
 80049b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2b06      	cmp	r3, #6
 80049bc:	d015      	beq.n	80049ea <HAL_TIM_Base_Start_IT+0xbe>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c4:	d011      	beq.n	80049ea <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f042 0201 	orr.w	r2, r2, #1
 80049d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d6:	e008      	b.n	80049ea <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	681a      	ldr	r2, [r3, #0]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f042 0201 	orr.w	r2, r2, #1
 80049e6:	601a      	str	r2, [r3, #0]
 80049e8:	e000      	b.n	80049ec <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049ec:	2300      	movs	r3, #0
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3714      	adds	r7, #20
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	40012c00 	.word	0x40012c00
 8004a00:	40000400 	.word	0x40000400
 8004a04:	40000800 	.word	0x40000800
 8004a08:	40000c00 	.word	0x40000c00
 8004a0c:	40013400 	.word	0x40013400
 8004a10:	40014000 	.word	0x40014000
 8004a14:	40015000 	.word	0x40015000
 8004a18:	00010007 	.word	0x00010007

08004a1c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d101      	bne.n	8004a2e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e049      	b.n	8004ac2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d106      	bne.n	8004a48 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f7fd fe90 	bl	8002768 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	3304      	adds	r3, #4
 8004a58:	4619      	mov	r1, r3
 8004a5a:	4610      	mov	r0, r2
 8004a5c:	f000 fc0e 	bl	800527c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2201      	movs	r2, #1
 8004a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ac0:	2300      	movs	r3, #0
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
	...

08004acc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d109      	bne.n	8004af0 <HAL_TIM_PWM_Start+0x24>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	bf14      	ite	ne
 8004ae8:	2301      	movne	r3, #1
 8004aea:	2300      	moveq	r3, #0
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	e03c      	b.n	8004b6a <HAL_TIM_PWM_Start+0x9e>
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d109      	bne.n	8004b0a <HAL_TIM_PWM_Start+0x3e>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	bf14      	ite	ne
 8004b02:	2301      	movne	r3, #1
 8004b04:	2300      	moveq	r3, #0
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	e02f      	b.n	8004b6a <HAL_TIM_PWM_Start+0x9e>
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b08      	cmp	r3, #8
 8004b0e:	d109      	bne.n	8004b24 <HAL_TIM_PWM_Start+0x58>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	bf14      	ite	ne
 8004b1c:	2301      	movne	r3, #1
 8004b1e:	2300      	moveq	r3, #0
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	e022      	b.n	8004b6a <HAL_TIM_PWM_Start+0x9e>
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	2b0c      	cmp	r3, #12
 8004b28:	d109      	bne.n	8004b3e <HAL_TIM_PWM_Start+0x72>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	bf14      	ite	ne
 8004b36:	2301      	movne	r3, #1
 8004b38:	2300      	moveq	r3, #0
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	e015      	b.n	8004b6a <HAL_TIM_PWM_Start+0x9e>
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	2b10      	cmp	r3, #16
 8004b42:	d109      	bne.n	8004b58 <HAL_TIM_PWM_Start+0x8c>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	bf14      	ite	ne
 8004b50:	2301      	movne	r3, #1
 8004b52:	2300      	moveq	r3, #0
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	e008      	b.n	8004b6a <HAL_TIM_PWM_Start+0x9e>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	bf14      	ite	ne
 8004b64:	2301      	movne	r3, #1
 8004b66:	2300      	moveq	r3, #0
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e0a6      	b.n	8004cc0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d104      	bne.n	8004b82 <HAL_TIM_PWM_Start+0xb6>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b80:	e023      	b.n	8004bca <HAL_TIM_PWM_Start+0xfe>
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	2b04      	cmp	r3, #4
 8004b86:	d104      	bne.n	8004b92 <HAL_TIM_PWM_Start+0xc6>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2202      	movs	r2, #2
 8004b8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b90:	e01b      	b.n	8004bca <HAL_TIM_PWM_Start+0xfe>
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	2b08      	cmp	r3, #8
 8004b96:	d104      	bne.n	8004ba2 <HAL_TIM_PWM_Start+0xd6>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2202      	movs	r2, #2
 8004b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ba0:	e013      	b.n	8004bca <HAL_TIM_PWM_Start+0xfe>
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	2b0c      	cmp	r3, #12
 8004ba6:	d104      	bne.n	8004bb2 <HAL_TIM_PWM_Start+0xe6>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bb0:	e00b      	b.n	8004bca <HAL_TIM_PWM_Start+0xfe>
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2b10      	cmp	r3, #16
 8004bb6:	d104      	bne.n	8004bc2 <HAL_TIM_PWM_Start+0xf6>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bc0:	e003      	b.n	8004bca <HAL_TIM_PWM_Start+0xfe>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2202      	movs	r2, #2
 8004bc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	6839      	ldr	r1, [r7, #0]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 ff24 	bl	8005a20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a3a      	ldr	r2, [pc, #232]	; (8004cc8 <HAL_TIM_PWM_Start+0x1fc>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d018      	beq.n	8004c14 <HAL_TIM_PWM_Start+0x148>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a39      	ldr	r2, [pc, #228]	; (8004ccc <HAL_TIM_PWM_Start+0x200>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d013      	beq.n	8004c14 <HAL_TIM_PWM_Start+0x148>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a37      	ldr	r2, [pc, #220]	; (8004cd0 <HAL_TIM_PWM_Start+0x204>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d00e      	beq.n	8004c14 <HAL_TIM_PWM_Start+0x148>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a36      	ldr	r2, [pc, #216]	; (8004cd4 <HAL_TIM_PWM_Start+0x208>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d009      	beq.n	8004c14 <HAL_TIM_PWM_Start+0x148>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a34      	ldr	r2, [pc, #208]	; (8004cd8 <HAL_TIM_PWM_Start+0x20c>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d004      	beq.n	8004c14 <HAL_TIM_PWM_Start+0x148>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a33      	ldr	r2, [pc, #204]	; (8004cdc <HAL_TIM_PWM_Start+0x210>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d101      	bne.n	8004c18 <HAL_TIM_PWM_Start+0x14c>
 8004c14:	2301      	movs	r3, #1
 8004c16:	e000      	b.n	8004c1a <HAL_TIM_PWM_Start+0x14e>
 8004c18:	2300      	movs	r3, #0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d007      	beq.n	8004c2e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c2c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a25      	ldr	r2, [pc, #148]	; (8004cc8 <HAL_TIM_PWM_Start+0x1fc>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d022      	beq.n	8004c7e <HAL_TIM_PWM_Start+0x1b2>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c40:	d01d      	beq.n	8004c7e <HAL_TIM_PWM_Start+0x1b2>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a26      	ldr	r2, [pc, #152]	; (8004ce0 <HAL_TIM_PWM_Start+0x214>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d018      	beq.n	8004c7e <HAL_TIM_PWM_Start+0x1b2>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a24      	ldr	r2, [pc, #144]	; (8004ce4 <HAL_TIM_PWM_Start+0x218>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d013      	beq.n	8004c7e <HAL_TIM_PWM_Start+0x1b2>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a23      	ldr	r2, [pc, #140]	; (8004ce8 <HAL_TIM_PWM_Start+0x21c>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d00e      	beq.n	8004c7e <HAL_TIM_PWM_Start+0x1b2>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a19      	ldr	r2, [pc, #100]	; (8004ccc <HAL_TIM_PWM_Start+0x200>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d009      	beq.n	8004c7e <HAL_TIM_PWM_Start+0x1b2>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a18      	ldr	r2, [pc, #96]	; (8004cd0 <HAL_TIM_PWM_Start+0x204>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d004      	beq.n	8004c7e <HAL_TIM_PWM_Start+0x1b2>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a18      	ldr	r2, [pc, #96]	; (8004cdc <HAL_TIM_PWM_Start+0x210>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d115      	bne.n	8004caa <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	4b19      	ldr	r3, [pc, #100]	; (8004cec <HAL_TIM_PWM_Start+0x220>)
 8004c86:	4013      	ands	r3, r2
 8004c88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	2b06      	cmp	r3, #6
 8004c8e:	d015      	beq.n	8004cbc <HAL_TIM_PWM_Start+0x1f0>
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c96:	d011      	beq.n	8004cbc <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f042 0201 	orr.w	r2, r2, #1
 8004ca6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca8:	e008      	b.n	8004cbc <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f042 0201 	orr.w	r2, r2, #1
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	e000      	b.n	8004cbe <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cbc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cbe:	2300      	movs	r3, #0
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}
 8004cc8:	40012c00 	.word	0x40012c00
 8004ccc:	40013400 	.word	0x40013400
 8004cd0:	40014000 	.word	0x40014000
 8004cd4:	40014400 	.word	0x40014400
 8004cd8:	40014800 	.word	0x40014800
 8004cdc:	40015000 	.word	0x40015000
 8004ce0:	40000400 	.word	0x40000400
 8004ce4:	40000800 	.word	0x40000800
 8004ce8:	40000c00 	.word	0x40000c00
 8004cec:	00010007 	.word	0x00010007

08004cf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	691b      	ldr	r3, [r3, #16]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b02      	cmp	r3, #2
 8004d04:	d122      	bne.n	8004d4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	f003 0302 	and.w	r3, r3, #2
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d11b      	bne.n	8004d4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f06f 0202 	mvn.w	r2, #2
 8004d1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	f003 0303 	and.w	r3, r3, #3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d003      	beq.n	8004d3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 fa84 	bl	8005240 <HAL_TIM_IC_CaptureCallback>
 8004d38:	e005      	b.n	8004d46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 fa76 	bl	800522c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 fa87 	bl	8005254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	691b      	ldr	r3, [r3, #16]
 8004d52:	f003 0304 	and.w	r3, r3, #4
 8004d56:	2b04      	cmp	r3, #4
 8004d58:	d122      	bne.n	8004da0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f003 0304 	and.w	r3, r3, #4
 8004d64:	2b04      	cmp	r3, #4
 8004d66:	d11b      	bne.n	8004da0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f06f 0204 	mvn.w	r2, #4
 8004d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2202      	movs	r2, #2
 8004d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d003      	beq.n	8004d8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 fa5a 	bl	8005240 <HAL_TIM_IC_CaptureCallback>
 8004d8c:	e005      	b.n	8004d9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f000 fa4c 	bl	800522c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d94:	6878      	ldr	r0, [r7, #4]
 8004d96:	f000 fa5d 	bl	8005254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	f003 0308 	and.w	r3, r3, #8
 8004daa:	2b08      	cmp	r3, #8
 8004dac:	d122      	bne.n	8004df4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68db      	ldr	r3, [r3, #12]
 8004db4:	f003 0308 	and.w	r3, r3, #8
 8004db8:	2b08      	cmp	r3, #8
 8004dba:	d11b      	bne.n	8004df4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f06f 0208 	mvn.w	r2, #8
 8004dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2204      	movs	r2, #4
 8004dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	69db      	ldr	r3, [r3, #28]
 8004dd2:	f003 0303 	and.w	r3, r3, #3
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d003      	beq.n	8004de2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 fa30 	bl	8005240 <HAL_TIM_IC_CaptureCallback>
 8004de0:	e005      	b.n	8004dee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 fa22 	bl	800522c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f000 fa33 	bl	8005254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	f003 0310 	and.w	r3, r3, #16
 8004dfe:	2b10      	cmp	r3, #16
 8004e00:	d122      	bne.n	8004e48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	f003 0310 	and.w	r3, r3, #16
 8004e0c:	2b10      	cmp	r3, #16
 8004e0e:	d11b      	bne.n	8004e48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f06f 0210 	mvn.w	r2, #16
 8004e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2208      	movs	r2, #8
 8004e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d003      	beq.n	8004e36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f000 fa06 	bl	8005240 <HAL_TIM_IC_CaptureCallback>
 8004e34:	e005      	b.n	8004e42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f9f8 	bl	800522c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 fa09 	bl	8005254 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d10e      	bne.n	8004e74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d107      	bne.n	8004e74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f06f 0201 	mvn.w	r2, #1
 8004e6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 f9d2 	bl	8005218 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e7e:	2b80      	cmp	r3, #128	; 0x80
 8004e80:	d10e      	bne.n	8004ea0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e8c:	2b80      	cmp	r3, #128	; 0x80
 8004e8e:	d107      	bne.n	8004ea0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 ff38 	bl	8005d10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eaa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eae:	d10e      	bne.n	8004ece <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004eba:	2b80      	cmp	r3, #128	; 0x80
 8004ebc:	d107      	bne.n	8004ece <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 ff2b 	bl	8005d24 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed8:	2b40      	cmp	r3, #64	; 0x40
 8004eda:	d10e      	bne.n	8004efa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee6:	2b40      	cmp	r3, #64	; 0x40
 8004ee8:	d107      	bne.n	8004efa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ef2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 f9b7 	bl	8005268 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	f003 0320 	and.w	r3, r3, #32
 8004f04:	2b20      	cmp	r3, #32
 8004f06:	d10e      	bne.n	8004f26 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	f003 0320 	and.w	r3, r3, #32
 8004f12:	2b20      	cmp	r3, #32
 8004f14:	d107      	bne.n	8004f26 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f06f 0220 	mvn.w	r2, #32
 8004f1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 feeb 	bl	8005cfc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	691b      	ldr	r3, [r3, #16]
 8004f2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f34:	d10f      	bne.n	8004f56 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f44:	d107      	bne.n	8004f56 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004f4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 fef1 	bl	8005d38 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f64:	d10f      	bne.n	8004f86 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f74:	d107      	bne.n	8004f86 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004f7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 fee3 	bl	8005d4c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f94:	d10f      	bne.n	8004fb6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fa0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fa4:	d107      	bne.n	8004fb6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 fed5 	bl	8005d60 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fc4:	d10f      	bne.n	8004fe6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fd0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004fd4:	d107      	bne.n	8004fe6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 fec7 	bl	8005d74 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004fe6:	bf00      	nop
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
	...

08004ff0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005006:	2b01      	cmp	r3, #1
 8005008:	d101      	bne.n	800500e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800500a:	2302      	movs	r3, #2
 800500c:	e0ff      	b.n	800520e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b14      	cmp	r3, #20
 800501a:	f200 80f0 	bhi.w	80051fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800501e:	a201      	add	r2, pc, #4	; (adr r2, 8005024 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005024:	08005079 	.word	0x08005079
 8005028:	080051ff 	.word	0x080051ff
 800502c:	080051ff 	.word	0x080051ff
 8005030:	080051ff 	.word	0x080051ff
 8005034:	080050b9 	.word	0x080050b9
 8005038:	080051ff 	.word	0x080051ff
 800503c:	080051ff 	.word	0x080051ff
 8005040:	080051ff 	.word	0x080051ff
 8005044:	080050fb 	.word	0x080050fb
 8005048:	080051ff 	.word	0x080051ff
 800504c:	080051ff 	.word	0x080051ff
 8005050:	080051ff 	.word	0x080051ff
 8005054:	0800513b 	.word	0x0800513b
 8005058:	080051ff 	.word	0x080051ff
 800505c:	080051ff 	.word	0x080051ff
 8005060:	080051ff 	.word	0x080051ff
 8005064:	0800517d 	.word	0x0800517d
 8005068:	080051ff 	.word	0x080051ff
 800506c:	080051ff 	.word	0x080051ff
 8005070:	080051ff 	.word	0x080051ff
 8005074:	080051bd 	.word	0x080051bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68b9      	ldr	r1, [r7, #8]
 800507e:	4618      	mov	r0, r3
 8005080:	f000 f9a4 	bl	80053cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	699a      	ldr	r2, [r3, #24]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f042 0208 	orr.w	r2, r2, #8
 8005092:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	699a      	ldr	r2, [r3, #24]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f022 0204 	bic.w	r2, r2, #4
 80050a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6999      	ldr	r1, [r3, #24]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	691a      	ldr	r2, [r3, #16]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	619a      	str	r2, [r3, #24]
      break;
 80050b6:	e0a5      	b.n	8005204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	68b9      	ldr	r1, [r7, #8]
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 fa1e 	bl	8005500 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	699a      	ldr	r2, [r3, #24]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	699a      	ldr	r2, [r3, #24]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6999      	ldr	r1, [r3, #24]
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	021a      	lsls	r2, r3, #8
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	430a      	orrs	r2, r1
 80050f6:	619a      	str	r2, [r3, #24]
      break;
 80050f8:	e084      	b.n	8005204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68b9      	ldr	r1, [r7, #8]
 8005100:	4618      	mov	r0, r3
 8005102:	f000 fa91 	bl	8005628 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	69da      	ldr	r2, [r3, #28]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f042 0208 	orr.w	r2, r2, #8
 8005114:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	69da      	ldr	r2, [r3, #28]
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f022 0204 	bic.w	r2, r2, #4
 8005124:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	69d9      	ldr	r1, [r3, #28]
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	691a      	ldr	r2, [r3, #16]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	61da      	str	r2, [r3, #28]
      break;
 8005138:	e064      	b.n	8005204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68b9      	ldr	r1, [r7, #8]
 8005140:	4618      	mov	r0, r3
 8005142:	f000 fb03 	bl	800574c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	69da      	ldr	r2, [r3, #28]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005154:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	69da      	ldr	r2, [r3, #28]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005164:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	69d9      	ldr	r1, [r3, #28]
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	021a      	lsls	r2, r3, #8
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	61da      	str	r2, [r3, #28]
      break;
 800517a:	e043      	b.n	8005204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	68b9      	ldr	r1, [r7, #8]
 8005182:	4618      	mov	r0, r3
 8005184:	f000 fb76 	bl	8005874 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0208 	orr.w	r2, r2, #8
 8005196:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f022 0204 	bic.w	r2, r2, #4
 80051a6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	691a      	ldr	r2, [r3, #16]
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80051ba:	e023      	b.n	8005204 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	68b9      	ldr	r1, [r7, #8]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 fbc0 	bl	8005948 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051d6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051e6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	021a      	lsls	r2, r3, #8
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80051fc:	e002      	b.n	8005204 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	75fb      	strb	r3, [r7, #23]
      break;
 8005202:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800520c:	7dfb      	ldrb	r3, [r7, #23]
}
 800520e:	4618      	mov	r0, r3
 8005210:	3718      	adds	r7, #24
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop

08005218 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a46      	ldr	r2, [pc, #280]	; (80053a8 <TIM_Base_SetConfig+0x12c>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d017      	beq.n	80052c4 <TIM_Base_SetConfig+0x48>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800529a:	d013      	beq.n	80052c4 <TIM_Base_SetConfig+0x48>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a43      	ldr	r2, [pc, #268]	; (80053ac <TIM_Base_SetConfig+0x130>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d00f      	beq.n	80052c4 <TIM_Base_SetConfig+0x48>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a42      	ldr	r2, [pc, #264]	; (80053b0 <TIM_Base_SetConfig+0x134>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d00b      	beq.n	80052c4 <TIM_Base_SetConfig+0x48>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a41      	ldr	r2, [pc, #260]	; (80053b4 <TIM_Base_SetConfig+0x138>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d007      	beq.n	80052c4 <TIM_Base_SetConfig+0x48>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a40      	ldr	r2, [pc, #256]	; (80053b8 <TIM_Base_SetConfig+0x13c>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d003      	beq.n	80052c4 <TIM_Base_SetConfig+0x48>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a3f      	ldr	r2, [pc, #252]	; (80053bc <TIM_Base_SetConfig+0x140>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d108      	bne.n	80052d6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a33      	ldr	r2, [pc, #204]	; (80053a8 <TIM_Base_SetConfig+0x12c>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d023      	beq.n	8005326 <TIM_Base_SetConfig+0xaa>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052e4:	d01f      	beq.n	8005326 <TIM_Base_SetConfig+0xaa>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a30      	ldr	r2, [pc, #192]	; (80053ac <TIM_Base_SetConfig+0x130>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d01b      	beq.n	8005326 <TIM_Base_SetConfig+0xaa>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a2f      	ldr	r2, [pc, #188]	; (80053b0 <TIM_Base_SetConfig+0x134>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d017      	beq.n	8005326 <TIM_Base_SetConfig+0xaa>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a2e      	ldr	r2, [pc, #184]	; (80053b4 <TIM_Base_SetConfig+0x138>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d013      	beq.n	8005326 <TIM_Base_SetConfig+0xaa>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a2d      	ldr	r2, [pc, #180]	; (80053b8 <TIM_Base_SetConfig+0x13c>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d00f      	beq.n	8005326 <TIM_Base_SetConfig+0xaa>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a2d      	ldr	r2, [pc, #180]	; (80053c0 <TIM_Base_SetConfig+0x144>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d00b      	beq.n	8005326 <TIM_Base_SetConfig+0xaa>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a2c      	ldr	r2, [pc, #176]	; (80053c4 <TIM_Base_SetConfig+0x148>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d007      	beq.n	8005326 <TIM_Base_SetConfig+0xaa>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a2b      	ldr	r2, [pc, #172]	; (80053c8 <TIM_Base_SetConfig+0x14c>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d003      	beq.n	8005326 <TIM_Base_SetConfig+0xaa>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a26      	ldr	r2, [pc, #152]	; (80053bc <TIM_Base_SetConfig+0x140>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d108      	bne.n	8005338 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800532c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	68fa      	ldr	r2, [r7, #12]
 8005334:	4313      	orrs	r3, r2
 8005336:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	4313      	orrs	r3, r2
 8005344:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	689a      	ldr	r2, [r3, #8]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a12      	ldr	r2, [pc, #72]	; (80053a8 <TIM_Base_SetConfig+0x12c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d013      	beq.n	800538c <TIM_Base_SetConfig+0x110>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a14      	ldr	r2, [pc, #80]	; (80053b8 <TIM_Base_SetConfig+0x13c>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d00f      	beq.n	800538c <TIM_Base_SetConfig+0x110>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a14      	ldr	r2, [pc, #80]	; (80053c0 <TIM_Base_SetConfig+0x144>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d00b      	beq.n	800538c <TIM_Base_SetConfig+0x110>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a13      	ldr	r2, [pc, #76]	; (80053c4 <TIM_Base_SetConfig+0x148>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d007      	beq.n	800538c <TIM_Base_SetConfig+0x110>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a12      	ldr	r2, [pc, #72]	; (80053c8 <TIM_Base_SetConfig+0x14c>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d003      	beq.n	800538c <TIM_Base_SetConfig+0x110>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a0d      	ldr	r2, [pc, #52]	; (80053bc <TIM_Base_SetConfig+0x140>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d103      	bne.n	8005394 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	691a      	ldr	r2, [r3, #16]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	615a      	str	r2, [r3, #20]
}
 800539a:	bf00      	nop
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
 80053a6:	bf00      	nop
 80053a8:	40012c00 	.word	0x40012c00
 80053ac:	40000400 	.word	0x40000400
 80053b0:	40000800 	.word	0x40000800
 80053b4:	40000c00 	.word	0x40000c00
 80053b8:	40013400 	.word	0x40013400
 80053bc:	40015000 	.word	0x40015000
 80053c0:	40014000 	.word	0x40014000
 80053c4:	40014400 	.word	0x40014400
 80053c8:	40014800 	.word	0x40014800

080053cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a1b      	ldr	r3, [r3, #32]
 80053da:	f023 0201 	bic.w	r2, r3, #1
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	699b      	ldr	r3, [r3, #24]
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 0303 	bic.w	r3, r3, #3
 8005406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	4313      	orrs	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	f023 0302 	bic.w	r3, r3, #2
 8005418:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	4313      	orrs	r3, r2
 8005422:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a30      	ldr	r2, [pc, #192]	; (80054e8 <TIM_OC1_SetConfig+0x11c>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d013      	beq.n	8005454 <TIM_OC1_SetConfig+0x88>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a2f      	ldr	r2, [pc, #188]	; (80054ec <TIM_OC1_SetConfig+0x120>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d00f      	beq.n	8005454 <TIM_OC1_SetConfig+0x88>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a2e      	ldr	r2, [pc, #184]	; (80054f0 <TIM_OC1_SetConfig+0x124>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d00b      	beq.n	8005454 <TIM_OC1_SetConfig+0x88>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a2d      	ldr	r2, [pc, #180]	; (80054f4 <TIM_OC1_SetConfig+0x128>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d007      	beq.n	8005454 <TIM_OC1_SetConfig+0x88>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a2c      	ldr	r2, [pc, #176]	; (80054f8 <TIM_OC1_SetConfig+0x12c>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d003      	beq.n	8005454 <TIM_OC1_SetConfig+0x88>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a2b      	ldr	r2, [pc, #172]	; (80054fc <TIM_OC1_SetConfig+0x130>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d10c      	bne.n	800546e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	f023 0308 	bic.w	r3, r3, #8
 800545a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	68db      	ldr	r3, [r3, #12]
 8005460:	697a      	ldr	r2, [r7, #20]
 8005462:	4313      	orrs	r3, r2
 8005464:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f023 0304 	bic.w	r3, r3, #4
 800546c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a1d      	ldr	r2, [pc, #116]	; (80054e8 <TIM_OC1_SetConfig+0x11c>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d013      	beq.n	800549e <TIM_OC1_SetConfig+0xd2>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a1c      	ldr	r2, [pc, #112]	; (80054ec <TIM_OC1_SetConfig+0x120>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d00f      	beq.n	800549e <TIM_OC1_SetConfig+0xd2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a1b      	ldr	r2, [pc, #108]	; (80054f0 <TIM_OC1_SetConfig+0x124>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d00b      	beq.n	800549e <TIM_OC1_SetConfig+0xd2>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a1a      	ldr	r2, [pc, #104]	; (80054f4 <TIM_OC1_SetConfig+0x128>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d007      	beq.n	800549e <TIM_OC1_SetConfig+0xd2>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a19      	ldr	r2, [pc, #100]	; (80054f8 <TIM_OC1_SetConfig+0x12c>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d003      	beq.n	800549e <TIM_OC1_SetConfig+0xd2>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a18      	ldr	r2, [pc, #96]	; (80054fc <TIM_OC1_SetConfig+0x130>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d111      	bne.n	80054c2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	693a      	ldr	r2, [r7, #16]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	699b      	ldr	r3, [r3, #24]
 80054bc:	693a      	ldr	r2, [r7, #16]
 80054be:	4313      	orrs	r3, r2
 80054c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	621a      	str	r2, [r3, #32]
}
 80054dc:	bf00      	nop
 80054de:	371c      	adds	r7, #28
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr
 80054e8:	40012c00 	.word	0x40012c00
 80054ec:	40013400 	.word	0x40013400
 80054f0:	40014000 	.word	0x40014000
 80054f4:	40014400 	.word	0x40014400
 80054f8:	40014800 	.word	0x40014800
 80054fc:	40015000 	.word	0x40015000

08005500 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005500:	b480      	push	{r7}
 8005502:	b087      	sub	sp, #28
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	f023 0210 	bic.w	r2, r3, #16
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800552e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800553a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	021b      	lsls	r3, r3, #8
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	4313      	orrs	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	f023 0320 	bic.w	r3, r3, #32
 800554e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	011b      	lsls	r3, r3, #4
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	4313      	orrs	r3, r2
 800555a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a2c      	ldr	r2, [pc, #176]	; (8005610 <TIM_OC2_SetConfig+0x110>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d007      	beq.n	8005574 <TIM_OC2_SetConfig+0x74>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a2b      	ldr	r2, [pc, #172]	; (8005614 <TIM_OC2_SetConfig+0x114>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d003      	beq.n	8005574 <TIM_OC2_SetConfig+0x74>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a2a      	ldr	r2, [pc, #168]	; (8005618 <TIM_OC2_SetConfig+0x118>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d10d      	bne.n	8005590 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800557a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	011b      	lsls	r3, r3, #4
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	4313      	orrs	r3, r2
 8005586:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800558e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a1f      	ldr	r2, [pc, #124]	; (8005610 <TIM_OC2_SetConfig+0x110>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d013      	beq.n	80055c0 <TIM_OC2_SetConfig+0xc0>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a1e      	ldr	r2, [pc, #120]	; (8005614 <TIM_OC2_SetConfig+0x114>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d00f      	beq.n	80055c0 <TIM_OC2_SetConfig+0xc0>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	4a1e      	ldr	r2, [pc, #120]	; (800561c <TIM_OC2_SetConfig+0x11c>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d00b      	beq.n	80055c0 <TIM_OC2_SetConfig+0xc0>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4a1d      	ldr	r2, [pc, #116]	; (8005620 <TIM_OC2_SetConfig+0x120>)
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d007      	beq.n	80055c0 <TIM_OC2_SetConfig+0xc0>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a1c      	ldr	r2, [pc, #112]	; (8005624 <TIM_OC2_SetConfig+0x124>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d003      	beq.n	80055c0 <TIM_OC2_SetConfig+0xc0>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	4a17      	ldr	r2, [pc, #92]	; (8005618 <TIM_OC2_SetConfig+0x118>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d113      	bne.n	80055e8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	695b      	ldr	r3, [r3, #20]
 80055d4:	009b      	lsls	r3, r3, #2
 80055d6:	693a      	ldr	r2, [r7, #16]
 80055d8:	4313      	orrs	r3, r2
 80055da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	68fa      	ldr	r2, [r7, #12]
 80055f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685a      	ldr	r2, [r3, #4]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	621a      	str	r2, [r3, #32]
}
 8005602:	bf00      	nop
 8005604:	371c      	adds	r7, #28
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	40012c00 	.word	0x40012c00
 8005614:	40013400 	.word	0x40013400
 8005618:	40015000 	.word	0x40015000
 800561c:	40014000 	.word	0x40014000
 8005620:	40014400 	.word	0x40014400
 8005624:	40014800 	.word	0x40014800

08005628 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005628:	b480      	push	{r7}
 800562a:	b087      	sub	sp, #28
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a1b      	ldr	r3, [r3, #32]
 8005636:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6a1b      	ldr	r3, [r3, #32]
 8005642:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	69db      	ldr	r3, [r3, #28]
 800564e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f023 0303 	bic.w	r3, r3, #3
 8005662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	4313      	orrs	r3, r2
 800566c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005674:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	021b      	lsls	r3, r3, #8
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	4313      	orrs	r3, r2
 8005680:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a2b      	ldr	r2, [pc, #172]	; (8005734 <TIM_OC3_SetConfig+0x10c>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d007      	beq.n	800569a <TIM_OC3_SetConfig+0x72>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a2a      	ldr	r2, [pc, #168]	; (8005738 <TIM_OC3_SetConfig+0x110>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d003      	beq.n	800569a <TIM_OC3_SetConfig+0x72>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a29      	ldr	r2, [pc, #164]	; (800573c <TIM_OC3_SetConfig+0x114>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d10d      	bne.n	80056b6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80056a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	68db      	ldr	r3, [r3, #12]
 80056a6:	021b      	lsls	r3, r3, #8
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80056b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a1e      	ldr	r2, [pc, #120]	; (8005734 <TIM_OC3_SetConfig+0x10c>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d013      	beq.n	80056e6 <TIM_OC3_SetConfig+0xbe>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	4a1d      	ldr	r2, [pc, #116]	; (8005738 <TIM_OC3_SetConfig+0x110>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d00f      	beq.n	80056e6 <TIM_OC3_SetConfig+0xbe>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a1d      	ldr	r2, [pc, #116]	; (8005740 <TIM_OC3_SetConfig+0x118>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d00b      	beq.n	80056e6 <TIM_OC3_SetConfig+0xbe>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a1c      	ldr	r2, [pc, #112]	; (8005744 <TIM_OC3_SetConfig+0x11c>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d007      	beq.n	80056e6 <TIM_OC3_SetConfig+0xbe>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a1b      	ldr	r2, [pc, #108]	; (8005748 <TIM_OC3_SetConfig+0x120>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d003      	beq.n	80056e6 <TIM_OC3_SetConfig+0xbe>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a16      	ldr	r2, [pc, #88]	; (800573c <TIM_OC3_SetConfig+0x114>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d113      	bne.n	800570e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	011b      	lsls	r3, r3, #4
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	4313      	orrs	r3, r2
 8005700:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	011b      	lsls	r3, r3, #4
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	4313      	orrs	r3, r2
 800570c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	621a      	str	r2, [r3, #32]
}
 8005728:	bf00      	nop
 800572a:	371c      	adds	r7, #28
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr
 8005734:	40012c00 	.word	0x40012c00
 8005738:	40013400 	.word	0x40013400
 800573c:	40015000 	.word	0x40015000
 8005740:	40014000 	.word	0x40014000
 8005744:	40014400 	.word	0x40014400
 8005748:	40014800 	.word	0x40014800

0800574c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800577a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800577e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005786:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	021b      	lsls	r3, r3, #8
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	4313      	orrs	r3, r2
 8005792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800579a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	031b      	lsls	r3, r3, #12
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a2c      	ldr	r2, [pc, #176]	; (800585c <TIM_OC4_SetConfig+0x110>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d007      	beq.n	80057c0 <TIM_OC4_SetConfig+0x74>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	4a2b      	ldr	r2, [pc, #172]	; (8005860 <TIM_OC4_SetConfig+0x114>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d003      	beq.n	80057c0 <TIM_OC4_SetConfig+0x74>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a2a      	ldr	r2, [pc, #168]	; (8005864 <TIM_OC4_SetConfig+0x118>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d10d      	bne.n	80057dc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80057c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	68db      	ldr	r3, [r3, #12]
 80057cc:	031b      	lsls	r3, r3, #12
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	4313      	orrs	r3, r2
 80057d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80057da:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a1f      	ldr	r2, [pc, #124]	; (800585c <TIM_OC4_SetConfig+0x110>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d013      	beq.n	800580c <TIM_OC4_SetConfig+0xc0>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a1e      	ldr	r2, [pc, #120]	; (8005860 <TIM_OC4_SetConfig+0x114>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d00f      	beq.n	800580c <TIM_OC4_SetConfig+0xc0>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a1e      	ldr	r2, [pc, #120]	; (8005868 <TIM_OC4_SetConfig+0x11c>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d00b      	beq.n	800580c <TIM_OC4_SetConfig+0xc0>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a1d      	ldr	r2, [pc, #116]	; (800586c <TIM_OC4_SetConfig+0x120>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d007      	beq.n	800580c <TIM_OC4_SetConfig+0xc0>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a1c      	ldr	r2, [pc, #112]	; (8005870 <TIM_OC4_SetConfig+0x124>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d003      	beq.n	800580c <TIM_OC4_SetConfig+0xc0>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a17      	ldr	r2, [pc, #92]	; (8005864 <TIM_OC4_SetConfig+0x118>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d113      	bne.n	8005834 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005812:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800581a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	695b      	ldr	r3, [r3, #20]
 8005820:	019b      	lsls	r3, r3, #6
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	4313      	orrs	r3, r2
 8005826:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	019b      	lsls	r3, r3, #6
 800582e:	693a      	ldr	r2, [r7, #16]
 8005830:	4313      	orrs	r3, r2
 8005832:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	697a      	ldr	r2, [r7, #20]
 800584c:	621a      	str	r2, [r3, #32]
}
 800584e:	bf00      	nop
 8005850:	371c      	adds	r7, #28
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	40012c00 	.word	0x40012c00
 8005860:	40013400 	.word	0x40013400
 8005864:	40015000 	.word	0x40015000
 8005868:	40014000 	.word	0x40014000
 800586c:	40014400 	.word	0x40014400
 8005870:	40014800 	.word	0x40014800

08005874 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005874:	b480      	push	{r7}
 8005876:	b087      	sub	sp, #28
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800589a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80058b8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	041b      	lsls	r3, r3, #16
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a19      	ldr	r2, [pc, #100]	; (8005930 <TIM_OC5_SetConfig+0xbc>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d013      	beq.n	80058f6 <TIM_OC5_SetConfig+0x82>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	4a18      	ldr	r2, [pc, #96]	; (8005934 <TIM_OC5_SetConfig+0xc0>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d00f      	beq.n	80058f6 <TIM_OC5_SetConfig+0x82>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a17      	ldr	r2, [pc, #92]	; (8005938 <TIM_OC5_SetConfig+0xc4>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d00b      	beq.n	80058f6 <TIM_OC5_SetConfig+0x82>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a16      	ldr	r2, [pc, #88]	; (800593c <TIM_OC5_SetConfig+0xc8>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d007      	beq.n	80058f6 <TIM_OC5_SetConfig+0x82>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a15      	ldr	r2, [pc, #84]	; (8005940 <TIM_OC5_SetConfig+0xcc>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d003      	beq.n	80058f6 <TIM_OC5_SetConfig+0x82>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a14      	ldr	r2, [pc, #80]	; (8005944 <TIM_OC5_SetConfig+0xd0>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d109      	bne.n	800590a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058fc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	021b      	lsls	r3, r3, #8
 8005904:	697a      	ldr	r2, [r7, #20]
 8005906:	4313      	orrs	r3, r2
 8005908:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	693a      	ldr	r2, [r7, #16]
 8005922:	621a      	str	r2, [r3, #32]
}
 8005924:	bf00      	nop
 8005926:	371c      	adds	r7, #28
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	40012c00 	.word	0x40012c00
 8005934:	40013400 	.word	0x40013400
 8005938:	40014000 	.word	0x40014000
 800593c:	40014400 	.word	0x40014400
 8005940:	40014800 	.word	0x40014800
 8005944:	40015000 	.word	0x40015000

08005948 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005948:	b480      	push	{r7}
 800594a:	b087      	sub	sp, #28
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800596e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005976:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800597a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	021b      	lsls	r3, r3, #8
 8005982:	68fa      	ldr	r2, [r7, #12]
 8005984:	4313      	orrs	r3, r2
 8005986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800598e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	051b      	lsls	r3, r3, #20
 8005996:	693a      	ldr	r2, [r7, #16]
 8005998:	4313      	orrs	r3, r2
 800599a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a1a      	ldr	r2, [pc, #104]	; (8005a08 <TIM_OC6_SetConfig+0xc0>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d013      	beq.n	80059cc <TIM_OC6_SetConfig+0x84>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	4a19      	ldr	r2, [pc, #100]	; (8005a0c <TIM_OC6_SetConfig+0xc4>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d00f      	beq.n	80059cc <TIM_OC6_SetConfig+0x84>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	4a18      	ldr	r2, [pc, #96]	; (8005a10 <TIM_OC6_SetConfig+0xc8>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d00b      	beq.n	80059cc <TIM_OC6_SetConfig+0x84>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	4a17      	ldr	r2, [pc, #92]	; (8005a14 <TIM_OC6_SetConfig+0xcc>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d007      	beq.n	80059cc <TIM_OC6_SetConfig+0x84>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	4a16      	ldr	r2, [pc, #88]	; (8005a18 <TIM_OC6_SetConfig+0xd0>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d003      	beq.n	80059cc <TIM_OC6_SetConfig+0x84>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	4a15      	ldr	r2, [pc, #84]	; (8005a1c <TIM_OC6_SetConfig+0xd4>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d109      	bne.n	80059e0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059d2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	029b      	lsls	r3, r3, #10
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	4313      	orrs	r3, r2
 80059de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	697a      	ldr	r2, [r7, #20]
 80059e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	685a      	ldr	r2, [r3, #4]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	621a      	str	r2, [r3, #32]
}
 80059fa:	bf00      	nop
 80059fc:	371c      	adds	r7, #28
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	40012c00 	.word	0x40012c00
 8005a0c:	40013400 	.word	0x40013400
 8005a10:	40014000 	.word	0x40014000
 8005a14:	40014400 	.word	0x40014400
 8005a18:	40014800 	.word	0x40014800
 8005a1c:	40015000 	.word	0x40015000

08005a20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b087      	sub	sp, #28
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	f003 031f 	and.w	r3, r3, #31
 8005a32:	2201      	movs	r2, #1
 8005a34:	fa02 f303 	lsl.w	r3, r2, r3
 8005a38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6a1a      	ldr	r2, [r3, #32]
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	43db      	mvns	r3, r3
 8005a42:	401a      	ands	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6a1a      	ldr	r2, [r3, #32]
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	f003 031f 	and.w	r3, r3, #31
 8005a52:	6879      	ldr	r1, [r7, #4]
 8005a54:	fa01 f303 	lsl.w	r3, r1, r3
 8005a58:	431a      	orrs	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	621a      	str	r2, [r3, #32]
}
 8005a5e:	bf00      	nop
 8005a60:	371c      	adds	r7, #28
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
	...

08005a6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d101      	bne.n	8005a84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a80:	2302      	movs	r3, #2
 8005a82:	e074      	b.n	8005b6e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2202      	movs	r2, #2
 8005a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	685b      	ldr	r3, [r3, #4]
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a34      	ldr	r2, [pc, #208]	; (8005b7c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d009      	beq.n	8005ac2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a33      	ldr	r2, [pc, #204]	; (8005b80 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d004      	beq.n	8005ac2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a31      	ldr	r2, [pc, #196]	; (8005b84 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d108      	bne.n	8005ad4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005ac8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005ada:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ade:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a21      	ldr	r2, [pc, #132]	; (8005b7c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d022      	beq.n	8005b42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b04:	d01d      	beq.n	8005b42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a1f      	ldr	r2, [pc, #124]	; (8005b88 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d018      	beq.n	8005b42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a1d      	ldr	r2, [pc, #116]	; (8005b8c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d013      	beq.n	8005b42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a1c      	ldr	r2, [pc, #112]	; (8005b90 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d00e      	beq.n	8005b42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a15      	ldr	r2, [pc, #84]	; (8005b80 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d009      	beq.n	8005b42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a18      	ldr	r2, [pc, #96]	; (8005b94 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d004      	beq.n	8005b42 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a11      	ldr	r2, [pc, #68]	; (8005b84 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d10c      	bne.n	8005b5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b48:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	68ba      	ldr	r2, [r7, #8]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3714      	adds	r7, #20
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	40012c00 	.word	0x40012c00
 8005b80:	40013400 	.word	0x40013400
 8005b84:	40015000 	.word	0x40015000
 8005b88:	40000400 	.word	0x40000400
 8005b8c:	40000800 	.word	0x40000800
 8005b90:	40000c00 	.word	0x40000c00
 8005b94:	40014000 	.word	0x40014000

08005b98 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d101      	bne.n	8005bb4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005bb0:	2302      	movs	r3, #2
 8005bb2:	e096      	b.n	8005ce2 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	691b      	ldr	r3, [r3, #16]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	699b      	ldr	r3, [r3, #24]
 8005c28:	041b      	lsls	r3, r3, #16
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a2f      	ldr	r2, [pc, #188]	; (8005cf0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d009      	beq.n	8005c4c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a2d      	ldr	r2, [pc, #180]	; (8005cf4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d004      	beq.n	8005c4c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4a2c      	ldr	r2, [pc, #176]	; (8005cf8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d106      	bne.n	8005c5a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	69db      	ldr	r3, [r3, #28]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a24      	ldr	r2, [pc, #144]	; (8005cf0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d009      	beq.n	8005c78 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a22      	ldr	r2, [pc, #136]	; (8005cf4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d004      	beq.n	8005c78 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a21      	ldr	r2, [pc, #132]	; (8005cf8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d12b      	bne.n	8005cd0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c82:	051b      	lsls	r3, r3, #20
 8005c84:	4313      	orrs	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a11      	ldr	r2, [pc, #68]	; (8005cf0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d009      	beq.n	8005cc2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a10      	ldr	r2, [pc, #64]	; (8005cf4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d004      	beq.n	8005cc2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a0e      	ldr	r2, [pc, #56]	; (8005cf8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d106      	bne.n	8005cd0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	40012c00 	.word	0x40012c00
 8005cf4:	40013400 	.word	0x40013400
 8005cf8:	40015000 	.word	0x40015000

08005cfc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d2c:	bf00      	nop
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005d40:	bf00      	nop
 8005d42:	370c      	adds	r7, #12
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b083      	sub	sp, #12
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005d54:	bf00      	nop
 8005d56:	370c      	adds	r7, #12
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b083      	sub	sp, #12
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr

08005d88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b082      	sub	sp, #8
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d101      	bne.n	8005d9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e042      	b.n	8005e20 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d106      	bne.n	8005db2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2200      	movs	r2, #0
 8005da8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f7fc fc3b 	bl	8002628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2224      	movs	r2, #36	; 0x24
 8005db6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f022 0201 	bic.w	r2, r2, #1
 8005dc8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 fb64 	bl	8006498 <UART_SetConfig>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d101      	bne.n	8005dda <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e022      	b.n	8005e20 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d002      	beq.n	8005de8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 fe54 	bl	8006a90 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005df6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689a      	ldr	r2, [r3, #8]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f042 0201 	orr.w	r2, r2, #1
 8005e16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 fedb 	bl	8006bd4 <UART_CheckIdleState>
 8005e1e:	4603      	mov	r3, r0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b0ba      	sub	sp, #232	; 0xe8
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	69db      	ldr	r3, [r3, #28]
 8005e36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e4e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005e52:	f640 030f 	movw	r3, #2063	; 0x80f
 8005e56:	4013      	ands	r3, r2
 8005e58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005e5c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d11b      	bne.n	8005e9c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005e64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e68:	f003 0320 	and.w	r3, r3, #32
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d015      	beq.n	8005e9c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e74:	f003 0320 	and.w	r3, r3, #32
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d105      	bne.n	8005e88 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005e7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d009      	beq.n	8005e9c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 82d6 	beq.w	800643e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	4798      	blx	r3
      }
      return;
 8005e9a:	e2d0      	b.n	800643e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005e9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	f000 811f 	beq.w	80060e4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005ea6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005eaa:	4b8b      	ldr	r3, [pc, #556]	; (80060d8 <HAL_UART_IRQHandler+0x2b0>)
 8005eac:	4013      	ands	r3, r2
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d106      	bne.n	8005ec0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005eb2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005eb6:	4b89      	ldr	r3, [pc, #548]	; (80060dc <HAL_UART_IRQHandler+0x2b4>)
 8005eb8:	4013      	ands	r3, r2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	f000 8112 	beq.w	80060e4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ec0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d011      	beq.n	8005ef0 <HAL_UART_IRQHandler+0xc8>
 8005ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00b      	beq.n	8005ef0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2201      	movs	r2, #1
 8005ede:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ee6:	f043 0201 	orr.w	r2, r3, #1
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ef4:	f003 0302 	and.w	r3, r3, #2
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d011      	beq.n	8005f20 <HAL_UART_IRQHandler+0xf8>
 8005efc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f00:	f003 0301 	and.w	r3, r3, #1
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00b      	beq.n	8005f20 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2202      	movs	r2, #2
 8005f0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f16:	f043 0204 	orr.w	r2, r3, #4
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f24:	f003 0304 	and.w	r3, r3, #4
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d011      	beq.n	8005f50 <HAL_UART_IRQHandler+0x128>
 8005f2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f30:	f003 0301 	and.w	r3, r3, #1
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00b      	beq.n	8005f50 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2204      	movs	r2, #4
 8005f3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f46:	f043 0202 	orr.w	r2, r3, #2
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f54:	f003 0308 	and.w	r3, r3, #8
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d017      	beq.n	8005f8c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f60:	f003 0320 	and.w	r3, r3, #32
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d105      	bne.n	8005f74 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005f68:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005f6c:	4b5a      	ldr	r3, [pc, #360]	; (80060d8 <HAL_UART_IRQHandler+0x2b0>)
 8005f6e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00b      	beq.n	8005f8c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2208      	movs	r2, #8
 8005f7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f82:	f043 0208 	orr.w	r2, r3, #8
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005f8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d012      	beq.n	8005fbe <HAL_UART_IRQHandler+0x196>
 8005f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d00c      	beq.n	8005fbe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fb4:	f043 0220 	orr.w	r2, r3, #32
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f000 823c 	beq.w	8006442 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fce:	f003 0320 	and.w	r3, r3, #32
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d013      	beq.n	8005ffe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005fd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fda:	f003 0320 	and.w	r3, r3, #32
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d105      	bne.n	8005fee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005fe2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d007      	beq.n	8005ffe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d003      	beq.n	8005ffe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006004:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	689b      	ldr	r3, [r3, #8]
 800600e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006012:	2b40      	cmp	r3, #64	; 0x40
 8006014:	d005      	beq.n	8006022 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006016:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800601a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800601e:	2b00      	cmp	r3, #0
 8006020:	d04f      	beq.n	80060c2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 fee9 	bl	8006dfa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006032:	2b40      	cmp	r3, #64	; 0x40
 8006034:	d141      	bne.n	80060ba <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	3308      	adds	r3, #8
 800603c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006040:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006044:	e853 3f00 	ldrex	r3, [r3]
 8006048:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800604c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006050:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006054:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	3308      	adds	r3, #8
 800605e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006062:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006066:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800606e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006072:	e841 2300 	strex	r3, r2, [r1]
 8006076:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800607a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1d9      	bne.n	8006036 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006086:	2b00      	cmp	r3, #0
 8006088:	d013      	beq.n	80060b2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800608e:	4a14      	ldr	r2, [pc, #80]	; (80060e0 <HAL_UART_IRQHandler+0x2b8>)
 8006090:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006096:	4618      	mov	r0, r3
 8006098:	f7fd f97d 	bl	8003396 <HAL_DMA_Abort_IT>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d017      	beq.n	80060d2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80060ac:	4610      	mov	r0, r2
 80060ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060b0:	e00f      	b.n	80060d2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f9da 	bl	800646c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060b8:	e00b      	b.n	80060d2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f9d6 	bl	800646c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060c0:	e007      	b.n	80060d2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f9d2 	bl	800646c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80060d0:	e1b7      	b.n	8006442 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d2:	bf00      	nop
    return;
 80060d4:	e1b5      	b.n	8006442 <HAL_UART_IRQHandler+0x61a>
 80060d6:	bf00      	nop
 80060d8:	10000001 	.word	0x10000001
 80060dc:	04000120 	.word	0x04000120
 80060e0:	08006ec7 	.word	0x08006ec7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	f040 814a 	bne.w	8006382 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80060ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060f2:	f003 0310 	and.w	r3, r3, #16
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	f000 8143 	beq.w	8006382 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80060fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006100:	f003 0310 	and.w	r3, r3, #16
 8006104:	2b00      	cmp	r3, #0
 8006106:	f000 813c 	beq.w	8006382 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2210      	movs	r2, #16
 8006110:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800611c:	2b40      	cmp	r3, #64	; 0x40
 800611e:	f040 80b5 	bne.w	800628c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800612e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006132:	2b00      	cmp	r3, #0
 8006134:	f000 8187 	beq.w	8006446 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800613e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006142:	429a      	cmp	r2, r3
 8006144:	f080 817f 	bcs.w	8006446 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800614e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f003 0320 	and.w	r3, r3, #32
 800615e:	2b00      	cmp	r3, #0
 8006160:	f040 8086 	bne.w	8006270 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006170:	e853 3f00 	ldrex	r3, [r3]
 8006174:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006178:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800617c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006180:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	461a      	mov	r2, r3
 800618a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800618e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006192:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006196:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800619a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800619e:	e841 2300 	strex	r3, r2, [r1]
 80061a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80061a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d1da      	bne.n	8006164 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	3308      	adds	r3, #8
 80061b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061b8:	e853 3f00 	ldrex	r3, [r3]
 80061bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80061be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061c0:	f023 0301 	bic.w	r3, r3, #1
 80061c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	3308      	adds	r3, #8
 80061ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80061d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80061d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80061da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80061de:	e841 2300 	strex	r3, r2, [r1]
 80061e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80061e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1e1      	bne.n	80061ae <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	3308      	adds	r3, #8
 80061f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061f4:	e853 3f00 	ldrex	r3, [r3]
 80061f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80061fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006200:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	3308      	adds	r3, #8
 800620a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800620e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006210:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006212:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006214:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006216:	e841 2300 	strex	r3, r2, [r1]
 800621a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800621c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1e3      	bne.n	80061ea <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2220      	movs	r2, #32
 8006226:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2200      	movs	r2, #0
 800622e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006238:	e853 3f00 	ldrex	r3, [r3]
 800623c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800623e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006240:	f023 0310 	bic.w	r3, r3, #16
 8006244:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	461a      	mov	r2, r3
 800624e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006252:	65bb      	str	r3, [r7, #88]	; 0x58
 8006254:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006256:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006258:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800625a:	e841 2300 	strex	r3, r2, [r1]
 800625e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006260:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1e4      	bne.n	8006230 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800626a:	4618      	mov	r0, r3
 800626c:	f7fd f83a 	bl	80032e4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800627c:	b29b      	uxth	r3, r3
 800627e:	1ad3      	subs	r3, r2, r3
 8006280:	b29b      	uxth	r3, r3
 8006282:	4619      	mov	r1, r3
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 f8fb 	bl	8006480 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800628a:	e0dc      	b.n	8006446 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006298:	b29b      	uxth	r3, r3
 800629a:	1ad3      	subs	r3, r2, r3
 800629c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f000 80ce 	beq.w	800644a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80062ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	f000 80c9 	beq.w	800644a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062c0:	e853 3f00 	ldrex	r3, [r3]
 80062c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	461a      	mov	r2, r3
 80062d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062da:	647b      	str	r3, [r7, #68]	; 0x44
 80062dc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062e2:	e841 2300 	strex	r3, r2, [r1]
 80062e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1e4      	bne.n	80062b8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	3308      	adds	r3, #8
 80062f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f8:	e853 3f00 	ldrex	r3, [r3]
 80062fc:	623b      	str	r3, [r7, #32]
   return(result);
 80062fe:	6a3b      	ldr	r3, [r7, #32]
 8006300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006304:	f023 0301 	bic.w	r3, r3, #1
 8006308:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	3308      	adds	r3, #8
 8006312:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006316:	633a      	str	r2, [r7, #48]	; 0x30
 8006318:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800631a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800631c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800631e:	e841 2300 	strex	r3, r2, [r1]
 8006322:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1e1      	bne.n	80062ee <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2220      	movs	r2, #32
 800632e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	e853 3f00 	ldrex	r3, [r3]
 800634a:	60fb      	str	r3, [r7, #12]
   return(result);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f023 0310 	bic.w	r3, r3, #16
 8006352:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	461a      	mov	r2, r3
 800635c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006360:	61fb      	str	r3, [r7, #28]
 8006362:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006364:	69b9      	ldr	r1, [r7, #24]
 8006366:	69fa      	ldr	r2, [r7, #28]
 8006368:	e841 2300 	strex	r3, r2, [r1]
 800636c:	617b      	str	r3, [r7, #20]
   return(result);
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d1e4      	bne.n	800633e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006374:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006378:	4619      	mov	r1, r3
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 f880 	bl	8006480 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006380:	e063      	b.n	800644a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006382:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006386:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00e      	beq.n	80063ac <HAL_UART_IRQHandler+0x584>
 800638e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d008      	beq.n	80063ac <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80063a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 fdcf 	bl	8006f48 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063aa:	e051      	b.n	8006450 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80063ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d014      	beq.n	80063e2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80063b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d105      	bne.n	80063d0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80063c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d008      	beq.n	80063e2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d03a      	beq.n	800644e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	4798      	blx	r3
    }
    return;
 80063e0:	e035      	b.n	800644e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80063e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d009      	beq.n	8006402 <HAL_UART_IRQHandler+0x5da>
 80063ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fd79 	bl	8006ef2 <UART_EndTransmit_IT>
    return;
 8006400:	e026      	b.n	8006450 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006406:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d009      	beq.n	8006422 <HAL_UART_IRQHandler+0x5fa>
 800640e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006412:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006416:	2b00      	cmp	r3, #0
 8006418:	d003      	beq.n	8006422 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f000 fda8 	bl	8006f70 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006420:	e016      	b.n	8006450 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006426:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d010      	beq.n	8006450 <HAL_UART_IRQHandler+0x628>
 800642e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006432:	2b00      	cmp	r3, #0
 8006434:	da0c      	bge.n	8006450 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 fd90 	bl	8006f5c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800643c:	e008      	b.n	8006450 <HAL_UART_IRQHandler+0x628>
      return;
 800643e:	bf00      	nop
 8006440:	e006      	b.n	8006450 <HAL_UART_IRQHandler+0x628>
    return;
 8006442:	bf00      	nop
 8006444:	e004      	b.n	8006450 <HAL_UART_IRQHandler+0x628>
      return;
 8006446:	bf00      	nop
 8006448:	e002      	b.n	8006450 <HAL_UART_IRQHandler+0x628>
      return;
 800644a:	bf00      	nop
 800644c:	e000      	b.n	8006450 <HAL_UART_IRQHandler+0x628>
    return;
 800644e:	bf00      	nop
  }
}
 8006450:	37e8      	adds	r7, #232	; 0xe8
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop

08006458 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	460b      	mov	r3, r1
 800648a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800649c:	b08c      	sub	sp, #48	; 0x30
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064a2:	2300      	movs	r3, #0
 80064a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	689a      	ldr	r2, [r3, #8]
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	691b      	ldr	r3, [r3, #16]
 80064b0:	431a      	orrs	r2, r3
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	695b      	ldr	r3, [r3, #20]
 80064b6:	431a      	orrs	r2, r3
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	69db      	ldr	r3, [r3, #28]
 80064bc:	4313      	orrs	r3, r2
 80064be:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681a      	ldr	r2, [r3, #0]
 80064c6:	4baa      	ldr	r3, [pc, #680]	; (8006770 <UART_SetConfig+0x2d8>)
 80064c8:	4013      	ands	r3, r2
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	6812      	ldr	r2, [r2, #0]
 80064ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064d0:	430b      	orrs	r3, r1
 80064d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	68da      	ldr	r2, [r3, #12]
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a9f      	ldr	r2, [pc, #636]	; (8006774 <UART_SetConfig+0x2dc>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d004      	beq.n	8006504 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	6a1b      	ldr	r3, [r3, #32]
 80064fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006500:	4313      	orrs	r3, r2
 8006502:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800650e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006512:	697a      	ldr	r2, [r7, #20]
 8006514:	6812      	ldr	r2, [r2, #0]
 8006516:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006518:	430b      	orrs	r3, r1
 800651a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006522:	f023 010f 	bic.w	r1, r3, #15
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	430a      	orrs	r2, r1
 8006530:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a90      	ldr	r2, [pc, #576]	; (8006778 <UART_SetConfig+0x2e0>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d125      	bne.n	8006588 <UART_SetConfig+0xf0>
 800653c:	4b8f      	ldr	r3, [pc, #572]	; (800677c <UART_SetConfig+0x2e4>)
 800653e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006542:	f003 0303 	and.w	r3, r3, #3
 8006546:	2b03      	cmp	r3, #3
 8006548:	d81a      	bhi.n	8006580 <UART_SetConfig+0xe8>
 800654a:	a201      	add	r2, pc, #4	; (adr r2, 8006550 <UART_SetConfig+0xb8>)
 800654c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006550:	08006561 	.word	0x08006561
 8006554:	08006571 	.word	0x08006571
 8006558:	08006569 	.word	0x08006569
 800655c:	08006579 	.word	0x08006579
 8006560:	2301      	movs	r3, #1
 8006562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006566:	e116      	b.n	8006796 <UART_SetConfig+0x2fe>
 8006568:	2302      	movs	r3, #2
 800656a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800656e:	e112      	b.n	8006796 <UART_SetConfig+0x2fe>
 8006570:	2304      	movs	r3, #4
 8006572:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006576:	e10e      	b.n	8006796 <UART_SetConfig+0x2fe>
 8006578:	2308      	movs	r3, #8
 800657a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800657e:	e10a      	b.n	8006796 <UART_SetConfig+0x2fe>
 8006580:	2310      	movs	r3, #16
 8006582:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006586:	e106      	b.n	8006796 <UART_SetConfig+0x2fe>
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a7c      	ldr	r2, [pc, #496]	; (8006780 <UART_SetConfig+0x2e8>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d138      	bne.n	8006604 <UART_SetConfig+0x16c>
 8006592:	4b7a      	ldr	r3, [pc, #488]	; (800677c <UART_SetConfig+0x2e4>)
 8006594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006598:	f003 030c 	and.w	r3, r3, #12
 800659c:	2b0c      	cmp	r3, #12
 800659e:	d82d      	bhi.n	80065fc <UART_SetConfig+0x164>
 80065a0:	a201      	add	r2, pc, #4	; (adr r2, 80065a8 <UART_SetConfig+0x110>)
 80065a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a6:	bf00      	nop
 80065a8:	080065dd 	.word	0x080065dd
 80065ac:	080065fd 	.word	0x080065fd
 80065b0:	080065fd 	.word	0x080065fd
 80065b4:	080065fd 	.word	0x080065fd
 80065b8:	080065ed 	.word	0x080065ed
 80065bc:	080065fd 	.word	0x080065fd
 80065c0:	080065fd 	.word	0x080065fd
 80065c4:	080065fd 	.word	0x080065fd
 80065c8:	080065e5 	.word	0x080065e5
 80065cc:	080065fd 	.word	0x080065fd
 80065d0:	080065fd 	.word	0x080065fd
 80065d4:	080065fd 	.word	0x080065fd
 80065d8:	080065f5 	.word	0x080065f5
 80065dc:	2300      	movs	r3, #0
 80065de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065e2:	e0d8      	b.n	8006796 <UART_SetConfig+0x2fe>
 80065e4:	2302      	movs	r3, #2
 80065e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065ea:	e0d4      	b.n	8006796 <UART_SetConfig+0x2fe>
 80065ec:	2304      	movs	r3, #4
 80065ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065f2:	e0d0      	b.n	8006796 <UART_SetConfig+0x2fe>
 80065f4:	2308      	movs	r3, #8
 80065f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065fa:	e0cc      	b.n	8006796 <UART_SetConfig+0x2fe>
 80065fc:	2310      	movs	r3, #16
 80065fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006602:	e0c8      	b.n	8006796 <UART_SetConfig+0x2fe>
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a5e      	ldr	r2, [pc, #376]	; (8006784 <UART_SetConfig+0x2ec>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d125      	bne.n	800665a <UART_SetConfig+0x1c2>
 800660e:	4b5b      	ldr	r3, [pc, #364]	; (800677c <UART_SetConfig+0x2e4>)
 8006610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006614:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006618:	2b30      	cmp	r3, #48	; 0x30
 800661a:	d016      	beq.n	800664a <UART_SetConfig+0x1b2>
 800661c:	2b30      	cmp	r3, #48	; 0x30
 800661e:	d818      	bhi.n	8006652 <UART_SetConfig+0x1ba>
 8006620:	2b20      	cmp	r3, #32
 8006622:	d00a      	beq.n	800663a <UART_SetConfig+0x1a2>
 8006624:	2b20      	cmp	r3, #32
 8006626:	d814      	bhi.n	8006652 <UART_SetConfig+0x1ba>
 8006628:	2b00      	cmp	r3, #0
 800662a:	d002      	beq.n	8006632 <UART_SetConfig+0x19a>
 800662c:	2b10      	cmp	r3, #16
 800662e:	d008      	beq.n	8006642 <UART_SetConfig+0x1aa>
 8006630:	e00f      	b.n	8006652 <UART_SetConfig+0x1ba>
 8006632:	2300      	movs	r3, #0
 8006634:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006638:	e0ad      	b.n	8006796 <UART_SetConfig+0x2fe>
 800663a:	2302      	movs	r3, #2
 800663c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006640:	e0a9      	b.n	8006796 <UART_SetConfig+0x2fe>
 8006642:	2304      	movs	r3, #4
 8006644:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006648:	e0a5      	b.n	8006796 <UART_SetConfig+0x2fe>
 800664a:	2308      	movs	r3, #8
 800664c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006650:	e0a1      	b.n	8006796 <UART_SetConfig+0x2fe>
 8006652:	2310      	movs	r3, #16
 8006654:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006658:	e09d      	b.n	8006796 <UART_SetConfig+0x2fe>
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a4a      	ldr	r2, [pc, #296]	; (8006788 <UART_SetConfig+0x2f0>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d125      	bne.n	80066b0 <UART_SetConfig+0x218>
 8006664:	4b45      	ldr	r3, [pc, #276]	; (800677c <UART_SetConfig+0x2e4>)
 8006666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800666a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800666e:	2bc0      	cmp	r3, #192	; 0xc0
 8006670:	d016      	beq.n	80066a0 <UART_SetConfig+0x208>
 8006672:	2bc0      	cmp	r3, #192	; 0xc0
 8006674:	d818      	bhi.n	80066a8 <UART_SetConfig+0x210>
 8006676:	2b80      	cmp	r3, #128	; 0x80
 8006678:	d00a      	beq.n	8006690 <UART_SetConfig+0x1f8>
 800667a:	2b80      	cmp	r3, #128	; 0x80
 800667c:	d814      	bhi.n	80066a8 <UART_SetConfig+0x210>
 800667e:	2b00      	cmp	r3, #0
 8006680:	d002      	beq.n	8006688 <UART_SetConfig+0x1f0>
 8006682:	2b40      	cmp	r3, #64	; 0x40
 8006684:	d008      	beq.n	8006698 <UART_SetConfig+0x200>
 8006686:	e00f      	b.n	80066a8 <UART_SetConfig+0x210>
 8006688:	2300      	movs	r3, #0
 800668a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800668e:	e082      	b.n	8006796 <UART_SetConfig+0x2fe>
 8006690:	2302      	movs	r3, #2
 8006692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006696:	e07e      	b.n	8006796 <UART_SetConfig+0x2fe>
 8006698:	2304      	movs	r3, #4
 800669a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800669e:	e07a      	b.n	8006796 <UART_SetConfig+0x2fe>
 80066a0:	2308      	movs	r3, #8
 80066a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066a6:	e076      	b.n	8006796 <UART_SetConfig+0x2fe>
 80066a8:	2310      	movs	r3, #16
 80066aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066ae:	e072      	b.n	8006796 <UART_SetConfig+0x2fe>
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a35      	ldr	r2, [pc, #212]	; (800678c <UART_SetConfig+0x2f4>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d12a      	bne.n	8006710 <UART_SetConfig+0x278>
 80066ba:	4b30      	ldr	r3, [pc, #192]	; (800677c <UART_SetConfig+0x2e4>)
 80066bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066c8:	d01a      	beq.n	8006700 <UART_SetConfig+0x268>
 80066ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066ce:	d81b      	bhi.n	8006708 <UART_SetConfig+0x270>
 80066d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066d4:	d00c      	beq.n	80066f0 <UART_SetConfig+0x258>
 80066d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066da:	d815      	bhi.n	8006708 <UART_SetConfig+0x270>
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d003      	beq.n	80066e8 <UART_SetConfig+0x250>
 80066e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066e4:	d008      	beq.n	80066f8 <UART_SetConfig+0x260>
 80066e6:	e00f      	b.n	8006708 <UART_SetConfig+0x270>
 80066e8:	2300      	movs	r3, #0
 80066ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066ee:	e052      	b.n	8006796 <UART_SetConfig+0x2fe>
 80066f0:	2302      	movs	r3, #2
 80066f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066f6:	e04e      	b.n	8006796 <UART_SetConfig+0x2fe>
 80066f8:	2304      	movs	r3, #4
 80066fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066fe:	e04a      	b.n	8006796 <UART_SetConfig+0x2fe>
 8006700:	2308      	movs	r3, #8
 8006702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006706:	e046      	b.n	8006796 <UART_SetConfig+0x2fe>
 8006708:	2310      	movs	r3, #16
 800670a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800670e:	e042      	b.n	8006796 <UART_SetConfig+0x2fe>
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a17      	ldr	r2, [pc, #92]	; (8006774 <UART_SetConfig+0x2dc>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d13a      	bne.n	8006790 <UART_SetConfig+0x2f8>
 800671a:	4b18      	ldr	r3, [pc, #96]	; (800677c <UART_SetConfig+0x2e4>)
 800671c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006720:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006724:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006728:	d01a      	beq.n	8006760 <UART_SetConfig+0x2c8>
 800672a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800672e:	d81b      	bhi.n	8006768 <UART_SetConfig+0x2d0>
 8006730:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006734:	d00c      	beq.n	8006750 <UART_SetConfig+0x2b8>
 8006736:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800673a:	d815      	bhi.n	8006768 <UART_SetConfig+0x2d0>
 800673c:	2b00      	cmp	r3, #0
 800673e:	d003      	beq.n	8006748 <UART_SetConfig+0x2b0>
 8006740:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006744:	d008      	beq.n	8006758 <UART_SetConfig+0x2c0>
 8006746:	e00f      	b.n	8006768 <UART_SetConfig+0x2d0>
 8006748:	2300      	movs	r3, #0
 800674a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800674e:	e022      	b.n	8006796 <UART_SetConfig+0x2fe>
 8006750:	2302      	movs	r3, #2
 8006752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006756:	e01e      	b.n	8006796 <UART_SetConfig+0x2fe>
 8006758:	2304      	movs	r3, #4
 800675a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800675e:	e01a      	b.n	8006796 <UART_SetConfig+0x2fe>
 8006760:	2308      	movs	r3, #8
 8006762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006766:	e016      	b.n	8006796 <UART_SetConfig+0x2fe>
 8006768:	2310      	movs	r3, #16
 800676a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800676e:	e012      	b.n	8006796 <UART_SetConfig+0x2fe>
 8006770:	cfff69f3 	.word	0xcfff69f3
 8006774:	40008000 	.word	0x40008000
 8006778:	40013800 	.word	0x40013800
 800677c:	40021000 	.word	0x40021000
 8006780:	40004400 	.word	0x40004400
 8006784:	40004800 	.word	0x40004800
 8006788:	40004c00 	.word	0x40004c00
 800678c:	40005000 	.word	0x40005000
 8006790:	2310      	movs	r3, #16
 8006792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4aae      	ldr	r2, [pc, #696]	; (8006a54 <UART_SetConfig+0x5bc>)
 800679c:	4293      	cmp	r3, r2
 800679e:	f040 8097 	bne.w	80068d0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80067a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80067a6:	2b08      	cmp	r3, #8
 80067a8:	d823      	bhi.n	80067f2 <UART_SetConfig+0x35a>
 80067aa:	a201      	add	r2, pc, #4	; (adr r2, 80067b0 <UART_SetConfig+0x318>)
 80067ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b0:	080067d5 	.word	0x080067d5
 80067b4:	080067f3 	.word	0x080067f3
 80067b8:	080067dd 	.word	0x080067dd
 80067bc:	080067f3 	.word	0x080067f3
 80067c0:	080067e3 	.word	0x080067e3
 80067c4:	080067f3 	.word	0x080067f3
 80067c8:	080067f3 	.word	0x080067f3
 80067cc:	080067f3 	.word	0x080067f3
 80067d0:	080067eb 	.word	0x080067eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067d4:	f7fd fd92 	bl	80042fc <HAL_RCC_GetPCLK1Freq>
 80067d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80067da:	e010      	b.n	80067fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067dc:	4b9e      	ldr	r3, [pc, #632]	; (8006a58 <UART_SetConfig+0x5c0>)
 80067de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80067e0:	e00d      	b.n	80067fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067e2:	f7fd fd1d 	bl	8004220 <HAL_RCC_GetSysClockFreq>
 80067e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80067e8:	e009      	b.n	80067fe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80067f0:	e005      	b.n	80067fe <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80067f2:	2300      	movs	r3, #0
 80067f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80067fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80067fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006800:	2b00      	cmp	r3, #0
 8006802:	f000 8130 	beq.w	8006a66 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800680a:	4a94      	ldr	r2, [pc, #592]	; (8006a5c <UART_SetConfig+0x5c4>)
 800680c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006810:	461a      	mov	r2, r3
 8006812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006814:	fbb3 f3f2 	udiv	r3, r3, r2
 8006818:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	685a      	ldr	r2, [r3, #4]
 800681e:	4613      	mov	r3, r2
 8006820:	005b      	lsls	r3, r3, #1
 8006822:	4413      	add	r3, r2
 8006824:	69ba      	ldr	r2, [r7, #24]
 8006826:	429a      	cmp	r2, r3
 8006828:	d305      	bcc.n	8006836 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006830:	69ba      	ldr	r2, [r7, #24]
 8006832:	429a      	cmp	r2, r3
 8006834:	d903      	bls.n	800683e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800683c:	e113      	b.n	8006a66 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800683e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006840:	2200      	movs	r2, #0
 8006842:	60bb      	str	r3, [r7, #8]
 8006844:	60fa      	str	r2, [r7, #12]
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684a:	4a84      	ldr	r2, [pc, #528]	; (8006a5c <UART_SetConfig+0x5c4>)
 800684c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006850:	b29b      	uxth	r3, r3
 8006852:	2200      	movs	r2, #0
 8006854:	603b      	str	r3, [r7, #0]
 8006856:	607a      	str	r2, [r7, #4]
 8006858:	e9d7 2300 	ldrd	r2, r3, [r7]
 800685c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006860:	f7f9 fcda 	bl	8000218 <__aeabi_uldivmod>
 8006864:	4602      	mov	r2, r0
 8006866:	460b      	mov	r3, r1
 8006868:	4610      	mov	r0, r2
 800686a:	4619      	mov	r1, r3
 800686c:	f04f 0200 	mov.w	r2, #0
 8006870:	f04f 0300 	mov.w	r3, #0
 8006874:	020b      	lsls	r3, r1, #8
 8006876:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800687a:	0202      	lsls	r2, r0, #8
 800687c:	6979      	ldr	r1, [r7, #20]
 800687e:	6849      	ldr	r1, [r1, #4]
 8006880:	0849      	lsrs	r1, r1, #1
 8006882:	2000      	movs	r0, #0
 8006884:	460c      	mov	r4, r1
 8006886:	4605      	mov	r5, r0
 8006888:	eb12 0804 	adds.w	r8, r2, r4
 800688c:	eb43 0905 	adc.w	r9, r3, r5
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	469a      	mov	sl, r3
 8006898:	4693      	mov	fp, r2
 800689a:	4652      	mov	r2, sl
 800689c:	465b      	mov	r3, fp
 800689e:	4640      	mov	r0, r8
 80068a0:	4649      	mov	r1, r9
 80068a2:	f7f9 fcb9 	bl	8000218 <__aeabi_uldivmod>
 80068a6:	4602      	mov	r2, r0
 80068a8:	460b      	mov	r3, r1
 80068aa:	4613      	mov	r3, r2
 80068ac:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068b4:	d308      	bcc.n	80068c8 <UART_SetConfig+0x430>
 80068b6:	6a3b      	ldr	r3, [r7, #32]
 80068b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068bc:	d204      	bcs.n	80068c8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	6a3a      	ldr	r2, [r7, #32]
 80068c4:	60da      	str	r2, [r3, #12]
 80068c6:	e0ce      	b.n	8006a66 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80068ce:	e0ca      	b.n	8006a66 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	69db      	ldr	r3, [r3, #28]
 80068d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068d8:	d166      	bne.n	80069a8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80068da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80068de:	2b08      	cmp	r3, #8
 80068e0:	d827      	bhi.n	8006932 <UART_SetConfig+0x49a>
 80068e2:	a201      	add	r2, pc, #4	; (adr r2, 80068e8 <UART_SetConfig+0x450>)
 80068e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e8:	0800690d 	.word	0x0800690d
 80068ec:	08006915 	.word	0x08006915
 80068f0:	0800691d 	.word	0x0800691d
 80068f4:	08006933 	.word	0x08006933
 80068f8:	08006923 	.word	0x08006923
 80068fc:	08006933 	.word	0x08006933
 8006900:	08006933 	.word	0x08006933
 8006904:	08006933 	.word	0x08006933
 8006908:	0800692b 	.word	0x0800692b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800690c:	f7fd fcf6 	bl	80042fc <HAL_RCC_GetPCLK1Freq>
 8006910:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006912:	e014      	b.n	800693e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006914:	f7fd fd08 	bl	8004328 <HAL_RCC_GetPCLK2Freq>
 8006918:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800691a:	e010      	b.n	800693e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800691c:	4b4e      	ldr	r3, [pc, #312]	; (8006a58 <UART_SetConfig+0x5c0>)
 800691e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006920:	e00d      	b.n	800693e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006922:	f7fd fc7d 	bl	8004220 <HAL_RCC_GetSysClockFreq>
 8006926:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006928:	e009      	b.n	800693e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800692a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800692e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006930:	e005      	b.n	800693e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006932:	2300      	movs	r3, #0
 8006934:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800693c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800693e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006940:	2b00      	cmp	r3, #0
 8006942:	f000 8090 	beq.w	8006a66 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694a:	4a44      	ldr	r2, [pc, #272]	; (8006a5c <UART_SetConfig+0x5c4>)
 800694c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006950:	461a      	mov	r2, r3
 8006952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006954:	fbb3 f3f2 	udiv	r3, r3, r2
 8006958:	005a      	lsls	r2, r3, #1
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	085b      	lsrs	r3, r3, #1
 8006960:	441a      	add	r2, r3
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	fbb2 f3f3 	udiv	r3, r2, r3
 800696a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800696c:	6a3b      	ldr	r3, [r7, #32]
 800696e:	2b0f      	cmp	r3, #15
 8006970:	d916      	bls.n	80069a0 <UART_SetConfig+0x508>
 8006972:	6a3b      	ldr	r3, [r7, #32]
 8006974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006978:	d212      	bcs.n	80069a0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800697a:	6a3b      	ldr	r3, [r7, #32]
 800697c:	b29b      	uxth	r3, r3
 800697e:	f023 030f 	bic.w	r3, r3, #15
 8006982:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006984:	6a3b      	ldr	r3, [r7, #32]
 8006986:	085b      	lsrs	r3, r3, #1
 8006988:	b29b      	uxth	r3, r3
 800698a:	f003 0307 	and.w	r3, r3, #7
 800698e:	b29a      	uxth	r2, r3
 8006990:	8bfb      	ldrh	r3, [r7, #30]
 8006992:	4313      	orrs	r3, r2
 8006994:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	8bfa      	ldrh	r2, [r7, #30]
 800699c:	60da      	str	r2, [r3, #12]
 800699e:	e062      	b.n	8006a66 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80069a6:	e05e      	b.n	8006a66 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80069a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80069ac:	2b08      	cmp	r3, #8
 80069ae:	d828      	bhi.n	8006a02 <UART_SetConfig+0x56a>
 80069b0:	a201      	add	r2, pc, #4	; (adr r2, 80069b8 <UART_SetConfig+0x520>)
 80069b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b6:	bf00      	nop
 80069b8:	080069dd 	.word	0x080069dd
 80069bc:	080069e5 	.word	0x080069e5
 80069c0:	080069ed 	.word	0x080069ed
 80069c4:	08006a03 	.word	0x08006a03
 80069c8:	080069f3 	.word	0x080069f3
 80069cc:	08006a03 	.word	0x08006a03
 80069d0:	08006a03 	.word	0x08006a03
 80069d4:	08006a03 	.word	0x08006a03
 80069d8:	080069fb 	.word	0x080069fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069dc:	f7fd fc8e 	bl	80042fc <HAL_RCC_GetPCLK1Freq>
 80069e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80069e2:	e014      	b.n	8006a0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069e4:	f7fd fca0 	bl	8004328 <HAL_RCC_GetPCLK2Freq>
 80069e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80069ea:	e010      	b.n	8006a0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069ec:	4b1a      	ldr	r3, [pc, #104]	; (8006a58 <UART_SetConfig+0x5c0>)
 80069ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80069f0:	e00d      	b.n	8006a0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069f2:	f7fd fc15 	bl	8004220 <HAL_RCC_GetSysClockFreq>
 80069f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80069f8:	e009      	b.n	8006a0e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a00:	e005      	b.n	8006a0e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006a02:	2300      	movs	r3, #0
 8006a04:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006a0c:	bf00      	nop
    }

    if (pclk != 0U)
 8006a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d028      	beq.n	8006a66 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a18:	4a10      	ldr	r2, [pc, #64]	; (8006a5c <UART_SetConfig+0x5c4>)
 8006a1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a22:	fbb3 f2f2 	udiv	r2, r3, r2
 8006a26:	697b      	ldr	r3, [r7, #20]
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	085b      	lsrs	r3, r3, #1
 8006a2c:	441a      	add	r2, r3
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a36:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a38:	6a3b      	ldr	r3, [r7, #32]
 8006a3a:	2b0f      	cmp	r3, #15
 8006a3c:	d910      	bls.n	8006a60 <UART_SetConfig+0x5c8>
 8006a3e:	6a3b      	ldr	r3, [r7, #32]
 8006a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a44:	d20c      	bcs.n	8006a60 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a46:	6a3b      	ldr	r3, [r7, #32]
 8006a48:	b29a      	uxth	r2, r3
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	60da      	str	r2, [r3, #12]
 8006a50:	e009      	b.n	8006a66 <UART_SetConfig+0x5ce>
 8006a52:	bf00      	nop
 8006a54:	40008000 	.word	0x40008000
 8006a58:	00f42400 	.word	0x00f42400
 8006a5c:	08007214 	.word	0x08007214
      }
      else
      {
        ret = HAL_ERROR;
 8006a60:	2301      	movs	r3, #1
 8006a62:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2201      	movs	r2, #1
 8006a72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006a82:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3730      	adds	r7, #48	; 0x30
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006a90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a9c:	f003 0301 	and.w	r3, r3, #1
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d00a      	beq.n	8006aba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	430a      	orrs	r2, r1
 8006ab8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006abe:	f003 0302 	and.w	r3, r3, #2
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d00a      	beq.n	8006adc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	430a      	orrs	r2, r1
 8006ada:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ae0:	f003 0304 	and.w	r3, r3, #4
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00a      	beq.n	8006afe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	430a      	orrs	r2, r1
 8006afc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b02:	f003 0308 	and.w	r3, r3, #8
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00a      	beq.n	8006b20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	430a      	orrs	r2, r1
 8006b1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b24:	f003 0310 	and.w	r3, r3, #16
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00a      	beq.n	8006b42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	430a      	orrs	r2, r1
 8006b40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b46:	f003 0320 	and.w	r3, r3, #32
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00a      	beq.n	8006b64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	430a      	orrs	r2, r1
 8006b62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d01a      	beq.n	8006ba6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	430a      	orrs	r2, r1
 8006b84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b8e:	d10a      	bne.n	8006ba6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d00a      	beq.n	8006bc8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	430a      	orrs	r2, r1
 8006bc6:	605a      	str	r2, [r3, #4]
  }
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b086      	sub	sp, #24
 8006bd8:	af02      	add	r7, sp, #8
 8006bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006be4:	f7fc f808 	bl	8002bf8 <HAL_GetTick>
 8006be8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0308 	and.w	r3, r3, #8
 8006bf4:	2b08      	cmp	r3, #8
 8006bf6:	d10e      	bne.n	8006c16 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006bf8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006bfc:	9300      	str	r3, [sp, #0]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f000 f82f 	bl	8006c6a <UART_WaitOnFlagUntilTimeout>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d001      	beq.n	8006c16 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e025      	b.n	8006c62 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f003 0304 	and.w	r3, r3, #4
 8006c20:	2b04      	cmp	r3, #4
 8006c22:	d10e      	bne.n	8006c42 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c24:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c28:	9300      	str	r3, [sp, #0]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f819 	bl	8006c6a <UART_WaitOnFlagUntilTimeout>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d001      	beq.n	8006c42 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e00f      	b.n	8006c62 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2220      	movs	r2, #32
 8006c46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2220      	movs	r2, #32
 8006c4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b09c      	sub	sp, #112	; 0x70
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	60f8      	str	r0, [r7, #12]
 8006c72:	60b9      	str	r1, [r7, #8]
 8006c74:	603b      	str	r3, [r7, #0]
 8006c76:	4613      	mov	r3, r2
 8006c78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c7a:	e0a9      	b.n	8006dd0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c82:	f000 80a5 	beq.w	8006dd0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c86:	f7fb ffb7 	bl	8002bf8 <HAL_GetTick>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d302      	bcc.n	8006c9c <UART_WaitOnFlagUntilTimeout+0x32>
 8006c96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d140      	bne.n	8006d1e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ca4:	e853 3f00 	ldrex	r3, [r3]
 8006ca8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006cb0:	667b      	str	r3, [r7, #100]	; 0x64
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006cbc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cbe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006cc0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006cc2:	e841 2300 	strex	r3, r2, [r1]
 8006cc6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d1e6      	bne.n	8006c9c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	3308      	adds	r3, #8
 8006cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cd8:	e853 3f00 	ldrex	r3, [r3]
 8006cdc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce0:	f023 0301 	bic.w	r3, r3, #1
 8006ce4:	663b      	str	r3, [r7, #96]	; 0x60
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	3308      	adds	r3, #8
 8006cec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006cee:	64ba      	str	r2, [r7, #72]	; 0x48
 8006cf0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cf2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006cf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cf6:	e841 2300 	strex	r3, r2, [r1]
 8006cfa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006cfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d1e5      	bne.n	8006cce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2220      	movs	r2, #32
 8006d06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2220      	movs	r2, #32
 8006d0e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	e069      	b.n	8006df2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 0304 	and.w	r3, r3, #4
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d051      	beq.n	8006dd0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	69db      	ldr	r3, [r3, #28]
 8006d32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d3a:	d149      	bne.n	8006dd0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d44:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4e:	e853 3f00 	ldrex	r3, [r3]
 8006d52:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d56:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d5a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	461a      	mov	r2, r3
 8006d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d64:	637b      	str	r3, [r7, #52]	; 0x34
 8006d66:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d6c:	e841 2300 	strex	r3, r2, [r1]
 8006d70:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d1e6      	bne.n	8006d46 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	3308      	adds	r3, #8
 8006d7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	e853 3f00 	ldrex	r3, [r3]
 8006d86:	613b      	str	r3, [r7, #16]
   return(result);
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	f023 0301 	bic.w	r3, r3, #1
 8006d8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	3308      	adds	r3, #8
 8006d96:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006d98:	623a      	str	r2, [r7, #32]
 8006d9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9c:	69f9      	ldr	r1, [r7, #28]
 8006d9e:	6a3a      	ldr	r2, [r7, #32]
 8006da0:	e841 2300 	strex	r3, r2, [r1]
 8006da4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d1e5      	bne.n	8006d78 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2220      	movs	r2, #32
 8006db0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2220      	movs	r2, #32
 8006db8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	2220      	movs	r2, #32
 8006dc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006dcc:	2303      	movs	r3, #3
 8006dce:	e010      	b.n	8006df2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	69da      	ldr	r2, [r3, #28]
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	4013      	ands	r3, r2
 8006dda:	68ba      	ldr	r2, [r7, #8]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	bf0c      	ite	eq
 8006de0:	2301      	moveq	r3, #1
 8006de2:	2300      	movne	r3, #0
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	461a      	mov	r2, r3
 8006de8:	79fb      	ldrb	r3, [r7, #7]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	f43f af46 	beq.w	8006c7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006df0:	2300      	movs	r3, #0
}
 8006df2:	4618      	mov	r0, r3
 8006df4:	3770      	adds	r7, #112	; 0x70
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}

08006dfa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	b095      	sub	sp, #84	; 0x54
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e0a:	e853 3f00 	ldrex	r3, [r3]
 8006e0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e20:	643b      	str	r3, [r7, #64]	; 0x40
 8006e22:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e28:	e841 2300 	strex	r3, r2, [r1]
 8006e2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1e6      	bne.n	8006e02 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	3308      	adds	r3, #8
 8006e3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3c:	6a3b      	ldr	r3, [r7, #32]
 8006e3e:	e853 3f00 	ldrex	r3, [r3]
 8006e42:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e4a:	f023 0301 	bic.w	r3, r3, #1
 8006e4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	3308      	adds	r3, #8
 8006e56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e60:	e841 2300 	strex	r3, r2, [r1]
 8006e64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d1e3      	bne.n	8006e34 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d118      	bne.n	8006ea6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	e853 3f00 	ldrex	r3, [r3]
 8006e80:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	f023 0310 	bic.w	r3, r3, #16
 8006e88:	647b      	str	r3, [r7, #68]	; 0x44
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	461a      	mov	r2, r3
 8006e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e92:	61bb      	str	r3, [r7, #24]
 8006e94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e96:	6979      	ldr	r1, [r7, #20]
 8006e98:	69ba      	ldr	r2, [r7, #24]
 8006e9a:	e841 2300 	strex	r3, r2, [r1]
 8006e9e:	613b      	str	r3, [r7, #16]
   return(result);
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1e6      	bne.n	8006e74 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2220      	movs	r2, #32
 8006eaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006eba:	bf00      	nop
 8006ebc:	3754      	adds	r7, #84	; 0x54
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr

08006ec6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ec6:	b580      	push	{r7, lr}
 8006ec8:	b084      	sub	sp, #16
 8006eca:	af00      	add	r7, sp, #0
 8006ecc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ed2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ee4:	68f8      	ldr	r0, [r7, #12]
 8006ee6:	f7ff fac1 	bl	800646c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006eea:	bf00      	nop
 8006eec:	3710      	adds	r7, #16
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b088      	sub	sp, #32
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	e853 3f00 	ldrex	r3, [r3]
 8006f06:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f0e:	61fb      	str	r3, [r7, #28]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	461a      	mov	r2, r3
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	61bb      	str	r3, [r7, #24]
 8006f1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1c:	6979      	ldr	r1, [r7, #20]
 8006f1e:	69ba      	ldr	r2, [r7, #24]
 8006f20:	e841 2300 	strex	r3, r2, [r1]
 8006f24:	613b      	str	r3, [r7, #16]
   return(result);
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1e6      	bne.n	8006efa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2220      	movs	r2, #32
 8006f30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2200      	movs	r2, #0
 8006f38:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f7ff fa8c 	bl	8006458 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f40:	bf00      	nop
 8006f42:	3720      	adds	r7, #32
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}

08006f48 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b083      	sub	sp, #12
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006f50:	bf00      	nop
 8006f52:	370c      	adds	r7, #12
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006f64:	bf00      	nop
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b085      	sub	sp, #20
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d101      	bne.n	8006f9a <HAL_UARTEx_DisableFifoMode+0x16>
 8006f96:	2302      	movs	r3, #2
 8006f98:	e027      	b.n	8006fea <HAL_UARTEx_DisableFifoMode+0x66>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2224      	movs	r2, #36	; 0x24
 8006fa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	681a      	ldr	r2, [r3, #0]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f022 0201 	bic.w	r2, r2, #1
 8006fc0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006fc8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2220      	movs	r2, #32
 8006fdc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3714      	adds	r7, #20
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr

08006ff6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b084      	sub	sp, #16
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
 8006ffe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007006:	2b01      	cmp	r3, #1
 8007008:	d101      	bne.n	800700e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800700a:	2302      	movs	r3, #2
 800700c:	e02d      	b.n	800706a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2201      	movs	r2, #1
 8007012:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2224      	movs	r2, #36	; 0x24
 800701a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f022 0201 	bic.w	r2, r2, #1
 8007034:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	683a      	ldr	r2, [r7, #0]
 8007046:	430a      	orrs	r2, r1
 8007048:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 f850 	bl	80070f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2220      	movs	r2, #32
 800705c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}

08007072 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b084      	sub	sp, #16
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
 800707a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007082:	2b01      	cmp	r3, #1
 8007084:	d101      	bne.n	800708a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007086:	2302      	movs	r3, #2
 8007088:	e02d      	b.n	80070e6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2201      	movs	r2, #1
 800708e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2224      	movs	r2, #36	; 0x24
 8007096:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f022 0201 	bic.w	r2, r2, #1
 80070b0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	683a      	ldr	r2, [r7, #0]
 80070c2:	430a      	orrs	r2, r1
 80070c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 f812 	bl	80070f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2220      	movs	r2, #32
 80070d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2200      	movs	r2, #0
 80070e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
	...

080070f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d108      	bne.n	8007112 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007110:	e031      	b.n	8007176 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007112:	2308      	movs	r3, #8
 8007114:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007116:	2308      	movs	r3, #8
 8007118:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	689b      	ldr	r3, [r3, #8]
 8007120:	0e5b      	lsrs	r3, r3, #25
 8007122:	b2db      	uxtb	r3, r3
 8007124:	f003 0307 	and.w	r3, r3, #7
 8007128:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	0f5b      	lsrs	r3, r3, #29
 8007132:	b2db      	uxtb	r3, r3
 8007134:	f003 0307 	and.w	r3, r3, #7
 8007138:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800713a:	7bbb      	ldrb	r3, [r7, #14]
 800713c:	7b3a      	ldrb	r2, [r7, #12]
 800713e:	4911      	ldr	r1, [pc, #68]	; (8007184 <UARTEx_SetNbDataToProcess+0x94>)
 8007140:	5c8a      	ldrb	r2, [r1, r2]
 8007142:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007146:	7b3a      	ldrb	r2, [r7, #12]
 8007148:	490f      	ldr	r1, [pc, #60]	; (8007188 <UARTEx_SetNbDataToProcess+0x98>)
 800714a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800714c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007150:	b29a      	uxth	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007158:	7bfb      	ldrb	r3, [r7, #15]
 800715a:	7b7a      	ldrb	r2, [r7, #13]
 800715c:	4909      	ldr	r1, [pc, #36]	; (8007184 <UARTEx_SetNbDataToProcess+0x94>)
 800715e:	5c8a      	ldrb	r2, [r1, r2]
 8007160:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007164:	7b7a      	ldrb	r2, [r7, #13]
 8007166:	4908      	ldr	r1, [pc, #32]	; (8007188 <UARTEx_SetNbDataToProcess+0x98>)
 8007168:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800716a:	fb93 f3f2 	sdiv	r3, r3, r2
 800716e:	b29a      	uxth	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007176:	bf00      	nop
 8007178:	3714      	adds	r7, #20
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr
 8007182:	bf00      	nop
 8007184:	0800722c 	.word	0x0800722c
 8007188:	08007234 	.word	0x08007234

0800718c <memset>:
 800718c:	4402      	add	r2, r0
 800718e:	4603      	mov	r3, r0
 8007190:	4293      	cmp	r3, r2
 8007192:	d100      	bne.n	8007196 <memset+0xa>
 8007194:	4770      	bx	lr
 8007196:	f803 1b01 	strb.w	r1, [r3], #1
 800719a:	e7f9      	b.n	8007190 <memset+0x4>

0800719c <__libc_init_array>:
 800719c:	b570      	push	{r4, r5, r6, lr}
 800719e:	4d0d      	ldr	r5, [pc, #52]	; (80071d4 <__libc_init_array+0x38>)
 80071a0:	4c0d      	ldr	r4, [pc, #52]	; (80071d8 <__libc_init_array+0x3c>)
 80071a2:	1b64      	subs	r4, r4, r5
 80071a4:	10a4      	asrs	r4, r4, #2
 80071a6:	2600      	movs	r6, #0
 80071a8:	42a6      	cmp	r6, r4
 80071aa:	d109      	bne.n	80071c0 <__libc_init_array+0x24>
 80071ac:	4d0b      	ldr	r5, [pc, #44]	; (80071dc <__libc_init_array+0x40>)
 80071ae:	4c0c      	ldr	r4, [pc, #48]	; (80071e0 <__libc_init_array+0x44>)
 80071b0:	f000 f818 	bl	80071e4 <_init>
 80071b4:	1b64      	subs	r4, r4, r5
 80071b6:	10a4      	asrs	r4, r4, #2
 80071b8:	2600      	movs	r6, #0
 80071ba:	42a6      	cmp	r6, r4
 80071bc:	d105      	bne.n	80071ca <__libc_init_array+0x2e>
 80071be:	bd70      	pop	{r4, r5, r6, pc}
 80071c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80071c4:	4798      	blx	r3
 80071c6:	3601      	adds	r6, #1
 80071c8:	e7ee      	b.n	80071a8 <__libc_init_array+0xc>
 80071ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80071ce:	4798      	blx	r3
 80071d0:	3601      	adds	r6, #1
 80071d2:	e7f2      	b.n	80071ba <__libc_init_array+0x1e>
 80071d4:	08007244 	.word	0x08007244
 80071d8:	08007244 	.word	0x08007244
 80071dc:	08007244 	.word	0x08007244
 80071e0:	08007248 	.word	0x08007248

080071e4 <_init>:
 80071e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071e6:	bf00      	nop
 80071e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ea:	bc08      	pop	{r3}
 80071ec:	469e      	mov	lr, r3
 80071ee:	4770      	bx	lr

080071f0 <_fini>:
 80071f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071f2:	bf00      	nop
 80071f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071f6:	bc08      	pop	{r3}
 80071f8:	469e      	mov	lr, r3
 80071fa:	4770      	bx	lr
