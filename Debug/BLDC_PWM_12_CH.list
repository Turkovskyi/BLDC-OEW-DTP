
BLDC_PWM_12_CH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cb0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006e88  08006e88  00016e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ec8  08006ec8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006ec8  08006ec8  00016ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ed0  08006ed0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ed0  08006ed0  00016ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ed4  08006ed4  00016ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006ed8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000028c  2000000c  08006ee4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000298  08006ee4  00020298  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f31  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000255c  00000000  00000000  00034f6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001240  00000000  00000000  000374d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001168  00000000  00000000  00038710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c34  00000000  00000000  00039878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014627  00000000  00000000  000604ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff3ec  00000000  00000000  00074ad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00173ebf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d08  00000000  00000000  00173f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006e70 	.word	0x08006e70

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006e70 	.word	0x08006e70

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b098      	sub	sp, #96	; 0x60
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000522:	f002 fa88 	bl	8002a36 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000526:	f000 f9b1 	bl	800088c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052a:	f000 fd0d 	bl	8000f48 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 800052e:	f000 fa33 	bl	8000998 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8000532:	f000 fac7 	bl	8000ac4 <MX_TIM1_Init>
  MX_DAC1_Init();
 8000536:	f000 f9f5 	bl	8000924 <MX_DAC1_Init>
  MX_USART1_UART_Init();
 800053a:	f000 fa77 	bl	8000a2c <MX_USART1_UART_Init>
  MX_TIM8_Init();
 800053e:	f000 fc4b 	bl	8000dd8 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000542:	f000 fb77 	bl	8000c34 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000546:	f000 fbef 	bl	8000d28 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800054a:	2100      	movs	r1, #0
 800054c:	48a6      	ldr	r0, [pc, #664]	; (80007e8 <main+0x2cc>)
 800054e:	f004 f903 	bl	8004758 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000552:	2104      	movs	r1, #4
 8000554:	48a4      	ldr	r0, [pc, #656]	; (80007e8 <main+0x2cc>)
 8000556:	f004 f8ff 	bl	8004758 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800055a:	2108      	movs	r1, #8
 800055c:	48a2      	ldr	r0, [pc, #648]	; (80007e8 <main+0x2cc>)
 800055e:	f004 f8fb 	bl	8004758 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000562:	210c      	movs	r1, #12
 8000564:	48a0      	ldr	r0, [pc, #640]	; (80007e8 <main+0x2cc>)
 8000566:	f004 f8f7 	bl	8004758 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800056a:	2100      	movs	r1, #0
 800056c:	489f      	ldr	r0, [pc, #636]	; (80007ec <main+0x2d0>)
 800056e:	f004 f8f3 	bl	8004758 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000572:	2104      	movs	r1, #4
 8000574:	489d      	ldr	r0, [pc, #628]	; (80007ec <main+0x2d0>)
 8000576:	f004 f8ef 	bl	8004758 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 800057a:	2108      	movs	r1, #8
 800057c:	489b      	ldr	r0, [pc, #620]	; (80007ec <main+0x2d0>)
 800057e:	f004 f8eb 	bl	8004758 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000582:	210c      	movs	r1, #12
 8000584:	4899      	ldr	r0, [pc, #612]	; (80007ec <main+0x2d0>)
 8000586:	f004 f8e7 	bl	8004758 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800058a:	2100      	movs	r1, #0
 800058c:	4898      	ldr	r0, [pc, #608]	; (80007f0 <main+0x2d4>)
 800058e:	f004 f8e3 	bl	8004758 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000592:	2104      	movs	r1, #4
 8000594:	4896      	ldr	r0, [pc, #600]	; (80007f0 <main+0x2d4>)
 8000596:	f004 f8df 	bl	8004758 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800059a:	2108      	movs	r1, #8
 800059c:	4894      	ldr	r0, [pc, #592]	; (80007f0 <main+0x2d4>)
 800059e:	f004 f8db 	bl	8004758 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80005a2:	210c      	movs	r1, #12
 80005a4:	4892      	ldr	r0, [pc, #584]	; (80007f0 <main+0x2d4>)
 80005a6:	f004 f8d7 	bl	8004758 <HAL_TIM_PWM_Start>


  PWM1 = 0;
 80005aa:	4b92      	ldr	r3, [pc, #584]	; (80007f4 <main+0x2d8>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	801a      	strh	r2, [r3, #0]
  PWM2 = 0;
 80005b0:	4b91      	ldr	r3, [pc, #580]	; (80007f8 <main+0x2dc>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	801a      	strh	r2, [r3, #0]
  PWM3 = 0;
 80005b6:	4b91      	ldr	r3, [pc, #580]	; (80007fc <main+0x2e0>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	801a      	strh	r2, [r3, #0]
  PWM4 = 0;
 80005bc:	4b90      	ldr	r3, [pc, #576]	; (8000800 <main+0x2e4>)
 80005be:	2200      	movs	r2, #0
 80005c0:	801a      	strh	r2, [r3, #0]
//  TIM8->CCR3 = 2048;
//  TIM8->CCR4 = 2048;
  uint32_t timer;
  uint32_t time;

  uint8_t currentState = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
		InverterX(2) - low switches are on, high switches are off
		InverterX(3) - 120 deg. commutation with PWM
		InverterX(4) - 120 deg. commutation without PWM
		*/

		time = HAL_GetTick();
 80005c8:	f002 fa9a 	bl	8002b00 <HAL_GetTick>
 80005cc:	6578      	str	r0, [r7, #84]	; 0x54

		switch (currentState)
 80005ce:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80005d2:	2b08      	cmp	r3, #8
 80005d4:	d8f8      	bhi.n	80005c8 <main+0xac>
 80005d6:	a201      	add	r2, pc, #4	; (adr r2, 80005dc <main+0xc0>)
 80005d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005dc:	08000601 	.word	0x08000601
 80005e0:	0800062f 	.word	0x0800062f
 80005e4:	08000697 	.word	0x08000697
 80005e8:	080006c7 	.word	0x080006c7
 80005ec:	0800072b 	.word	0x0800072b
 80005f0:	0800075b 	.word	0x0800075b
 80005f4:	080007b9 	.word	0x080007b9
 80005f8:	08000805 	.word	0x08000805
 80005fc:	08000867 	.word	0x08000867
		{
		case 0:
			Inverter1(1);
 8000600:	2001      	movs	r0, #1
 8000602:	f001 f9f9 	bl	80019f8 <Inverter1>
			Inverter2(1);
 8000606:	2001      	movs	r0, #1
 8000608:	f001 fc86 	bl	8001f18 <Inverter2>
			Inverter3(1);
 800060c:	2001      	movs	r0, #1
 800060e:	f001 fb3b 	bl	8001c88 <Inverter3>
			Inverter4(1);
 8000612:	2001      	movs	r0, #1
 8000614:	f001 fdec 	bl	80021f0 <Inverter4>
			if (time >= 2000)
 8000618:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800061a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800061e:	f0c0 812f 	bcc.w	8000880 <main+0x364>
			{
				stateOffTime[0] = time;
 8000622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000624:	607b      	str	r3, [r7, #4]
				currentState = 1;
 8000626:	2301      	movs	r3, #1
 8000628:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

			}


			break;
 800062c:	e128      	b.n	8000880 <main+0x364>
		case 1:
			if (time >= timer)
 800062e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000630:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000632:	429a      	cmp	r2, r3
 8000634:	d30f      	bcc.n	8000656 <main+0x13a>
			{
				timer = time + 20;
 8000636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000638:	3314      	adds	r3, #20
 800063a:	65fb      	str	r3, [r7, #92]	; 0x5c
				PWM1 += 10;
 800063c:	4b6d      	ldr	r3, [pc, #436]	; (80007f4 <main+0x2d8>)
 800063e:	881b      	ldrh	r3, [r3, #0]
 8000640:	b29b      	uxth	r3, r3
 8000642:	330a      	adds	r3, #10
 8000644:	b29a      	uxth	r2, r3
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <main+0x2d8>)
 8000648:	801a      	strh	r2, [r3, #0]
				PWM2 += 10;
 800064a:	4b6b      	ldr	r3, [pc, #428]	; (80007f8 <main+0x2dc>)
 800064c:	881b      	ldrh	r3, [r3, #0]
 800064e:	330a      	adds	r3, #10
 8000650:	b29a      	uxth	r2, r3
 8000652:	4b69      	ldr	r3, [pc, #420]	; (80007f8 <main+0x2dc>)
 8000654:	801a      	strh	r2, [r3, #0]
			}

			if (PWM1 > 4095)
 8000656:	4b67      	ldr	r3, [pc, #412]	; (80007f4 <main+0x2d8>)
 8000658:	881b      	ldrh	r3, [r3, #0]
 800065a:	b29b      	uxth	r3, r3
 800065c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000660:	d30c      	bcc.n	800067c <main+0x160>
			{
				PWM1 = 4095;
 8000662:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <main+0x2d8>)
 8000664:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000668:	801a      	strh	r2, [r3, #0]
				PWM2 = 4095;
 800066a:	4b63      	ldr	r3, [pc, #396]	; (80007f8 <main+0x2dc>)
 800066c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000670:	801a      	strh	r2, [r3, #0]
				currentState = 2;
 8000672:	2302      	movs	r3, #2
 8000674:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
				stateOffTime[1] = time;
 8000678:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800067a:	60bb      	str	r3, [r7, #8]
			}
//			PWM1 = 2000;
//			PWM2 = 2000;

			Inverter1(3);
 800067c:	2003      	movs	r0, #3
 800067e:	f001 f9bb 	bl	80019f8 <Inverter1>
			Inverter2(3);
 8000682:	2003      	movs	r0, #3
 8000684:	f001 fc48 	bl	8001f18 <Inverter2>
			Inverter3(2);
 8000688:	2002      	movs	r0, #2
 800068a:	f001 fafd 	bl	8001c88 <Inverter3>
			Inverter4(2);
 800068e:	2002      	movs	r0, #2
 8000690:	f001 fdae 	bl	80021f0 <Inverter4>
			break;
 8000694:	e0f5      	b.n	8000882 <main+0x366>

		case 2:

			if ((time -stateOffTime[1]) >=4000)
 8000696:	68bb      	ldr	r3, [r7, #8]
 8000698:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800069a:	1ad3      	subs	r3, r2, r3
 800069c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80006a0:	d304      	bcc.n	80006ac <main+0x190>
			{
				currentState = 3;
 80006a2:	2303      	movs	r3, #3
 80006a4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
				stateOffTime[2] = time;
 80006a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80006aa:	60fb      	str	r3, [r7, #12]
			}

			Inverter1(4);
 80006ac:	2004      	movs	r0, #4
 80006ae:	f001 f9a3 	bl	80019f8 <Inverter1>
			Inverter2(1);
 80006b2:	2001      	movs	r0, #1
 80006b4:	f001 fc30 	bl	8001f18 <Inverter2>
			Inverter3(2);
 80006b8:	2002      	movs	r0, #2
 80006ba:	f001 fae5 	bl	8001c88 <Inverter3>
			Inverter4(1);
 80006be:	2001      	movs	r0, #1
 80006c0:	f001 fd96 	bl	80021f0 <Inverter4>
			break;
 80006c4:	e0dd      	b.n	8000882 <main+0x366>

		case 3:
			if (time >= timer)
 80006c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80006c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80006ca:	429a      	cmp	r2, r3
 80006cc:	d30e      	bcc.n	80006ec <main+0x1d0>
			{
				timer = time + 20;
 80006ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80006d0:	3314      	adds	r3, #20
 80006d2:	65fb      	str	r3, [r7, #92]	; 0x5c
				PWM3 += 10;
 80006d4:	4b49      	ldr	r3, [pc, #292]	; (80007fc <main+0x2e0>)
 80006d6:	881b      	ldrh	r3, [r3, #0]
 80006d8:	330a      	adds	r3, #10
 80006da:	b29a      	uxth	r2, r3
 80006dc:	4b47      	ldr	r3, [pc, #284]	; (80007fc <main+0x2e0>)
 80006de:	801a      	strh	r2, [r3, #0]
				PWM4 += 10;
 80006e0:	4b47      	ldr	r3, [pc, #284]	; (8000800 <main+0x2e4>)
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	330a      	adds	r3, #10
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	4b45      	ldr	r3, [pc, #276]	; (8000800 <main+0x2e4>)
 80006ea:	801a      	strh	r2, [r3, #0]
			}

			if (PWM3 > 4095)
 80006ec:	4b43      	ldr	r3, [pc, #268]	; (80007fc <main+0x2e0>)
 80006ee:	881b      	ldrh	r3, [r3, #0]
 80006f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006f4:	d30c      	bcc.n	8000710 <main+0x1f4>
			{
				PWM3 = 4095;
 80006f6:	4b41      	ldr	r3, [pc, #260]	; (80007fc <main+0x2e0>)
 80006f8:	f640 72ff 	movw	r2, #4095	; 0xfff
 80006fc:	801a      	strh	r2, [r3, #0]
				PWM4 = 4095;
 80006fe:	4b40      	ldr	r3, [pc, #256]	; (8000800 <main+0x2e4>)
 8000700:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000704:	801a      	strh	r2, [r3, #0]
				currentState = 4;
 8000706:	2304      	movs	r3, #4
 8000708:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
				stateOffTime[3] = time;
 800070c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800070e:	613b      	str	r3, [r7, #16]
			}
//			PWM1 = 2000;
//			PWM2 = 2000;

			Inverter1(4);
 8000710:	2004      	movs	r0, #4
 8000712:	f001 f971 	bl	80019f8 <Inverter1>
			Inverter2(4);
 8000716:	2004      	movs	r0, #4
 8000718:	f001 fbfe 	bl	8001f18 <Inverter2>
			Inverter3(3);
 800071c:	2003      	movs	r0, #3
 800071e:	f001 fab3 	bl	8001c88 <Inverter3>
			Inverter4(3);
 8000722:	2003      	movs	r0, #3
 8000724:	f001 fd64 	bl	80021f0 <Inverter4>
			break;
 8000728:	e0ab      	b.n	8000882 <main+0x366>

		case 4:
		if ((time -stateOffTime[3]) >=4000)
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800072e:	1ad3      	subs	r3, r2, r3
 8000730:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 8000734:	d304      	bcc.n	8000740 <main+0x224>
		{
			currentState = 5;
 8000736:	2305      	movs	r3, #5
 8000738:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			stateOffTime[2] = time;
 800073c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800073e:	60fb      	str	r3, [r7, #12]
		}

		Inverter1(4);
 8000740:	2004      	movs	r0, #4
 8000742:	f001 f959 	bl	80019f8 <Inverter1>
		Inverter2(1);
 8000746:	2001      	movs	r0, #1
 8000748:	f001 fbe6 	bl	8001f18 <Inverter2>
		Inverter3(4);
 800074c:	2004      	movs	r0, #4
 800074e:	f001 fa9b 	bl	8001c88 <Inverter3>
		Inverter4(1);
 8000752:	2001      	movs	r0, #1
 8000754:	f001 fd4c 	bl	80021f0 <Inverter4>
		break;
 8000758:	e093      	b.n	8000882 <main+0x366>

		case 5:
			if (time >= timer)
 800075a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800075c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800075e:	429a      	cmp	r2, r3
 8000760:	d30e      	bcc.n	8000780 <main+0x264>
			{
				timer = time + 20;
 8000762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000764:	3314      	adds	r3, #20
 8000766:	65fb      	str	r3, [r7, #92]	; 0x5c
				PWM3 -= 10;
 8000768:	4b24      	ldr	r3, [pc, #144]	; (80007fc <main+0x2e0>)
 800076a:	881b      	ldrh	r3, [r3, #0]
 800076c:	3b0a      	subs	r3, #10
 800076e:	b29a      	uxth	r2, r3
 8000770:	4b22      	ldr	r3, [pc, #136]	; (80007fc <main+0x2e0>)
 8000772:	801a      	strh	r2, [r3, #0]
				PWM4 -= 10;
 8000774:	4b22      	ldr	r3, [pc, #136]	; (8000800 <main+0x2e4>)
 8000776:	881b      	ldrh	r3, [r3, #0]
 8000778:	3b0a      	subs	r3, #10
 800077a:	b29a      	uxth	r2, r3
 800077c:	4b20      	ldr	r3, [pc, #128]	; (8000800 <main+0x2e4>)
 800077e:	801a      	strh	r2, [r3, #0]
			}

			if (PWM3 < 10)
 8000780:	4b1e      	ldr	r3, [pc, #120]	; (80007fc <main+0x2e0>)
 8000782:	881b      	ldrh	r3, [r3, #0]
 8000784:	2b09      	cmp	r3, #9
 8000786:	d80a      	bhi.n	800079e <main+0x282>
			{
				PWM3 = 0;
 8000788:	4b1c      	ldr	r3, [pc, #112]	; (80007fc <main+0x2e0>)
 800078a:	2200      	movs	r2, #0
 800078c:	801a      	strh	r2, [r3, #0]
				PWM4 = 0;
 800078e:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <main+0x2e4>)
 8000790:	2200      	movs	r2, #0
 8000792:	801a      	strh	r2, [r3, #0]
				currentState = 6;
 8000794:	2306      	movs	r3, #6
 8000796:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
				stateOffTime[5] = time;
 800079a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800079c:	61bb      	str	r3, [r7, #24]
			}
//			PWM1 = 2000;
//			PWM2 = 2000;

			Inverter1(4);
 800079e:	2004      	movs	r0, #4
 80007a0:	f001 f92a 	bl	80019f8 <Inverter1>
			Inverter2(4);
 80007a4:	2004      	movs	r0, #4
 80007a6:	f001 fbb7 	bl	8001f18 <Inverter2>
			Inverter3(3);
 80007aa:	2003      	movs	r0, #3
 80007ac:	f001 fa6c 	bl	8001c88 <Inverter3>
			Inverter4(3);
 80007b0:	2003      	movs	r0, #3
 80007b2:	f001 fd1d 	bl	80021f0 <Inverter4>
			break;
 80007b6:	e064      	b.n	8000882 <main+0x366>

		case 6:
			if ((time -stateOffTime[5]) >=4000)
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80007bc:	1ad3      	subs	r3, r2, r3
 80007be:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80007c2:	d304      	bcc.n	80007ce <main+0x2b2>
			{
				currentState = 7;
 80007c4:	2307      	movs	r3, #7
 80007c6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
				stateOffTime[6] = time;
 80007ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80007cc:	61fb      	str	r3, [r7, #28]
			}

			Inverter1(4);
 80007ce:	2004      	movs	r0, #4
 80007d0:	f001 f912 	bl	80019f8 <Inverter1>
			Inverter2(1);
 80007d4:	2001      	movs	r0, #1
 80007d6:	f001 fb9f 	bl	8001f18 <Inverter2>
			Inverter3(2);
 80007da:	2002      	movs	r0, #2
 80007dc:	f001 fa54 	bl	8001c88 <Inverter3>
			Inverter4(1);
 80007e0:	2001      	movs	r0, #1
 80007e2:	f001 fd05 	bl	80021f0 <Inverter4>
			break;
 80007e6:	e04c      	b.n	8000882 <main+0x366>
 80007e8:	2000015c 	.word	0x2000015c
 80007ec:	200001a8 	.word	0x200001a8
 80007f0:	20000240 	.word	0x20000240
 80007f4:	2000028c 	.word	0x2000028c
 80007f8:	2000028e 	.word	0x2000028e
 80007fc:	20000290 	.word	0x20000290
 8000800:	20000292 	.word	0x20000292

		case 7:
			if (time >= timer)
 8000804:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000806:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000808:	429a      	cmp	r2, r3
 800080a:	d30f      	bcc.n	800082c <main+0x310>
			{
				timer = time + 20;
 800080c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800080e:	3314      	adds	r3, #20
 8000810:	65fb      	str	r3, [r7, #92]	; 0x5c
				PWM1 = PWM1 - 10;
 8000812:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <main+0x368>)
 8000814:	881b      	ldrh	r3, [r3, #0]
 8000816:	b29b      	uxth	r3, r3
 8000818:	3b0a      	subs	r3, #10
 800081a:	b29a      	uxth	r2, r3
 800081c:	4b19      	ldr	r3, [pc, #100]	; (8000884 <main+0x368>)
 800081e:	801a      	strh	r2, [r3, #0]
				PWM2 -= 10;
 8000820:	4b19      	ldr	r3, [pc, #100]	; (8000888 <main+0x36c>)
 8000822:	881b      	ldrh	r3, [r3, #0]
 8000824:	3b0a      	subs	r3, #10
 8000826:	b29a      	uxth	r2, r3
 8000828:	4b17      	ldr	r3, [pc, #92]	; (8000888 <main+0x36c>)
 800082a:	801a      	strh	r2, [r3, #0]
			}

			if (PWM1 < 10)
 800082c:	4b15      	ldr	r3, [pc, #84]	; (8000884 <main+0x368>)
 800082e:	881b      	ldrh	r3, [r3, #0]
 8000830:	b29b      	uxth	r3, r3
 8000832:	2b09      	cmp	r3, #9
 8000834:	d80a      	bhi.n	800084c <main+0x330>
			{
				PWM1 = 0;
 8000836:	4b13      	ldr	r3, [pc, #76]	; (8000884 <main+0x368>)
 8000838:	2200      	movs	r2, #0
 800083a:	801a      	strh	r2, [r3, #0]
				PWM2 = 0;
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <main+0x36c>)
 800083e:	2200      	movs	r2, #0
 8000840:	801a      	strh	r2, [r3, #0]
				currentState = 8;
 8000842:	2308      	movs	r3, #8
 8000844:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
				stateOffTime[7] = time;
 8000848:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800084a:	623b      	str	r3, [r7, #32]
			}

			Inverter1(3);
 800084c:	2003      	movs	r0, #3
 800084e:	f001 f8d3 	bl	80019f8 <Inverter1>
			Inverter2(3);
 8000852:	2003      	movs	r0, #3
 8000854:	f001 fb60 	bl	8001f18 <Inverter2>
			Inverter3(2);
 8000858:	2002      	movs	r0, #2
 800085a:	f001 fa15 	bl	8001c88 <Inverter3>
			Inverter4(2);
 800085e:	2002      	movs	r0, #2
 8000860:	f001 fcc6 	bl	80021f0 <Inverter4>
			break;
 8000864:	e00d      	b.n	8000882 <main+0x366>

		case 8:
			Inverter1(1);
 8000866:	2001      	movs	r0, #1
 8000868:	f001 f8c6 	bl	80019f8 <Inverter1>
			Inverter2(1);
 800086c:	2001      	movs	r0, #1
 800086e:	f001 fb53 	bl	8001f18 <Inverter2>
			Inverter3(1);
 8000872:	2001      	movs	r0, #1
 8000874:	f001 fa08 	bl	8001c88 <Inverter3>
			Inverter4(1);
 8000878:	2001      	movs	r0, #1
 800087a:	f001 fcb9 	bl	80021f0 <Inverter4>
 800087e:	e6a3      	b.n	80005c8 <main+0xac>
			break;
 8000880:	bf00      	nop
		time = HAL_GetTick();
 8000882:	e6a1      	b.n	80005c8 <main+0xac>
 8000884:	2000028c 	.word	0x2000028c
 8000888:	2000028e 	.word	0x2000028e

0800088c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b094      	sub	sp, #80	; 0x50
 8000890:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000892:	f107 0318 	add.w	r3, r7, #24
 8000896:	2238      	movs	r2, #56	; 0x38
 8000898:	2100      	movs	r1, #0
 800089a:	4618      	mov	r0, r3
 800089c:	f006 fae0 	bl	8006e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]
 80008ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80008ae:	2000      	movs	r0, #0
 80008b0:	f002 fec4 	bl	800363c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b4:	2302      	movs	r3, #2
 80008b6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008be:	2340      	movs	r3, #64	; 0x40
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c2:	2302      	movs	r3, #2
 80008c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008c6:	2302      	movs	r3, #2
 80008c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80008ca:	2304      	movs	r3, #4
 80008cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80008ce:	2355      	movs	r3, #85	; 0x55
 80008d0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008d2:	2302      	movs	r3, #2
 80008d4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008d6:	2302      	movs	r3, #2
 80008d8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008da:	2302      	movs	r3, #2
 80008dc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008de:	f107 0318 	add.w	r3, r7, #24
 80008e2:	4618      	mov	r0, r3
 80008e4:	f002 ff5e 	bl	80037a4 <HAL_RCC_OscConfig>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80008ee:	f001 fdeb 	bl	80024c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f2:	230f      	movs	r3, #15
 80008f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f6:	2303      	movs	r3, #3
 80008f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	2104      	movs	r1, #4
 800090a:	4618      	mov	r0, r3
 800090c:	f003 fa62 	bl	8003dd4 <HAL_RCC_ClockConfig>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000916:	f001 fdd7 	bl	80024c8 <Error_Handler>
  }
}
 800091a:	bf00      	nop
 800091c:	3750      	adds	r7, #80	; 0x50
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08c      	sub	sp, #48	; 0x30
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800092a:	463b      	mov	r3, r7
 800092c:	2230      	movs	r2, #48	; 0x30
 800092e:	2100      	movs	r1, #0
 8000930:	4618      	mov	r0, r3
 8000932:	f006 fa95 	bl	8006e60 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000936:	4b16      	ldr	r3, [pc, #88]	; (8000990 <MX_DAC1_Init+0x6c>)
 8000938:	4a16      	ldr	r2, [pc, #88]	; (8000994 <MX_DAC1_Init+0x70>)
 800093a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800093c:	4814      	ldr	r0, [pc, #80]	; (8000990 <MX_DAC1_Init+0x6c>)
 800093e:	f002 fa1c 	bl	8002d7a <HAL_DAC_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000948:	f001 fdbe 	bl	80024c8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800094c:	2302      	movs	r3, #2
 800094e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000950:	2300      	movs	r3, #0
 8000952:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000954:	2300      	movs	r3, #0
 8000956:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000958:	2300      	movs	r3, #0
 800095a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000960:	2300      	movs	r3, #0
 8000962:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000968:	2301      	movs	r3, #1
 800096a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800096c:	2300      	movs	r3, #0
 800096e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000970:	463b      	mov	r3, r7
 8000972:	2200      	movs	r2, #0
 8000974:	4619      	mov	r1, r3
 8000976:	4806      	ldr	r0, [pc, #24]	; (8000990 <MX_DAC1_Init+0x6c>)
 8000978:	f002 fa22 	bl	8002dc0 <HAL_DAC_ConfigChannel>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000982:	f001 fda1 	bl	80024c8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000986:	bf00      	nop
 8000988:	3730      	adds	r7, #48	; 0x30
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000028 	.word	0x20000028
 8000994:	50000800 	.word	0x50000800

08000998 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800099c:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <MX_LPUART1_UART_Init+0x88>)
 800099e:	4a21      	ldr	r2, [pc, #132]	; (8000a24 <MX_LPUART1_UART_Init+0x8c>)
 80009a0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80009a2:	4b1f      	ldr	r3, [pc, #124]	; (8000a20 <MX_LPUART1_UART_Init+0x88>)
 80009a4:	4a20      	ldr	r2, [pc, #128]	; (8000a28 <MX_LPUART1_UART_Init+0x90>)
 80009a6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009a8:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <MX_LPUART1_UART_Init+0x88>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80009ae:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <MX_LPUART1_UART_Init+0x88>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80009b4:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <MX_LPUART1_UART_Init+0x88>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80009ba:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <MX_LPUART1_UART_Init+0x88>)
 80009bc:	220c      	movs	r2, #12
 80009be:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c0:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <MX_LPUART1_UART_Init+0x88>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009c6:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <MX_LPUART1_UART_Init+0x88>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009cc:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_LPUART1_UART_Init+0x88>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d2:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <MX_LPUART1_UART_Init+0x88>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80009d8:	4811      	ldr	r0, [pc, #68]	; (8000a20 <MX_LPUART1_UART_Init+0x88>)
 80009da:	f005 f81b 	bl	8005a14 <HAL_UART_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 80009e4:	f001 fd70 	bl	80024c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009e8:	2100      	movs	r1, #0
 80009ea:	480d      	ldr	r0, [pc, #52]	; (8000a20 <MX_LPUART1_UART_Init+0x88>)
 80009ec:	f006 f949 	bl	8006c82 <HAL_UARTEx_SetTxFifoThreshold>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 80009f6:	f001 fd67 	bl	80024c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009fa:	2100      	movs	r1, #0
 80009fc:	4808      	ldr	r0, [pc, #32]	; (8000a20 <MX_LPUART1_UART_Init+0x88>)
 80009fe:	f006 f97e 	bl	8006cfe <HAL_UARTEx_SetRxFifoThreshold>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d001      	beq.n	8000a0c <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000a08:	f001 fd5e 	bl	80024c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000a0c:	4804      	ldr	r0, [pc, #16]	; (8000a20 <MX_LPUART1_UART_Init+0x88>)
 8000a0e:	f006 f8ff 	bl	8006c10 <HAL_UARTEx_DisableFifoMode>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000a18:	f001 fd56 	bl	80024c8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	2000003c 	.word	0x2000003c
 8000a24:	40008000 	.word	0x40008000
 8000a28:	00033324 	.word	0x00033324

08000a2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a30:	4b22      	ldr	r3, [pc, #136]	; (8000abc <MX_USART1_UART_Init+0x90>)
 8000a32:	4a23      	ldr	r2, [pc, #140]	; (8000ac0 <MX_USART1_UART_Init+0x94>)
 8000a34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a36:	4b21      	ldr	r3, [pc, #132]	; (8000abc <MX_USART1_UART_Init+0x90>)
 8000a38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3e:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <MX_USART1_UART_Init+0x90>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a44:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <MX_USART1_UART_Init+0x90>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a4a:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <MX_USART1_UART_Init+0x90>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a50:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <MX_USART1_UART_Init+0x90>)
 8000a52:	220c      	movs	r2, #12
 8000a54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a56:	4b19      	ldr	r3, [pc, #100]	; (8000abc <MX_USART1_UART_Init+0x90>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a5c:	4b17      	ldr	r3, [pc, #92]	; (8000abc <MX_USART1_UART_Init+0x90>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a62:	4b16      	ldr	r3, [pc, #88]	; (8000abc <MX_USART1_UART_Init+0x90>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a68:	4b14      	ldr	r3, [pc, #80]	; (8000abc <MX_USART1_UART_Init+0x90>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a6e:	4b13      	ldr	r3, [pc, #76]	; (8000abc <MX_USART1_UART_Init+0x90>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a74:	4811      	ldr	r0, [pc, #68]	; (8000abc <MX_USART1_UART_Init+0x90>)
 8000a76:	f004 ffcd 	bl	8005a14 <HAL_UART_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a80:	f001 fd22 	bl	80024c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a84:	2100      	movs	r1, #0
 8000a86:	480d      	ldr	r0, [pc, #52]	; (8000abc <MX_USART1_UART_Init+0x90>)
 8000a88:	f006 f8fb 	bl	8006c82 <HAL_UARTEx_SetTxFifoThreshold>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a92:	f001 fd19 	bl	80024c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a96:	2100      	movs	r1, #0
 8000a98:	4808      	ldr	r0, [pc, #32]	; (8000abc <MX_USART1_UART_Init+0x90>)
 8000a9a:	f006 f930 	bl	8006cfe <HAL_UARTEx_SetRxFifoThreshold>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000aa4:	f001 fd10 	bl	80024c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000aa8:	4804      	ldr	r0, [pc, #16]	; (8000abc <MX_USART1_UART_Init+0x90>)
 8000aaa:	f006 f8b1 	bl	8006c10 <HAL_UARTEx_DisableFifoMode>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ab4:	f001 fd08 	bl	80024c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ab8:	bf00      	nop
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	200000cc 	.word	0x200000cc
 8000ac0:	40013800 	.word	0x40013800

08000ac4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b098      	sub	sp, #96	; 0x60
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]
 8000ad4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ad6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]
 8000ae6:	615a      	str	r2, [r3, #20]
 8000ae8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	2234      	movs	r2, #52	; 0x34
 8000aee:	2100      	movs	r1, #0
 8000af0:	4618      	mov	r0, r3
 8000af2:	f006 f9b5 	bl	8006e60 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000af6:	4b4d      	ldr	r3, [pc, #308]	; (8000c2c <MX_TIM1_Init+0x168>)
 8000af8:	4a4d      	ldr	r2, [pc, #308]	; (8000c30 <MX_TIM1_Init+0x16c>)
 8000afa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000afc:	4b4b      	ldr	r3, [pc, #300]	; (8000c2c <MX_TIM1_Init+0x168>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000b02:	4b4a      	ldr	r3, [pc, #296]	; (8000c2c <MX_TIM1_Init+0x168>)
 8000b04:	2220      	movs	r2, #32
 8000b06:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4095;
 8000b08:	4b48      	ldr	r3, [pc, #288]	; (8000c2c <MX_TIM1_Init+0x168>)
 8000b0a:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000b0e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b10:	4b46      	ldr	r3, [pc, #280]	; (8000c2c <MX_TIM1_Init+0x168>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b16:	4b45      	ldr	r3, [pc, #276]	; (8000c2c <MX_TIM1_Init+0x168>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b1c:	4b43      	ldr	r3, [pc, #268]	; (8000c2c <MX_TIM1_Init+0x168>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b22:	4842      	ldr	r0, [pc, #264]	; (8000c2c <MX_TIM1_Init+0x168>)
 8000b24:	f003 fdc0 	bl	80046a8 <HAL_TIM_PWM_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000b2e:	f001 fccb 	bl	80024c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b32:	2300      	movs	r3, #0
 8000b34:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b36:	2300      	movs	r3, #0
 8000b38:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b3e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b42:	4619      	mov	r1, r3
 8000b44:	4839      	ldr	r0, [pc, #228]	; (8000c2c <MX_TIM1_Init+0x168>)
 8000b46:	f004 fdd7 	bl	80056f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b50:	f001 fcba 	bl	80024c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b54:	2360      	movs	r3, #96	; 0x60
 8000b56:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b60:	2300      	movs	r3, #0
 8000b62:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b64:	2300      	movs	r3, #0
 8000b66:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b70:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b74:	2200      	movs	r2, #0
 8000b76:	4619      	mov	r1, r3
 8000b78:	482c      	ldr	r0, [pc, #176]	; (8000c2c <MX_TIM1_Init+0x168>)
 8000b7a:	f004 f87f 	bl	8004c7c <HAL_TIM_PWM_ConfigChannel>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000b84:	f001 fca0 	bl	80024c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b88:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b8c:	2204      	movs	r2, #4
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4826      	ldr	r0, [pc, #152]	; (8000c2c <MX_TIM1_Init+0x168>)
 8000b92:	f004 f873 	bl	8004c7c <HAL_TIM_PWM_ConfigChannel>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000b9c:	f001 fc94 	bl	80024c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ba0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ba4:	2208      	movs	r2, #8
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4820      	ldr	r0, [pc, #128]	; (8000c2c <MX_TIM1_Init+0x168>)
 8000baa:	f004 f867 	bl	8004c7c <HAL_TIM_PWM_ConfigChannel>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000bb4:	f001 fc88 	bl	80024c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000bb8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bbc:	220c      	movs	r2, #12
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	481a      	ldr	r0, [pc, #104]	; (8000c2c <MX_TIM1_Init+0x168>)
 8000bc2:	f004 f85b 	bl	8004c7c <HAL_TIM_PWM_ConfigChannel>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000bcc:	f001 fc7c 	bl	80024c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000be4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000be8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000c00:	2300      	movs	r3, #0
 8000c02:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c08:	1d3b      	adds	r3, r7, #4
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4807      	ldr	r0, [pc, #28]	; (8000c2c <MX_TIM1_Init+0x168>)
 8000c0e:	f004 fe09 	bl	8005824 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8000c18:	f001 fc56 	bl	80024c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c1c:	4803      	ldr	r0, [pc, #12]	; (8000c2c <MX_TIM1_Init+0x168>)
 8000c1e:	f001 fdbb 	bl	8002798 <HAL_TIM_MspPostInit>

}
 8000c22:	bf00      	nop
 8000c24:	3760      	adds	r7, #96	; 0x60
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	2000015c 	.word	0x2000015c
 8000c30:	40012c00 	.word	0x40012c00

08000c34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08a      	sub	sp, #40	; 0x28
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c3a:	f107 031c 	add.w	r3, r7, #28
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c46:	463b      	mov	r3, r7
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
 8000c54:	615a      	str	r2, [r3, #20]
 8000c56:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c58:	4b32      	ldr	r3, [pc, #200]	; (8000d24 <MX_TIM2_Init+0xf0>)
 8000c5a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c5e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c60:	4b30      	ldr	r3, [pc, #192]	; (8000d24 <MX_TIM2_Init+0xf0>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000c66:	4b2f      	ldr	r3, [pc, #188]	; (8000d24 <MX_TIM2_Init+0xf0>)
 8000c68:	2220      	movs	r2, #32
 8000c6a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4095;
 8000c6c:	4b2d      	ldr	r3, [pc, #180]	; (8000d24 <MX_TIM2_Init+0xf0>)
 8000c6e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000c72:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c74:	4b2b      	ldr	r3, [pc, #172]	; (8000d24 <MX_TIM2_Init+0xf0>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7a:	4b2a      	ldr	r3, [pc, #168]	; (8000d24 <MX_TIM2_Init+0xf0>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c80:	4828      	ldr	r0, [pc, #160]	; (8000d24 <MX_TIM2_Init+0xf0>)
 8000c82:	f003 fd11 	bl	80046a8 <HAL_TIM_PWM_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000c8c:	f001 fc1c 	bl	80024c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c94:	2300      	movs	r3, #0
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c98:	f107 031c 	add.w	r3, r7, #28
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4821      	ldr	r0, [pc, #132]	; (8000d24 <MX_TIM2_Init+0xf0>)
 8000ca0:	f004 fd2a 	bl	80056f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8000caa:	f001 fc0d 	bl	80024c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cae:	2360      	movs	r3, #96	; 0x60
 8000cb0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cbe:	463b      	mov	r3, r7
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4817      	ldr	r0, [pc, #92]	; (8000d24 <MX_TIM2_Init+0xf0>)
 8000cc6:	f003 ffd9 	bl	8004c7c <HAL_TIM_PWM_ConfigChannel>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000cd0:	f001 fbfa 	bl	80024c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cd4:	463b      	mov	r3, r7
 8000cd6:	2204      	movs	r2, #4
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4812      	ldr	r0, [pc, #72]	; (8000d24 <MX_TIM2_Init+0xf0>)
 8000cdc:	f003 ffce 	bl	8004c7c <HAL_TIM_PWM_ConfigChannel>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8000ce6:	f001 fbef 	bl	80024c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000cea:	463b      	mov	r3, r7
 8000cec:	2208      	movs	r2, #8
 8000cee:	4619      	mov	r1, r3
 8000cf0:	480c      	ldr	r0, [pc, #48]	; (8000d24 <MX_TIM2_Init+0xf0>)
 8000cf2:	f003 ffc3 	bl	8004c7c <HAL_TIM_PWM_ConfigChannel>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000cfc:	f001 fbe4 	bl	80024c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d00:	463b      	mov	r3, r7
 8000d02:	220c      	movs	r2, #12
 8000d04:	4619      	mov	r1, r3
 8000d06:	4807      	ldr	r0, [pc, #28]	; (8000d24 <MX_TIM2_Init+0xf0>)
 8000d08:	f003 ffb8 	bl	8004c7c <HAL_TIM_PWM_ConfigChannel>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 8000d12:	f001 fbd9 	bl	80024c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d16:	4803      	ldr	r0, [pc, #12]	; (8000d24 <MX_TIM2_Init+0xf0>)
 8000d18:	f001 fd3e 	bl	8002798 <HAL_TIM_MspPostInit>

}
 8000d1c:	bf00      	nop
 8000d1e:	3728      	adds	r7, #40	; 0x28
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	200001a8 	.word	0x200001a8

08000d28 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	; 0x28
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d2e:	f107 031c 	add.w	r3, r7, #28
 8000d32:	2200      	movs	r2, #0
 8000d34:	601a      	str	r2, [r3, #0]
 8000d36:	605a      	str	r2, [r3, #4]
 8000d38:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d3a:	463b      	mov	r3, r7
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
 8000d48:	615a      	str	r2, [r3, #20]
 8000d4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d4c:	4b20      	ldr	r3, [pc, #128]	; (8000dd0 <MX_TIM3_Init+0xa8>)
 8000d4e:	4a21      	ldr	r2, [pc, #132]	; (8000dd4 <MX_TIM3_Init+0xac>)
 8000d50:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5;
 8000d52:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <MX_TIM3_Init+0xa8>)
 8000d54:	2205      	movs	r2, #5
 8000d56:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d58:	4b1d      	ldr	r3, [pc, #116]	; (8000dd0 <MX_TIM3_Init+0xa8>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <MX_TIM3_Init+0xa8>)
 8000d60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d64:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d66:	4b1a      	ldr	r3, [pc, #104]	; (8000dd0 <MX_TIM3_Init+0xa8>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6c:	4b18      	ldr	r3, [pc, #96]	; (8000dd0 <MX_TIM3_Init+0xa8>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d72:	4817      	ldr	r0, [pc, #92]	; (8000dd0 <MX_TIM3_Init+0xa8>)
 8000d74:	f003 fc98 	bl	80046a8 <HAL_TIM_PWM_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000d7e:	f001 fba3 	bl	80024c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d8a:	f107 031c 	add.w	r3, r7, #28
 8000d8e:	4619      	mov	r1, r3
 8000d90:	480f      	ldr	r0, [pc, #60]	; (8000dd0 <MX_TIM3_Init+0xa8>)
 8000d92:	f004 fcb1 	bl	80056f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000d9c:	f001 fb94 	bl	80024c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000da0:	2360      	movs	r3, #96	; 0x60
 8000da2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 16000;
 8000da4:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8000da8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000db2:	463b      	mov	r3, r7
 8000db4:	2200      	movs	r2, #0
 8000db6:	4619      	mov	r1, r3
 8000db8:	4805      	ldr	r0, [pc, #20]	; (8000dd0 <MX_TIM3_Init+0xa8>)
 8000dba:	f003 ff5f 	bl	8004c7c <HAL_TIM_PWM_ConfigChannel>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM3_Init+0xa0>
  {
    Error_Handler();
 8000dc4:	f001 fb80 	bl	80024c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000dc8:	bf00      	nop
 8000dca:	3728      	adds	r7, #40	; 0x28
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	200001f4 	.word	0x200001f4
 8000dd4:	40000400 	.word	0x40000400

08000dd8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b098      	sub	sp, #96	; 0x60
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dde:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
 8000df6:	60da      	str	r2, [r3, #12]
 8000df8:	611a      	str	r2, [r3, #16]
 8000dfa:	615a      	str	r2, [r3, #20]
 8000dfc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000dfe:	1d3b      	adds	r3, r7, #4
 8000e00:	2234      	movs	r2, #52	; 0x34
 8000e02:	2100      	movs	r1, #0
 8000e04:	4618      	mov	r0, r3
 8000e06:	f006 f82b 	bl	8006e60 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000e0a:	4b4d      	ldr	r3, [pc, #308]	; (8000f40 <MX_TIM8_Init+0x168>)
 8000e0c:	4a4d      	ldr	r2, [pc, #308]	; (8000f44 <MX_TIM8_Init+0x16c>)
 8000e0e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000e10:	4b4b      	ldr	r3, [pc, #300]	; (8000f40 <MX_TIM8_Init+0x168>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000e16:	4b4a      	ldr	r3, [pc, #296]	; (8000f40 <MX_TIM8_Init+0x168>)
 8000e18:	2220      	movs	r2, #32
 8000e1a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 4095;
 8000e1c:	4b48      	ldr	r3, [pc, #288]	; (8000f40 <MX_TIM8_Init+0x168>)
 8000e1e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000e22:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e24:	4b46      	ldr	r3, [pc, #280]	; (8000f40 <MX_TIM8_Init+0x168>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000e2a:	4b45      	ldr	r3, [pc, #276]	; (8000f40 <MX_TIM8_Init+0x168>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e30:	4b43      	ldr	r3, [pc, #268]	; (8000f40 <MX_TIM8_Init+0x168>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000e36:	4842      	ldr	r0, [pc, #264]	; (8000f40 <MX_TIM8_Init+0x168>)
 8000e38:	f003 fc36 	bl	80046a8 <HAL_TIM_PWM_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000e42:	f001 fb41 	bl	80024c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e46:	2300      	movs	r3, #0
 8000e48:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e52:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e56:	4619      	mov	r1, r3
 8000e58:	4839      	ldr	r0, [pc, #228]	; (8000f40 <MX_TIM8_Init+0x168>)
 8000e5a:	f004 fc4d 	bl	80056f8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000e64:	f001 fb30 	bl	80024c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e68:	2360      	movs	r3, #96	; 0x60
 8000e6a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e70:	2300      	movs	r3, #0
 8000e72:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e74:	2300      	movs	r3, #0
 8000e76:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e80:	2300      	movs	r3, #0
 8000e82:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e84:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e88:	2200      	movs	r2, #0
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	482c      	ldr	r0, [pc, #176]	; (8000f40 <MX_TIM8_Init+0x168>)
 8000e8e:	f003 fef5 	bl	8004c7c <HAL_TIM_PWM_ConfigChannel>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000e98:	f001 fb16 	bl	80024c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4826      	ldr	r0, [pc, #152]	; (8000f40 <MX_TIM8_Init+0x168>)
 8000ea6:	f003 fee9 	bl	8004c7c <HAL_TIM_PWM_ConfigChannel>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_TIM8_Init+0xdc>
  {
    Error_Handler();
 8000eb0:	f001 fb0a 	bl	80024c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000eb4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000eb8:	2208      	movs	r2, #8
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4820      	ldr	r0, [pc, #128]	; (8000f40 <MX_TIM8_Init+0x168>)
 8000ebe:	f003 fedd 	bl	8004c7c <HAL_TIM_PWM_ConfigChannel>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM8_Init+0xf4>
  {
    Error_Handler();
 8000ec8:	f001 fafe 	bl	80024c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ecc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ed0:	220c      	movs	r2, #12
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	481a      	ldr	r0, [pc, #104]	; (8000f40 <MX_TIM8_Init+0x168>)
 8000ed6:	f003 fed1 	bl	8004c7c <HAL_TIM_PWM_ConfigChannel>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM8_Init+0x10c>
  {
    Error_Handler();
 8000ee0:	f001 faf2 	bl	80024c8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000eec:	2300      	movs	r3, #0
 8000eee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ef8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000efc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000f02:	2300      	movs	r3, #0
 8000f04:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f06:	2300      	movs	r3, #0
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f0e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000f14:	2300      	movs	r3, #0
 8000f16:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4807      	ldr	r0, [pc, #28]	; (8000f40 <MX_TIM8_Init+0x168>)
 8000f22:	f004 fc7f 	bl	8005824 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_TIM8_Init+0x158>
  {
    Error_Handler();
 8000f2c:	f001 facc 	bl	80024c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000f30:	4803      	ldr	r0, [pc, #12]	; (8000f40 <MX_TIM8_Init+0x168>)
 8000f32:	f001 fc31 	bl	8002798 <HAL_TIM_MspPostInit>

}
 8000f36:	bf00      	nop
 8000f38:	3760      	adds	r7, #96	; 0x60
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000240 	.word	0x20000240
 8000f44:	40013400 	.word	0x40013400

08000f48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08a      	sub	sp, #40	; 0x28
 8000f4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
 8000f5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f5e:	4b47      	ldr	r3, [pc, #284]	; (800107c <MX_GPIO_Init+0x134>)
 8000f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f62:	4a46      	ldr	r2, [pc, #280]	; (800107c <MX_GPIO_Init+0x134>)
 8000f64:	f043 0304 	orr.w	r3, r3, #4
 8000f68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6a:	4b44      	ldr	r3, [pc, #272]	; (800107c <MX_GPIO_Init+0x134>)
 8000f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6e:	f003 0304 	and.w	r3, r3, #4
 8000f72:	613b      	str	r3, [r7, #16]
 8000f74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f76:	4b41      	ldr	r3, [pc, #260]	; (800107c <MX_GPIO_Init+0x134>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7a:	4a40      	ldr	r2, [pc, #256]	; (800107c <MX_GPIO_Init+0x134>)
 8000f7c:	f043 0320 	orr.w	r3, r3, #32
 8000f80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f82:	4b3e      	ldr	r3, [pc, #248]	; (800107c <MX_GPIO_Init+0x134>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	f003 0320 	and.w	r3, r3, #32
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	4b3b      	ldr	r3, [pc, #236]	; (800107c <MX_GPIO_Init+0x134>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f92:	4a3a      	ldr	r2, [pc, #232]	; (800107c <MX_GPIO_Init+0x134>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9a:	4b38      	ldr	r3, [pc, #224]	; (800107c <MX_GPIO_Init+0x134>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa6:	4b35      	ldr	r3, [pc, #212]	; (800107c <MX_GPIO_Init+0x134>)
 8000fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000faa:	4a34      	ldr	r2, [pc, #208]	; (800107c <MX_GPIO_Init+0x134>)
 8000fac:	f043 0302 	orr.w	r3, r3, #2
 8000fb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fb2:	4b32      	ldr	r3, [pc, #200]	; (800107c <MX_GPIO_Init+0x134>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb6:	f003 0302 	and.w	r3, r3, #2
 8000fba:	607b      	str	r3, [r7, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SD_A_3_Pin|SD_B_3_Pin|SD_C_3_Pin|SD_A_4_Pin
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f44f 51cf 	mov.w	r1, #6624	; 0x19e0
 8000fc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc8:	f002 fafc 	bl	80035c4 <HAL_GPIO_WritePin>
                          |SD_B_4_Pin|SD_C_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_B_1_Pin|SD_C_1_Pin|SD_A_1_Pin|Toggle_pin_Pin
 8000fcc:	2200      	movs	r2, #0
 8000fce:	f24e 4107 	movw	r1, #58375	; 0xe407
 8000fd2:	482b      	ldr	r0, [pc, #172]	; (8001080 <MX_GPIO_Init+0x138>)
 8000fd4:	f002 faf6 	bl	80035c4 <HAL_GPIO_WritePin>
                          |SD_A_2_Pin|SD_B_2_Pin|SD_C_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fde:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fe2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	4619      	mov	r1, r3
 8000fee:	4825      	ldr	r0, [pc, #148]	; (8001084 <MX_GPIO_Init+0x13c>)
 8000ff0:	f002 f94e 	bl	8003290 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_A_3_Pin SD_B_3_Pin SD_C_3_Pin SD_A_4_Pin
                           SD_B_4_Pin SD_C_4_Pin */
  GPIO_InitStruct.Pin = SD_A_3_Pin|SD_B_3_Pin|SD_C_3_Pin|SD_A_4_Pin
 8000ff4:	f44f 53cf 	mov.w	r3, #6624	; 0x19e0
 8000ff8:	617b      	str	r3, [r7, #20]
                          |SD_B_4_Pin|SD_C_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4619      	mov	r1, r3
 800100c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001010:	f002 f93e 	bl	8003290 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_B_1_Pin SD_C_1_Pin SD_A_1_Pin Toggle_pin_Pin
                           SD_A_2_Pin SD_B_2_Pin SD_C_2_Pin */
  GPIO_InitStruct.Pin = SD_B_1_Pin|SD_C_1_Pin|SD_A_1_Pin|Toggle_pin_Pin
 8001014:	f24e 4307 	movw	r3, #58375	; 0xe407
 8001018:	617b      	str	r3, [r7, #20]
                          |SD_A_2_Pin|SD_B_2_Pin|SD_C_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101a:	2301      	movs	r3, #1
 800101c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001022:	2300      	movs	r3, #0
 8001024:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4619      	mov	r1, r3
 800102c:	4814      	ldr	r0, [pc, #80]	; (8001080 <MX_GPIO_Init+0x138>)
 800102e:	f002 f92f 	bl	8003290 <HAL_GPIO_Init>

  /*Configure GPIO pins : HS4_Pin HS5_Pin HS6_Pin */
  GPIO_InitStruct.Pin = HS4_Pin|HS5_Pin|HS6_Pin;
 8001032:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001036:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001038:	2300      	movs	r3, #0
 800103a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800103c:	2302      	movs	r3, #2
 800103e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	4619      	mov	r1, r3
 8001046:	480f      	ldr	r0, [pc, #60]	; (8001084 <MX_GPIO_Init+0x13c>)
 8001048:	f002 f922 	bl	8003290 <HAL_GPIO_Init>

  /*Configure GPIO pins : HS1_Pin HS2_Pin HS3_Pin */
  GPIO_InitStruct.Pin = HS1_Pin|HS2_Pin|HS3_Pin;
 800104c:	2370      	movs	r3, #112	; 0x70
 800104e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001050:	2300      	movs	r3, #0
 8001052:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001054:	2302      	movs	r3, #2
 8001056:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001058:	f107 0314 	add.w	r3, r7, #20
 800105c:	4619      	mov	r1, r3
 800105e:	4808      	ldr	r0, [pc, #32]	; (8001080 <MX_GPIO_Init+0x138>)
 8001060:	f002 f916 	bl	8003290 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001064:	2200      	movs	r2, #0
 8001066:	2100      	movs	r1, #0
 8001068:	2028      	movs	r0, #40	; 0x28
 800106a:	f001 fe52 	bl	8002d12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800106e:	2028      	movs	r0, #40	; 0x28
 8001070:	f001 fe69 	bl	8002d46 <HAL_NVIC_EnableIRQ>

}
 8001074:	bf00      	nop
 8001076:	3728      	adds	r7, #40	; 0x28
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40021000 	.word	0x40021000
 8001080:	48000400 	.word	0x48000400
 8001084:	48000800 	.word	0x48000800

08001088 <state0_inv1>:

//void HAL_TIM_PWM_PulseFinishedCallback (TIM_HandleTypeDef * htim){
//HAL_GPIO_TogglePin (GPIOB, Toggle_pin_Pin);
//}

void state0_inv1() {
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0

	IN_A_1 = 0;
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <state0_inv1+0x38>)
 800108e:	2200      	movs	r2, #0
 8001090:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_1;
 8001092:	2201      	movs	r2, #1
 8001094:	2104      	movs	r1, #4
 8001096:	480b      	ldr	r0, [pc, #44]	; (80010c4 <state0_inv1+0x3c>)
 8001098:	f002 fa94 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_B_1 = 0;
 800109c:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <state0_inv1+0x38>)
 800109e:	2200      	movs	r2, #0
 80010a0:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_1;
 80010a2:	2201      	movs	r2, #1
 80010a4:	2101      	movs	r1, #1
 80010a6:	4807      	ldr	r0, [pc, #28]	; (80010c4 <state0_inv1+0x3c>)
 80010a8:	f002 fa8c 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_C_1 = 0;
 80010ac:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <state0_inv1+0x38>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_1;
 80010b2:	2201      	movs	r2, #1
 80010b4:	2102      	movs	r1, #2
 80010b6:	4803      	ldr	r0, [pc, #12]	; (80010c4 <state0_inv1+0x3c>)
 80010b8:	f002 fa84 	bl	80035c4 <HAL_GPIO_WritePin>

}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40012c00 	.word	0x40012c00
 80010c4:	48000400 	.word	0x48000400

080010c8 <state1_inv1>:

void state1_inv1() {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0

	IN_A_1 = 0;
 80010cc:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <state1_inv1+0x3c>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	635a      	str	r2, [r3, #52]	; 0x34
	RESET_SD_A_1;
 80010d2:	2200      	movs	r2, #0
 80010d4:	2104      	movs	r1, #4
 80010d6:	480c      	ldr	r0, [pc, #48]	; (8001108 <state1_inv1+0x40>)
 80010d8:	f002 fa74 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_B_1 = PWM1;
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <state1_inv1+0x44>)
 80010de:	881b      	ldrh	r3, [r3, #0]
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	4b08      	ldr	r3, [pc, #32]	; (8001104 <state1_inv1+0x3c>)
 80010e4:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_1;
 80010e6:	2201      	movs	r2, #1
 80010e8:	2101      	movs	r1, #1
 80010ea:	4807      	ldr	r0, [pc, #28]	; (8001108 <state1_inv1+0x40>)
 80010ec:	f002 fa6a 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_C_1 = 0;
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <state1_inv1+0x3c>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_1;
 80010f6:	2201      	movs	r2, #1
 80010f8:	2102      	movs	r1, #2
 80010fa:	4803      	ldr	r0, [pc, #12]	; (8001108 <state1_inv1+0x40>)
 80010fc:	f002 fa62 	bl	80035c4 <HAL_GPIO_WritePin>
//		TIM1->CCR2 = PWM1;
//		TIM1->CCR3 = PWM1;
//    	HAL_GPIO_WritePin(GPIOB, SD_A_1_Pin, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(GPIOB, SD_B_1_Pin, GPIO_PIN_SET);
//		HAL_GPIO_WritePin(GPIOB, SD_C_1_Pin, GPIO_PIN_RESET);
}
 8001100:	bf00      	nop
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40012c00 	.word	0x40012c00
 8001108:	48000400 	.word	0x48000400
 800110c:	2000028c 	.word	0x2000028c

08001110 <state2_inv1>:
void state2_inv1() {
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0

	IN_A_1 = PWM1;
 8001114:	4b0d      	ldr	r3, [pc, #52]	; (800114c <state2_inv1+0x3c>)
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	b29a      	uxth	r2, r3
 800111a:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <state2_inv1+0x40>)
 800111c:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_1;
 800111e:	2201      	movs	r2, #1
 8001120:	2104      	movs	r1, #4
 8001122:	480c      	ldr	r0, [pc, #48]	; (8001154 <state2_inv1+0x44>)
 8001124:	f002 fa4e 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_B_1 = 0;
 8001128:	4b09      	ldr	r3, [pc, #36]	; (8001150 <state2_inv1+0x40>)
 800112a:	2200      	movs	r2, #0
 800112c:	639a      	str	r2, [r3, #56]	; 0x38
	RESET_SD_B_1;
 800112e:	2200      	movs	r2, #0
 8001130:	2101      	movs	r1, #1
 8001132:	4808      	ldr	r0, [pc, #32]	; (8001154 <state2_inv1+0x44>)
 8001134:	f002 fa46 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_C_1 = 0;
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <state2_inv1+0x40>)
 800113a:	2200      	movs	r2, #0
 800113c:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_1;
 800113e:	2201      	movs	r2, #1
 8001140:	2102      	movs	r1, #2
 8001142:	4804      	ldr	r0, [pc, #16]	; (8001154 <state2_inv1+0x44>)
 8001144:	f002 fa3e 	bl	80035c4 <HAL_GPIO_WritePin>
//		TIM1->CCR2 = 0;
//		TIM1->CCR3 = PWM1;
//    	HAL_GPIO_WritePin(GPIOB, SD_A_1_Pin, GPIO_PIN_SET);
//		HAL_GPIO_WritePin(GPIOB, SD_B_1_Pin, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(GPIOB, SD_C_1_Pin, GPIO_PIN_RESET);
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	2000028c 	.word	0x2000028c
 8001150:	40012c00 	.word	0x40012c00
 8001154:	48000400 	.word	0x48000400

08001158 <state3_inv1>:

void state3_inv1() {
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0

	IN_A_1 = PWM1;
 800115c:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <state3_inv1+0x3c>)
 800115e:	881b      	ldrh	r3, [r3, #0]
 8001160:	b29a      	uxth	r2, r3
 8001162:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <state3_inv1+0x40>)
 8001164:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_1;
 8001166:	2201      	movs	r2, #1
 8001168:	2104      	movs	r1, #4
 800116a:	480c      	ldr	r0, [pc, #48]	; (800119c <state3_inv1+0x44>)
 800116c:	f002 fa2a 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_B_1 = 0;
 8001170:	4b09      	ldr	r3, [pc, #36]	; (8001198 <state3_inv1+0x40>)
 8001172:	2200      	movs	r2, #0
 8001174:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_1;
 8001176:	2201      	movs	r2, #1
 8001178:	2101      	movs	r1, #1
 800117a:	4808      	ldr	r0, [pc, #32]	; (800119c <state3_inv1+0x44>)
 800117c:	f002 fa22 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_C_1 = 0;
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <state3_inv1+0x40>)
 8001182:	2200      	movs	r2, #0
 8001184:	63da      	str	r2, [r3, #60]	; 0x3c
	RESET_SD_C_1;
 8001186:	2200      	movs	r2, #0
 8001188:	2102      	movs	r1, #2
 800118a:	4804      	ldr	r0, [pc, #16]	; (800119c <state3_inv1+0x44>)
 800118c:	f002 fa1a 	bl	80035c4 <HAL_GPIO_WritePin>
//		TIM1->CCR2 = PWM1;
//		TIM1->CCR3 = 0;
//    	HAL_GPIO_WritePin(GPIOB, SD_A_1_Pin, GPIO_PIN_SET);
//		HAL_GPIO_WritePin(GPIOB, SD_B_1_Pin, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(GPIOB, SD_C_1_Pin, GPIO_PIN_RESET);
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	2000028c 	.word	0x2000028c
 8001198:	40012c00 	.word	0x40012c00
 800119c:	48000400 	.word	0x48000400

080011a0 <state4_inv1>:

void state4_inv1() {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0

	IN_A_1 = 0;
 80011a4:	4b0d      	ldr	r3, [pc, #52]	; (80011dc <state4_inv1+0x3c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	635a      	str	r2, [r3, #52]	; 0x34
	RESET_SD_A_1;
 80011aa:	2200      	movs	r2, #0
 80011ac:	2104      	movs	r1, #4
 80011ae:	480c      	ldr	r0, [pc, #48]	; (80011e0 <state4_inv1+0x40>)
 80011b0:	f002 fa08 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_B_1 = 0;
 80011b4:	4b09      	ldr	r3, [pc, #36]	; (80011dc <state4_inv1+0x3c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_1;
 80011ba:	2201      	movs	r2, #1
 80011bc:	2101      	movs	r1, #1
 80011be:	4808      	ldr	r0, [pc, #32]	; (80011e0 <state4_inv1+0x40>)
 80011c0:	f002 fa00 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_C_1 = PWM1;
 80011c4:	4b07      	ldr	r3, [pc, #28]	; (80011e4 <state4_inv1+0x44>)
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	b29a      	uxth	r2, r3
 80011ca:	4b04      	ldr	r3, [pc, #16]	; (80011dc <state4_inv1+0x3c>)
 80011cc:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_1;
 80011ce:	2201      	movs	r2, #1
 80011d0:	2102      	movs	r1, #2
 80011d2:	4803      	ldr	r0, [pc, #12]	; (80011e0 <state4_inv1+0x40>)
 80011d4:	f002 f9f6 	bl	80035c4 <HAL_GPIO_WritePin>
//		TIM1->CCR2 = PWM1;
//		TIM1->CCR3 = PWM1;
//    	HAL_GPIO_WritePin(GPIOB, SD_A_1_Pin, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(GPIOB, SD_B_1_Pin, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(GPIOB, SD_C_1_Pin, GPIO_PIN_SET);
}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40012c00 	.word	0x40012c00
 80011e0:	48000400 	.word	0x48000400
 80011e4:	2000028c 	.word	0x2000028c

080011e8 <state5_inv1>:

void state5_inv1() {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0

	IN_A_1 = 0;
 80011ec:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <state5_inv1+0x3c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_1;
 80011f2:	2201      	movs	r2, #1
 80011f4:	2104      	movs	r1, #4
 80011f6:	480c      	ldr	r0, [pc, #48]	; (8001228 <state5_inv1+0x40>)
 80011f8:	f002 f9e4 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_B_1 = 0;
 80011fc:	4b09      	ldr	r3, [pc, #36]	; (8001224 <state5_inv1+0x3c>)
 80011fe:	2200      	movs	r2, #0
 8001200:	639a      	str	r2, [r3, #56]	; 0x38
	RESET_SD_B_1;
 8001202:	2200      	movs	r2, #0
 8001204:	2101      	movs	r1, #1
 8001206:	4808      	ldr	r0, [pc, #32]	; (8001228 <state5_inv1+0x40>)
 8001208:	f002 f9dc 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_C_1 = PWM1;
 800120c:	4b07      	ldr	r3, [pc, #28]	; (800122c <state5_inv1+0x44>)
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	b29a      	uxth	r2, r3
 8001212:	4b04      	ldr	r3, [pc, #16]	; (8001224 <state5_inv1+0x3c>)
 8001214:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_1;
 8001216:	2201      	movs	r2, #1
 8001218:	2102      	movs	r1, #2
 800121a:	4803      	ldr	r0, [pc, #12]	; (8001228 <state5_inv1+0x40>)
 800121c:	f002 f9d2 	bl	80035c4 <HAL_GPIO_WritePin>
//	TIM1->CCR2 = 0;
//	TIM1->CCR3 = PWM1;
//	HAL_GPIO_WritePin(GPIOB, SD_A_1_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(GPIOB, SD_B_1_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(GPIOB, SD_C_1_Pin, GPIO_PIN_SET);
}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40012c00 	.word	0x40012c00
 8001228:	48000400 	.word	0x48000400
 800122c:	2000028c 	.word	0x2000028c

08001230 <state6_inv1>:

void state6_inv1() {
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0

	IN_A_1 = 0;
 8001234:	4b0d      	ldr	r3, [pc, #52]	; (800126c <state6_inv1+0x3c>)
 8001236:	2200      	movs	r2, #0
 8001238:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_1;
 800123a:	2201      	movs	r2, #1
 800123c:	2104      	movs	r1, #4
 800123e:	480c      	ldr	r0, [pc, #48]	; (8001270 <state6_inv1+0x40>)
 8001240:	f002 f9c0 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_B_1 = PWM1;
 8001244:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <state6_inv1+0x44>)
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	b29a      	uxth	r2, r3
 800124a:	4b08      	ldr	r3, [pc, #32]	; (800126c <state6_inv1+0x3c>)
 800124c:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_1;
 800124e:	2201      	movs	r2, #1
 8001250:	2101      	movs	r1, #1
 8001252:	4807      	ldr	r0, [pc, #28]	; (8001270 <state6_inv1+0x40>)
 8001254:	f002 f9b6 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_C_1 = 0;
 8001258:	4b04      	ldr	r3, [pc, #16]	; (800126c <state6_inv1+0x3c>)
 800125a:	2200      	movs	r2, #0
 800125c:	63da      	str	r2, [r3, #60]	; 0x3c
	RESET_SD_C_1;
 800125e:	2200      	movs	r2, #0
 8001260:	2102      	movs	r1, #2
 8001262:	4803      	ldr	r0, [pc, #12]	; (8001270 <state6_inv1+0x40>)
 8001264:	f002 f9ae 	bl	80035c4 <HAL_GPIO_WritePin>
//		TIM1->CCR2 = PWM1;
//		TIM1->CCR3 = 0;
//    	HAL_GPIO_WritePin(GPIOB, SD_A_1_Pin, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(GPIOB, SD_B_1_Pin, GPIO_PIN_SET);
//		HAL_GPIO_WritePin(GPIOB, SD_C_1_Pin, GPIO_PIN_RESET);
}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	40012c00 	.word	0x40012c00
 8001270:	48000400 	.word	0x48000400
 8001274:	2000028c 	.word	0x2000028c

08001278 <stateOff_inv1>:

void stateOff_inv1() {
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0

	IN_A_1 = 0;
 800127c:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <stateOff_inv1+0x38>)
 800127e:	2200      	movs	r2, #0
 8001280:	635a      	str	r2, [r3, #52]	; 0x34
	RESET_SD_A_1;
 8001282:	2200      	movs	r2, #0
 8001284:	2104      	movs	r1, #4
 8001286:	480b      	ldr	r0, [pc, #44]	; (80012b4 <stateOff_inv1+0x3c>)
 8001288:	f002 f99c 	bl	80035c4 <HAL_GPIO_WritePin>


	IN_B_1 = 0;
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <stateOff_inv1+0x38>)
 800128e:	2200      	movs	r2, #0
 8001290:	639a      	str	r2, [r3, #56]	; 0x38
	RESET_SD_B_1;
 8001292:	2200      	movs	r2, #0
 8001294:	2101      	movs	r1, #1
 8001296:	4807      	ldr	r0, [pc, #28]	; (80012b4 <stateOff_inv1+0x3c>)
 8001298:	f002 f994 	bl	80035c4 <HAL_GPIO_WritePin>


	IN_C_1 = 0;
 800129c:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <stateOff_inv1+0x38>)
 800129e:	2200      	movs	r2, #0
 80012a0:	63da      	str	r2, [r3, #60]	; 0x3c
	RESET_SD_C_1;
 80012a2:	2200      	movs	r2, #0
 80012a4:	2102      	movs	r1, #2
 80012a6:	4803      	ldr	r0, [pc, #12]	; (80012b4 <stateOff_inv1+0x3c>)
 80012a8:	f002 f98c 	bl	80035c4 <HAL_GPIO_WritePin>

}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40012c00 	.word	0x40012c00
 80012b4:	48000400 	.word	0x48000400

080012b8 <state0_inv2>:


//Inverter 2
void state0_inv2() {
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
	IN_A_2 = 0;
 80012bc:	4b0e      	ldr	r3, [pc, #56]	; (80012f8 <state0_inv2+0x40>)
 80012be:	2200      	movs	r2, #0
 80012c0:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_2;
 80012c2:	2201      	movs	r2, #1
 80012c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012c8:	480c      	ldr	r0, [pc, #48]	; (80012fc <state0_inv2+0x44>)
 80012ca:	f002 f97b 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_B_2 = 0;
 80012ce:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <state0_inv2+0x40>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_2;
 80012d4:	2201      	movs	r2, #1
 80012d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012da:	4808      	ldr	r0, [pc, #32]	; (80012fc <state0_inv2+0x44>)
 80012dc:	f002 f972 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_C_2 = 0;
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <state0_inv2+0x40>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_2;
 80012e6:	2201      	movs	r2, #1
 80012e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012ec:	4803      	ldr	r0, [pc, #12]	; (80012fc <state0_inv2+0x44>)
 80012ee:	f002 f969 	bl	80035c4 <HAL_GPIO_WritePin>
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	40013400 	.word	0x40013400
 80012fc:	48000400 	.word	0x48000400

08001300 <state1_inv2>:


void state1_inv2() {
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
	IN_A_2 = 0;
 8001304:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <state1_inv2+0x40>)
 8001306:	2200      	movs	r2, #0
 8001308:	635a      	str	r2, [r3, #52]	; 0x34
	RESET_SD_A_2;
 800130a:	2200      	movs	r2, #0
 800130c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001310:	480c      	ldr	r0, [pc, #48]	; (8001344 <state1_inv2+0x44>)
 8001312:	f002 f957 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_B_2 = PWM2;
 8001316:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <state1_inv2+0x48>)
 8001318:	881a      	ldrh	r2, [r3, #0]
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <state1_inv2+0x40>)
 800131c:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_2;
 800131e:	2201      	movs	r2, #1
 8001320:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001324:	4807      	ldr	r0, [pc, #28]	; (8001344 <state1_inv2+0x44>)
 8001326:	f002 f94d 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_C_2 = 0;
 800132a:	4b05      	ldr	r3, [pc, #20]	; (8001340 <state1_inv2+0x40>)
 800132c:	2200      	movs	r2, #0
 800132e:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_2;
 8001330:	2201      	movs	r2, #1
 8001332:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001336:	4803      	ldr	r0, [pc, #12]	; (8001344 <state1_inv2+0x44>)
 8001338:	f002 f944 	bl	80035c4 <HAL_GPIO_WritePin>
}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40013400 	.word	0x40013400
 8001344:	48000400 	.word	0x48000400
 8001348:	2000028e 	.word	0x2000028e

0800134c <state2_inv2>:
void state2_inv2() {
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
	IN_A_2 = PWM2;
 8001350:	4b0e      	ldr	r3, [pc, #56]	; (800138c <state2_inv2+0x40>)
 8001352:	881a      	ldrh	r2, [r3, #0]
 8001354:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <state2_inv2+0x44>)
 8001356:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_2;
 8001358:	2201      	movs	r2, #1
 800135a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800135e:	480d      	ldr	r0, [pc, #52]	; (8001394 <state2_inv2+0x48>)
 8001360:	f002 f930 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_B_2 = 0;
 8001364:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <state2_inv2+0x44>)
 8001366:	2200      	movs	r2, #0
 8001368:	639a      	str	r2, [r3, #56]	; 0x38
	RESET_SD_B_2;
 800136a:	2200      	movs	r2, #0
 800136c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001370:	4808      	ldr	r0, [pc, #32]	; (8001394 <state2_inv2+0x48>)
 8001372:	f002 f927 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_C_2 = 0;
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <state2_inv2+0x44>)
 8001378:	2200      	movs	r2, #0
 800137a:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_2;
 800137c:	2201      	movs	r2, #1
 800137e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001382:	4804      	ldr	r0, [pc, #16]	; (8001394 <state2_inv2+0x48>)
 8001384:	f002 f91e 	bl	80035c4 <HAL_GPIO_WritePin>
}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}
 800138c:	2000028e 	.word	0x2000028e
 8001390:	40013400 	.word	0x40013400
 8001394:	48000400 	.word	0x48000400

08001398 <state3_inv2>:
void state3_inv2() {
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
	IN_A_2 = PWM2;
 800139c:	4b0e      	ldr	r3, [pc, #56]	; (80013d8 <state3_inv2+0x40>)
 800139e:	881a      	ldrh	r2, [r3, #0]
 80013a0:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <state3_inv2+0x44>)
 80013a2:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_2;
 80013a4:	2201      	movs	r2, #1
 80013a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013aa:	480d      	ldr	r0, [pc, #52]	; (80013e0 <state3_inv2+0x48>)
 80013ac:	f002 f90a 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_B_2 = 0;
 80013b0:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <state3_inv2+0x44>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_2;
 80013b6:	2201      	movs	r2, #1
 80013b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80013bc:	4808      	ldr	r0, [pc, #32]	; (80013e0 <state3_inv2+0x48>)
 80013be:	f002 f901 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_C_2 = 0;
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <state3_inv2+0x44>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	63da      	str	r2, [r3, #60]	; 0x3c
	RESET_SD_C_2;
 80013c8:	2200      	movs	r2, #0
 80013ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013ce:	4804      	ldr	r0, [pc, #16]	; (80013e0 <state3_inv2+0x48>)
 80013d0:	f002 f8f8 	bl	80035c4 <HAL_GPIO_WritePin>
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	2000028e 	.word	0x2000028e
 80013dc:	40013400 	.word	0x40013400
 80013e0:	48000400 	.word	0x48000400

080013e4 <state4_inv2>:
void state4_inv2() {
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
	IN_A_2 = 0;
 80013e8:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <state4_inv2+0x40>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	635a      	str	r2, [r3, #52]	; 0x34
	RESET_SD_A_2;
 80013ee:	2200      	movs	r2, #0
 80013f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013f4:	480c      	ldr	r0, [pc, #48]	; (8001428 <state4_inv2+0x44>)
 80013f6:	f002 f8e5 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_B_2 = 0;
 80013fa:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <state4_inv2+0x40>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_2;
 8001400:	2201      	movs	r2, #1
 8001402:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001406:	4808      	ldr	r0, [pc, #32]	; (8001428 <state4_inv2+0x44>)
 8001408:	f002 f8dc 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_C_2 = PWM2;
 800140c:	4b07      	ldr	r3, [pc, #28]	; (800142c <state4_inv2+0x48>)
 800140e:	881a      	ldrh	r2, [r3, #0]
 8001410:	4b04      	ldr	r3, [pc, #16]	; (8001424 <state4_inv2+0x40>)
 8001412:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_2;
 8001414:	2201      	movs	r2, #1
 8001416:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800141a:	4803      	ldr	r0, [pc, #12]	; (8001428 <state4_inv2+0x44>)
 800141c:	f002 f8d2 	bl	80035c4 <HAL_GPIO_WritePin>
}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40013400 	.word	0x40013400
 8001428:	48000400 	.word	0x48000400
 800142c:	2000028e 	.word	0x2000028e

08001430 <state5_inv2>:
void state5_inv2() {
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	IN_A_2 = 0;
 8001434:	4b0e      	ldr	r3, [pc, #56]	; (8001470 <state5_inv2+0x40>)
 8001436:	2200      	movs	r2, #0
 8001438:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_2;
 800143a:	2201      	movs	r2, #1
 800143c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001440:	480c      	ldr	r0, [pc, #48]	; (8001474 <state5_inv2+0x44>)
 8001442:	f002 f8bf 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_B_2 = 0;
 8001446:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <state5_inv2+0x40>)
 8001448:	2200      	movs	r2, #0
 800144a:	639a      	str	r2, [r3, #56]	; 0x38
	RESET_SD_B_2;
 800144c:	2200      	movs	r2, #0
 800144e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001452:	4808      	ldr	r0, [pc, #32]	; (8001474 <state5_inv2+0x44>)
 8001454:	f002 f8b6 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_C_2 = PWM2;
 8001458:	4b07      	ldr	r3, [pc, #28]	; (8001478 <state5_inv2+0x48>)
 800145a:	881a      	ldrh	r2, [r3, #0]
 800145c:	4b04      	ldr	r3, [pc, #16]	; (8001470 <state5_inv2+0x40>)
 800145e:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_2;
 8001460:	2201      	movs	r2, #1
 8001462:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001466:	4803      	ldr	r0, [pc, #12]	; (8001474 <state5_inv2+0x44>)
 8001468:	f002 f8ac 	bl	80035c4 <HAL_GPIO_WritePin>
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40013400 	.word	0x40013400
 8001474:	48000400 	.word	0x48000400
 8001478:	2000028e 	.word	0x2000028e

0800147c <state6_inv2>:
void state6_inv2() {
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
	IN_A_2 = 0;
 8001480:	4b0e      	ldr	r3, [pc, #56]	; (80014bc <state6_inv2+0x40>)
 8001482:	2200      	movs	r2, #0
 8001484:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_2;
 8001486:	2201      	movs	r2, #1
 8001488:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800148c:	480c      	ldr	r0, [pc, #48]	; (80014c0 <state6_inv2+0x44>)
 800148e:	f002 f899 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_B_2 = PWM2;
 8001492:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <state6_inv2+0x48>)
 8001494:	881a      	ldrh	r2, [r3, #0]
 8001496:	4b09      	ldr	r3, [pc, #36]	; (80014bc <state6_inv2+0x40>)
 8001498:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_2;
 800149a:	2201      	movs	r2, #1
 800149c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014a0:	4807      	ldr	r0, [pc, #28]	; (80014c0 <state6_inv2+0x44>)
 80014a2:	f002 f88f 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_C_2 = 0;
 80014a6:	4b05      	ldr	r3, [pc, #20]	; (80014bc <state6_inv2+0x40>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	63da      	str	r2, [r3, #60]	; 0x3c
	RESET_SD_C_2;
 80014ac:	2200      	movs	r2, #0
 80014ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014b2:	4803      	ldr	r0, [pc, #12]	; (80014c0 <state6_inv2+0x44>)
 80014b4:	f002 f886 	bl	80035c4 <HAL_GPIO_WritePin>
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40013400 	.word	0x40013400
 80014c0:	48000400 	.word	0x48000400
 80014c4:	2000028e 	.word	0x2000028e

080014c8 <stateOff_inv2>:

void stateOff_inv2() {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
	IN_A_2 = 0;
 80014cc:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <stateOff_inv2+0x40>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	635a      	str	r2, [r3, #52]	; 0x34
	RESET_SD_A_2;
 80014d2:	2200      	movs	r2, #0
 80014d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014d8:	480c      	ldr	r0, [pc, #48]	; (800150c <stateOff_inv2+0x44>)
 80014da:	f002 f873 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_B_2 = 0;
 80014de:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <stateOff_inv2+0x40>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	639a      	str	r2, [r3, #56]	; 0x38
	RESET_SD_B_2;
 80014e4:	2200      	movs	r2, #0
 80014e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014ea:	4808      	ldr	r0, [pc, #32]	; (800150c <stateOff_inv2+0x44>)
 80014ec:	f002 f86a 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_C_2 = 0;
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <stateOff_inv2+0x40>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	63da      	str	r2, [r3, #60]	; 0x3c
	RESET_SD_C_2;
 80014f6:	2200      	movs	r2, #0
 80014f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014fc:	4803      	ldr	r0, [pc, #12]	; (800150c <stateOff_inv2+0x44>)
 80014fe:	f002 f861 	bl	80035c4 <HAL_GPIO_WritePin>
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40013400 	.word	0x40013400
 800150c:	48000400 	.word	0x48000400

08001510 <state0_inv3>:

//Inverter 3
void state0_inv3() {
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
	IN_A_3 = 0;
 8001514:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001518:	2200      	movs	r2, #0
 800151a:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_3;
 800151c:	2201      	movs	r2, #1
 800151e:	2120      	movs	r1, #32
 8001520:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001524:	f002 f84e 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_B_3 = 0;
 8001528:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800152c:	2200      	movs	r2, #0
 800152e:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_3;
 8001530:	2201      	movs	r2, #1
 8001532:	2140      	movs	r1, #64	; 0x40
 8001534:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001538:	f002 f844 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_C_3 = 0;
 800153c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001540:	2200      	movs	r2, #0
 8001542:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_3;
 8001544:	2201      	movs	r2, #1
 8001546:	2180      	movs	r1, #128	; 0x80
 8001548:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154c:	f002 f83a 	bl	80035c4 <HAL_GPIO_WritePin>
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}

08001554 <state1_inv3>:

void state1_inv3() {
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
	IN_A_3 = 0;
 8001558:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800155c:	2200      	movs	r2, #0
 800155e:	635a      	str	r2, [r3, #52]	; 0x34
	RESET_SD_A_3;
 8001560:	2200      	movs	r2, #0
 8001562:	2120      	movs	r1, #32
 8001564:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001568:	f002 f82c 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_B_3 = 0;
 800156c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001570:	2200      	movs	r2, #0
 8001572:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_3;
 8001574:	2201      	movs	r2, #1
 8001576:	2140      	movs	r1, #64	; 0x40
 8001578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800157c:	f002 f822 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_C_3 = PWM3;
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <state1_inv3+0x48>)
 8001582:	881a      	ldrh	r2, [r3, #0]
 8001584:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001588:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_3;
 800158a:	2201      	movs	r2, #1
 800158c:	2180      	movs	r1, #128	; 0x80
 800158e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001592:	f002 f817 	bl	80035c4 <HAL_GPIO_WritePin>
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000290 	.word	0x20000290

080015a0 <state2_inv3>:
void state2_inv3() {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
	IN_A_3 = 0;
 80015a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015a8:	2200      	movs	r2, #0
 80015aa:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_3;
 80015ac:	2201      	movs	r2, #1
 80015ae:	2120      	movs	r1, #32
 80015b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b4:	f002 f806 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_B_3 = 0;
 80015b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015bc:	2200      	movs	r2, #0
 80015be:	639a      	str	r2, [r3, #56]	; 0x38
	RESET_SD_B_3;
 80015c0:	2200      	movs	r2, #0
 80015c2:	2140      	movs	r1, #64	; 0x40
 80015c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c8:	f001 fffc 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_C_3 = PWM3;
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <state2_inv3+0x48>)
 80015ce:	881a      	ldrh	r2, [r3, #0]
 80015d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015d4:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_3;
 80015d6:	2201      	movs	r2, #1
 80015d8:	2180      	movs	r1, #128	; 0x80
 80015da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015de:	f001 fff1 	bl	80035c4 <HAL_GPIO_WritePin>
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000290 	.word	0x20000290

080015ec <state3_inv3>:
void state3_inv3() {
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
	IN_A_3 = 0;
 80015f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015f4:	2200      	movs	r2, #0
 80015f6:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_3;
 80015f8:	2201      	movs	r2, #1
 80015fa:	2120      	movs	r1, #32
 80015fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001600:	f001 ffe0 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_B_3 = PWM3;
 8001604:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <state3_inv3+0x48>)
 8001606:	881a      	ldrh	r2, [r3, #0]
 8001608:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800160c:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_3;
 800160e:	2201      	movs	r2, #1
 8001610:	2140      	movs	r1, #64	; 0x40
 8001612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001616:	f001 ffd5 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_C_3 = 0;
 800161a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800161e:	2200      	movs	r2, #0
 8001620:	63da      	str	r2, [r3, #60]	; 0x3c
	RESET_SD_C_3;
 8001622:	2200      	movs	r2, #0
 8001624:	2180      	movs	r1, #128	; 0x80
 8001626:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800162a:	f001 ffcb 	bl	80035c4 <HAL_GPIO_WritePin>
}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000290 	.word	0x20000290

08001638 <state4_inv3>:
void state4_inv3() {
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
	IN_A_3 = 0;
 800163c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001640:	2200      	movs	r2, #0
 8001642:	635a      	str	r2, [r3, #52]	; 0x34
	RESET_SD_A_3;
 8001644:	2200      	movs	r2, #0
 8001646:	2120      	movs	r1, #32
 8001648:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164c:	f001 ffba 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_B_3 = PWM3;
 8001650:	4b0b      	ldr	r3, [pc, #44]	; (8001680 <state4_inv3+0x48>)
 8001652:	881a      	ldrh	r2, [r3, #0]
 8001654:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001658:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_3;
 800165a:	2201      	movs	r2, #1
 800165c:	2140      	movs	r1, #64	; 0x40
 800165e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001662:	f001 ffaf 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_C_3 = 0;
 8001666:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800166a:	2200      	movs	r2, #0
 800166c:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_3;
 800166e:	2201      	movs	r2, #1
 8001670:	2180      	movs	r1, #128	; 0x80
 8001672:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001676:	f001 ffa5 	bl	80035c4 <HAL_GPIO_WritePin>
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	20000290 	.word	0x20000290

08001684 <state5_inv3>:
void state5_inv3() {
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
	IN_A_3 = PWM3;
 8001688:	4b10      	ldr	r3, [pc, #64]	; (80016cc <state5_inv3+0x48>)
 800168a:	881a      	ldrh	r2, [r3, #0]
 800168c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001690:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_3;
 8001692:	2201      	movs	r2, #1
 8001694:	2120      	movs	r1, #32
 8001696:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169a:	f001 ff93 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_B_3 = 0;
 800169e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016a2:	2200      	movs	r2, #0
 80016a4:	639a      	str	r2, [r3, #56]	; 0x38
	RESET_SD_B_3;
 80016a6:	2200      	movs	r2, #0
 80016a8:	2140      	movs	r1, #64	; 0x40
 80016aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ae:	f001 ff89 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_C_3 = 0;
 80016b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016b6:	2200      	movs	r2, #0
 80016b8:	63da      	str	r2, [r3, #60]	; 0x3c
	SET_SD_C_3;
 80016ba:	2201      	movs	r2, #1
 80016bc:	2180      	movs	r1, #128	; 0x80
 80016be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c2:	f001 ff7f 	bl	80035c4 <HAL_GPIO_WritePin>
}
 80016c6:	bf00      	nop
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000290 	.word	0x20000290

080016d0 <state6_inv3>:
void state6_inv3() {
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
	IN_A_3 = PWM3;
 80016d4:	4b10      	ldr	r3, [pc, #64]	; (8001718 <state6_inv3+0x48>)
 80016d6:	881a      	ldrh	r2, [r3, #0]
 80016d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016dc:	635a      	str	r2, [r3, #52]	; 0x34
	SET_SD_A_3;
 80016de:	2201      	movs	r2, #1
 80016e0:	2120      	movs	r1, #32
 80016e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e6:	f001 ff6d 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_B_3 = 0;
 80016ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80016ee:	2200      	movs	r2, #0
 80016f0:	639a      	str	r2, [r3, #56]	; 0x38
	SET_SD_B_3;
 80016f2:	2201      	movs	r2, #1
 80016f4:	2140      	movs	r1, #64	; 0x40
 80016f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016fa:	f001 ff63 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_C_3 = 0;
 80016fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001702:	2200      	movs	r2, #0
 8001704:	63da      	str	r2, [r3, #60]	; 0x3c
	RESET_SD_C_3;
 8001706:	2200      	movs	r2, #0
 8001708:	2180      	movs	r1, #128	; 0x80
 800170a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800170e:	f001 ff59 	bl	80035c4 <HAL_GPIO_WritePin>
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000290 	.word	0x20000290

0800171c <stateOff_inv3>:

void stateOff_inv3() {
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
	IN_A_3 = 0;
 8001720:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001724:	2200      	movs	r2, #0
 8001726:	635a      	str	r2, [r3, #52]	; 0x34
	RESET_SD_A_3;
 8001728:	2200      	movs	r2, #0
 800172a:	2120      	movs	r1, #32
 800172c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001730:	f001 ff48 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_B_3 = 0;
 8001734:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001738:	2200      	movs	r2, #0
 800173a:	639a      	str	r2, [r3, #56]	; 0x38
	RESET_SD_B_3;
 800173c:	2200      	movs	r2, #0
 800173e:	2140      	movs	r1, #64	; 0x40
 8001740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001744:	f001 ff3e 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_C_3 = 0;
 8001748:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800174c:	2200      	movs	r2, #0
 800174e:	63da      	str	r2, [r3, #60]	; 0x3c
	RESET_SD_C_3;
 8001750:	2200      	movs	r2, #0
 8001752:	2180      	movs	r1, #128	; 0x80
 8001754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001758:	f001 ff34 	bl	80035c4 <HAL_GPIO_WritePin>
}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}

08001760 <state0_inv4>:


	//Inverter 4
void state0_inv4() {
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
	IN_A_4 = 0;
 8001764:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <state0_inv4+0x48>)
 8001766:	2200      	movs	r2, #0
 8001768:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_A_4;
 800176a:	2201      	movs	r2, #1
 800176c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001770:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001774:	f001 ff26 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_B_4 = 0;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <state0_inv4+0x4c>)
 800177a:	2200      	movs	r2, #0
 800177c:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_B_4;
 800177e:	2201      	movs	r2, #1
 8001780:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001784:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001788:	f001 ff1c 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_C_4 = 0;
 800178c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001790:	2200      	movs	r2, #0
 8001792:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_C_4;
 8001794:	2201      	movs	r2, #1
 8001796:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800179a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179e:	f001 ff11 	bl	80035c4 <HAL_GPIO_WritePin>
}
 80017a2:	bf00      	nop
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40012c00 	.word	0x40012c00
 80017ac:	40013400 	.word	0x40013400

080017b0 <state1_inv4>:

void state1_inv4() {
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
	IN_A_4 = 0;
 80017b4:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <state1_inv4+0x48>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	641a      	str	r2, [r3, #64]	; 0x40
	RESET_SD_A_4;
 80017ba:	2200      	movs	r2, #0
 80017bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c4:	f001 fefe 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_B_4 = 0;
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <state1_inv4+0x4c>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_B_4;
 80017ce:	2201      	movs	r2, #1
 80017d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80017d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d8:	f001 fef4 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_C_4 = PWM4;
 80017dc:	4b08      	ldr	r3, [pc, #32]	; (8001800 <state1_inv4+0x50>)
 80017de:	881a      	ldrh	r2, [r3, #0]
 80017e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80017e4:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_C_4;
 80017e6:	2201      	movs	r2, #1
 80017e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80017ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017f0:	f001 fee8 	bl	80035c4 <HAL_GPIO_WritePin>
}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40012c00 	.word	0x40012c00
 80017fc:	40013400 	.word	0x40013400
 8001800:	20000292 	.word	0x20000292

08001804 <state2_inv4>:
void state2_inv4() {
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
	IN_A_4 = 0;
 8001808:	4b10      	ldr	r3, [pc, #64]	; (800184c <state2_inv4+0x48>)
 800180a:	2200      	movs	r2, #0
 800180c:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_A_4;
 800180e:	2201      	movs	r2, #1
 8001810:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001814:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001818:	f001 fed4 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_B_4 = 0;
 800181c:	4b0c      	ldr	r3, [pc, #48]	; (8001850 <state2_inv4+0x4c>)
 800181e:	2200      	movs	r2, #0
 8001820:	641a      	str	r2, [r3, #64]	; 0x40
	RESET_SD_B_4;
 8001822:	2200      	movs	r2, #0
 8001824:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001828:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800182c:	f001 feca 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_C_4 = PWM4;
 8001830:	4b08      	ldr	r3, [pc, #32]	; (8001854 <state2_inv4+0x50>)
 8001832:	881a      	ldrh	r2, [r3, #0]
 8001834:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001838:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_C_4;
 800183a:	2201      	movs	r2, #1
 800183c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001844:	f001 febe 	bl	80035c4 <HAL_GPIO_WritePin>
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40012c00 	.word	0x40012c00
 8001850:	40013400 	.word	0x40013400
 8001854:	20000292 	.word	0x20000292

08001858 <state3_inv4>:
void state3_inv4() {
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
	IN_A_4 = 0;
 800185c:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <state3_inv4+0x48>)
 800185e:	2200      	movs	r2, #0
 8001860:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_A_4;
 8001862:	2201      	movs	r2, #1
 8001864:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001868:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800186c:	f001 feaa 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_B_4 = PWM4;
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <state3_inv4+0x4c>)
 8001872:	881a      	ldrh	r2, [r3, #0]
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <state3_inv4+0x50>)
 8001876:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_B_4;
 8001878:	2201      	movs	r2, #1
 800187a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800187e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001882:	f001 fe9f 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_C_4 = 0;
 8001886:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800188a:	2200      	movs	r2, #0
 800188c:	641a      	str	r2, [r3, #64]	; 0x40
	RESET_SD_C_4;
 800188e:	2200      	movs	r2, #0
 8001890:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001898:	f001 fe94 	bl	80035c4 <HAL_GPIO_WritePin>
}
 800189c:	bf00      	nop
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40012c00 	.word	0x40012c00
 80018a4:	20000292 	.word	0x20000292
 80018a8:	40013400 	.word	0x40013400

080018ac <state4_inv4>:
void state4_inv4() {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
	IN_A_4 = 0;
 80018b0:	4b10      	ldr	r3, [pc, #64]	; (80018f4 <state4_inv4+0x48>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	641a      	str	r2, [r3, #64]	; 0x40
	RESET_SD_A_4;
 80018b6:	2200      	movs	r2, #0
 80018b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c0:	f001 fe80 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_B_4 = PWM4;
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <state4_inv4+0x4c>)
 80018c6:	881a      	ldrh	r2, [r3, #0]
 80018c8:	4b0c      	ldr	r3, [pc, #48]	; (80018fc <state4_inv4+0x50>)
 80018ca:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_B_4;
 80018cc:	2201      	movs	r2, #1
 80018ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80018d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018d6:	f001 fe75 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_C_4 = 0;
 80018da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80018de:	2200      	movs	r2, #0
 80018e0:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_C_4;
 80018e2:	2201      	movs	r2, #1
 80018e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ec:	f001 fe6a 	bl	80035c4 <HAL_GPIO_WritePin>
}
 80018f0:	bf00      	nop
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	40012c00 	.word	0x40012c00
 80018f8:	20000292 	.word	0x20000292
 80018fc:	40013400 	.word	0x40013400

08001900 <state5_inv4>:
void state5_inv4() {
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
	IN_A_4 = PWM4;
 8001904:	4b10      	ldr	r3, [pc, #64]	; (8001948 <state5_inv4+0x48>)
 8001906:	881a      	ldrh	r2, [r3, #0]
 8001908:	4b10      	ldr	r3, [pc, #64]	; (800194c <state5_inv4+0x4c>)
 800190a:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_A_4;
 800190c:	2201      	movs	r2, #1
 800190e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001912:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001916:	f001 fe55 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_B_4 = 0;
 800191a:	4b0d      	ldr	r3, [pc, #52]	; (8001950 <state5_inv4+0x50>)
 800191c:	2200      	movs	r2, #0
 800191e:	641a      	str	r2, [r3, #64]	; 0x40
	RESET_SD_B_4;
 8001920:	2200      	movs	r2, #0
 8001922:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001926:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800192a:	f001 fe4b 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_C_4 = 0;
 800192e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001932:	2200      	movs	r2, #0
 8001934:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_C_4;
 8001936:	2201      	movs	r2, #1
 8001938:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800193c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001940:	f001 fe40 	bl	80035c4 <HAL_GPIO_WritePin>
}
 8001944:	bf00      	nop
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20000292 	.word	0x20000292
 800194c:	40012c00 	.word	0x40012c00
 8001950:	40013400 	.word	0x40013400

08001954 <state6_inv4>:
void state6_inv4() {
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0

	IN_A_4 = PWM4;
 8001958:	4b10      	ldr	r3, [pc, #64]	; (800199c <state6_inv4+0x48>)
 800195a:	881a      	ldrh	r2, [r3, #0]
 800195c:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <state6_inv4+0x4c>)
 800195e:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_A_4;
 8001960:	2201      	movs	r2, #1
 8001962:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001966:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800196a:	f001 fe2b 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_B_4 = 0;
 800196e:	4b0d      	ldr	r3, [pc, #52]	; (80019a4 <state6_inv4+0x50>)
 8001970:	2200      	movs	r2, #0
 8001972:	641a      	str	r2, [r3, #64]	; 0x40
	SET_SD_B_4;
 8001974:	2201      	movs	r2, #1
 8001976:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800197a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800197e:	f001 fe21 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_C_4 = 0;
 8001982:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001986:	2200      	movs	r2, #0
 8001988:	641a      	str	r2, [r3, #64]	; 0x40
	RESET_SD_C_4;
 800198a:	2200      	movs	r2, #0
 800198c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001990:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001994:	f001 fe16 	bl	80035c4 <HAL_GPIO_WritePin>
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000292 	.word	0x20000292
 80019a0:	40012c00 	.word	0x40012c00
 80019a4:	40013400 	.word	0x40013400

080019a8 <stateOff_inv4>:

void stateOff_inv4() {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0

	IN_A_4 = 0;
 80019ac:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <stateOff_inv4+0x48>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	641a      	str	r2, [r3, #64]	; 0x40
	RESET_SD_A_4;
 80019b2:	2200      	movs	r2, #0
 80019b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80019b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019bc:	f001 fe02 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_B_4 = 0;
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <stateOff_inv4+0x4c>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	641a      	str	r2, [r3, #64]	; 0x40
	RESET_SD_B_4;
 80019c6:	2200      	movs	r2, #0
 80019c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80019cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019d0:	f001 fdf8 	bl	80035c4 <HAL_GPIO_WritePin>

	IN_C_4 = 0;
 80019d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80019d8:	2200      	movs	r2, #0
 80019da:	641a      	str	r2, [r3, #64]	; 0x40
	RESET_SD_C_4;
 80019dc:	2200      	movs	r2, #0
 80019de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80019e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019e6:	f001 fded 	bl	80035c4 <HAL_GPIO_WritePin>
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40012c00 	.word	0x40012c00
 80019f4:	40013400 	.word	0x40013400

080019f8 <Inverter1>:
		state6_inv2();
		state6_inv4();
	}
}

void Inverter1(uint8_t inv_mode) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	4603      	mov	r3, r0
 8001a00:	71fb      	strb	r3, [r7, #7]
	inv_mode == 2- low switches are on, high switches are off
	inv_mode == 3- 120 deg. commutation with PWM
	inv_mode == 4- 120 deg. commutation without PWM
	*/

	if (inv_mode == 1) {
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d102      	bne.n	8001a0e <Inverter1+0x16>
		stateOff_inv1();
 8001a08:	f7ff fc36 	bl	8001278 <stateOff_inv1>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
			state6_inv1();
		}
	}
}
 8001a0c:	e134      	b.n	8001c78 <Inverter1+0x280>
	else if (inv_mode == 2) {
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d102      	bne.n	8001a1a <Inverter1+0x22>
		state0_inv1();
 8001a14:	f7ff fb38 	bl	8001088 <state0_inv1>
}
 8001a18:	e12e      	b.n	8001c78 <Inverter1+0x280>
	else if (inv_mode == 3) {
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	2b03      	cmp	r3, #3
 8001a1e:	f040 8093 	bne.w	8001b48 <Inverter1+0x150>
		if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin) && HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001a22:	2110      	movs	r1, #16
 8001a24:	4896      	ldr	r0, [pc, #600]	; (8001c80 <Inverter1+0x288>)
 8001a26:	f001 fdb5 	bl	8003594 <HAL_GPIO_ReadPin>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d010      	beq.n	8001a52 <Inverter1+0x5a>
 8001a30:	2120      	movs	r1, #32
 8001a32:	4893      	ldr	r0, [pc, #588]	; (8001c80 <Inverter1+0x288>)
 8001a34:	f001 fdae 	bl	8003594 <HAL_GPIO_ReadPin>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d009      	beq.n	8001a52 <Inverter1+0x5a>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001a3e:	2140      	movs	r1, #64	; 0x40
 8001a40:	488f      	ldr	r0, [pc, #572]	; (8001c80 <Inverter1+0x288>)
 8001a42:	f001 fda7 	bl	8003594 <HAL_GPIO_ReadPin>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d102      	bne.n	8001a52 <Inverter1+0x5a>
			state1_inv1();
 8001a4c:	f7ff fb3c 	bl	80010c8 <state1_inv1>
 8001a50:	e112      	b.n	8001c78 <Inverter1+0x280>
		else if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001a52:	2110      	movs	r1, #16
 8001a54:	488a      	ldr	r0, [pc, #552]	; (8001c80 <Inverter1+0x288>)
 8001a56:	f001 fd9d 	bl	8003594 <HAL_GPIO_ReadPin>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d010      	beq.n	8001a82 <Inverter1+0x8a>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001a60:	2120      	movs	r1, #32
 8001a62:	4887      	ldr	r0, [pc, #540]	; (8001c80 <Inverter1+0x288>)
 8001a64:	f001 fd96 	bl	8003594 <HAL_GPIO_ReadPin>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d109      	bne.n	8001a82 <Inverter1+0x8a>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001a6e:	2140      	movs	r1, #64	; 0x40
 8001a70:	4883      	ldr	r0, [pc, #524]	; (8001c80 <Inverter1+0x288>)
 8001a72:	f001 fd8f 	bl	8003594 <HAL_GPIO_ReadPin>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d102      	bne.n	8001a82 <Inverter1+0x8a>
			state2_inv1();
 8001a7c:	f7ff fb48 	bl	8001110 <state2_inv1>
 8001a80:	e0fa      	b.n	8001c78 <Inverter1+0x280>
		else if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001a82:	2110      	movs	r1, #16
 8001a84:	487e      	ldr	r0, [pc, #504]	; (8001c80 <Inverter1+0x288>)
 8001a86:	f001 fd85 	bl	8003594 <HAL_GPIO_ReadPin>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d010      	beq.n	8001ab2 <Inverter1+0xba>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001a90:	2120      	movs	r1, #32
 8001a92:	487b      	ldr	r0, [pc, #492]	; (8001c80 <Inverter1+0x288>)
 8001a94:	f001 fd7e 	bl	8003594 <HAL_GPIO_ReadPin>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d109      	bne.n	8001ab2 <Inverter1+0xba>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001a9e:	2140      	movs	r1, #64	; 0x40
 8001aa0:	4877      	ldr	r0, [pc, #476]	; (8001c80 <Inverter1+0x288>)
 8001aa2:	f001 fd77 	bl	8003594 <HAL_GPIO_ReadPin>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d002      	beq.n	8001ab2 <Inverter1+0xba>
			state3_inv1();
 8001aac:	f7ff fb54 	bl	8001158 <state3_inv1>
 8001ab0:	e0e2      	b.n	8001c78 <Inverter1+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001ab2:	2110      	movs	r1, #16
 8001ab4:	4872      	ldr	r0, [pc, #456]	; (8001c80 <Inverter1+0x288>)
 8001ab6:	f001 fd6d 	bl	8003594 <HAL_GPIO_ReadPin>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d110      	bne.n	8001ae2 <Inverter1+0xea>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001ac0:	2120      	movs	r1, #32
 8001ac2:	486f      	ldr	r0, [pc, #444]	; (8001c80 <Inverter1+0x288>)
 8001ac4:	f001 fd66 	bl	8003594 <HAL_GPIO_ReadPin>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d109      	bne.n	8001ae2 <Inverter1+0xea>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001ace:	2140      	movs	r1, #64	; 0x40
 8001ad0:	486b      	ldr	r0, [pc, #428]	; (8001c80 <Inverter1+0x288>)
 8001ad2:	f001 fd5f 	bl	8003594 <HAL_GPIO_ReadPin>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d002      	beq.n	8001ae2 <Inverter1+0xea>
			state4_inv1();
 8001adc:	f7ff fb60 	bl	80011a0 <state4_inv1>
 8001ae0:	e0ca      	b.n	8001c78 <Inverter1+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001ae2:	2110      	movs	r1, #16
 8001ae4:	4866      	ldr	r0, [pc, #408]	; (8001c80 <Inverter1+0x288>)
 8001ae6:	f001 fd55 	bl	8003594 <HAL_GPIO_ReadPin>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d110      	bne.n	8001b12 <Inverter1+0x11a>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001af0:	2120      	movs	r1, #32
 8001af2:	4863      	ldr	r0, [pc, #396]	; (8001c80 <Inverter1+0x288>)
 8001af4:	f001 fd4e 	bl	8003594 <HAL_GPIO_ReadPin>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d009      	beq.n	8001b12 <Inverter1+0x11a>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001afe:	2140      	movs	r1, #64	; 0x40
 8001b00:	485f      	ldr	r0, [pc, #380]	; (8001c80 <Inverter1+0x288>)
 8001b02:	f001 fd47 	bl	8003594 <HAL_GPIO_ReadPin>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d002      	beq.n	8001b12 <Inverter1+0x11a>
			state5_inv1();
 8001b0c:	f7ff fb6c 	bl	80011e8 <state5_inv1>
 8001b10:	e0b2      	b.n	8001c78 <Inverter1+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001b12:	2110      	movs	r1, #16
 8001b14:	485a      	ldr	r0, [pc, #360]	; (8001c80 <Inverter1+0x288>)
 8001b16:	f001 fd3d 	bl	8003594 <HAL_GPIO_ReadPin>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f040 80ab 	bne.w	8001c78 <Inverter1+0x280>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001b22:	2120      	movs	r1, #32
 8001b24:	4856      	ldr	r0, [pc, #344]	; (8001c80 <Inverter1+0x288>)
 8001b26:	f001 fd35 	bl	8003594 <HAL_GPIO_ReadPin>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 80a3 	beq.w	8001c78 <Inverter1+0x280>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001b32:	2140      	movs	r1, #64	; 0x40
 8001b34:	4852      	ldr	r0, [pc, #328]	; (8001c80 <Inverter1+0x288>)
 8001b36:	f001 fd2d 	bl	8003594 <HAL_GPIO_ReadPin>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f040 809b 	bne.w	8001c78 <Inverter1+0x280>
			state6_inv1();
 8001b42:	f7ff fb75 	bl	8001230 <state6_inv1>
}
 8001b46:	e097      	b.n	8001c78 <Inverter1+0x280>
		else if (inv_mode == 4) {
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	2b04      	cmp	r3, #4
 8001b4c:	f040 8094 	bne.w	8001c78 <Inverter1+0x280>
			PWM1= 4095;
 8001b50:	4b4c      	ldr	r3, [pc, #304]	; (8001c84 <Inverter1+0x28c>)
 8001b52:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001b56:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin) && HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001b58:	2110      	movs	r1, #16
 8001b5a:	4849      	ldr	r0, [pc, #292]	; (8001c80 <Inverter1+0x288>)
 8001b5c:	f001 fd1a 	bl	8003594 <HAL_GPIO_ReadPin>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d010      	beq.n	8001b88 <Inverter1+0x190>
 8001b66:	2120      	movs	r1, #32
 8001b68:	4845      	ldr	r0, [pc, #276]	; (8001c80 <Inverter1+0x288>)
 8001b6a:	f001 fd13 	bl	8003594 <HAL_GPIO_ReadPin>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d009      	beq.n	8001b88 <Inverter1+0x190>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001b74:	2140      	movs	r1, #64	; 0x40
 8001b76:	4842      	ldr	r0, [pc, #264]	; (8001c80 <Inverter1+0x288>)
 8001b78:	f001 fd0c 	bl	8003594 <HAL_GPIO_ReadPin>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d102      	bne.n	8001b88 <Inverter1+0x190>
			state1_inv1();
 8001b82:	f7ff faa1 	bl	80010c8 <state1_inv1>
 8001b86:	e077      	b.n	8001c78 <Inverter1+0x280>
		else if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001b88:	2110      	movs	r1, #16
 8001b8a:	483d      	ldr	r0, [pc, #244]	; (8001c80 <Inverter1+0x288>)
 8001b8c:	f001 fd02 	bl	8003594 <HAL_GPIO_ReadPin>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d010      	beq.n	8001bb8 <Inverter1+0x1c0>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001b96:	2120      	movs	r1, #32
 8001b98:	4839      	ldr	r0, [pc, #228]	; (8001c80 <Inverter1+0x288>)
 8001b9a:	f001 fcfb 	bl	8003594 <HAL_GPIO_ReadPin>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d109      	bne.n	8001bb8 <Inverter1+0x1c0>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001ba4:	2140      	movs	r1, #64	; 0x40
 8001ba6:	4836      	ldr	r0, [pc, #216]	; (8001c80 <Inverter1+0x288>)
 8001ba8:	f001 fcf4 	bl	8003594 <HAL_GPIO_ReadPin>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d102      	bne.n	8001bb8 <Inverter1+0x1c0>
			state2_inv1();
 8001bb2:	f7ff faad 	bl	8001110 <state2_inv1>
 8001bb6:	e05f      	b.n	8001c78 <Inverter1+0x280>
		else if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001bb8:	2110      	movs	r1, #16
 8001bba:	4831      	ldr	r0, [pc, #196]	; (8001c80 <Inverter1+0x288>)
 8001bbc:	f001 fcea 	bl	8003594 <HAL_GPIO_ReadPin>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d010      	beq.n	8001be8 <Inverter1+0x1f0>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001bc6:	2120      	movs	r1, #32
 8001bc8:	482d      	ldr	r0, [pc, #180]	; (8001c80 <Inverter1+0x288>)
 8001bca:	f001 fce3 	bl	8003594 <HAL_GPIO_ReadPin>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d109      	bne.n	8001be8 <Inverter1+0x1f0>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001bd4:	2140      	movs	r1, #64	; 0x40
 8001bd6:	482a      	ldr	r0, [pc, #168]	; (8001c80 <Inverter1+0x288>)
 8001bd8:	f001 fcdc 	bl	8003594 <HAL_GPIO_ReadPin>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d002      	beq.n	8001be8 <Inverter1+0x1f0>
			state3_inv1();
 8001be2:	f7ff fab9 	bl	8001158 <state3_inv1>
 8001be6:	e047      	b.n	8001c78 <Inverter1+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001be8:	2110      	movs	r1, #16
 8001bea:	4825      	ldr	r0, [pc, #148]	; (8001c80 <Inverter1+0x288>)
 8001bec:	f001 fcd2 	bl	8003594 <HAL_GPIO_ReadPin>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d110      	bne.n	8001c18 <Inverter1+0x220>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001bf6:	2120      	movs	r1, #32
 8001bf8:	4821      	ldr	r0, [pc, #132]	; (8001c80 <Inverter1+0x288>)
 8001bfa:	f001 fccb 	bl	8003594 <HAL_GPIO_ReadPin>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d109      	bne.n	8001c18 <Inverter1+0x220>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001c04:	2140      	movs	r1, #64	; 0x40
 8001c06:	481e      	ldr	r0, [pc, #120]	; (8001c80 <Inverter1+0x288>)
 8001c08:	f001 fcc4 	bl	8003594 <HAL_GPIO_ReadPin>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d002      	beq.n	8001c18 <Inverter1+0x220>
			state4_inv1();
 8001c12:	f7ff fac5 	bl	80011a0 <state4_inv1>
 8001c16:	e02f      	b.n	8001c78 <Inverter1+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001c18:	2110      	movs	r1, #16
 8001c1a:	4819      	ldr	r0, [pc, #100]	; (8001c80 <Inverter1+0x288>)
 8001c1c:	f001 fcba 	bl	8003594 <HAL_GPIO_ReadPin>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d110      	bne.n	8001c48 <Inverter1+0x250>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001c26:	2120      	movs	r1, #32
 8001c28:	4815      	ldr	r0, [pc, #84]	; (8001c80 <Inverter1+0x288>)
 8001c2a:	f001 fcb3 	bl	8003594 <HAL_GPIO_ReadPin>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d009      	beq.n	8001c48 <Inverter1+0x250>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001c34:	2140      	movs	r1, #64	; 0x40
 8001c36:	4812      	ldr	r0, [pc, #72]	; (8001c80 <Inverter1+0x288>)
 8001c38:	f001 fcac 	bl	8003594 <HAL_GPIO_ReadPin>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d002      	beq.n	8001c48 <Inverter1+0x250>
			state5_inv1();
 8001c42:	f7ff fad1 	bl	80011e8 <state5_inv1>
 8001c46:	e017      	b.n	8001c78 <Inverter1+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001c48:	2110      	movs	r1, #16
 8001c4a:	480d      	ldr	r0, [pc, #52]	; (8001c80 <Inverter1+0x288>)
 8001c4c:	f001 fca2 	bl	8003594 <HAL_GPIO_ReadPin>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d110      	bne.n	8001c78 <Inverter1+0x280>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001c56:	2120      	movs	r1, #32
 8001c58:	4809      	ldr	r0, [pc, #36]	; (8001c80 <Inverter1+0x288>)
 8001c5a:	f001 fc9b 	bl	8003594 <HAL_GPIO_ReadPin>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d009      	beq.n	8001c78 <Inverter1+0x280>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001c64:	2140      	movs	r1, #64	; 0x40
 8001c66:	4806      	ldr	r0, [pc, #24]	; (8001c80 <Inverter1+0x288>)
 8001c68:	f001 fc94 	bl	8003594 <HAL_GPIO_ReadPin>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d102      	bne.n	8001c78 <Inverter1+0x280>
			state6_inv1();
 8001c72:	f7ff fadd 	bl	8001230 <state6_inv1>
}
 8001c76:	e7ff      	b.n	8001c78 <Inverter1+0x280>
 8001c78:	bf00      	nop
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	48000400 	.word	0x48000400
 8001c84:	2000028c 	.word	0x2000028c

08001c88 <Inverter3>:
void Inverter3(uint8_t inv_mode) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	71fb      	strb	r3, [r7, #7]
	if (inv_mode == 1) {
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d102      	bne.n	8001c9e <Inverter3+0x16>
		stateOff_inv3();
 8001c98:	f7ff fd40 	bl	800171c <stateOff_inv3>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
			state6_inv3();
		}
	}
}
 8001c9c:	e134      	b.n	8001f08 <Inverter3+0x280>
	else if (inv_mode == 2) {
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d102      	bne.n	8001caa <Inverter3+0x22>
		state0_inv3();
 8001ca4:	f7ff fc34 	bl	8001510 <state0_inv3>
}
 8001ca8:	e12e      	b.n	8001f08 <Inverter3+0x280>
	else if (inv_mode == 3) {
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	2b03      	cmp	r3, #3
 8001cae:	f040 8093 	bne.w	8001dd8 <Inverter3+0x150>
		if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin) && HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001cb2:	2110      	movs	r1, #16
 8001cb4:	4896      	ldr	r0, [pc, #600]	; (8001f10 <Inverter3+0x288>)
 8001cb6:	f001 fc6d 	bl	8003594 <HAL_GPIO_ReadPin>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d010      	beq.n	8001ce2 <Inverter3+0x5a>
 8001cc0:	2120      	movs	r1, #32
 8001cc2:	4893      	ldr	r0, [pc, #588]	; (8001f10 <Inverter3+0x288>)
 8001cc4:	f001 fc66 	bl	8003594 <HAL_GPIO_ReadPin>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d009      	beq.n	8001ce2 <Inverter3+0x5a>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001cce:	2140      	movs	r1, #64	; 0x40
 8001cd0:	488f      	ldr	r0, [pc, #572]	; (8001f10 <Inverter3+0x288>)
 8001cd2:	f001 fc5f 	bl	8003594 <HAL_GPIO_ReadPin>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d102      	bne.n	8001ce2 <Inverter3+0x5a>
			state1_inv3();
 8001cdc:	f7ff fc3a 	bl	8001554 <state1_inv3>
 8001ce0:	e112      	b.n	8001f08 <Inverter3+0x280>
		else if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001ce2:	2110      	movs	r1, #16
 8001ce4:	488a      	ldr	r0, [pc, #552]	; (8001f10 <Inverter3+0x288>)
 8001ce6:	f001 fc55 	bl	8003594 <HAL_GPIO_ReadPin>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d010      	beq.n	8001d12 <Inverter3+0x8a>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001cf0:	2120      	movs	r1, #32
 8001cf2:	4887      	ldr	r0, [pc, #540]	; (8001f10 <Inverter3+0x288>)
 8001cf4:	f001 fc4e 	bl	8003594 <HAL_GPIO_ReadPin>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d109      	bne.n	8001d12 <Inverter3+0x8a>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001cfe:	2140      	movs	r1, #64	; 0x40
 8001d00:	4883      	ldr	r0, [pc, #524]	; (8001f10 <Inverter3+0x288>)
 8001d02:	f001 fc47 	bl	8003594 <HAL_GPIO_ReadPin>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d102      	bne.n	8001d12 <Inverter3+0x8a>
			state2_inv3();
 8001d0c:	f7ff fc48 	bl	80015a0 <state2_inv3>
 8001d10:	e0fa      	b.n	8001f08 <Inverter3+0x280>
		else if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001d12:	2110      	movs	r1, #16
 8001d14:	487e      	ldr	r0, [pc, #504]	; (8001f10 <Inverter3+0x288>)
 8001d16:	f001 fc3d 	bl	8003594 <HAL_GPIO_ReadPin>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d010      	beq.n	8001d42 <Inverter3+0xba>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001d20:	2120      	movs	r1, #32
 8001d22:	487b      	ldr	r0, [pc, #492]	; (8001f10 <Inverter3+0x288>)
 8001d24:	f001 fc36 	bl	8003594 <HAL_GPIO_ReadPin>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d109      	bne.n	8001d42 <Inverter3+0xba>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001d2e:	2140      	movs	r1, #64	; 0x40
 8001d30:	4877      	ldr	r0, [pc, #476]	; (8001f10 <Inverter3+0x288>)
 8001d32:	f001 fc2f 	bl	8003594 <HAL_GPIO_ReadPin>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <Inverter3+0xba>
			state3_inv3();
 8001d3c:	f7ff fc56 	bl	80015ec <state3_inv3>
 8001d40:	e0e2      	b.n	8001f08 <Inverter3+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001d42:	2110      	movs	r1, #16
 8001d44:	4872      	ldr	r0, [pc, #456]	; (8001f10 <Inverter3+0x288>)
 8001d46:	f001 fc25 	bl	8003594 <HAL_GPIO_ReadPin>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d110      	bne.n	8001d72 <Inverter3+0xea>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001d50:	2120      	movs	r1, #32
 8001d52:	486f      	ldr	r0, [pc, #444]	; (8001f10 <Inverter3+0x288>)
 8001d54:	f001 fc1e 	bl	8003594 <HAL_GPIO_ReadPin>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d109      	bne.n	8001d72 <Inverter3+0xea>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001d5e:	2140      	movs	r1, #64	; 0x40
 8001d60:	486b      	ldr	r0, [pc, #428]	; (8001f10 <Inverter3+0x288>)
 8001d62:	f001 fc17 	bl	8003594 <HAL_GPIO_ReadPin>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d002      	beq.n	8001d72 <Inverter3+0xea>
			state4_inv3();
 8001d6c:	f7ff fc64 	bl	8001638 <state4_inv3>
 8001d70:	e0ca      	b.n	8001f08 <Inverter3+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001d72:	2110      	movs	r1, #16
 8001d74:	4866      	ldr	r0, [pc, #408]	; (8001f10 <Inverter3+0x288>)
 8001d76:	f001 fc0d 	bl	8003594 <HAL_GPIO_ReadPin>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d110      	bne.n	8001da2 <Inverter3+0x11a>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001d80:	2120      	movs	r1, #32
 8001d82:	4863      	ldr	r0, [pc, #396]	; (8001f10 <Inverter3+0x288>)
 8001d84:	f001 fc06 	bl	8003594 <HAL_GPIO_ReadPin>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d009      	beq.n	8001da2 <Inverter3+0x11a>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001d8e:	2140      	movs	r1, #64	; 0x40
 8001d90:	485f      	ldr	r0, [pc, #380]	; (8001f10 <Inverter3+0x288>)
 8001d92:	f001 fbff 	bl	8003594 <HAL_GPIO_ReadPin>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d002      	beq.n	8001da2 <Inverter3+0x11a>
			state5_inv3();
 8001d9c:	f7ff fc72 	bl	8001684 <state5_inv3>
 8001da0:	e0b2      	b.n	8001f08 <Inverter3+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001da2:	2110      	movs	r1, #16
 8001da4:	485a      	ldr	r0, [pc, #360]	; (8001f10 <Inverter3+0x288>)
 8001da6:	f001 fbf5 	bl	8003594 <HAL_GPIO_ReadPin>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f040 80ab 	bne.w	8001f08 <Inverter3+0x280>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001db2:	2120      	movs	r1, #32
 8001db4:	4856      	ldr	r0, [pc, #344]	; (8001f10 <Inverter3+0x288>)
 8001db6:	f001 fbed 	bl	8003594 <HAL_GPIO_ReadPin>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	f000 80a3 	beq.w	8001f08 <Inverter3+0x280>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001dc2:	2140      	movs	r1, #64	; 0x40
 8001dc4:	4852      	ldr	r0, [pc, #328]	; (8001f10 <Inverter3+0x288>)
 8001dc6:	f001 fbe5 	bl	8003594 <HAL_GPIO_ReadPin>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f040 809b 	bne.w	8001f08 <Inverter3+0x280>
			state6_inv3();
 8001dd2:	f7ff fc7d 	bl	80016d0 <state6_inv3>
}
 8001dd6:	e097      	b.n	8001f08 <Inverter3+0x280>
		else if (inv_mode == 4) {
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	f040 8094 	bne.w	8001f08 <Inverter3+0x280>
			PWM3 = 4095;
 8001de0:	4b4c      	ldr	r3, [pc, #304]	; (8001f14 <Inverter3+0x28c>)
 8001de2:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001de6:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin) && HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001de8:	2110      	movs	r1, #16
 8001dea:	4849      	ldr	r0, [pc, #292]	; (8001f10 <Inverter3+0x288>)
 8001dec:	f001 fbd2 	bl	8003594 <HAL_GPIO_ReadPin>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d010      	beq.n	8001e18 <Inverter3+0x190>
 8001df6:	2120      	movs	r1, #32
 8001df8:	4845      	ldr	r0, [pc, #276]	; (8001f10 <Inverter3+0x288>)
 8001dfa:	f001 fbcb 	bl	8003594 <HAL_GPIO_ReadPin>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d009      	beq.n	8001e18 <Inverter3+0x190>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001e04:	2140      	movs	r1, #64	; 0x40
 8001e06:	4842      	ldr	r0, [pc, #264]	; (8001f10 <Inverter3+0x288>)
 8001e08:	f001 fbc4 	bl	8003594 <HAL_GPIO_ReadPin>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d102      	bne.n	8001e18 <Inverter3+0x190>
			state1_inv3();
 8001e12:	f7ff fb9f 	bl	8001554 <state1_inv3>
 8001e16:	e077      	b.n	8001f08 <Inverter3+0x280>
		else if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001e18:	2110      	movs	r1, #16
 8001e1a:	483d      	ldr	r0, [pc, #244]	; (8001f10 <Inverter3+0x288>)
 8001e1c:	f001 fbba 	bl	8003594 <HAL_GPIO_ReadPin>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d010      	beq.n	8001e48 <Inverter3+0x1c0>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001e26:	2120      	movs	r1, #32
 8001e28:	4839      	ldr	r0, [pc, #228]	; (8001f10 <Inverter3+0x288>)
 8001e2a:	f001 fbb3 	bl	8003594 <HAL_GPIO_ReadPin>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d109      	bne.n	8001e48 <Inverter3+0x1c0>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001e34:	2140      	movs	r1, #64	; 0x40
 8001e36:	4836      	ldr	r0, [pc, #216]	; (8001f10 <Inverter3+0x288>)
 8001e38:	f001 fbac 	bl	8003594 <HAL_GPIO_ReadPin>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d102      	bne.n	8001e48 <Inverter3+0x1c0>
			state2_inv3();
 8001e42:	f7ff fbad 	bl	80015a0 <state2_inv3>
 8001e46:	e05f      	b.n	8001f08 <Inverter3+0x280>
		else if (HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001e48:	2110      	movs	r1, #16
 8001e4a:	4831      	ldr	r0, [pc, #196]	; (8001f10 <Inverter3+0x288>)
 8001e4c:	f001 fba2 	bl	8003594 <HAL_GPIO_ReadPin>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d010      	beq.n	8001e78 <Inverter3+0x1f0>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001e56:	2120      	movs	r1, #32
 8001e58:	482d      	ldr	r0, [pc, #180]	; (8001f10 <Inverter3+0x288>)
 8001e5a:	f001 fb9b 	bl	8003594 <HAL_GPIO_ReadPin>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d109      	bne.n	8001e78 <Inverter3+0x1f0>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001e64:	2140      	movs	r1, #64	; 0x40
 8001e66:	482a      	ldr	r0, [pc, #168]	; (8001f10 <Inverter3+0x288>)
 8001e68:	f001 fb94 	bl	8003594 <HAL_GPIO_ReadPin>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d002      	beq.n	8001e78 <Inverter3+0x1f0>
			state3_inv3();
 8001e72:	f7ff fbbb 	bl	80015ec <state3_inv3>
 8001e76:	e047      	b.n	8001f08 <Inverter3+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001e78:	2110      	movs	r1, #16
 8001e7a:	4825      	ldr	r0, [pc, #148]	; (8001f10 <Inverter3+0x288>)
 8001e7c:	f001 fb8a 	bl	8003594 <HAL_GPIO_ReadPin>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d110      	bne.n	8001ea8 <Inverter3+0x220>
				&& !HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001e86:	2120      	movs	r1, #32
 8001e88:	4821      	ldr	r0, [pc, #132]	; (8001f10 <Inverter3+0x288>)
 8001e8a:	f001 fb83 	bl	8003594 <HAL_GPIO_ReadPin>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d109      	bne.n	8001ea8 <Inverter3+0x220>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001e94:	2140      	movs	r1, #64	; 0x40
 8001e96:	481e      	ldr	r0, [pc, #120]	; (8001f10 <Inverter3+0x288>)
 8001e98:	f001 fb7c 	bl	8003594 <HAL_GPIO_ReadPin>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d002      	beq.n	8001ea8 <Inverter3+0x220>
			state4_inv3();
 8001ea2:	f7ff fbc9 	bl	8001638 <state4_inv3>
 8001ea6:	e02f      	b.n	8001f08 <Inverter3+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001ea8:	2110      	movs	r1, #16
 8001eaa:	4819      	ldr	r0, [pc, #100]	; (8001f10 <Inverter3+0x288>)
 8001eac:	f001 fb72 	bl	8003594 <HAL_GPIO_ReadPin>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d110      	bne.n	8001ed8 <Inverter3+0x250>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001eb6:	2120      	movs	r1, #32
 8001eb8:	4815      	ldr	r0, [pc, #84]	; (8001f10 <Inverter3+0x288>)
 8001eba:	f001 fb6b 	bl	8003594 <HAL_GPIO_ReadPin>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d009      	beq.n	8001ed8 <Inverter3+0x250>
				&& HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001ec4:	2140      	movs	r1, #64	; 0x40
 8001ec6:	4812      	ldr	r0, [pc, #72]	; (8001f10 <Inverter3+0x288>)
 8001ec8:	f001 fb64 	bl	8003594 <HAL_GPIO_ReadPin>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d002      	beq.n	8001ed8 <Inverter3+0x250>
			state5_inv3();
 8001ed2:	f7ff fbd7 	bl	8001684 <state5_inv3>
 8001ed6:	e017      	b.n	8001f08 <Inverter3+0x280>
		else if (!HAL_GPIO_ReadPin(GPIOB, HS1_Pin)
 8001ed8:	2110      	movs	r1, #16
 8001eda:	480d      	ldr	r0, [pc, #52]	; (8001f10 <Inverter3+0x288>)
 8001edc:	f001 fb5a 	bl	8003594 <HAL_GPIO_ReadPin>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d110      	bne.n	8001f08 <Inverter3+0x280>
				&& HAL_GPIO_ReadPin(GPIOB, HS2_Pin)
 8001ee6:	2120      	movs	r1, #32
 8001ee8:	4809      	ldr	r0, [pc, #36]	; (8001f10 <Inverter3+0x288>)
 8001eea:	f001 fb53 	bl	8003594 <HAL_GPIO_ReadPin>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d009      	beq.n	8001f08 <Inverter3+0x280>
				&& !HAL_GPIO_ReadPin(GPIOB, HS3_Pin)) {
 8001ef4:	2140      	movs	r1, #64	; 0x40
 8001ef6:	4806      	ldr	r0, [pc, #24]	; (8001f10 <Inverter3+0x288>)
 8001ef8:	f001 fb4c 	bl	8003594 <HAL_GPIO_ReadPin>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d102      	bne.n	8001f08 <Inverter3+0x280>
			state6_inv3();
 8001f02:	f7ff fbe5 	bl	80016d0 <state6_inv3>
}
 8001f06:	e7ff      	b.n	8001f08 <Inverter3+0x280>
 8001f08:	bf00      	nop
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	48000400 	.word	0x48000400
 8001f14:	20000290 	.word	0x20000290

08001f18 <Inverter2>:
void Inverter2(uint8_t inv_mode) {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	71fb      	strb	r3, [r7, #7]
	if (inv_mode == 1) {
 8001f22:	79fb      	ldrb	r3, [r7, #7]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d102      	bne.n	8001f2e <Inverter2+0x16>
		stateOff_inv2();
 8001f28:	f7ff face 	bl	80014c8 <stateOff_inv2>
				&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
				&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
			state6_inv2();
		}
	}
}
 8001f2c:	e158      	b.n	80021e0 <Inverter2+0x2c8>
	else if (inv_mode == 2) {
 8001f2e:	79fb      	ldrb	r3, [r7, #7]
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d102      	bne.n	8001f3a <Inverter2+0x22>
		state0_inv2();
 8001f34:	f7ff f9c0 	bl	80012b8 <state0_inv2>
}
 8001f38:	e152      	b.n	80021e0 <Inverter2+0x2c8>
	else if (inv_mode == 3) {
 8001f3a:	79fb      	ldrb	r3, [r7, #7]
 8001f3c:	2b03      	cmp	r3, #3
 8001f3e:	f040 80a5 	bne.w	800208c <Inverter2+0x174>
		if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8001f42:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f46:	48a8      	ldr	r0, [pc, #672]	; (80021e8 <Inverter2+0x2d0>)
 8001f48:	f001 fb24 	bl	8003594 <HAL_GPIO_ReadPin>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d012      	beq.n	8001f78 <Inverter2+0x60>
					&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8001f52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f56:	48a4      	ldr	r0, [pc, #656]	; (80021e8 <Inverter2+0x2d0>)
 8001f58:	f001 fb1c 	bl	8003594 <HAL_GPIO_ReadPin>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00a      	beq.n	8001f78 <Inverter2+0x60>
					&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8001f62:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f66:	48a0      	ldr	r0, [pc, #640]	; (80021e8 <Inverter2+0x2d0>)
 8001f68:	f001 fb14 	bl	8003594 <HAL_GPIO_ReadPin>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d102      	bne.n	8001f78 <Inverter2+0x60>
				state1_inv2();
 8001f72:	f7ff f9c5 	bl	8001300 <state1_inv2>
 8001f76:	e133      	b.n	80021e0 <Inverter2+0x2c8>
			else if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8001f78:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f7c:	489a      	ldr	r0, [pc, #616]	; (80021e8 <Inverter2+0x2d0>)
 8001f7e:	f001 fb09 	bl	8003594 <HAL_GPIO_ReadPin>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d012      	beq.n	8001fae <Inverter2+0x96>
					&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8001f88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001f8c:	4896      	ldr	r0, [pc, #600]	; (80021e8 <Inverter2+0x2d0>)
 8001f8e:	f001 fb01 	bl	8003594 <HAL_GPIO_ReadPin>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10a      	bne.n	8001fae <Inverter2+0x96>
					&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8001f98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f9c:	4892      	ldr	r0, [pc, #584]	; (80021e8 <Inverter2+0x2d0>)
 8001f9e:	f001 faf9 	bl	8003594 <HAL_GPIO_ReadPin>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d102      	bne.n	8001fae <Inverter2+0x96>
				state2_inv2();
 8001fa8:	f7ff f9d0 	bl	800134c <state2_inv2>
 8001fac:	e118      	b.n	80021e0 <Inverter2+0x2c8>
			else if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8001fae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fb2:	488d      	ldr	r0, [pc, #564]	; (80021e8 <Inverter2+0x2d0>)
 8001fb4:	f001 faee 	bl	8003594 <HAL_GPIO_ReadPin>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d012      	beq.n	8001fe4 <Inverter2+0xcc>
					&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8001fbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fc2:	4889      	ldr	r0, [pc, #548]	; (80021e8 <Inverter2+0x2d0>)
 8001fc4:	f001 fae6 	bl	8003594 <HAL_GPIO_ReadPin>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d10a      	bne.n	8001fe4 <Inverter2+0xcc>
					&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8001fce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fd2:	4885      	ldr	r0, [pc, #532]	; (80021e8 <Inverter2+0x2d0>)
 8001fd4:	f001 fade 	bl	8003594 <HAL_GPIO_ReadPin>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d002      	beq.n	8001fe4 <Inverter2+0xcc>
				state3_inv2();
 8001fde:	f7ff f9db 	bl	8001398 <state3_inv2>
 8001fe2:	e0fd      	b.n	80021e0 <Inverter2+0x2c8>
			else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8001fe4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fe8:	487f      	ldr	r0, [pc, #508]	; (80021e8 <Inverter2+0x2d0>)
 8001fea:	f001 fad3 	bl	8003594 <HAL_GPIO_ReadPin>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d112      	bne.n	800201a <Inverter2+0x102>
					&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8001ff4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001ff8:	487b      	ldr	r0, [pc, #492]	; (80021e8 <Inverter2+0x2d0>)
 8001ffa:	f001 facb 	bl	8003594 <HAL_GPIO_ReadPin>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10a      	bne.n	800201a <Inverter2+0x102>
					&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8002004:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002008:	4877      	ldr	r0, [pc, #476]	; (80021e8 <Inverter2+0x2d0>)
 800200a:	f001 fac3 	bl	8003594 <HAL_GPIO_ReadPin>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d002      	beq.n	800201a <Inverter2+0x102>
				state4_inv2();
 8002014:	f7ff f9e6 	bl	80013e4 <state4_inv2>
 8002018:	e0e2      	b.n	80021e0 <Inverter2+0x2c8>
			else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 800201a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800201e:	4872      	ldr	r0, [pc, #456]	; (80021e8 <Inverter2+0x2d0>)
 8002020:	f001 fab8 	bl	8003594 <HAL_GPIO_ReadPin>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d112      	bne.n	8002050 <Inverter2+0x138>
					&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 800202a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800202e:	486e      	ldr	r0, [pc, #440]	; (80021e8 <Inverter2+0x2d0>)
 8002030:	f001 fab0 	bl	8003594 <HAL_GPIO_ReadPin>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00a      	beq.n	8002050 <Inverter2+0x138>
					&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 800203a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800203e:	486a      	ldr	r0, [pc, #424]	; (80021e8 <Inverter2+0x2d0>)
 8002040:	f001 faa8 	bl	8003594 <HAL_GPIO_ReadPin>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d002      	beq.n	8002050 <Inverter2+0x138>
				state5_inv2();
 800204a:	f7ff f9f1 	bl	8001430 <state5_inv2>
 800204e:	e0c7      	b.n	80021e0 <Inverter2+0x2c8>
			else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8002050:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002054:	4864      	ldr	r0, [pc, #400]	; (80021e8 <Inverter2+0x2d0>)
 8002056:	f001 fa9d 	bl	8003594 <HAL_GPIO_ReadPin>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	f040 80bf 	bne.w	80021e0 <Inverter2+0x2c8>
					&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8002062:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002066:	4860      	ldr	r0, [pc, #384]	; (80021e8 <Inverter2+0x2d0>)
 8002068:	f001 fa94 	bl	8003594 <HAL_GPIO_ReadPin>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 80b6 	beq.w	80021e0 <Inverter2+0x2c8>
					&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8002074:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002078:	485b      	ldr	r0, [pc, #364]	; (80021e8 <Inverter2+0x2d0>)
 800207a:	f001 fa8b 	bl	8003594 <HAL_GPIO_ReadPin>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	f040 80ad 	bne.w	80021e0 <Inverter2+0x2c8>
				state6_inv2();
 8002086:	f7ff f9f9 	bl	800147c <state6_inv2>
}
 800208a:	e0a9      	b.n	80021e0 <Inverter2+0x2c8>
	else if (inv_mode == 4) {
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	2b04      	cmp	r3, #4
 8002090:	f040 80a6 	bne.w	80021e0 <Inverter2+0x2c8>
		PWM2 = 4095;
 8002094:	4b55      	ldr	r3, [pc, #340]	; (80021ec <Inverter2+0x2d4>)
 8002096:	f640 72ff 	movw	r2, #4095	; 0xfff
 800209a:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin) && HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 800209c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020a0:	4851      	ldr	r0, [pc, #324]	; (80021e8 <Inverter2+0x2d0>)
 80020a2:	f001 fa77 	bl	8003594 <HAL_GPIO_ReadPin>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d012      	beq.n	80020d2 <Inverter2+0x1ba>
 80020ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020b0:	484d      	ldr	r0, [pc, #308]	; (80021e8 <Inverter2+0x2d0>)
 80020b2:	f001 fa6f 	bl	8003594 <HAL_GPIO_ReadPin>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00a      	beq.n	80020d2 <Inverter2+0x1ba>
				&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 80020bc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020c0:	4849      	ldr	r0, [pc, #292]	; (80021e8 <Inverter2+0x2d0>)
 80020c2:	f001 fa67 	bl	8003594 <HAL_GPIO_ReadPin>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d102      	bne.n	80020d2 <Inverter2+0x1ba>
			state1_inv2();
 80020cc:	f7ff f918 	bl	8001300 <state1_inv2>
 80020d0:	e086      	b.n	80021e0 <Inverter2+0x2c8>
		else if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 80020d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020d6:	4844      	ldr	r0, [pc, #272]	; (80021e8 <Inverter2+0x2d0>)
 80020d8:	f001 fa5c 	bl	8003594 <HAL_GPIO_ReadPin>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d012      	beq.n	8002108 <Inverter2+0x1f0>
				&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 80020e2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020e6:	4840      	ldr	r0, [pc, #256]	; (80021e8 <Inverter2+0x2d0>)
 80020e8:	f001 fa54 	bl	8003594 <HAL_GPIO_ReadPin>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d10a      	bne.n	8002108 <Inverter2+0x1f0>
				&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 80020f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020f6:	483c      	ldr	r0, [pc, #240]	; (80021e8 <Inverter2+0x2d0>)
 80020f8:	f001 fa4c 	bl	8003594 <HAL_GPIO_ReadPin>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d102      	bne.n	8002108 <Inverter2+0x1f0>
			state2_inv2();
 8002102:	f7ff f923 	bl	800134c <state2_inv2>
 8002106:	e06b      	b.n	80021e0 <Inverter2+0x2c8>
		else if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8002108:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800210c:	4836      	ldr	r0, [pc, #216]	; (80021e8 <Inverter2+0x2d0>)
 800210e:	f001 fa41 	bl	8003594 <HAL_GPIO_ReadPin>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d012      	beq.n	800213e <Inverter2+0x226>
				&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8002118:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800211c:	4832      	ldr	r0, [pc, #200]	; (80021e8 <Inverter2+0x2d0>)
 800211e:	f001 fa39 	bl	8003594 <HAL_GPIO_ReadPin>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d10a      	bne.n	800213e <Inverter2+0x226>
				&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8002128:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800212c:	482e      	ldr	r0, [pc, #184]	; (80021e8 <Inverter2+0x2d0>)
 800212e:	f001 fa31 	bl	8003594 <HAL_GPIO_ReadPin>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d002      	beq.n	800213e <Inverter2+0x226>
			state3_inv2();
 8002138:	f7ff f92e 	bl	8001398 <state3_inv2>
 800213c:	e050      	b.n	80021e0 <Inverter2+0x2c8>
		else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 800213e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002142:	4829      	ldr	r0, [pc, #164]	; (80021e8 <Inverter2+0x2d0>)
 8002144:	f001 fa26 	bl	8003594 <HAL_GPIO_ReadPin>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d112      	bne.n	8002174 <Inverter2+0x25c>
				&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 800214e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002152:	4825      	ldr	r0, [pc, #148]	; (80021e8 <Inverter2+0x2d0>)
 8002154:	f001 fa1e 	bl	8003594 <HAL_GPIO_ReadPin>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10a      	bne.n	8002174 <Inverter2+0x25c>
				&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 800215e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002162:	4821      	ldr	r0, [pc, #132]	; (80021e8 <Inverter2+0x2d0>)
 8002164:	f001 fa16 	bl	8003594 <HAL_GPIO_ReadPin>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d002      	beq.n	8002174 <Inverter2+0x25c>
			state4_inv2();
 800216e:	f7ff f939 	bl	80013e4 <state4_inv2>
 8002172:	e035      	b.n	80021e0 <Inverter2+0x2c8>
		else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8002174:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002178:	481b      	ldr	r0, [pc, #108]	; (80021e8 <Inverter2+0x2d0>)
 800217a:	f001 fa0b 	bl	8003594 <HAL_GPIO_ReadPin>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d112      	bne.n	80021aa <Inverter2+0x292>
				&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8002184:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002188:	4817      	ldr	r0, [pc, #92]	; (80021e8 <Inverter2+0x2d0>)
 800218a:	f001 fa03 	bl	8003594 <HAL_GPIO_ReadPin>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d00a      	beq.n	80021aa <Inverter2+0x292>
				&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8002194:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002198:	4813      	ldr	r0, [pc, #76]	; (80021e8 <Inverter2+0x2d0>)
 800219a:	f001 f9fb 	bl	8003594 <HAL_GPIO_ReadPin>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d002      	beq.n	80021aa <Inverter2+0x292>
			state5_inv2();
 80021a4:	f7ff f944 	bl	8001430 <state5_inv2>
 80021a8:	e01a      	b.n	80021e0 <Inverter2+0x2c8>
		else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 80021aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021ae:	480e      	ldr	r0, [pc, #56]	; (80021e8 <Inverter2+0x2d0>)
 80021b0:	f001 f9f0 	bl	8003594 <HAL_GPIO_ReadPin>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d112      	bne.n	80021e0 <Inverter2+0x2c8>
				&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 80021ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021be:	480a      	ldr	r0, [pc, #40]	; (80021e8 <Inverter2+0x2d0>)
 80021c0:	f001 f9e8 	bl	8003594 <HAL_GPIO_ReadPin>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d00a      	beq.n	80021e0 <Inverter2+0x2c8>
				&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 80021ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021ce:	4806      	ldr	r0, [pc, #24]	; (80021e8 <Inverter2+0x2d0>)
 80021d0:	f001 f9e0 	bl	8003594 <HAL_GPIO_ReadPin>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d102      	bne.n	80021e0 <Inverter2+0x2c8>
			state6_inv2();
 80021da:	f7ff f94f 	bl	800147c <state6_inv2>
}
 80021de:	e7ff      	b.n	80021e0 <Inverter2+0x2c8>
 80021e0:	bf00      	nop
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	48000800 	.word	0x48000800
 80021ec:	2000028e 	.word	0x2000028e

080021f0 <Inverter4>:
void Inverter4(uint8_t inv_mode) {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	71fb      	strb	r3, [r7, #7]
	if (inv_mode == 1) {
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d102      	bne.n	8002206 <Inverter4+0x16>
		stateOff_inv4();
 8002200:	f7ff fbd2 	bl	80019a8 <stateOff_inv4>
				&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
				&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
			state6_inv4();
		}
	}
}
 8002204:	e158      	b.n	80024b8 <Inverter4+0x2c8>
	else if (inv_mode == 2) {
 8002206:	79fb      	ldrb	r3, [r7, #7]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d102      	bne.n	8002212 <Inverter4+0x22>
		state0_inv4();
 800220c:	f7ff faa8 	bl	8001760 <state0_inv4>
}
 8002210:	e152      	b.n	80024b8 <Inverter4+0x2c8>
	else if (inv_mode == 3) {
 8002212:	79fb      	ldrb	r3, [r7, #7]
 8002214:	2b03      	cmp	r3, #3
 8002216:	f040 80a5 	bne.w	8002364 <Inverter4+0x174>
		if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 800221a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800221e:	48a8      	ldr	r0, [pc, #672]	; (80024c0 <Inverter4+0x2d0>)
 8002220:	f001 f9b8 	bl	8003594 <HAL_GPIO_ReadPin>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d012      	beq.n	8002250 <Inverter4+0x60>
					&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 800222a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800222e:	48a4      	ldr	r0, [pc, #656]	; (80024c0 <Inverter4+0x2d0>)
 8002230:	f001 f9b0 	bl	8003594 <HAL_GPIO_ReadPin>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00a      	beq.n	8002250 <Inverter4+0x60>
					&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 800223a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800223e:	48a0      	ldr	r0, [pc, #640]	; (80024c0 <Inverter4+0x2d0>)
 8002240:	f001 f9a8 	bl	8003594 <HAL_GPIO_ReadPin>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d102      	bne.n	8002250 <Inverter4+0x60>
				state1_inv4();
 800224a:	f7ff fab1 	bl	80017b0 <state1_inv4>
 800224e:	e133      	b.n	80024b8 <Inverter4+0x2c8>
			else if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8002250:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002254:	489a      	ldr	r0, [pc, #616]	; (80024c0 <Inverter4+0x2d0>)
 8002256:	f001 f99d 	bl	8003594 <HAL_GPIO_ReadPin>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d012      	beq.n	8002286 <Inverter4+0x96>
					&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8002260:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002264:	4896      	ldr	r0, [pc, #600]	; (80024c0 <Inverter4+0x2d0>)
 8002266:	f001 f995 	bl	8003594 <HAL_GPIO_ReadPin>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d10a      	bne.n	8002286 <Inverter4+0x96>
					&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8002270:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002274:	4892      	ldr	r0, [pc, #584]	; (80024c0 <Inverter4+0x2d0>)
 8002276:	f001 f98d 	bl	8003594 <HAL_GPIO_ReadPin>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d102      	bne.n	8002286 <Inverter4+0x96>
				state2_inv4();
 8002280:	f7ff fac0 	bl	8001804 <state2_inv4>
 8002284:	e118      	b.n	80024b8 <Inverter4+0x2c8>
			else if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8002286:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800228a:	488d      	ldr	r0, [pc, #564]	; (80024c0 <Inverter4+0x2d0>)
 800228c:	f001 f982 	bl	8003594 <HAL_GPIO_ReadPin>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d012      	beq.n	80022bc <Inverter4+0xcc>
					&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8002296:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800229a:	4889      	ldr	r0, [pc, #548]	; (80024c0 <Inverter4+0x2d0>)
 800229c:	f001 f97a 	bl	8003594 <HAL_GPIO_ReadPin>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d10a      	bne.n	80022bc <Inverter4+0xcc>
					&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 80022a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022aa:	4885      	ldr	r0, [pc, #532]	; (80024c0 <Inverter4+0x2d0>)
 80022ac:	f001 f972 	bl	8003594 <HAL_GPIO_ReadPin>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <Inverter4+0xcc>
				state3_inv4();
 80022b6:	f7ff facf 	bl	8001858 <state3_inv4>
 80022ba:	e0fd      	b.n	80024b8 <Inverter4+0x2c8>
			else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 80022bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022c0:	487f      	ldr	r0, [pc, #508]	; (80024c0 <Inverter4+0x2d0>)
 80022c2:	f001 f967 	bl	8003594 <HAL_GPIO_ReadPin>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d112      	bne.n	80022f2 <Inverter4+0x102>
					&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 80022cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022d0:	487b      	ldr	r0, [pc, #492]	; (80024c0 <Inverter4+0x2d0>)
 80022d2:	f001 f95f 	bl	8003594 <HAL_GPIO_ReadPin>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d10a      	bne.n	80022f2 <Inverter4+0x102>
					&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 80022dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022e0:	4877      	ldr	r0, [pc, #476]	; (80024c0 <Inverter4+0x2d0>)
 80022e2:	f001 f957 	bl	8003594 <HAL_GPIO_ReadPin>
 80022e6:	4603      	mov	r3, r0
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <Inverter4+0x102>
				state4_inv4();
 80022ec:	f7ff fade 	bl	80018ac <state4_inv4>
 80022f0:	e0e2      	b.n	80024b8 <Inverter4+0x2c8>
			else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 80022f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022f6:	4872      	ldr	r0, [pc, #456]	; (80024c0 <Inverter4+0x2d0>)
 80022f8:	f001 f94c 	bl	8003594 <HAL_GPIO_ReadPin>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d112      	bne.n	8002328 <Inverter4+0x138>
					&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8002302:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002306:	486e      	ldr	r0, [pc, #440]	; (80024c0 <Inverter4+0x2d0>)
 8002308:	f001 f944 	bl	8003594 <HAL_GPIO_ReadPin>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d00a      	beq.n	8002328 <Inverter4+0x138>
					&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8002312:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002316:	486a      	ldr	r0, [pc, #424]	; (80024c0 <Inverter4+0x2d0>)
 8002318:	f001 f93c 	bl	8003594 <HAL_GPIO_ReadPin>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d002      	beq.n	8002328 <Inverter4+0x138>
				state5_inv4();
 8002322:	f7ff faed 	bl	8001900 <state5_inv4>
 8002326:	e0c7      	b.n	80024b8 <Inverter4+0x2c8>
			else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8002328:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800232c:	4864      	ldr	r0, [pc, #400]	; (80024c0 <Inverter4+0x2d0>)
 800232e:	f001 f931 	bl	8003594 <HAL_GPIO_ReadPin>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	f040 80bf 	bne.w	80024b8 <Inverter4+0x2c8>
					&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 800233a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800233e:	4860      	ldr	r0, [pc, #384]	; (80024c0 <Inverter4+0x2d0>)
 8002340:	f001 f928 	bl	8003594 <HAL_GPIO_ReadPin>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 80b6 	beq.w	80024b8 <Inverter4+0x2c8>
					&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 800234c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002350:	485b      	ldr	r0, [pc, #364]	; (80024c0 <Inverter4+0x2d0>)
 8002352:	f001 f91f 	bl	8003594 <HAL_GPIO_ReadPin>
 8002356:	4603      	mov	r3, r0
 8002358:	2b00      	cmp	r3, #0
 800235a:	f040 80ad 	bne.w	80024b8 <Inverter4+0x2c8>
				state6_inv4();
 800235e:	f7ff faf9 	bl	8001954 <state6_inv4>
}
 8002362:	e0a9      	b.n	80024b8 <Inverter4+0x2c8>
	else if (inv_mode == 4) {
 8002364:	79fb      	ldrb	r3, [r7, #7]
 8002366:	2b04      	cmp	r3, #4
 8002368:	f040 80a6 	bne.w	80024b8 <Inverter4+0x2c8>
		PWM4 = 4095;
 800236c:	4b55      	ldr	r3, [pc, #340]	; (80024c4 <Inverter4+0x2d4>)
 800236e:	f640 72ff 	movw	r2, #4095	; 0xfff
 8002372:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin) && HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8002374:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002378:	4851      	ldr	r0, [pc, #324]	; (80024c0 <Inverter4+0x2d0>)
 800237a:	f001 f90b 	bl	8003594 <HAL_GPIO_ReadPin>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d012      	beq.n	80023aa <Inverter4+0x1ba>
 8002384:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002388:	484d      	ldr	r0, [pc, #308]	; (80024c0 <Inverter4+0x2d0>)
 800238a:	f001 f903 	bl	8003594 <HAL_GPIO_ReadPin>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00a      	beq.n	80023aa <Inverter4+0x1ba>
				&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8002394:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002398:	4849      	ldr	r0, [pc, #292]	; (80024c0 <Inverter4+0x2d0>)
 800239a:	f001 f8fb 	bl	8003594 <HAL_GPIO_ReadPin>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d102      	bne.n	80023aa <Inverter4+0x1ba>
			state1_inv4();
 80023a4:	f7ff fa04 	bl	80017b0 <state1_inv4>
 80023a8:	e086      	b.n	80024b8 <Inverter4+0x2c8>
		else if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 80023aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023ae:	4844      	ldr	r0, [pc, #272]	; (80024c0 <Inverter4+0x2d0>)
 80023b0:	f001 f8f0 	bl	8003594 <HAL_GPIO_ReadPin>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d012      	beq.n	80023e0 <Inverter4+0x1f0>
				&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 80023ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023be:	4840      	ldr	r0, [pc, #256]	; (80024c0 <Inverter4+0x2d0>)
 80023c0:	f001 f8e8 	bl	8003594 <HAL_GPIO_ReadPin>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10a      	bne.n	80023e0 <Inverter4+0x1f0>
				&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 80023ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023ce:	483c      	ldr	r0, [pc, #240]	; (80024c0 <Inverter4+0x2d0>)
 80023d0:	f001 f8e0 	bl	8003594 <HAL_GPIO_ReadPin>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d102      	bne.n	80023e0 <Inverter4+0x1f0>
			state2_inv4();
 80023da:	f7ff fa13 	bl	8001804 <state2_inv4>
 80023de:	e06b      	b.n	80024b8 <Inverter4+0x2c8>
		else if (HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 80023e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023e4:	4836      	ldr	r0, [pc, #216]	; (80024c0 <Inverter4+0x2d0>)
 80023e6:	f001 f8d5 	bl	8003594 <HAL_GPIO_ReadPin>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d012      	beq.n	8002416 <Inverter4+0x226>
				&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 80023f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023f4:	4832      	ldr	r0, [pc, #200]	; (80024c0 <Inverter4+0x2d0>)
 80023f6:	f001 f8cd 	bl	8003594 <HAL_GPIO_ReadPin>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10a      	bne.n	8002416 <Inverter4+0x226>
				&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8002400:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002404:	482e      	ldr	r0, [pc, #184]	; (80024c0 <Inverter4+0x2d0>)
 8002406:	f001 f8c5 	bl	8003594 <HAL_GPIO_ReadPin>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d002      	beq.n	8002416 <Inverter4+0x226>
			state3_inv4();
 8002410:	f7ff fa22 	bl	8001858 <state3_inv4>
 8002414:	e050      	b.n	80024b8 <Inverter4+0x2c8>
		else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8002416:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800241a:	4829      	ldr	r0, [pc, #164]	; (80024c0 <Inverter4+0x2d0>)
 800241c:	f001 f8ba 	bl	8003594 <HAL_GPIO_ReadPin>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d112      	bne.n	800244c <Inverter4+0x25c>
				&& !HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8002426:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800242a:	4825      	ldr	r0, [pc, #148]	; (80024c0 <Inverter4+0x2d0>)
 800242c:	f001 f8b2 	bl	8003594 <HAL_GPIO_ReadPin>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10a      	bne.n	800244c <Inverter4+0x25c>
				&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 8002436:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800243a:	4821      	ldr	r0, [pc, #132]	; (80024c0 <Inverter4+0x2d0>)
 800243c:	f001 f8aa 	bl	8003594 <HAL_GPIO_ReadPin>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d002      	beq.n	800244c <Inverter4+0x25c>
			state4_inv4();
 8002446:	f7ff fa31 	bl	80018ac <state4_inv4>
 800244a:	e035      	b.n	80024b8 <Inverter4+0x2c8>
		else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 800244c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002450:	481b      	ldr	r0, [pc, #108]	; (80024c0 <Inverter4+0x2d0>)
 8002452:	f001 f89f 	bl	8003594 <HAL_GPIO_ReadPin>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d112      	bne.n	8002482 <Inverter4+0x292>
				&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 800245c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002460:	4817      	ldr	r0, [pc, #92]	; (80024c0 <Inverter4+0x2d0>)
 8002462:	f001 f897 	bl	8003594 <HAL_GPIO_ReadPin>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00a      	beq.n	8002482 <Inverter4+0x292>
				&& HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 800246c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002470:	4813      	ldr	r0, [pc, #76]	; (80024c0 <Inverter4+0x2d0>)
 8002472:	f001 f88f 	bl	8003594 <HAL_GPIO_ReadPin>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d002      	beq.n	8002482 <Inverter4+0x292>
			state5_inv4();
 800247c:	f7ff fa40 	bl	8001900 <state5_inv4>
 8002480:	e01a      	b.n	80024b8 <Inverter4+0x2c8>
		else if (!HAL_GPIO_ReadPin(GPIOC, HS4_Pin)
 8002482:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002486:	480e      	ldr	r0, [pc, #56]	; (80024c0 <Inverter4+0x2d0>)
 8002488:	f001 f884 	bl	8003594 <HAL_GPIO_ReadPin>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d112      	bne.n	80024b8 <Inverter4+0x2c8>
				&& HAL_GPIO_ReadPin(GPIOC, HS5_Pin)
 8002492:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002496:	480a      	ldr	r0, [pc, #40]	; (80024c0 <Inverter4+0x2d0>)
 8002498:	f001 f87c 	bl	8003594 <HAL_GPIO_ReadPin>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00a      	beq.n	80024b8 <Inverter4+0x2c8>
				&& !HAL_GPIO_ReadPin(GPIOC, HS6_Pin)) {
 80024a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024a6:	4806      	ldr	r0, [pc, #24]	; (80024c0 <Inverter4+0x2d0>)
 80024a8:	f001 f874 	bl	8003594 <HAL_GPIO_ReadPin>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d102      	bne.n	80024b8 <Inverter4+0x2c8>
			state6_inv4();
 80024b2:	f7ff fa4f 	bl	8001954 <state6_inv4>
}
 80024b6:	e7ff      	b.n	80024b8 <Inverter4+0x2c8>
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	48000800 	.word	0x48000800
 80024c4:	20000292 	.word	0x20000292

080024c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024cc:	b672      	cpsid	i
}
 80024ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024d0:	e7fe      	b.n	80024d0 <Error_Handler+0x8>
	...

080024d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024da:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <HAL_MspInit+0x44>)
 80024dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024de:	4a0e      	ldr	r2, [pc, #56]	; (8002518 <HAL_MspInit+0x44>)
 80024e0:	f043 0301 	orr.w	r3, r3, #1
 80024e4:	6613      	str	r3, [r2, #96]	; 0x60
 80024e6:	4b0c      	ldr	r3, [pc, #48]	; (8002518 <HAL_MspInit+0x44>)
 80024e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	607b      	str	r3, [r7, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024f2:	4b09      	ldr	r3, [pc, #36]	; (8002518 <HAL_MspInit+0x44>)
 80024f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f6:	4a08      	ldr	r2, [pc, #32]	; (8002518 <HAL_MspInit+0x44>)
 80024f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024fc:	6593      	str	r3, [r2, #88]	; 0x58
 80024fe:	4b06      	ldr	r3, [pc, #24]	; (8002518 <HAL_MspInit+0x44>)
 8002500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002506:	603b      	str	r3, [r7, #0]
 8002508:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800250a:	f001 f93b 	bl	8003784 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40021000 	.word	0x40021000

0800251c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b08a      	sub	sp, #40	; 0x28
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002524:	f107 0314 	add.w	r3, r7, #20
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	605a      	str	r2, [r3, #4]
 800252e:	609a      	str	r2, [r3, #8]
 8002530:	60da      	str	r2, [r3, #12]
 8002532:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a15      	ldr	r2, [pc, #84]	; (8002590 <HAL_DAC_MspInit+0x74>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d124      	bne.n	8002588 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800253e:	4b15      	ldr	r3, [pc, #84]	; (8002594 <HAL_DAC_MspInit+0x78>)
 8002540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002542:	4a14      	ldr	r2, [pc, #80]	; (8002594 <HAL_DAC_MspInit+0x78>)
 8002544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800254a:	4b12      	ldr	r3, [pc, #72]	; (8002594 <HAL_DAC_MspInit+0x78>)
 800254c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002552:	613b      	str	r3, [r7, #16]
 8002554:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002556:	4b0f      	ldr	r3, [pc, #60]	; (8002594 <HAL_DAC_MspInit+0x78>)
 8002558:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255a:	4a0e      	ldr	r2, [pc, #56]	; (8002594 <HAL_DAC_MspInit+0x78>)
 800255c:	f043 0301 	orr.w	r3, r3, #1
 8002560:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002562:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <HAL_DAC_MspInit+0x78>)
 8002564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800256e:	2310      	movs	r3, #16
 8002570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002572:	2303      	movs	r3, #3
 8002574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002576:	2300      	movs	r3, #0
 8002578:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800257a:	f107 0314 	add.w	r3, r7, #20
 800257e:	4619      	mov	r1, r3
 8002580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002584:	f000 fe84 	bl	8003290 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002588:	bf00      	nop
 800258a:	3728      	adds	r7, #40	; 0x28
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	50000800 	.word	0x50000800
 8002594:	40021000 	.word	0x40021000

08002598 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b0a0      	sub	sp, #128	; 0x80
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	605a      	str	r2, [r3, #4]
 80025aa:	609a      	str	r2, [r3, #8]
 80025ac:	60da      	str	r2, [r3, #12]
 80025ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025b0:	f107 0318 	add.w	r3, r7, #24
 80025b4:	2254      	movs	r2, #84	; 0x54
 80025b6:	2100      	movs	r1, #0
 80025b8:	4618      	mov	r0, r3
 80025ba:	f004 fc51 	bl	8006e60 <memset>
  if(huart->Instance==LPUART1)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a41      	ldr	r2, [pc, #260]	; (80026c8 <HAL_UART_MspInit+0x130>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d137      	bne.n	8002638 <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80025c8:	2320      	movs	r3, #32
 80025ca:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80025cc:	2300      	movs	r3, #0
 80025ce:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025d0:	f107 0318 	add.w	r3, r7, #24
 80025d4:	4618      	mov	r0, r3
 80025d6:	f001 fe19 	bl	800420c <HAL_RCCEx_PeriphCLKConfig>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80025e0:	f7ff ff72 	bl	80024c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80025e4:	4b39      	ldr	r3, [pc, #228]	; (80026cc <HAL_UART_MspInit+0x134>)
 80025e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e8:	4a38      	ldr	r2, [pc, #224]	; (80026cc <HAL_UART_MspInit+0x134>)
 80025ea:	f043 0301 	orr.w	r3, r3, #1
 80025ee:	65d3      	str	r3, [r2, #92]	; 0x5c
 80025f0:	4b36      	ldr	r3, [pc, #216]	; (80026cc <HAL_UART_MspInit+0x134>)
 80025f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f4:	f003 0301 	and.w	r3, r3, #1
 80025f8:	617b      	str	r3, [r7, #20]
 80025fa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fc:	4b33      	ldr	r3, [pc, #204]	; (80026cc <HAL_UART_MspInit+0x134>)
 80025fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002600:	4a32      	ldr	r2, [pc, #200]	; (80026cc <HAL_UART_MspInit+0x134>)
 8002602:	f043 0301 	orr.w	r3, r3, #1
 8002606:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002608:	4b30      	ldr	r3, [pc, #192]	; (80026cc <HAL_UART_MspInit+0x134>)
 800260a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	613b      	str	r3, [r7, #16]
 8002612:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002614:	230c      	movs	r3, #12
 8002616:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002618:	2302      	movs	r3, #2
 800261a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	2300      	movs	r3, #0
 800261e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002620:	2300      	movs	r3, #0
 8002622:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002624:	230c      	movs	r3, #12
 8002626:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002628:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800262c:	4619      	mov	r1, r3
 800262e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002632:	f000 fe2d 	bl	8003290 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002636:	e042      	b.n	80026be <HAL_UART_MspInit+0x126>
  else if(huart->Instance==USART1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a24      	ldr	r2, [pc, #144]	; (80026d0 <HAL_UART_MspInit+0x138>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d13d      	bne.n	80026be <HAL_UART_MspInit+0x126>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002642:	2301      	movs	r3, #1
 8002644:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002646:	2300      	movs	r3, #0
 8002648:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800264a:	f107 0318 	add.w	r3, r7, #24
 800264e:	4618      	mov	r0, r3
 8002650:	f001 fddc 	bl	800420c <HAL_RCCEx_PeriphCLKConfig>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_UART_MspInit+0xc6>
      Error_Handler();
 800265a:	f7ff ff35 	bl	80024c8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800265e:	4b1b      	ldr	r3, [pc, #108]	; (80026cc <HAL_UART_MspInit+0x134>)
 8002660:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002662:	4a1a      	ldr	r2, [pc, #104]	; (80026cc <HAL_UART_MspInit+0x134>)
 8002664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002668:	6613      	str	r3, [r2, #96]	; 0x60
 800266a:	4b18      	ldr	r3, [pc, #96]	; (80026cc <HAL_UART_MspInit+0x134>)
 800266c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800266e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002676:	4b15      	ldr	r3, [pc, #84]	; (80026cc <HAL_UART_MspInit+0x134>)
 8002678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267a:	4a14      	ldr	r2, [pc, #80]	; (80026cc <HAL_UART_MspInit+0x134>)
 800267c:	f043 0304 	orr.w	r3, r3, #4
 8002680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002682:	4b12      	ldr	r3, [pc, #72]	; (80026cc <HAL_UART_MspInit+0x134>)
 8002684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002686:	f003 0304 	and.w	r3, r3, #4
 800268a:	60bb      	str	r3, [r7, #8]
 800268c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800268e:	2330      	movs	r3, #48	; 0x30
 8002690:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002692:	2302      	movs	r3, #2
 8002694:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002696:	2300      	movs	r3, #0
 8002698:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269a:	2300      	movs	r3, #0
 800269c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800269e:	2307      	movs	r3, #7
 80026a0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026a2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026a6:	4619      	mov	r1, r3
 80026a8:	480a      	ldr	r0, [pc, #40]	; (80026d4 <HAL_UART_MspInit+0x13c>)
 80026aa:	f000 fdf1 	bl	8003290 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80026ae:	2200      	movs	r2, #0
 80026b0:	2100      	movs	r1, #0
 80026b2:	2025      	movs	r0, #37	; 0x25
 80026b4:	f000 fb2d 	bl	8002d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80026b8:	2025      	movs	r0, #37	; 0x25
 80026ba:	f000 fb44 	bl	8002d46 <HAL_NVIC_EnableIRQ>
}
 80026be:	bf00      	nop
 80026c0:	3780      	adds	r7, #128	; 0x80
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40008000 	.word	0x40008000
 80026cc:	40021000 	.word	0x40021000
 80026d0:	40013800 	.word	0x40013800
 80026d4:	48000800 	.word	0x48000800

080026d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b086      	sub	sp, #24
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a28      	ldr	r2, [pc, #160]	; (8002788 <HAL_TIM_PWM_MspInit+0xb0>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d10c      	bne.n	8002704 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80026ea:	4b28      	ldr	r3, [pc, #160]	; (800278c <HAL_TIM_PWM_MspInit+0xb4>)
 80026ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026ee:	4a27      	ldr	r2, [pc, #156]	; (800278c <HAL_TIM_PWM_MspInit+0xb4>)
 80026f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80026f4:	6613      	str	r3, [r2, #96]	; 0x60
 80026f6:	4b25      	ldr	r3, [pc, #148]	; (800278c <HAL_TIM_PWM_MspInit+0xb4>)
 80026f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026fe:	617b      	str	r3, [r7, #20]
 8002700:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002702:	e03c      	b.n	800277e <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM2)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800270c:	d10c      	bne.n	8002728 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800270e:	4b1f      	ldr	r3, [pc, #124]	; (800278c <HAL_TIM_PWM_MspInit+0xb4>)
 8002710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002712:	4a1e      	ldr	r2, [pc, #120]	; (800278c <HAL_TIM_PWM_MspInit+0xb4>)
 8002714:	f043 0301 	orr.w	r3, r3, #1
 8002718:	6593      	str	r3, [r2, #88]	; 0x58
 800271a:	4b1c      	ldr	r3, [pc, #112]	; (800278c <HAL_TIM_PWM_MspInit+0xb4>)
 800271c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	613b      	str	r3, [r7, #16]
 8002724:	693b      	ldr	r3, [r7, #16]
}
 8002726:	e02a      	b.n	800277e <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM3)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a18      	ldr	r2, [pc, #96]	; (8002790 <HAL_TIM_PWM_MspInit+0xb8>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d114      	bne.n	800275c <HAL_TIM_PWM_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002732:	4b16      	ldr	r3, [pc, #88]	; (800278c <HAL_TIM_PWM_MspInit+0xb4>)
 8002734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002736:	4a15      	ldr	r2, [pc, #84]	; (800278c <HAL_TIM_PWM_MspInit+0xb4>)
 8002738:	f043 0302 	orr.w	r3, r3, #2
 800273c:	6593      	str	r3, [r2, #88]	; 0x58
 800273e:	4b13      	ldr	r3, [pc, #76]	; (800278c <HAL_TIM_PWM_MspInit+0xb4>)
 8002740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800274a:	2200      	movs	r2, #0
 800274c:	2100      	movs	r1, #0
 800274e:	201d      	movs	r0, #29
 8002750:	f000 fadf 	bl	8002d12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002754:	201d      	movs	r0, #29
 8002756:	f000 faf6 	bl	8002d46 <HAL_NVIC_EnableIRQ>
}
 800275a:	e010      	b.n	800277e <HAL_TIM_PWM_MspInit+0xa6>
  else if(htim_pwm->Instance==TIM8)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a0c      	ldr	r2, [pc, #48]	; (8002794 <HAL_TIM_PWM_MspInit+0xbc>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d10b      	bne.n	800277e <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002766:	4b09      	ldr	r3, [pc, #36]	; (800278c <HAL_TIM_PWM_MspInit+0xb4>)
 8002768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800276a:	4a08      	ldr	r2, [pc, #32]	; (800278c <HAL_TIM_PWM_MspInit+0xb4>)
 800276c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002770:	6613      	str	r3, [r2, #96]	; 0x60
 8002772:	4b06      	ldr	r3, [pc, #24]	; (800278c <HAL_TIM_PWM_MspInit+0xb4>)
 8002774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002776:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800277a:	60bb      	str	r3, [r7, #8]
 800277c:	68bb      	ldr	r3, [r7, #8]
}
 800277e:	bf00      	nop
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	40012c00 	.word	0x40012c00
 800278c:	40021000 	.word	0x40021000
 8002790:	40000400 	.word	0x40000400
 8002794:	40013400 	.word	0x40013400

08002798 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b08c      	sub	sp, #48	; 0x30
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a0:	f107 031c 	add.w	r3, r7, #28
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]
 80027a8:	605a      	str	r2, [r3, #4]
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	60da      	str	r2, [r3, #12]
 80027ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a5a      	ldr	r2, [pc, #360]	; (8002920 <HAL_TIM_MspPostInit+0x188>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d13a      	bne.n	8002830 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ba:	4b5a      	ldr	r3, [pc, #360]	; (8002924 <HAL_TIM_MspPostInit+0x18c>)
 80027bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027be:	4a59      	ldr	r2, [pc, #356]	; (8002924 <HAL_TIM_MspPostInit+0x18c>)
 80027c0:	f043 0304 	orr.w	r3, r3, #4
 80027c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027c6:	4b57      	ldr	r3, [pc, #348]	; (8002924 <HAL_TIM_MspPostInit+0x18c>)
 80027c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ca:	f003 0304 	and.w	r3, r3, #4
 80027ce:	61bb      	str	r3, [r7, #24]
 80027d0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d2:	4b54      	ldr	r3, [pc, #336]	; (8002924 <HAL_TIM_MspPostInit+0x18c>)
 80027d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d6:	4a53      	ldr	r2, [pc, #332]	; (8002924 <HAL_TIM_MspPostInit+0x18c>)
 80027d8:	f043 0301 	orr.w	r3, r3, #1
 80027dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027de:	4b51      	ldr	r3, [pc, #324]	; (8002924 <HAL_TIM_MspPostInit+0x18c>)
 80027e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e2:	f003 0301 	and.w	r3, r3, #1
 80027e6:	617b      	str	r3, [r7, #20]
 80027e8:	697b      	ldr	r3, [r7, #20]
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    PC3     ------> TIM1_CH4
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 80027ea:	230b      	movs	r3, #11
 80027ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ee:	2302      	movs	r3, #2
 80027f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027f6:	2300      	movs	r3, #0
 80027f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80027fa:	2302      	movs	r3, #2
 80027fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027fe:	f107 031c 	add.w	r3, r7, #28
 8002802:	4619      	mov	r1, r3
 8002804:	4848      	ldr	r0, [pc, #288]	; (8002928 <HAL_TIM_MspPostInit+0x190>)
 8002806:	f000 fd43 	bl	8003290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800280a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800280e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002810:	2302      	movs	r3, #2
 8002812:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002814:	2300      	movs	r3, #0
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002818:	2300      	movs	r3, #0
 800281a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800281c:	2306      	movs	r3, #6
 800281e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002820:	f107 031c 	add.w	r3, r7, #28
 8002824:	4619      	mov	r1, r3
 8002826:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800282a:	f000 fd31 	bl	8003290 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800282e:	e073      	b.n	8002918 <HAL_TIM_MspPostInit+0x180>
  else if(htim->Instance==TIM2)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002838:	d14c      	bne.n	80028d4 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800283a:	4b3a      	ldr	r3, [pc, #232]	; (8002924 <HAL_TIM_MspPostInit+0x18c>)
 800283c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800283e:	4a39      	ldr	r2, [pc, #228]	; (8002924 <HAL_TIM_MspPostInit+0x18c>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002846:	4b37      	ldr	r3, [pc, #220]	; (8002924 <HAL_TIM_MspPostInit+0x18c>)
 8002848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002852:	4b34      	ldr	r3, [pc, #208]	; (8002924 <HAL_TIM_MspPostInit+0x18c>)
 8002854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002856:	4a33      	ldr	r2, [pc, #204]	; (8002924 <HAL_TIM_MspPostInit+0x18c>)
 8002858:	f043 0302 	orr.w	r3, r3, #2
 800285c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800285e:	4b31      	ldr	r3, [pc, #196]	; (8002924 <HAL_TIM_MspPostInit+0x18c>)
 8002860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800286a:	2303      	movs	r3, #3
 800286c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800286e:	2302      	movs	r3, #2
 8002870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002872:	2300      	movs	r3, #0
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002876:	2300      	movs	r3, #0
 8002878:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800287a:	2301      	movs	r3, #1
 800287c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800287e:	f107 031c 	add.w	r3, r7, #28
 8002882:	4619      	mov	r1, r3
 8002884:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002888:	f000 fd02 	bl	8003290 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800288c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002892:	2302      	movs	r3, #2
 8002894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002896:	2300      	movs	r3, #0
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800289a:	2300      	movs	r3, #0
 800289c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800289e:	2301      	movs	r3, #1
 80028a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a2:	f107 031c 	add.w	r3, r7, #28
 80028a6:	4619      	mov	r1, r3
 80028a8:	4820      	ldr	r0, [pc, #128]	; (800292c <HAL_TIM_MspPostInit+0x194>)
 80028aa:	f000 fcf1 	bl	8003290 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80028ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80028b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b4:	2302      	movs	r3, #2
 80028b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028bc:	2300      	movs	r3, #0
 80028be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 80028c0:	230a      	movs	r3, #10
 80028c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c4:	f107 031c 	add.w	r3, r7, #28
 80028c8:	4619      	mov	r1, r3
 80028ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ce:	f000 fcdf 	bl	8003290 <HAL_GPIO_Init>
}
 80028d2:	e021      	b.n	8002918 <HAL_TIM_MspPostInit+0x180>
  else if(htim->Instance==TIM8)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a15      	ldr	r2, [pc, #84]	; (8002930 <HAL_TIM_MspPostInit+0x198>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d11c      	bne.n	8002918 <HAL_TIM_MspPostInit+0x180>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028de:	4b11      	ldr	r3, [pc, #68]	; (8002924 <HAL_TIM_MspPostInit+0x18c>)
 80028e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e2:	4a10      	ldr	r2, [pc, #64]	; (8002924 <HAL_TIM_MspPostInit+0x18c>)
 80028e4:	f043 0304 	orr.w	r3, r3, #4
 80028e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028ea:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <HAL_TIM_MspPostInit+0x18c>)
 80028ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ee:	f003 0304 	and.w	r3, r3, #4
 80028f2:	60bb      	str	r3, [r7, #8]
 80028f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80028f6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80028fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028fc:	2302      	movs	r3, #2
 80028fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002900:	2300      	movs	r3, #0
 8002902:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002904:	2300      	movs	r3, #0
 8002906:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8002908:	2304      	movs	r3, #4
 800290a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800290c:	f107 031c 	add.w	r3, r7, #28
 8002910:	4619      	mov	r1, r3
 8002912:	4805      	ldr	r0, [pc, #20]	; (8002928 <HAL_TIM_MspPostInit+0x190>)
 8002914:	f000 fcbc 	bl	8003290 <HAL_GPIO_Init>
}
 8002918:	bf00      	nop
 800291a:	3730      	adds	r7, #48	; 0x30
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40012c00 	.word	0x40012c00
 8002924:	40021000 	.word	0x40021000
 8002928:	48000800 	.word	0x48000800
 800292c:	48000400 	.word	0x48000400
 8002930:	40013400 	.word	0x40013400

08002934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002938:	e7fe      	b.n	8002938 <NMI_Handler+0x4>

0800293a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800293a:	b480      	push	{r7}
 800293c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800293e:	e7fe      	b.n	800293e <HardFault_Handler+0x4>

08002940 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002944:	e7fe      	b.n	8002944 <MemManage_Handler+0x4>

08002946 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002946:	b480      	push	{r7}
 8002948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800294a:	e7fe      	b.n	800294a <BusFault_Handler+0x4>

0800294c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002950:	e7fe      	b.n	8002950 <UsageFault_Handler+0x4>

08002952 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002952:	b480      	push	{r7}
 8002954:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002956:	bf00      	nop
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002964:	bf00      	nop
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr

0800296e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800296e:	b480      	push	{r7}
 8002970:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002972:	bf00      	nop
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002980:	f000 f8ac 	bl	8002adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002984:	bf00      	nop
 8002986:	bd80      	pop	{r7, pc}

08002988 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800298c:	4802      	ldr	r0, [pc, #8]	; (8002998 <TIM3_IRQHandler+0x10>)
 800298e:	f001 fff5 	bl	800497c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002992:	bf00      	nop
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	200001f4 	.word	0x200001f4

0800299c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80029a0:	4802      	ldr	r0, [pc, #8]	; (80029ac <USART1_IRQHandler+0x10>)
 80029a2:	f003 f887 	bl	8005ab4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80029a6:	bf00      	nop
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	200000cc 	.word	0x200000cc

080029b0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80029b4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80029b8:	f000 fe1c 	bl	80035f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80029bc:	bf00      	nop
 80029be:	bd80      	pop	{r7, pc}

080029c0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80029c4:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <SystemInit+0x20>)
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ca:	4a05      	ldr	r2, [pc, #20]	; (80029e0 <SystemInit+0x20>)
 80029cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80029e4:	480d      	ldr	r0, [pc, #52]	; (8002a1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80029e6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029e8:	480d      	ldr	r0, [pc, #52]	; (8002a20 <LoopForever+0x6>)
  ldr r1, =_edata
 80029ea:	490e      	ldr	r1, [pc, #56]	; (8002a24 <LoopForever+0xa>)
  ldr r2, =_sidata
 80029ec:	4a0e      	ldr	r2, [pc, #56]	; (8002a28 <LoopForever+0xe>)
  movs r3, #0
 80029ee:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80029f0:	e002      	b.n	80029f8 <LoopCopyDataInit>

080029f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029f6:	3304      	adds	r3, #4

080029f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029fc:	d3f9      	bcc.n	80029f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029fe:	4a0b      	ldr	r2, [pc, #44]	; (8002a2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a00:	4c0b      	ldr	r4, [pc, #44]	; (8002a30 <LoopForever+0x16>)
  movs r3, #0
 8002a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a04:	e001      	b.n	8002a0a <LoopFillZerobss>

08002a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a08:	3204      	adds	r2, #4

08002a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a0c:	d3fb      	bcc.n	8002a06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002a0e:	f7ff ffd7 	bl	80029c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a12:	f004 fa01 	bl	8006e18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a16:	f7fd fd81 	bl	800051c <main>

08002a1a <LoopForever>:

LoopForever:
    b LoopForever
 8002a1a:	e7fe      	b.n	8002a1a <LoopForever>
  ldr   r0, =_estack
 8002a1c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8002a28:	08006ed8 	.word	0x08006ed8
  ldr r2, =_sbss
 8002a2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002a30:	20000298 	.word	0x20000298

08002a34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a34:	e7fe      	b.n	8002a34 <ADC1_2_IRQHandler>

08002a36 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b082      	sub	sp, #8
 8002a3a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a40:	2003      	movs	r0, #3
 8002a42:	f000 f95b 	bl	8002cfc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002a46:	2000      	movs	r0, #0
 8002a48:	f000 f80e 	bl	8002a68 <HAL_InitTick>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d002      	beq.n	8002a58 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	71fb      	strb	r3, [r7, #7]
 8002a56:	e001      	b.n	8002a5c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002a58:	f7ff fd3c 	bl	80024d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002a5c:	79fb      	ldrb	r3, [r7, #7]

}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3708      	adds	r7, #8
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
	...

08002a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002a70:	2300      	movs	r3, #0
 8002a72:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002a74:	4b16      	ldr	r3, [pc, #88]	; (8002ad0 <HAL_InitTick+0x68>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d022      	beq.n	8002ac2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002a7c:	4b15      	ldr	r3, [pc, #84]	; (8002ad4 <HAL_InitTick+0x6c>)
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4b13      	ldr	r3, [pc, #76]	; (8002ad0 <HAL_InitTick+0x68>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002a88:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a90:	4618      	mov	r0, r3
 8002a92:	f000 f966 	bl	8002d62 <HAL_SYSTICK_Config>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d10f      	bne.n	8002abc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b0f      	cmp	r3, #15
 8002aa0:	d809      	bhi.n	8002ab6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002aaa:	f000 f932 	bl	8002d12 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002aae:	4a0a      	ldr	r2, [pc, #40]	; (8002ad8 <HAL_InitTick+0x70>)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6013      	str	r3, [r2, #0]
 8002ab4:	e007      	b.n	8002ac6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	73fb      	strb	r3, [r7, #15]
 8002aba:	e004      	b.n	8002ac6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	73fb      	strb	r3, [r7, #15]
 8002ac0:	e001      	b.n	8002ac6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	20000008 	.word	0x20000008
 8002ad4:	20000000 	.word	0x20000000
 8002ad8:	20000004 	.word	0x20000004

08002adc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ae0:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <HAL_IncTick+0x1c>)
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	4b05      	ldr	r3, [pc, #20]	; (8002afc <HAL_IncTick+0x20>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4413      	add	r3, r2
 8002aea:	4a03      	ldr	r2, [pc, #12]	; (8002af8 <HAL_IncTick+0x1c>)
 8002aec:	6013      	str	r3, [r2, #0]
}
 8002aee:	bf00      	nop
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	20000294 	.word	0x20000294
 8002afc:	20000008 	.word	0x20000008

08002b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return uwTick;
 8002b04:	4b03      	ldr	r3, [pc, #12]	; (8002b14 <HAL_GetTick+0x14>)
 8002b06:	681b      	ldr	r3, [r3, #0]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	20000294 	.word	0x20000294

08002b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b20:	f7ff ffee 	bl	8002b00 <HAL_GetTick>
 8002b24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b30:	d004      	beq.n	8002b3c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b32:	4b09      	ldr	r3, [pc, #36]	; (8002b58 <HAL_Delay+0x40>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	4413      	add	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002b3c:	bf00      	nop
 8002b3e:	f7ff ffdf 	bl	8002b00 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	68fa      	ldr	r2, [r7, #12]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d8f7      	bhi.n	8002b3e <HAL_Delay+0x26>
  {
  }
}
 8002b4e:	bf00      	nop
 8002b50:	bf00      	nop
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	20000008 	.word	0x20000008

08002b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b78:	4013      	ands	r3, r2
 8002b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b8e:	4a04      	ldr	r2, [pc, #16]	; (8002ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	60d3      	str	r3, [r2, #12]
}
 8002b94:	bf00      	nop
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	e000ed00 	.word	0xe000ed00

08002ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ba8:	4b04      	ldr	r3, [pc, #16]	; (8002bbc <__NVIC_GetPriorityGrouping+0x18>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	0a1b      	lsrs	r3, r3, #8
 8002bae:	f003 0307 	and.w	r3, r3, #7
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	e000ed00 	.word	0xe000ed00

08002bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	db0b      	blt.n	8002bea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bd2:	79fb      	ldrb	r3, [r7, #7]
 8002bd4:	f003 021f 	and.w	r2, r3, #31
 8002bd8:	4907      	ldr	r1, [pc, #28]	; (8002bf8 <__NVIC_EnableIRQ+0x38>)
 8002bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bde:	095b      	lsrs	r3, r3, #5
 8002be0:	2001      	movs	r0, #1
 8002be2:	fa00 f202 	lsl.w	r2, r0, r2
 8002be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	e000e100 	.word	0xe000e100

08002bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	6039      	str	r1, [r7, #0]
 8002c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	db0a      	blt.n	8002c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	490c      	ldr	r1, [pc, #48]	; (8002c48 <__NVIC_SetPriority+0x4c>)
 8002c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1a:	0112      	lsls	r2, r2, #4
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	440b      	add	r3, r1
 8002c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c24:	e00a      	b.n	8002c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	4908      	ldr	r1, [pc, #32]	; (8002c4c <__NVIC_SetPriority+0x50>)
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	3b04      	subs	r3, #4
 8002c34:	0112      	lsls	r2, r2, #4
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	440b      	add	r3, r1
 8002c3a:	761a      	strb	r2, [r3, #24]
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	e000e100 	.word	0xe000e100
 8002c4c:	e000ed00 	.word	0xe000ed00

08002c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b089      	sub	sp, #36	; 0x24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f1c3 0307 	rsb	r3, r3, #7
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	bf28      	it	cs
 8002c6e:	2304      	movcs	r3, #4
 8002c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	3304      	adds	r3, #4
 8002c76:	2b06      	cmp	r3, #6
 8002c78:	d902      	bls.n	8002c80 <NVIC_EncodePriority+0x30>
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	3b03      	subs	r3, #3
 8002c7e:	e000      	b.n	8002c82 <NVIC_EncodePriority+0x32>
 8002c80:	2300      	movs	r3, #0
 8002c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	43da      	mvns	r2, r3
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	401a      	ands	r2, r3
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca2:	43d9      	mvns	r1, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca8:	4313      	orrs	r3, r2
         );
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3724      	adds	r7, #36	; 0x24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
	...

08002cb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cc8:	d301      	bcc.n	8002cce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e00f      	b.n	8002cee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cce:	4a0a      	ldr	r2, [pc, #40]	; (8002cf8 <SysTick_Config+0x40>)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cd6:	210f      	movs	r1, #15
 8002cd8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cdc:	f7ff ff8e 	bl	8002bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ce0:	4b05      	ldr	r3, [pc, #20]	; (8002cf8 <SysTick_Config+0x40>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ce6:	4b04      	ldr	r3, [pc, #16]	; (8002cf8 <SysTick_Config+0x40>)
 8002ce8:	2207      	movs	r2, #7
 8002cea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cec:	2300      	movs	r3, #0
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	e000e010 	.word	0xe000e010

08002cfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f7ff ff29 	bl	8002b5c <__NVIC_SetPriorityGrouping>
}
 8002d0a:	bf00      	nop
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}

08002d12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d12:	b580      	push	{r7, lr}
 8002d14:	b086      	sub	sp, #24
 8002d16:	af00      	add	r7, sp, #0
 8002d18:	4603      	mov	r3, r0
 8002d1a:	60b9      	str	r1, [r7, #8]
 8002d1c:	607a      	str	r2, [r7, #4]
 8002d1e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d20:	f7ff ff40 	bl	8002ba4 <__NVIC_GetPriorityGrouping>
 8002d24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	68b9      	ldr	r1, [r7, #8]
 8002d2a:	6978      	ldr	r0, [r7, #20]
 8002d2c:	f7ff ff90 	bl	8002c50 <NVIC_EncodePriority>
 8002d30:	4602      	mov	r2, r0
 8002d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d36:	4611      	mov	r1, r2
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff ff5f 	bl	8002bfc <__NVIC_SetPriority>
}
 8002d3e:	bf00      	nop
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b082      	sub	sp, #8
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff ff33 	bl	8002bc0 <__NVIC_EnableIRQ>
}
 8002d5a:	bf00      	nop
 8002d5c:	3708      	adds	r7, #8
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}

08002d62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d62:	b580      	push	{r7, lr}
 8002d64:	b082      	sub	sp, #8
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7ff ffa4 	bl	8002cb8 <SysTick_Config>
 8002d70:	4603      	mov	r3, r0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3708      	adds	r7, #8
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b082      	sub	sp, #8
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e014      	b.n	8002db6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	791b      	ldrb	r3, [r3, #4]
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d105      	bne.n	8002da2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f7ff fbbd 	bl	800251c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2202      	movs	r2, #2
 8002da6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2201      	movs	r2, #1
 8002db2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3708      	adds	r7, #8
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
	...

08002dc0 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b08a      	sub	sp, #40	; 0x28
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	795b      	ldrb	r3, [r3, #5]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d101      	bne.n	8002dd8 <HAL_DAC_ConfigChannel+0x18>
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	e192      	b.n	80030fe <HAL_DAC_ConfigChannel+0x33e>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2202      	movs	r2, #2
 8002de2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	d174      	bne.n	8002ed6 <HAL_DAC_ConfigChannel+0x116>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8002dec:	f7ff fe88 	bl	8002b00 <HAL_GetTick>
 8002df0:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d134      	bne.n	8002e62 <HAL_DAC_ConfigChannel+0xa2>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002df8:	e011      	b.n	8002e1e <HAL_DAC_ConfigChannel+0x5e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002dfa:	f7ff fe81 	bl	8002b00 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d90a      	bls.n	8002e1e <HAL_DAC_ConfigChannel+0x5e>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	691b      	ldr	r3, [r3, #16]
 8002e0c:	f043 0208 	orr.w	r2, r3, #8
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2203      	movs	r2, #3
 8002e18:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e16f      	b.n	80030fe <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1e6      	bne.n	8002dfa <HAL_DAC_ConfigChannel+0x3a>
        }
      }
      HAL_Delay(1);
 8002e2c:	2001      	movs	r0, #1
 8002e2e:	f7ff fe73 	bl	8002b18 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e3a:	641a      	str	r2, [r3, #64]	; 0x40
 8002e3c:	e01e      	b.n	8002e7c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8002e3e:	f7ff fe5f 	bl	8002b00 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d90a      	bls.n	8002e62 <HAL_DAC_ConfigChannel+0xa2>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	f043 0208 	orr.w	r2, r3, #8
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2203      	movs	r2, #3
 8002e5c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e14d      	b.n	80030fe <HAL_DAC_ConfigChannel+0x33e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	dbe8      	blt.n	8002e3e <HAL_DAC_ConfigChannel+0x7e>
        }
      }
      HAL_Delay(1U);
 8002e6c:	2001      	movs	r0, #1
 8002e6e:	f7ff fe53 	bl	8002b18 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e7a:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f003 0310 	and.w	r3, r3, #16
 8002e88:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	ea02 0103 	and.w	r1, r2, r3
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f003 0310 	and.w	r3, r3, #16
 8002ea0:	409a      	lsls	r2, r3
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f003 0310 	and.w	r3, r3, #16
 8002eb6:	21ff      	movs	r1, #255	; 0xff
 8002eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	ea02 0103 	and.w	r1, r2, r3
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f003 0310 	and.w	r3, r3, #16
 8002ecc:	409a      	lsls	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d11d      	bne.n	8002f1a <HAL_DAC_ConfigChannel+0x15a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ee4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	f003 0310 	and.w	r3, r3, #16
 8002eec:	221f      	movs	r2, #31
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f003 0310 	and.w	r3, r3, #16
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f18:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f20:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f003 0310 	and.w	r3, r3, #16
 8002f28:	2207      	movs	r2, #7
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f32:	4013      	ands	r3, r2
 8002f34:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d102      	bne.n	8002f44 <HAL_DAC_ConfigChannel+0x184>
  {
    connectOnChip = 0x00000000UL;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	623b      	str	r3, [r7, #32]
 8002f42:	e00f      	b.n	8002f64 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d102      	bne.n	8002f52 <HAL_DAC_ConfigChannel+0x192>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	623b      	str	r3, [r7, #32]
 8002f50:	e008      	b.n	8002f64 <HAL_DAC_ConfigChannel+0x1a4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d102      	bne.n	8002f60 <HAL_DAC_ConfigChannel+0x1a0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	623b      	str	r3, [r7, #32]
 8002f5e:	e001      	b.n	8002f64 <HAL_DAC_ConfigChannel+0x1a4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8002f60:	2300      	movs	r3, #0
 8002f62:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	695b      	ldr	r3, [r3, #20]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	6a3a      	ldr	r2, [r7, #32]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f003 0310 	and.w	r3, r3, #16
 8002f7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43db      	mvns	r3, r3
 8002f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f86:	4013      	ands	r3, r2
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	791b      	ldrb	r3, [r3, #4]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d102      	bne.n	8002f98 <HAL_DAC_ConfigChannel+0x1d8>
 8002f92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f96:	e000      	b.n	8002f9a <HAL_DAC_ConfigChannel+0x1da>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f003 0310 	and.w	r3, r3, #16
 8002fa6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	795b      	ldrb	r3, [r3, #5]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d102      	bne.n	8002fc4 <HAL_DAC_ConfigChannel+0x204>
 8002fbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fc2:	e000      	b.n	8002fc6 <HAL_DAC_ConfigChannel+0x206>
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	69ba      	ldr	r2, [r7, #24]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002fd2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d114      	bne.n	8003006 <HAL_DAC_ConfigChannel+0x246>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8002fdc:	f001 f898 	bl	8004110 <HAL_RCC_GetHCLKFreq>
 8002fe0:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	4a48      	ldr	r2, [pc, #288]	; (8003108 <HAL_DAC_ConfigChannel+0x348>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d904      	bls.n	8002ff4 <HAL_DAC_ConfigChannel+0x234>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8002fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ff0:	627b      	str	r3, [r7, #36]	; 0x24
 8002ff2:	e00f      	b.n	8003014 <HAL_DAC_ConfigChannel+0x254>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	4a45      	ldr	r2, [pc, #276]	; (800310c <HAL_DAC_ConfigChannel+0x34c>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d90a      	bls.n	8003012 <HAL_DAC_ConfigChannel+0x252>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003002:	627b      	str	r3, [r7, #36]	; 0x24
 8003004:	e006      	b.n	8003014 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800300c:	4313      	orrs	r3, r2
 800300e:	627b      	str	r3, [r7, #36]	; 0x24
 8003010:	e000      	b.n	8003014 <HAL_DAC_ConfigChannel+0x254>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003012:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f003 0310 	and.w	r3, r3, #16
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003022:	4313      	orrs	r3, r2
 8003024:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800302c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	6819      	ldr	r1, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f003 0310 	and.w	r3, r3, #16
 800303a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	43da      	mvns	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	400a      	ands	r2, r1
 800304a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f003 0310 	and.w	r3, r3, #16
 800305a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	43db      	mvns	r3, r3
 8003064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003066:	4013      	ands	r3, r2
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f003 0310 	and.w	r3, r3, #16
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800307e:	4313      	orrs	r3, r2
 8003080:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003088:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	6819      	ldr	r1, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f003 0310 	and.w	r3, r3, #16
 8003096:	22c0      	movs	r2, #192	; 0xc0
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	43da      	mvns	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	400a      	ands	r2, r1
 80030a4:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	089b      	lsrs	r3, r3, #2
 80030ac:	f003 030f 	and.w	r3, r3, #15
 80030b0:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	089b      	lsrs	r3, r3, #2
 80030b8:	021b      	lsls	r3, r3, #8
 80030ba:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	4313      	orrs	r3, r2
 80030c2:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f003 0310 	and.w	r3, r3, #16
 80030d0:	f640 710f 	movw	r1, #3855	; 0xf0f
 80030d4:	fa01 f303 	lsl.w	r3, r1, r3
 80030d8:	43db      	mvns	r3, r3
 80030da:	ea02 0103 	and.w	r1, r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f003 0310 	and.w	r3, r3, #16
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	409a      	lsls	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2201      	movs	r2, #1
 80030f4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3728      	adds	r7, #40	; 0x28
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	09896800 	.word	0x09896800
 800310c:	04c4b400 	.word	0x04c4b400

08003110 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003118:	2300      	movs	r3, #0
 800311a:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003122:	b2db      	uxtb	r3, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d005      	beq.n	8003134 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2204      	movs	r2, #4
 800312c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	73fb      	strb	r3, [r7, #15]
 8003132:	e037      	b.n	80031a4 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 020e 	bic.w	r2, r2, #14
 8003142:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800314e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003152:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 0201 	bic.w	r2, r2, #1
 8003162:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003168:	f003 021f 	and.w	r2, r3, #31
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003170:	2101      	movs	r1, #1
 8003172:	fa01 f202 	lsl.w	r2, r1, r2
 8003176:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003180:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00c      	beq.n	80031a4 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003194:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003198:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80031a2:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b084      	sub	sp, #16
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d00d      	beq.n	80031f6 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2204      	movs	r2, #4
 80031de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	73fb      	strb	r3, [r7, #15]
 80031f4:	e047      	b.n	8003286 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 020e 	bic.w	r2, r2, #14
 8003204:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 0201 	bic.w	r2, r2, #1
 8003214:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003220:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003224:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322a:	f003 021f 	and.w	r2, r3, #31
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	2101      	movs	r1, #1
 8003234:	fa01 f202 	lsl.w	r2, r1, r2
 8003238:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003242:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00c      	beq.n	8003266 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003256:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800325a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003264:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	4798      	blx	r3
    }
  }
  return status;
 8003286:	7bfb      	ldrb	r3, [r7, #15]
}
 8003288:	4618      	mov	r0, r3
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003290:	b480      	push	{r7}
 8003292:	b087      	sub	sp, #28
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800329a:	2300      	movs	r3, #0
 800329c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800329e:	e15a      	b.n	8003556 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	2101      	movs	r1, #1
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	fa01 f303 	lsl.w	r3, r1, r3
 80032ac:	4013      	ands	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f000 814c 	beq.w	8003550 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f003 0303 	and.w	r3, r3, #3
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d005      	beq.n	80032d0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d130      	bne.n	8003332 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	005b      	lsls	r3, r3, #1
 80032da:	2203      	movs	r2, #3
 80032dc:	fa02 f303 	lsl.w	r3, r2, r3
 80032e0:	43db      	mvns	r3, r3
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	4013      	ands	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	68da      	ldr	r2, [r3, #12]
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003306:	2201      	movs	r2, #1
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	fa02 f303 	lsl.w	r3, r2, r3
 800330e:	43db      	mvns	r3, r3
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	4013      	ands	r3, r2
 8003314:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	091b      	lsrs	r3, r3, #4
 800331c:	f003 0201 	and.w	r2, r3, #1
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	fa02 f303 	lsl.w	r3, r2, r3
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	4313      	orrs	r3, r2
 800332a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f003 0303 	and.w	r3, r3, #3
 800333a:	2b03      	cmp	r3, #3
 800333c:	d017      	beq.n	800336e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68db      	ldr	r3, [r3, #12]
 8003342:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	2203      	movs	r2, #3
 800334a:	fa02 f303 	lsl.w	r3, r2, r3
 800334e:	43db      	mvns	r3, r3
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	4013      	ands	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	693a      	ldr	r2, [r7, #16]
 8003364:	4313      	orrs	r3, r2
 8003366:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d123      	bne.n	80033c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	08da      	lsrs	r2, r3, #3
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	3208      	adds	r2, #8
 8003382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003386:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	220f      	movs	r2, #15
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	43db      	mvns	r3, r3
 8003398:	693a      	ldr	r2, [r7, #16]
 800339a:	4013      	ands	r3, r2
 800339c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	691a      	ldr	r2, [r3, #16]
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	f003 0307 	and.w	r3, r3, #7
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	693a      	ldr	r2, [r7, #16]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	08da      	lsrs	r2, r3, #3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3208      	adds	r2, #8
 80033bc:	6939      	ldr	r1, [r7, #16]
 80033be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	005b      	lsls	r3, r3, #1
 80033cc:	2203      	movs	r2, #3
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	43db      	mvns	r3, r3
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	4013      	ands	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	f003 0203 	and.w	r2, r3, #3
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	005b      	lsls	r3, r3, #1
 80033e6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f000 80a6 	beq.w	8003550 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003404:	4b5b      	ldr	r3, [pc, #364]	; (8003574 <HAL_GPIO_Init+0x2e4>)
 8003406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003408:	4a5a      	ldr	r2, [pc, #360]	; (8003574 <HAL_GPIO_Init+0x2e4>)
 800340a:	f043 0301 	orr.w	r3, r3, #1
 800340e:	6613      	str	r3, [r2, #96]	; 0x60
 8003410:	4b58      	ldr	r3, [pc, #352]	; (8003574 <HAL_GPIO_Init+0x2e4>)
 8003412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	60bb      	str	r3, [r7, #8]
 800341a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800341c:	4a56      	ldr	r2, [pc, #344]	; (8003578 <HAL_GPIO_Init+0x2e8>)
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	089b      	lsrs	r3, r3, #2
 8003422:	3302      	adds	r3, #2
 8003424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003428:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f003 0303 	and.w	r3, r3, #3
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	220f      	movs	r2, #15
 8003434:	fa02 f303 	lsl.w	r3, r2, r3
 8003438:	43db      	mvns	r3, r3
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	4013      	ands	r3, r2
 800343e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003446:	d01f      	beq.n	8003488 <HAL_GPIO_Init+0x1f8>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a4c      	ldr	r2, [pc, #304]	; (800357c <HAL_GPIO_Init+0x2ec>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d019      	beq.n	8003484 <HAL_GPIO_Init+0x1f4>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a4b      	ldr	r2, [pc, #300]	; (8003580 <HAL_GPIO_Init+0x2f0>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d013      	beq.n	8003480 <HAL_GPIO_Init+0x1f0>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a4a      	ldr	r2, [pc, #296]	; (8003584 <HAL_GPIO_Init+0x2f4>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d00d      	beq.n	800347c <HAL_GPIO_Init+0x1ec>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a49      	ldr	r2, [pc, #292]	; (8003588 <HAL_GPIO_Init+0x2f8>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d007      	beq.n	8003478 <HAL_GPIO_Init+0x1e8>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a48      	ldr	r2, [pc, #288]	; (800358c <HAL_GPIO_Init+0x2fc>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d101      	bne.n	8003474 <HAL_GPIO_Init+0x1e4>
 8003470:	2305      	movs	r3, #5
 8003472:	e00a      	b.n	800348a <HAL_GPIO_Init+0x1fa>
 8003474:	2306      	movs	r3, #6
 8003476:	e008      	b.n	800348a <HAL_GPIO_Init+0x1fa>
 8003478:	2304      	movs	r3, #4
 800347a:	e006      	b.n	800348a <HAL_GPIO_Init+0x1fa>
 800347c:	2303      	movs	r3, #3
 800347e:	e004      	b.n	800348a <HAL_GPIO_Init+0x1fa>
 8003480:	2302      	movs	r3, #2
 8003482:	e002      	b.n	800348a <HAL_GPIO_Init+0x1fa>
 8003484:	2301      	movs	r3, #1
 8003486:	e000      	b.n	800348a <HAL_GPIO_Init+0x1fa>
 8003488:	2300      	movs	r3, #0
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	f002 0203 	and.w	r2, r2, #3
 8003490:	0092      	lsls	r2, r2, #2
 8003492:	4093      	lsls	r3, r2
 8003494:	693a      	ldr	r2, [r7, #16]
 8003496:	4313      	orrs	r3, r2
 8003498:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800349a:	4937      	ldr	r1, [pc, #220]	; (8003578 <HAL_GPIO_Init+0x2e8>)
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	089b      	lsrs	r3, r3, #2
 80034a0:	3302      	adds	r3, #2
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034a8:	4b39      	ldr	r3, [pc, #228]	; (8003590 <HAL_GPIO_Init+0x300>)
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	43db      	mvns	r3, r3
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	4013      	ands	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d003      	beq.n	80034cc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80034cc:	4a30      	ldr	r2, [pc, #192]	; (8003590 <HAL_GPIO_Init+0x300>)
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80034d2:	4b2f      	ldr	r3, [pc, #188]	; (8003590 <HAL_GPIO_Init+0x300>)
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	43db      	mvns	r3, r3
 80034dc:	693a      	ldr	r2, [r7, #16]
 80034de:	4013      	ands	r3, r2
 80034e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d003      	beq.n	80034f6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80034f6:	4a26      	ldr	r2, [pc, #152]	; (8003590 <HAL_GPIO_Init+0x300>)
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80034fc:	4b24      	ldr	r3, [pc, #144]	; (8003590 <HAL_GPIO_Init+0x300>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	43db      	mvns	r3, r3
 8003506:	693a      	ldr	r2, [r7, #16]
 8003508:	4013      	ands	r3, r2
 800350a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d003      	beq.n	8003520 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003518:	693a      	ldr	r2, [r7, #16]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	4313      	orrs	r3, r2
 800351e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003520:	4a1b      	ldr	r2, [pc, #108]	; (8003590 <HAL_GPIO_Init+0x300>)
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003526:	4b1a      	ldr	r3, [pc, #104]	; (8003590 <HAL_GPIO_Init+0x300>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	43db      	mvns	r3, r3
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	4013      	ands	r3, r2
 8003534:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003542:	693a      	ldr	r2, [r7, #16]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4313      	orrs	r3, r2
 8003548:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800354a:	4a11      	ldr	r2, [pc, #68]	; (8003590 <HAL_GPIO_Init+0x300>)
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	3301      	adds	r3, #1
 8003554:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681a      	ldr	r2, [r3, #0]
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	fa22 f303 	lsr.w	r3, r2, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	f47f ae9d 	bne.w	80032a0 <HAL_GPIO_Init+0x10>
  }
}
 8003566:	bf00      	nop
 8003568:	bf00      	nop
 800356a:	371c      	adds	r7, #28
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr
 8003574:	40021000 	.word	0x40021000
 8003578:	40010000 	.word	0x40010000
 800357c:	48000400 	.word	0x48000400
 8003580:	48000800 	.word	0x48000800
 8003584:	48000c00 	.word	0x48000c00
 8003588:	48001000 	.word	0x48001000
 800358c:	48001400 	.word	0x48001400
 8003590:	40010400 	.word	0x40010400

08003594 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	691a      	ldr	r2, [r3, #16]
 80035a4:	887b      	ldrh	r3, [r7, #2]
 80035a6:	4013      	ands	r3, r2
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035ac:	2301      	movs	r3, #1
 80035ae:	73fb      	strb	r3, [r7, #15]
 80035b0:	e001      	b.n	80035b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035b2:	2300      	movs	r3, #0
 80035b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3714      	adds	r7, #20
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
 80035cc:	460b      	mov	r3, r1
 80035ce:	807b      	strh	r3, [r7, #2]
 80035d0:	4613      	mov	r3, r2
 80035d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035d4:	787b      	ldrb	r3, [r7, #1]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80035da:	887a      	ldrh	r2, [r7, #2]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80035e0:	e002      	b.n	80035e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80035e2:	887a      	ldrh	r2, [r7, #2]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	4603      	mov	r3, r0
 80035fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80035fe:	4b08      	ldr	r3, [pc, #32]	; (8003620 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003600:	695a      	ldr	r2, [r3, #20]
 8003602:	88fb      	ldrh	r3, [r7, #6]
 8003604:	4013      	ands	r3, r2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d006      	beq.n	8003618 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800360a:	4a05      	ldr	r2, [pc, #20]	; (8003620 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800360c:	88fb      	ldrh	r3, [r7, #6]
 800360e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003610:	88fb      	ldrh	r3, [r7, #6]
 8003612:	4618      	mov	r0, r3
 8003614:	f000 f806 	bl	8003624 <HAL_GPIO_EXTI_Callback>
  }
}
 8003618:	bf00      	nop
 800361a:	3708      	adds	r7, #8
 800361c:	46bd      	mov	sp, r7
 800361e:	bd80      	pop	{r7, pc}
 8003620:	40010400 	.word	0x40010400

08003624 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003624:	b480      	push	{r7}
 8003626:	b083      	sub	sp, #12
 8003628:	af00      	add	r7, sp, #0
 800362a:	4603      	mov	r3, r0
 800362c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800362e:	bf00      	nop
 8003630:	370c      	adds	r7, #12
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
	...

0800363c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d141      	bne.n	80036ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800364a:	4b4b      	ldr	r3, [pc, #300]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003652:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003656:	d131      	bne.n	80036bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003658:	4b47      	ldr	r3, [pc, #284]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800365a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800365e:	4a46      	ldr	r2, [pc, #280]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003660:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003664:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003668:	4b43      	ldr	r3, [pc, #268]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003670:	4a41      	ldr	r2, [pc, #260]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003672:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003676:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003678:	4b40      	ldr	r3, [pc, #256]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2232      	movs	r2, #50	; 0x32
 800367e:	fb02 f303 	mul.w	r3, r2, r3
 8003682:	4a3f      	ldr	r2, [pc, #252]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003684:	fba2 2303 	umull	r2, r3, r2, r3
 8003688:	0c9b      	lsrs	r3, r3, #18
 800368a:	3301      	adds	r3, #1
 800368c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800368e:	e002      	b.n	8003696 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	3b01      	subs	r3, #1
 8003694:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003696:	4b38      	ldr	r3, [pc, #224]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800369e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a2:	d102      	bne.n	80036aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1f2      	bne.n	8003690 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036aa:	4b33      	ldr	r3, [pc, #204]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036b6:	d158      	bne.n	800376a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e057      	b.n	800376c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036bc:	4b2e      	ldr	r3, [pc, #184]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036c2:	4a2d      	ldr	r2, [pc, #180]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80036cc:	e04d      	b.n	800376a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036d4:	d141      	bne.n	800375a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80036d6:	4b28      	ldr	r3, [pc, #160]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036e2:	d131      	bne.n	8003748 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80036e4:	4b24      	ldr	r3, [pc, #144]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036ea:	4a23      	ldr	r2, [pc, #140]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036f4:	4b20      	ldr	r3, [pc, #128]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036fc:	4a1e      	ldr	r2, [pc, #120]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80036fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003702:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003704:	4b1d      	ldr	r3, [pc, #116]	; (800377c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2232      	movs	r2, #50	; 0x32
 800370a:	fb02 f303 	mul.w	r3, r2, r3
 800370e:	4a1c      	ldr	r2, [pc, #112]	; (8003780 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003710:	fba2 2303 	umull	r2, r3, r2, r3
 8003714:	0c9b      	lsrs	r3, r3, #18
 8003716:	3301      	adds	r3, #1
 8003718:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800371a:	e002      	b.n	8003722 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	3b01      	subs	r3, #1
 8003720:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003722:	4b15      	ldr	r3, [pc, #84]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800372a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800372e:	d102      	bne.n	8003736 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1f2      	bne.n	800371c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003736:	4b10      	ldr	r3, [pc, #64]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800373e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003742:	d112      	bne.n	800376a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e011      	b.n	800376c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003748:	4b0b      	ldr	r3, [pc, #44]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800374a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800374e:	4a0a      	ldr	r2, [pc, #40]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003754:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003758:	e007      	b.n	800376a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800375a:	4b07      	ldr	r3, [pc, #28]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003762:	4a05      	ldr	r2, [pc, #20]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003764:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003768:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800376a:	2300      	movs	r3, #0
}
 800376c:	4618      	mov	r0, r3
 800376e:	3714      	adds	r7, #20
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	40007000 	.word	0x40007000
 800377c:	20000000 	.word	0x20000000
 8003780:	431bde83 	.word	0x431bde83

08003784 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003788:	4b05      	ldr	r3, [pc, #20]	; (80037a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	4a04      	ldr	r2, [pc, #16]	; (80037a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800378e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003792:	6093      	str	r3, [r2, #8]
}
 8003794:	bf00      	nop
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	40007000 	.word	0x40007000

080037a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b088      	sub	sp, #32
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e306      	b.n	8003dc4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d075      	beq.n	80038ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037c2:	4b97      	ldr	r3, [pc, #604]	; (8003a20 <HAL_RCC_OscConfig+0x27c>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f003 030c 	and.w	r3, r3, #12
 80037ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037cc:	4b94      	ldr	r3, [pc, #592]	; (8003a20 <HAL_RCC_OscConfig+0x27c>)
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	f003 0303 	and.w	r3, r3, #3
 80037d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	2b0c      	cmp	r3, #12
 80037da:	d102      	bne.n	80037e2 <HAL_RCC_OscConfig+0x3e>
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	2b03      	cmp	r3, #3
 80037e0:	d002      	beq.n	80037e8 <HAL_RCC_OscConfig+0x44>
 80037e2:	69bb      	ldr	r3, [r7, #24]
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	d10b      	bne.n	8003800 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e8:	4b8d      	ldr	r3, [pc, #564]	; (8003a20 <HAL_RCC_OscConfig+0x27c>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d05b      	beq.n	80038ac <HAL_RCC_OscConfig+0x108>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d157      	bne.n	80038ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e2e1      	b.n	8003dc4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003808:	d106      	bne.n	8003818 <HAL_RCC_OscConfig+0x74>
 800380a:	4b85      	ldr	r3, [pc, #532]	; (8003a20 <HAL_RCC_OscConfig+0x27c>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a84      	ldr	r2, [pc, #528]	; (8003a20 <HAL_RCC_OscConfig+0x27c>)
 8003810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003814:	6013      	str	r3, [r2, #0]
 8003816:	e01d      	b.n	8003854 <HAL_RCC_OscConfig+0xb0>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003820:	d10c      	bne.n	800383c <HAL_RCC_OscConfig+0x98>
 8003822:	4b7f      	ldr	r3, [pc, #508]	; (8003a20 <HAL_RCC_OscConfig+0x27c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a7e      	ldr	r2, [pc, #504]	; (8003a20 <HAL_RCC_OscConfig+0x27c>)
 8003828:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	4b7c      	ldr	r3, [pc, #496]	; (8003a20 <HAL_RCC_OscConfig+0x27c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a7b      	ldr	r2, [pc, #492]	; (8003a20 <HAL_RCC_OscConfig+0x27c>)
 8003834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	e00b      	b.n	8003854 <HAL_RCC_OscConfig+0xb0>
 800383c:	4b78      	ldr	r3, [pc, #480]	; (8003a20 <HAL_RCC_OscConfig+0x27c>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a77      	ldr	r2, [pc, #476]	; (8003a20 <HAL_RCC_OscConfig+0x27c>)
 8003842:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003846:	6013      	str	r3, [r2, #0]
 8003848:	4b75      	ldr	r3, [pc, #468]	; (8003a20 <HAL_RCC_OscConfig+0x27c>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a74      	ldr	r2, [pc, #464]	; (8003a20 <HAL_RCC_OscConfig+0x27c>)
 800384e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003852:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d013      	beq.n	8003884 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385c:	f7ff f950 	bl	8002b00 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003864:	f7ff f94c 	bl	8002b00 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b64      	cmp	r3, #100	; 0x64
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e2a6      	b.n	8003dc4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003876:	4b6a      	ldr	r3, [pc, #424]	; (8003a20 <HAL_RCC_OscConfig+0x27c>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0f0      	beq.n	8003864 <HAL_RCC_OscConfig+0xc0>
 8003882:	e014      	b.n	80038ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003884:	f7ff f93c 	bl	8002b00 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800388c:	f7ff f938 	bl	8002b00 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b64      	cmp	r3, #100	; 0x64
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e292      	b.n	8003dc4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800389e:	4b60      	ldr	r3, [pc, #384]	; (8003a20 <HAL_RCC_OscConfig+0x27c>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1f0      	bne.n	800388c <HAL_RCC_OscConfig+0xe8>
 80038aa:	e000      	b.n	80038ae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d075      	beq.n	80039a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038ba:	4b59      	ldr	r3, [pc, #356]	; (8003a20 <HAL_RCC_OscConfig+0x27c>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 030c 	and.w	r3, r3, #12
 80038c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80038c4:	4b56      	ldr	r3, [pc, #344]	; (8003a20 <HAL_RCC_OscConfig+0x27c>)
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	f003 0303 	and.w	r3, r3, #3
 80038cc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80038ce:	69bb      	ldr	r3, [r7, #24]
 80038d0:	2b0c      	cmp	r3, #12
 80038d2:	d102      	bne.n	80038da <HAL_RCC_OscConfig+0x136>
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d002      	beq.n	80038e0 <HAL_RCC_OscConfig+0x13c>
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	2b04      	cmp	r3, #4
 80038de:	d11f      	bne.n	8003920 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038e0:	4b4f      	ldr	r3, [pc, #316]	; (8003a20 <HAL_RCC_OscConfig+0x27c>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <HAL_RCC_OscConfig+0x154>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d101      	bne.n	80038f8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e265      	b.n	8003dc4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038f8:	4b49      	ldr	r3, [pc, #292]	; (8003a20 <HAL_RCC_OscConfig+0x27c>)
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	061b      	lsls	r3, r3, #24
 8003906:	4946      	ldr	r1, [pc, #280]	; (8003a20 <HAL_RCC_OscConfig+0x27c>)
 8003908:	4313      	orrs	r3, r2
 800390a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800390c:	4b45      	ldr	r3, [pc, #276]	; (8003a24 <HAL_RCC_OscConfig+0x280>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4618      	mov	r0, r3
 8003912:	f7ff f8a9 	bl	8002a68 <HAL_InitTick>
 8003916:	4603      	mov	r3, r0
 8003918:	2b00      	cmp	r3, #0
 800391a:	d043      	beq.n	80039a4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e251      	b.n	8003dc4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d023      	beq.n	8003970 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003928:	4b3d      	ldr	r3, [pc, #244]	; (8003a20 <HAL_RCC_OscConfig+0x27c>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a3c      	ldr	r2, [pc, #240]	; (8003a20 <HAL_RCC_OscConfig+0x27c>)
 800392e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003932:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003934:	f7ff f8e4 	bl	8002b00 <HAL_GetTick>
 8003938:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800393a:	e008      	b.n	800394e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800393c:	f7ff f8e0 	bl	8002b00 <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	2b02      	cmp	r3, #2
 8003948:	d901      	bls.n	800394e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800394a:	2303      	movs	r3, #3
 800394c:	e23a      	b.n	8003dc4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800394e:	4b34      	ldr	r3, [pc, #208]	; (8003a20 <HAL_RCC_OscConfig+0x27c>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003956:	2b00      	cmp	r3, #0
 8003958:	d0f0      	beq.n	800393c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800395a:	4b31      	ldr	r3, [pc, #196]	; (8003a20 <HAL_RCC_OscConfig+0x27c>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	061b      	lsls	r3, r3, #24
 8003968:	492d      	ldr	r1, [pc, #180]	; (8003a20 <HAL_RCC_OscConfig+0x27c>)
 800396a:	4313      	orrs	r3, r2
 800396c:	604b      	str	r3, [r1, #4]
 800396e:	e01a      	b.n	80039a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003970:	4b2b      	ldr	r3, [pc, #172]	; (8003a20 <HAL_RCC_OscConfig+0x27c>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a2a      	ldr	r2, [pc, #168]	; (8003a20 <HAL_RCC_OscConfig+0x27c>)
 8003976:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800397a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800397c:	f7ff f8c0 	bl	8002b00 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003984:	f7ff f8bc 	bl	8002b00 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e216      	b.n	8003dc4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003996:	4b22      	ldr	r3, [pc, #136]	; (8003a20 <HAL_RCC_OscConfig+0x27c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1f0      	bne.n	8003984 <HAL_RCC_OscConfig+0x1e0>
 80039a2:	e000      	b.n	80039a6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d041      	beq.n	8003a36 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d01c      	beq.n	80039f4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ba:	4b19      	ldr	r3, [pc, #100]	; (8003a20 <HAL_RCC_OscConfig+0x27c>)
 80039bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039c0:	4a17      	ldr	r2, [pc, #92]	; (8003a20 <HAL_RCC_OscConfig+0x27c>)
 80039c2:	f043 0301 	orr.w	r3, r3, #1
 80039c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ca:	f7ff f899 	bl	8002b00 <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039d0:	e008      	b.n	80039e4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039d2:	f7ff f895 	bl	8002b00 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d901      	bls.n	80039e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e1ef      	b.n	8003dc4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80039e4:	4b0e      	ldr	r3, [pc, #56]	; (8003a20 <HAL_RCC_OscConfig+0x27c>)
 80039e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0ef      	beq.n	80039d2 <HAL_RCC_OscConfig+0x22e>
 80039f2:	e020      	b.n	8003a36 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039f4:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <HAL_RCC_OscConfig+0x27c>)
 80039f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039fa:	4a09      	ldr	r2, [pc, #36]	; (8003a20 <HAL_RCC_OscConfig+0x27c>)
 80039fc:	f023 0301 	bic.w	r3, r3, #1
 8003a00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a04:	f7ff f87c 	bl	8002b00 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a0a:	e00d      	b.n	8003a28 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a0c:	f7ff f878 	bl	8002b00 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d906      	bls.n	8003a28 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e1d2      	b.n	8003dc4 <HAL_RCC_OscConfig+0x620>
 8003a1e:	bf00      	nop
 8003a20:	40021000 	.word	0x40021000
 8003a24:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003a28:	4b8c      	ldr	r3, [pc, #560]	; (8003c5c <HAL_RCC_OscConfig+0x4b8>)
 8003a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1ea      	bne.n	8003a0c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0304 	and.w	r3, r3, #4
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 80a6 	beq.w	8003b90 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a44:	2300      	movs	r3, #0
 8003a46:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003a48:	4b84      	ldr	r3, [pc, #528]	; (8003c5c <HAL_RCC_OscConfig+0x4b8>)
 8003a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d101      	bne.n	8003a58 <HAL_RCC_OscConfig+0x2b4>
 8003a54:	2301      	movs	r3, #1
 8003a56:	e000      	b.n	8003a5a <HAL_RCC_OscConfig+0x2b6>
 8003a58:	2300      	movs	r3, #0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00d      	beq.n	8003a7a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a5e:	4b7f      	ldr	r3, [pc, #508]	; (8003c5c <HAL_RCC_OscConfig+0x4b8>)
 8003a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a62:	4a7e      	ldr	r2, [pc, #504]	; (8003c5c <HAL_RCC_OscConfig+0x4b8>)
 8003a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a68:	6593      	str	r3, [r2, #88]	; 0x58
 8003a6a:	4b7c      	ldr	r3, [pc, #496]	; (8003c5c <HAL_RCC_OscConfig+0x4b8>)
 8003a6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a76:	2301      	movs	r3, #1
 8003a78:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a7a:	4b79      	ldr	r3, [pc, #484]	; (8003c60 <HAL_RCC_OscConfig+0x4bc>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d118      	bne.n	8003ab8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a86:	4b76      	ldr	r3, [pc, #472]	; (8003c60 <HAL_RCC_OscConfig+0x4bc>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a75      	ldr	r2, [pc, #468]	; (8003c60 <HAL_RCC_OscConfig+0x4bc>)
 8003a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a92:	f7ff f835 	bl	8002b00 <HAL_GetTick>
 8003a96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003a98:	e008      	b.n	8003aac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a9a:	f7ff f831 	bl	8002b00 <HAL_GetTick>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	1ad3      	subs	r3, r2, r3
 8003aa4:	2b02      	cmp	r3, #2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e18b      	b.n	8003dc4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003aac:	4b6c      	ldr	r3, [pc, #432]	; (8003c60 <HAL_RCC_OscConfig+0x4bc>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d0f0      	beq.n	8003a9a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d108      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x32e>
 8003ac0:	4b66      	ldr	r3, [pc, #408]	; (8003c5c <HAL_RCC_OscConfig+0x4b8>)
 8003ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac6:	4a65      	ldr	r2, [pc, #404]	; (8003c5c <HAL_RCC_OscConfig+0x4b8>)
 8003ac8:	f043 0301 	orr.w	r3, r3, #1
 8003acc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ad0:	e024      	b.n	8003b1c <HAL_RCC_OscConfig+0x378>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	2b05      	cmp	r3, #5
 8003ad8:	d110      	bne.n	8003afc <HAL_RCC_OscConfig+0x358>
 8003ada:	4b60      	ldr	r3, [pc, #384]	; (8003c5c <HAL_RCC_OscConfig+0x4b8>)
 8003adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae0:	4a5e      	ldr	r2, [pc, #376]	; (8003c5c <HAL_RCC_OscConfig+0x4b8>)
 8003ae2:	f043 0304 	orr.w	r3, r3, #4
 8003ae6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003aea:	4b5c      	ldr	r3, [pc, #368]	; (8003c5c <HAL_RCC_OscConfig+0x4b8>)
 8003aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003af0:	4a5a      	ldr	r2, [pc, #360]	; (8003c5c <HAL_RCC_OscConfig+0x4b8>)
 8003af2:	f043 0301 	orr.w	r3, r3, #1
 8003af6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003afa:	e00f      	b.n	8003b1c <HAL_RCC_OscConfig+0x378>
 8003afc:	4b57      	ldr	r3, [pc, #348]	; (8003c5c <HAL_RCC_OscConfig+0x4b8>)
 8003afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b02:	4a56      	ldr	r2, [pc, #344]	; (8003c5c <HAL_RCC_OscConfig+0x4b8>)
 8003b04:	f023 0301 	bic.w	r3, r3, #1
 8003b08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b0c:	4b53      	ldr	r3, [pc, #332]	; (8003c5c <HAL_RCC_OscConfig+0x4b8>)
 8003b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b12:	4a52      	ldr	r2, [pc, #328]	; (8003c5c <HAL_RCC_OscConfig+0x4b8>)
 8003b14:	f023 0304 	bic.w	r3, r3, #4
 8003b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d016      	beq.n	8003b52 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b24:	f7fe ffec 	bl	8002b00 <HAL_GetTick>
 8003b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b2a:	e00a      	b.n	8003b42 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b2c:	f7fe ffe8 	bl	8002b00 <HAL_GetTick>
 8003b30:	4602      	mov	r2, r0
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	1ad3      	subs	r3, r2, r3
 8003b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e140      	b.n	8003dc4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b42:	4b46      	ldr	r3, [pc, #280]	; (8003c5c <HAL_RCC_OscConfig+0x4b8>)
 8003b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d0ed      	beq.n	8003b2c <HAL_RCC_OscConfig+0x388>
 8003b50:	e015      	b.n	8003b7e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b52:	f7fe ffd5 	bl	8002b00 <HAL_GetTick>
 8003b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b58:	e00a      	b.n	8003b70 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b5a:	f7fe ffd1 	bl	8002b00 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e129      	b.n	8003dc4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003b70:	4b3a      	ldr	r3, [pc, #232]	; (8003c5c <HAL_RCC_OscConfig+0x4b8>)
 8003b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1ed      	bne.n	8003b5a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b7e:	7ffb      	ldrb	r3, [r7, #31]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d105      	bne.n	8003b90 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b84:	4b35      	ldr	r3, [pc, #212]	; (8003c5c <HAL_RCC_OscConfig+0x4b8>)
 8003b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b88:	4a34      	ldr	r2, [pc, #208]	; (8003c5c <HAL_RCC_OscConfig+0x4b8>)
 8003b8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b8e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0320 	and.w	r3, r3, #32
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d03c      	beq.n	8003c16 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d01c      	beq.n	8003bde <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ba4:	4b2d      	ldr	r3, [pc, #180]	; (8003c5c <HAL_RCC_OscConfig+0x4b8>)
 8003ba6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003baa:	4a2c      	ldr	r2, [pc, #176]	; (8003c5c <HAL_RCC_OscConfig+0x4b8>)
 8003bac:	f043 0301 	orr.w	r3, r3, #1
 8003bb0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bb4:	f7fe ffa4 	bl	8002b00 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bbc:	f7fe ffa0 	bl	8002b00 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e0fa      	b.n	8003dc4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003bce:	4b23      	ldr	r3, [pc, #140]	; (8003c5c <HAL_RCC_OscConfig+0x4b8>)
 8003bd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d0ef      	beq.n	8003bbc <HAL_RCC_OscConfig+0x418>
 8003bdc:	e01b      	b.n	8003c16 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003bde:	4b1f      	ldr	r3, [pc, #124]	; (8003c5c <HAL_RCC_OscConfig+0x4b8>)
 8003be0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003be4:	4a1d      	ldr	r2, [pc, #116]	; (8003c5c <HAL_RCC_OscConfig+0x4b8>)
 8003be6:	f023 0301 	bic.w	r3, r3, #1
 8003bea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bee:	f7fe ff87 	bl	8002b00 <HAL_GetTick>
 8003bf2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003bf4:	e008      	b.n	8003c08 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003bf6:	f7fe ff83 	bl	8002b00 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e0dd      	b.n	8003dc4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003c08:	4b14      	ldr	r3, [pc, #80]	; (8003c5c <HAL_RCC_OscConfig+0x4b8>)
 8003c0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1ef      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 80d1 	beq.w	8003dc2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c20:	4b0e      	ldr	r3, [pc, #56]	; (8003c5c <HAL_RCC_OscConfig+0x4b8>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	f003 030c 	and.w	r3, r3, #12
 8003c28:	2b0c      	cmp	r3, #12
 8003c2a:	f000 808b 	beq.w	8003d44 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	d15e      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c36:	4b09      	ldr	r3, [pc, #36]	; (8003c5c <HAL_RCC_OscConfig+0x4b8>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4a08      	ldr	r2, [pc, #32]	; (8003c5c <HAL_RCC_OscConfig+0x4b8>)
 8003c3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c42:	f7fe ff5d 	bl	8002b00 <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c48:	e00c      	b.n	8003c64 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c4a:	f7fe ff59 	bl	8002b00 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d905      	bls.n	8003c64 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e0b3      	b.n	8003dc4 <HAL_RCC_OscConfig+0x620>
 8003c5c:	40021000 	.word	0x40021000
 8003c60:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c64:	4b59      	ldr	r3, [pc, #356]	; (8003dcc <HAL_RCC_OscConfig+0x628>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d1ec      	bne.n	8003c4a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c70:	4b56      	ldr	r3, [pc, #344]	; (8003dcc <HAL_RCC_OscConfig+0x628>)
 8003c72:	68da      	ldr	r2, [r3, #12]
 8003c74:	4b56      	ldr	r3, [pc, #344]	; (8003dd0 <HAL_RCC_OscConfig+0x62c>)
 8003c76:	4013      	ands	r3, r2
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	6a11      	ldr	r1, [r2, #32]
 8003c7c:	687a      	ldr	r2, [r7, #4]
 8003c7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c80:	3a01      	subs	r2, #1
 8003c82:	0112      	lsls	r2, r2, #4
 8003c84:	4311      	orrs	r1, r2
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003c8a:	0212      	lsls	r2, r2, #8
 8003c8c:	4311      	orrs	r1, r2
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c92:	0852      	lsrs	r2, r2, #1
 8003c94:	3a01      	subs	r2, #1
 8003c96:	0552      	lsls	r2, r2, #21
 8003c98:	4311      	orrs	r1, r2
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c9e:	0852      	lsrs	r2, r2, #1
 8003ca0:	3a01      	subs	r2, #1
 8003ca2:	0652      	lsls	r2, r2, #25
 8003ca4:	4311      	orrs	r1, r2
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003caa:	06d2      	lsls	r2, r2, #27
 8003cac:	430a      	orrs	r2, r1
 8003cae:	4947      	ldr	r1, [pc, #284]	; (8003dcc <HAL_RCC_OscConfig+0x628>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cb4:	4b45      	ldr	r3, [pc, #276]	; (8003dcc <HAL_RCC_OscConfig+0x628>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a44      	ldr	r2, [pc, #272]	; (8003dcc <HAL_RCC_OscConfig+0x628>)
 8003cba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cbe:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cc0:	4b42      	ldr	r3, [pc, #264]	; (8003dcc <HAL_RCC_OscConfig+0x628>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	4a41      	ldr	r2, [pc, #260]	; (8003dcc <HAL_RCC_OscConfig+0x628>)
 8003cc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ccc:	f7fe ff18 	bl	8002b00 <HAL_GetTick>
 8003cd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cd2:	e008      	b.n	8003ce6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd4:	f7fe ff14 	bl	8002b00 <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	d901      	bls.n	8003ce6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e06e      	b.n	8003dc4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ce6:	4b39      	ldr	r3, [pc, #228]	; (8003dcc <HAL_RCC_OscConfig+0x628>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d0f0      	beq.n	8003cd4 <HAL_RCC_OscConfig+0x530>
 8003cf2:	e066      	b.n	8003dc2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf4:	4b35      	ldr	r3, [pc, #212]	; (8003dcc <HAL_RCC_OscConfig+0x628>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a34      	ldr	r2, [pc, #208]	; (8003dcc <HAL_RCC_OscConfig+0x628>)
 8003cfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cfe:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003d00:	4b32      	ldr	r3, [pc, #200]	; (8003dcc <HAL_RCC_OscConfig+0x628>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	4a31      	ldr	r2, [pc, #196]	; (8003dcc <HAL_RCC_OscConfig+0x628>)
 8003d06:	f023 0303 	bic.w	r3, r3, #3
 8003d0a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003d0c:	4b2f      	ldr	r3, [pc, #188]	; (8003dcc <HAL_RCC_OscConfig+0x628>)
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	4a2e      	ldr	r2, [pc, #184]	; (8003dcc <HAL_RCC_OscConfig+0x628>)
 8003d12:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003d16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d1a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d1c:	f7fe fef0 	bl	8002b00 <HAL_GetTick>
 8003d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d22:	e008      	b.n	8003d36 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d24:	f7fe feec 	bl	8002b00 <HAL_GetTick>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d901      	bls.n	8003d36 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e046      	b.n	8003dc4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d36:	4b25      	ldr	r3, [pc, #148]	; (8003dcc <HAL_RCC_OscConfig+0x628>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1f0      	bne.n	8003d24 <HAL_RCC_OscConfig+0x580>
 8003d42:	e03e      	b.n	8003dc2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	69db      	ldr	r3, [r3, #28]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e039      	b.n	8003dc4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003d50:	4b1e      	ldr	r3, [pc, #120]	; (8003dcc <HAL_RCC_OscConfig+0x628>)
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f003 0203 	and.w	r2, r3, #3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d12c      	bne.n	8003dbe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d123      	bne.n	8003dbe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d80:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d11b      	bne.n	8003dbe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d113      	bne.n	8003dbe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da0:	085b      	lsrs	r3, r3, #1
 8003da2:	3b01      	subs	r3, #1
 8003da4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d109      	bne.n	8003dbe <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db4:	085b      	lsrs	r3, r3, #1
 8003db6:	3b01      	subs	r3, #1
 8003db8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d001      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e000      	b.n	8003dc4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3720      	adds	r7, #32
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	019f800c 	.word	0x019f800c

08003dd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b086      	sub	sp, #24
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
 8003ddc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003dde:	2300      	movs	r3, #0
 8003de0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e11e      	b.n	800402a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dec:	4b91      	ldr	r3, [pc, #580]	; (8004034 <HAL_RCC_ClockConfig+0x260>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 030f 	and.w	r3, r3, #15
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d910      	bls.n	8003e1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dfa:	4b8e      	ldr	r3, [pc, #568]	; (8004034 <HAL_RCC_ClockConfig+0x260>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f023 020f 	bic.w	r2, r3, #15
 8003e02:	498c      	ldr	r1, [pc, #560]	; (8004034 <HAL_RCC_ClockConfig+0x260>)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	4313      	orrs	r3, r2
 8003e08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e0a:	4b8a      	ldr	r3, [pc, #552]	; (8004034 <HAL_RCC_ClockConfig+0x260>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 030f 	and.w	r3, r3, #15
 8003e12:	683a      	ldr	r2, [r7, #0]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d001      	beq.n	8003e1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e106      	b.n	800402a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d073      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	2b03      	cmp	r3, #3
 8003e2e:	d129      	bne.n	8003e84 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e30:	4b81      	ldr	r3, [pc, #516]	; (8004038 <HAL_RCC_ClockConfig+0x264>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e0f4      	b.n	800402a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003e40:	f000 f99e 	bl	8004180 <RCC_GetSysClockFreqFromPLLSource>
 8003e44:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	4a7c      	ldr	r2, [pc, #496]	; (800403c <HAL_RCC_ClockConfig+0x268>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d93f      	bls.n	8003ece <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e4e:	4b7a      	ldr	r3, [pc, #488]	; (8004038 <HAL_RCC_ClockConfig+0x264>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d009      	beq.n	8003e6e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d033      	beq.n	8003ece <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d12f      	bne.n	8003ece <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e6e:	4b72      	ldr	r3, [pc, #456]	; (8004038 <HAL_RCC_ClockConfig+0x264>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e76:	4a70      	ldr	r2, [pc, #448]	; (8004038 <HAL_RCC_ClockConfig+0x264>)
 8003e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e7c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e7e:	2380      	movs	r3, #128	; 0x80
 8003e80:	617b      	str	r3, [r7, #20]
 8003e82:	e024      	b.n	8003ece <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d107      	bne.n	8003e9c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e8c:	4b6a      	ldr	r3, [pc, #424]	; (8004038 <HAL_RCC_ClockConfig+0x264>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d109      	bne.n	8003eac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e0c6      	b.n	800402a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e9c:	4b66      	ldr	r3, [pc, #408]	; (8004038 <HAL_RCC_ClockConfig+0x264>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e0be      	b.n	800402a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003eac:	f000 f8ce 	bl	800404c <HAL_RCC_GetSysClockFreq>
 8003eb0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	4a61      	ldr	r2, [pc, #388]	; (800403c <HAL_RCC_ClockConfig+0x268>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d909      	bls.n	8003ece <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003eba:	4b5f      	ldr	r3, [pc, #380]	; (8004038 <HAL_RCC_ClockConfig+0x264>)
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ec2:	4a5d      	ldr	r2, [pc, #372]	; (8004038 <HAL_RCC_ClockConfig+0x264>)
 8003ec4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ec8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003eca:	2380      	movs	r3, #128	; 0x80
 8003ecc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003ece:	4b5a      	ldr	r3, [pc, #360]	; (8004038 <HAL_RCC_ClockConfig+0x264>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	f023 0203 	bic.w	r2, r3, #3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	4957      	ldr	r1, [pc, #348]	; (8004038 <HAL_RCC_ClockConfig+0x264>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ee0:	f7fe fe0e 	bl	8002b00 <HAL_GetTick>
 8003ee4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ee6:	e00a      	b.n	8003efe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ee8:	f7fe fe0a 	bl	8002b00 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e095      	b.n	800402a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003efe:	4b4e      	ldr	r3, [pc, #312]	; (8004038 <HAL_RCC_ClockConfig+0x264>)
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	f003 020c 	and.w	r2, r3, #12
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d1eb      	bne.n	8003ee8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d023      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f28:	4b43      	ldr	r3, [pc, #268]	; (8004038 <HAL_RCC_ClockConfig+0x264>)
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	4a42      	ldr	r2, [pc, #264]	; (8004038 <HAL_RCC_ClockConfig+0x264>)
 8003f2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f32:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0308 	and.w	r3, r3, #8
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d007      	beq.n	8003f50 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003f40:	4b3d      	ldr	r3, [pc, #244]	; (8004038 <HAL_RCC_ClockConfig+0x264>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003f48:	4a3b      	ldr	r2, [pc, #236]	; (8004038 <HAL_RCC_ClockConfig+0x264>)
 8003f4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003f4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f50:	4b39      	ldr	r3, [pc, #228]	; (8004038 <HAL_RCC_ClockConfig+0x264>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	4936      	ldr	r1, [pc, #216]	; (8004038 <HAL_RCC_ClockConfig+0x264>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	608b      	str	r3, [r1, #8]
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	2b80      	cmp	r3, #128	; 0x80
 8003f68:	d105      	bne.n	8003f76 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003f6a:	4b33      	ldr	r3, [pc, #204]	; (8004038 <HAL_RCC_ClockConfig+0x264>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	4a32      	ldr	r2, [pc, #200]	; (8004038 <HAL_RCC_ClockConfig+0x264>)
 8003f70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f74:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003f76:	4b2f      	ldr	r3, [pc, #188]	; (8004034 <HAL_RCC_ClockConfig+0x260>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 030f 	and.w	r3, r3, #15
 8003f7e:	683a      	ldr	r2, [r7, #0]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d21d      	bcs.n	8003fc0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f84:	4b2b      	ldr	r3, [pc, #172]	; (8004034 <HAL_RCC_ClockConfig+0x260>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f023 020f 	bic.w	r2, r3, #15
 8003f8c:	4929      	ldr	r1, [pc, #164]	; (8004034 <HAL_RCC_ClockConfig+0x260>)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f94:	f7fe fdb4 	bl	8002b00 <HAL_GetTick>
 8003f98:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f9a:	e00a      	b.n	8003fb2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f9c:	f7fe fdb0 	bl	8002b00 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e03b      	b.n	800402a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb2:	4b20      	ldr	r3, [pc, #128]	; (8004034 <HAL_RCC_ClockConfig+0x260>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 030f 	and.w	r3, r3, #15
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d1ed      	bne.n	8003f9c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d008      	beq.n	8003fde <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fcc:	4b1a      	ldr	r3, [pc, #104]	; (8004038 <HAL_RCC_ClockConfig+0x264>)
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	4917      	ldr	r1, [pc, #92]	; (8004038 <HAL_RCC_ClockConfig+0x264>)
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d009      	beq.n	8003ffe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fea:	4b13      	ldr	r3, [pc, #76]	; (8004038 <HAL_RCC_ClockConfig+0x264>)
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	00db      	lsls	r3, r3, #3
 8003ff8:	490f      	ldr	r1, [pc, #60]	; (8004038 <HAL_RCC_ClockConfig+0x264>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ffe:	f000 f825 	bl	800404c <HAL_RCC_GetSysClockFreq>
 8004002:	4602      	mov	r2, r0
 8004004:	4b0c      	ldr	r3, [pc, #48]	; (8004038 <HAL_RCC_ClockConfig+0x264>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	091b      	lsrs	r3, r3, #4
 800400a:	f003 030f 	and.w	r3, r3, #15
 800400e:	490c      	ldr	r1, [pc, #48]	; (8004040 <HAL_RCC_ClockConfig+0x26c>)
 8004010:	5ccb      	ldrb	r3, [r1, r3]
 8004012:	f003 031f 	and.w	r3, r3, #31
 8004016:	fa22 f303 	lsr.w	r3, r2, r3
 800401a:	4a0a      	ldr	r2, [pc, #40]	; (8004044 <HAL_RCC_ClockConfig+0x270>)
 800401c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800401e:	4b0a      	ldr	r3, [pc, #40]	; (8004048 <HAL_RCC_ClockConfig+0x274>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4618      	mov	r0, r3
 8004024:	f7fe fd20 	bl	8002a68 <HAL_InitTick>
 8004028:	4603      	mov	r3, r0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	40022000 	.word	0x40022000
 8004038:	40021000 	.word	0x40021000
 800403c:	04c4b400 	.word	0x04c4b400
 8004040:	08006e88 	.word	0x08006e88
 8004044:	20000000 	.word	0x20000000
 8004048:	20000004 	.word	0x20000004

0800404c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004052:	4b2c      	ldr	r3, [pc, #176]	; (8004104 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f003 030c 	and.w	r3, r3, #12
 800405a:	2b04      	cmp	r3, #4
 800405c:	d102      	bne.n	8004064 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800405e:	4b2a      	ldr	r3, [pc, #168]	; (8004108 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004060:	613b      	str	r3, [r7, #16]
 8004062:	e047      	b.n	80040f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004064:	4b27      	ldr	r3, [pc, #156]	; (8004104 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	f003 030c 	and.w	r3, r3, #12
 800406c:	2b08      	cmp	r3, #8
 800406e:	d102      	bne.n	8004076 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004070:	4b26      	ldr	r3, [pc, #152]	; (800410c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004072:	613b      	str	r3, [r7, #16]
 8004074:	e03e      	b.n	80040f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004076:	4b23      	ldr	r3, [pc, #140]	; (8004104 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 030c 	and.w	r3, r3, #12
 800407e:	2b0c      	cmp	r3, #12
 8004080:	d136      	bne.n	80040f0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004082:	4b20      	ldr	r3, [pc, #128]	; (8004104 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004084:	68db      	ldr	r3, [r3, #12]
 8004086:	f003 0303 	and.w	r3, r3, #3
 800408a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800408c:	4b1d      	ldr	r3, [pc, #116]	; (8004104 <HAL_RCC_GetSysClockFreq+0xb8>)
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	091b      	lsrs	r3, r3, #4
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	3301      	adds	r3, #1
 8004098:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2b03      	cmp	r3, #3
 800409e:	d10c      	bne.n	80040ba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040a0:	4a1a      	ldr	r2, [pc, #104]	; (800410c <HAL_RCC_GetSysClockFreq+0xc0>)
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040a8:	4a16      	ldr	r2, [pc, #88]	; (8004104 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040aa:	68d2      	ldr	r2, [r2, #12]
 80040ac:	0a12      	lsrs	r2, r2, #8
 80040ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040b2:	fb02 f303 	mul.w	r3, r2, r3
 80040b6:	617b      	str	r3, [r7, #20]
      break;
 80040b8:	e00c      	b.n	80040d4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040ba:	4a13      	ldr	r2, [pc, #76]	; (8004108 <HAL_RCC_GetSysClockFreq+0xbc>)
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c2:	4a10      	ldr	r2, [pc, #64]	; (8004104 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040c4:	68d2      	ldr	r2, [r2, #12]
 80040c6:	0a12      	lsrs	r2, r2, #8
 80040c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80040cc:	fb02 f303 	mul.w	r3, r2, r3
 80040d0:	617b      	str	r3, [r7, #20]
      break;
 80040d2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040d4:	4b0b      	ldr	r3, [pc, #44]	; (8004104 <HAL_RCC_GetSysClockFreq+0xb8>)
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	0e5b      	lsrs	r3, r3, #25
 80040da:	f003 0303 	and.w	r3, r3, #3
 80040de:	3301      	adds	r3, #1
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ec:	613b      	str	r3, [r7, #16]
 80040ee:	e001      	b.n	80040f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80040f4:	693b      	ldr	r3, [r7, #16]
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	371c      	adds	r7, #28
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr
 8004102:	bf00      	nop
 8004104:	40021000 	.word	0x40021000
 8004108:	00f42400 	.word	0x00f42400
 800410c:	016e3600 	.word	0x016e3600

08004110 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004110:	b480      	push	{r7}
 8004112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004114:	4b03      	ldr	r3, [pc, #12]	; (8004124 <HAL_RCC_GetHCLKFreq+0x14>)
 8004116:	681b      	ldr	r3, [r3, #0]
}
 8004118:	4618      	mov	r0, r3
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	20000000 	.word	0x20000000

08004128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800412c:	f7ff fff0 	bl	8004110 <HAL_RCC_GetHCLKFreq>
 8004130:	4602      	mov	r2, r0
 8004132:	4b06      	ldr	r3, [pc, #24]	; (800414c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	0a1b      	lsrs	r3, r3, #8
 8004138:	f003 0307 	and.w	r3, r3, #7
 800413c:	4904      	ldr	r1, [pc, #16]	; (8004150 <HAL_RCC_GetPCLK1Freq+0x28>)
 800413e:	5ccb      	ldrb	r3, [r1, r3]
 8004140:	f003 031f 	and.w	r3, r3, #31
 8004144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004148:	4618      	mov	r0, r3
 800414a:	bd80      	pop	{r7, pc}
 800414c:	40021000 	.word	0x40021000
 8004150:	08006e98 	.word	0x08006e98

08004154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004158:	f7ff ffda 	bl	8004110 <HAL_RCC_GetHCLKFreq>
 800415c:	4602      	mov	r2, r0
 800415e:	4b06      	ldr	r3, [pc, #24]	; (8004178 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	0adb      	lsrs	r3, r3, #11
 8004164:	f003 0307 	and.w	r3, r3, #7
 8004168:	4904      	ldr	r1, [pc, #16]	; (800417c <HAL_RCC_GetPCLK2Freq+0x28>)
 800416a:	5ccb      	ldrb	r3, [r1, r3]
 800416c:	f003 031f 	and.w	r3, r3, #31
 8004170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004174:	4618      	mov	r0, r3
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40021000 	.word	0x40021000
 800417c:	08006e98 	.word	0x08006e98

08004180 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004180:	b480      	push	{r7}
 8004182:	b087      	sub	sp, #28
 8004184:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004186:	4b1e      	ldr	r3, [pc, #120]	; (8004200 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	f003 0303 	and.w	r3, r3, #3
 800418e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004190:	4b1b      	ldr	r3, [pc, #108]	; (8004200 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004192:	68db      	ldr	r3, [r3, #12]
 8004194:	091b      	lsrs	r3, r3, #4
 8004196:	f003 030f 	and.w	r3, r3, #15
 800419a:	3301      	adds	r3, #1
 800419c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	2b03      	cmp	r3, #3
 80041a2:	d10c      	bne.n	80041be <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041a4:	4a17      	ldr	r2, [pc, #92]	; (8004204 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ac:	4a14      	ldr	r2, [pc, #80]	; (8004200 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041ae:	68d2      	ldr	r2, [r2, #12]
 80041b0:	0a12      	lsrs	r2, r2, #8
 80041b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041b6:	fb02 f303 	mul.w	r3, r2, r3
 80041ba:	617b      	str	r3, [r7, #20]
    break;
 80041bc:	e00c      	b.n	80041d8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041be:	4a12      	ldr	r2, [pc, #72]	; (8004208 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c6:	4a0e      	ldr	r2, [pc, #56]	; (8004200 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041c8:	68d2      	ldr	r2, [r2, #12]
 80041ca:	0a12      	lsrs	r2, r2, #8
 80041cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80041d0:	fb02 f303 	mul.w	r3, r2, r3
 80041d4:	617b      	str	r3, [r7, #20]
    break;
 80041d6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041d8:	4b09      	ldr	r3, [pc, #36]	; (8004200 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	0e5b      	lsrs	r3, r3, #25
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	3301      	adds	r3, #1
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80041f2:	687b      	ldr	r3, [r7, #4]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	371c      	adds	r7, #28
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr
 8004200:	40021000 	.word	0x40021000
 8004204:	016e3600 	.word	0x016e3600
 8004208:	00f42400 	.word	0x00f42400

0800420c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004214:	2300      	movs	r3, #0
 8004216:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004218:	2300      	movs	r3, #0
 800421a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004224:	2b00      	cmp	r3, #0
 8004226:	f000 8098 	beq.w	800435a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800422a:	2300      	movs	r3, #0
 800422c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800422e:	4b43      	ldr	r3, [pc, #268]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d10d      	bne.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800423a:	4b40      	ldr	r3, [pc, #256]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800423c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423e:	4a3f      	ldr	r2, [pc, #252]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004244:	6593      	str	r3, [r2, #88]	; 0x58
 8004246:	4b3d      	ldr	r3, [pc, #244]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800424a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800424e:	60bb      	str	r3, [r7, #8]
 8004250:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004252:	2301      	movs	r3, #1
 8004254:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004256:	4b3a      	ldr	r3, [pc, #232]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a39      	ldr	r2, [pc, #228]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800425c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004260:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004262:	f7fe fc4d 	bl	8002b00 <HAL_GetTick>
 8004266:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004268:	e009      	b.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800426a:	f7fe fc49 	bl	8002b00 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d902      	bls.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	74fb      	strb	r3, [r7, #19]
        break;
 800427c:	e005      	b.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800427e:	4b30      	ldr	r3, [pc, #192]	; (8004340 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0ef      	beq.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800428a:	7cfb      	ldrb	r3, [r7, #19]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d159      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004290:	4b2a      	ldr	r3, [pc, #168]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800429a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d01e      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a6:	697a      	ldr	r2, [r7, #20]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d019      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80042ac:	4b23      	ldr	r3, [pc, #140]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80042b8:	4b20      	ldr	r3, [pc, #128]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042be:	4a1f      	ldr	r2, [pc, #124]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80042c8:	4b1c      	ldr	r3, [pc, #112]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ce:	4a1b      	ldr	r2, [pc, #108]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80042d8:	4a18      	ldr	r2, [pc, #96]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d016      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ea:	f7fe fc09 	bl	8002b00 <HAL_GetTick>
 80042ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042f0:	e00b      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042f2:	f7fe fc05 	bl	8002b00 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004300:	4293      	cmp	r3, r2
 8004302:	d902      	bls.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004304:	2303      	movs	r3, #3
 8004306:	74fb      	strb	r3, [r7, #19]
            break;
 8004308:	e006      	b.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800430a:	4b0c      	ldr	r3, [pc, #48]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800430c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004310:	f003 0302 	and.w	r3, r3, #2
 8004314:	2b00      	cmp	r3, #0
 8004316:	d0ec      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004318:	7cfb      	ldrb	r3, [r7, #19]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10b      	bne.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800431e:	4b07      	ldr	r3, [pc, #28]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004324:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800432c:	4903      	ldr	r1, [pc, #12]	; (800433c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800432e:	4313      	orrs	r3, r2
 8004330:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004334:	e008      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004336:	7cfb      	ldrb	r3, [r7, #19]
 8004338:	74bb      	strb	r3, [r7, #18]
 800433a:	e005      	b.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800433c:	40021000 	.word	0x40021000
 8004340:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004344:	7cfb      	ldrb	r3, [r7, #19]
 8004346:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004348:	7c7b      	ldrb	r3, [r7, #17]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d105      	bne.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800434e:	4ba7      	ldr	r3, [pc, #668]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004352:	4aa6      	ldr	r2, [pc, #664]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004354:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004358:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d00a      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004366:	4ba1      	ldr	r3, [pc, #644]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436c:	f023 0203 	bic.w	r2, r3, #3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	499d      	ldr	r1, [pc, #628]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004376:	4313      	orrs	r3, r2
 8004378:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00a      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004388:	4b98      	ldr	r3, [pc, #608]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800438a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800438e:	f023 020c 	bic.w	r2, r3, #12
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	4995      	ldr	r1, [pc, #596]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004398:	4313      	orrs	r3, r2
 800439a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0304 	and.w	r3, r3, #4
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00a      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80043aa:	4b90      	ldr	r3, [pc, #576]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	498c      	ldr	r1, [pc, #560]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0308 	and.w	r3, r3, #8
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00a      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80043cc:	4b87      	ldr	r3, [pc, #540]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	4984      	ldr	r1, [pc, #528]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f003 0310 	and.w	r3, r3, #16
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00a      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043ee:	4b7f      	ldr	r3, [pc, #508]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	497b      	ldr	r1, [pc, #492]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 0320 	and.w	r3, r3, #32
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00a      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004410:	4b76      	ldr	r3, [pc, #472]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004416:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	4973      	ldr	r1, [pc, #460]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004420:	4313      	orrs	r3, r2
 8004422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00a      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004432:	4b6e      	ldr	r3, [pc, #440]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004438:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	496a      	ldr	r1, [pc, #424]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004442:	4313      	orrs	r3, r2
 8004444:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004450:	2b00      	cmp	r3, #0
 8004452:	d00a      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004454:	4b65      	ldr	r3, [pc, #404]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	4962      	ldr	r1, [pc, #392]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004464:	4313      	orrs	r3, r2
 8004466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00a      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004476:	4b5d      	ldr	r3, [pc, #372]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004484:	4959      	ldr	r1, [pc, #356]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004486:	4313      	orrs	r3, r2
 8004488:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00a      	beq.n	80044ae <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004498:	4b54      	ldr	r3, [pc, #336]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800449a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800449e:	f023 0203 	bic.w	r2, r3, #3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a6:	4951      	ldr	r1, [pc, #324]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00a      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044ba:	4b4c      	ldr	r3, [pc, #304]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c8:	4948      	ldr	r1, [pc, #288]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d015      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044dc:	4b43      	ldr	r3, [pc, #268]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ea:	4940      	ldr	r1, [pc, #256]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044fa:	d105      	bne.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044fc:	4b3b      	ldr	r3, [pc, #236]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	4a3a      	ldr	r2, [pc, #232]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004502:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004506:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004510:	2b00      	cmp	r3, #0
 8004512:	d015      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004514:	4b35      	ldr	r3, [pc, #212]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800451a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004522:	4932      	ldr	r1, [pc, #200]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004524:	4313      	orrs	r3, r2
 8004526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800452e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004532:	d105      	bne.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004534:	4b2d      	ldr	r3, [pc, #180]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	4a2c      	ldr	r2, [pc, #176]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800453a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800453e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004548:	2b00      	cmp	r3, #0
 800454a:	d015      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800454c:	4b27      	ldr	r3, [pc, #156]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800454e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004552:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800455a:	4924      	ldr	r1, [pc, #144]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800455c:	4313      	orrs	r3, r2
 800455e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004566:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800456a:	d105      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800456c:	4b1f      	ldr	r3, [pc, #124]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	4a1e      	ldr	r2, [pc, #120]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004572:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004576:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d015      	beq.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004584:	4b19      	ldr	r3, [pc, #100]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800458a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004592:	4916      	ldr	r1, [pc, #88]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004594:	4313      	orrs	r3, r2
 8004596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800459e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045a2:	d105      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045a4:	4b11      	ldr	r3, [pc, #68]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	4a10      	ldr	r2, [pc, #64]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045ae:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d019      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80045bc:	4b0b      	ldr	r3, [pc, #44]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	4908      	ldr	r1, [pc, #32]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045da:	d109      	bne.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045dc:	4b03      	ldr	r3, [pc, #12]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	4a02      	ldr	r2, [pc, #8]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80045e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045e6:	60d3      	str	r3, [r2, #12]
 80045e8:	e002      	b.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80045ea:	bf00      	nop
 80045ec:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d015      	beq.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80045fc:	4b29      	ldr	r3, [pc, #164]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80045fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004602:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800460a:	4926      	ldr	r1, [pc, #152]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800460c:	4313      	orrs	r3, r2
 800460e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004616:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800461a:	d105      	bne.n	8004628 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800461c:	4b21      	ldr	r3, [pc, #132]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	4a20      	ldr	r2, [pc, #128]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004622:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004626:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d015      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004634:	4b1b      	ldr	r3, [pc, #108]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800463a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004642:	4918      	ldr	r1, [pc, #96]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004644:	4313      	orrs	r3, r2
 8004646:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800464e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004652:	d105      	bne.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004654:	4b13      	ldr	r3, [pc, #76]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	4a12      	ldr	r2, [pc, #72]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800465a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800465e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d015      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800466c:	4b0d      	ldr	r3, [pc, #52]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800466e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004672:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800467a:	490a      	ldr	r1, [pc, #40]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800467c:	4313      	orrs	r3, r2
 800467e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004686:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800468a:	d105      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800468c:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	4a04      	ldr	r2, [pc, #16]	; (80046a4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004692:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004696:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004698:	7cbb      	ldrb	r3, [r7, #18]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3718      	adds	r7, #24
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	40021000 	.word	0x40021000

080046a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e049      	b.n	800474e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d106      	bne.n	80046d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f7fe f802 	bl	80026d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2202      	movs	r2, #2
 80046d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	3304      	adds	r3, #4
 80046e4:	4619      	mov	r1, r3
 80046e6:	4610      	mov	r0, r2
 80046e8:	f000 fc0e 	bl	8004f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
	...

08004758 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b084      	sub	sp, #16
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d109      	bne.n	800477c <HAL_TIM_PWM_Start+0x24>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b01      	cmp	r3, #1
 8004772:	bf14      	ite	ne
 8004774:	2301      	movne	r3, #1
 8004776:	2300      	moveq	r3, #0
 8004778:	b2db      	uxtb	r3, r3
 800477a:	e03c      	b.n	80047f6 <HAL_TIM_PWM_Start+0x9e>
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	2b04      	cmp	r3, #4
 8004780:	d109      	bne.n	8004796 <HAL_TIM_PWM_Start+0x3e>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b01      	cmp	r3, #1
 800478c:	bf14      	ite	ne
 800478e:	2301      	movne	r3, #1
 8004790:	2300      	moveq	r3, #0
 8004792:	b2db      	uxtb	r3, r3
 8004794:	e02f      	b.n	80047f6 <HAL_TIM_PWM_Start+0x9e>
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b08      	cmp	r3, #8
 800479a:	d109      	bne.n	80047b0 <HAL_TIM_PWM_Start+0x58>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	bf14      	ite	ne
 80047a8:	2301      	movne	r3, #1
 80047aa:	2300      	moveq	r3, #0
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	e022      	b.n	80047f6 <HAL_TIM_PWM_Start+0x9e>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2b0c      	cmp	r3, #12
 80047b4:	d109      	bne.n	80047ca <HAL_TIM_PWM_Start+0x72>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b01      	cmp	r3, #1
 80047c0:	bf14      	ite	ne
 80047c2:	2301      	movne	r3, #1
 80047c4:	2300      	moveq	r3, #0
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	e015      	b.n	80047f6 <HAL_TIM_PWM_Start+0x9e>
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	2b10      	cmp	r3, #16
 80047ce:	d109      	bne.n	80047e4 <HAL_TIM_PWM_Start+0x8c>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b01      	cmp	r3, #1
 80047da:	bf14      	ite	ne
 80047dc:	2301      	movne	r3, #1
 80047de:	2300      	moveq	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	e008      	b.n	80047f6 <HAL_TIM_PWM_Start+0x9e>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	bf14      	ite	ne
 80047f0:	2301      	movne	r3, #1
 80047f2:	2300      	moveq	r3, #0
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e0a6      	b.n	800494c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d104      	bne.n	800480e <HAL_TIM_PWM_Start+0xb6>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800480c:	e023      	b.n	8004856 <HAL_TIM_PWM_Start+0xfe>
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b04      	cmp	r3, #4
 8004812:	d104      	bne.n	800481e <HAL_TIM_PWM_Start+0xc6>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800481c:	e01b      	b.n	8004856 <HAL_TIM_PWM_Start+0xfe>
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2b08      	cmp	r3, #8
 8004822:	d104      	bne.n	800482e <HAL_TIM_PWM_Start+0xd6>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2202      	movs	r2, #2
 8004828:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800482c:	e013      	b.n	8004856 <HAL_TIM_PWM_Start+0xfe>
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	2b0c      	cmp	r3, #12
 8004832:	d104      	bne.n	800483e <HAL_TIM_PWM_Start+0xe6>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2202      	movs	r2, #2
 8004838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800483c:	e00b      	b.n	8004856 <HAL_TIM_PWM_Start+0xfe>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b10      	cmp	r3, #16
 8004842:	d104      	bne.n	800484e <HAL_TIM_PWM_Start+0xf6>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2202      	movs	r2, #2
 8004848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800484c:	e003      	b.n	8004856 <HAL_TIM_PWM_Start+0xfe>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2202      	movs	r2, #2
 8004852:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2201      	movs	r2, #1
 800485c:	6839      	ldr	r1, [r7, #0]
 800485e:	4618      	mov	r0, r3
 8004860:	f000 ff24 	bl	80056ac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a3a      	ldr	r2, [pc, #232]	; (8004954 <HAL_TIM_PWM_Start+0x1fc>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d018      	beq.n	80048a0 <HAL_TIM_PWM_Start+0x148>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a39      	ldr	r2, [pc, #228]	; (8004958 <HAL_TIM_PWM_Start+0x200>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d013      	beq.n	80048a0 <HAL_TIM_PWM_Start+0x148>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a37      	ldr	r2, [pc, #220]	; (800495c <HAL_TIM_PWM_Start+0x204>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d00e      	beq.n	80048a0 <HAL_TIM_PWM_Start+0x148>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a36      	ldr	r2, [pc, #216]	; (8004960 <HAL_TIM_PWM_Start+0x208>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d009      	beq.n	80048a0 <HAL_TIM_PWM_Start+0x148>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a34      	ldr	r2, [pc, #208]	; (8004964 <HAL_TIM_PWM_Start+0x20c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d004      	beq.n	80048a0 <HAL_TIM_PWM_Start+0x148>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a33      	ldr	r2, [pc, #204]	; (8004968 <HAL_TIM_PWM_Start+0x210>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d101      	bne.n	80048a4 <HAL_TIM_PWM_Start+0x14c>
 80048a0:	2301      	movs	r3, #1
 80048a2:	e000      	b.n	80048a6 <HAL_TIM_PWM_Start+0x14e>
 80048a4:	2300      	movs	r3, #0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d007      	beq.n	80048ba <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80048b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a25      	ldr	r2, [pc, #148]	; (8004954 <HAL_TIM_PWM_Start+0x1fc>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d022      	beq.n	800490a <HAL_TIM_PWM_Start+0x1b2>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048cc:	d01d      	beq.n	800490a <HAL_TIM_PWM_Start+0x1b2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a26      	ldr	r2, [pc, #152]	; (800496c <HAL_TIM_PWM_Start+0x214>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d018      	beq.n	800490a <HAL_TIM_PWM_Start+0x1b2>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a24      	ldr	r2, [pc, #144]	; (8004970 <HAL_TIM_PWM_Start+0x218>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d013      	beq.n	800490a <HAL_TIM_PWM_Start+0x1b2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a23      	ldr	r2, [pc, #140]	; (8004974 <HAL_TIM_PWM_Start+0x21c>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d00e      	beq.n	800490a <HAL_TIM_PWM_Start+0x1b2>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a19      	ldr	r2, [pc, #100]	; (8004958 <HAL_TIM_PWM_Start+0x200>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d009      	beq.n	800490a <HAL_TIM_PWM_Start+0x1b2>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a18      	ldr	r2, [pc, #96]	; (800495c <HAL_TIM_PWM_Start+0x204>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d004      	beq.n	800490a <HAL_TIM_PWM_Start+0x1b2>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a18      	ldr	r2, [pc, #96]	; (8004968 <HAL_TIM_PWM_Start+0x210>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d115      	bne.n	8004936 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	689a      	ldr	r2, [r3, #8]
 8004910:	4b19      	ldr	r3, [pc, #100]	; (8004978 <HAL_TIM_PWM_Start+0x220>)
 8004912:	4013      	ands	r3, r2
 8004914:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2b06      	cmp	r3, #6
 800491a:	d015      	beq.n	8004948 <HAL_TIM_PWM_Start+0x1f0>
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004922:	d011      	beq.n	8004948 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f042 0201 	orr.w	r2, r2, #1
 8004932:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004934:	e008      	b.n	8004948 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f042 0201 	orr.w	r2, r2, #1
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	e000      	b.n	800494a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004948:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3710      	adds	r7, #16
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}
 8004954:	40012c00 	.word	0x40012c00
 8004958:	40013400 	.word	0x40013400
 800495c:	40014000 	.word	0x40014000
 8004960:	40014400 	.word	0x40014400
 8004964:	40014800 	.word	0x40014800
 8004968:	40015000 	.word	0x40015000
 800496c:	40000400 	.word	0x40000400
 8004970:	40000800 	.word	0x40000800
 8004974:	40000c00 	.word	0x40000c00
 8004978:	00010007 	.word	0x00010007

0800497c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b02      	cmp	r3, #2
 8004990:	d122      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b02      	cmp	r3, #2
 800499e:	d11b      	bne.n	80049d8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f06f 0202 	mvn.w	r2, #2
 80049a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2201      	movs	r2, #1
 80049ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	699b      	ldr	r3, [r3, #24]
 80049b6:	f003 0303 	and.w	r3, r3, #3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d003      	beq.n	80049c6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 fa84 	bl	8004ecc <HAL_TIM_IC_CaptureCallback>
 80049c4:	e005      	b.n	80049d2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 fa76 	bl	8004eb8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f000 fa87 	bl	8004ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f003 0304 	and.w	r3, r3, #4
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	d122      	bne.n	8004a2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b04      	cmp	r3, #4
 80049f2:	d11b      	bne.n	8004a2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f06f 0204 	mvn.w	r2, #4
 80049fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2202      	movs	r2, #2
 8004a02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 fa5a 	bl	8004ecc <HAL_TIM_IC_CaptureCallback>
 8004a18:	e005      	b.n	8004a26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 fa4c 	bl	8004eb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 fa5d 	bl	8004ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f003 0308 	and.w	r3, r3, #8
 8004a36:	2b08      	cmp	r3, #8
 8004a38:	d122      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f003 0308 	and.w	r3, r3, #8
 8004a44:	2b08      	cmp	r3, #8
 8004a46:	d11b      	bne.n	8004a80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f06f 0208 	mvn.w	r2, #8
 8004a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2204      	movs	r2, #4
 8004a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	69db      	ldr	r3, [r3, #28]
 8004a5e:	f003 0303 	and.w	r3, r3, #3
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fa30 	bl	8004ecc <HAL_TIM_IC_CaptureCallback>
 8004a6c:	e005      	b.n	8004a7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fa22 	bl	8004eb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 fa33 	bl	8004ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f003 0310 	and.w	r3, r3, #16
 8004a8a:	2b10      	cmp	r3, #16
 8004a8c:	d122      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f003 0310 	and.w	r3, r3, #16
 8004a98:	2b10      	cmp	r3, #16
 8004a9a:	d11b      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f06f 0210 	mvn.w	r2, #16
 8004aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2208      	movs	r2, #8
 8004aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 fa06 	bl	8004ecc <HAL_TIM_IC_CaptureCallback>
 8004ac0:	e005      	b.n	8004ace <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f9f8 	bl	8004eb8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 fa09 	bl	8004ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d10e      	bne.n	8004b00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f003 0301 	and.w	r3, r3, #1
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d107      	bne.n	8004b00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f06f 0201 	mvn.w	r2, #1
 8004af8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f9d2 	bl	8004ea4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b0a:	2b80      	cmp	r3, #128	; 0x80
 8004b0c:	d10e      	bne.n	8004b2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b18:	2b80      	cmp	r3, #128	; 0x80
 8004b1a:	d107      	bne.n	8004b2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 ff38 	bl	800599c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b3a:	d10e      	bne.n	8004b5a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b46:	2b80      	cmp	r3, #128	; 0x80
 8004b48:	d107      	bne.n	8004b5a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 ff2b 	bl	80059b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	691b      	ldr	r3, [r3, #16]
 8004b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b64:	2b40      	cmp	r3, #64	; 0x40
 8004b66:	d10e      	bne.n	8004b86 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b72:	2b40      	cmp	r3, #64	; 0x40
 8004b74:	d107      	bne.n	8004b86 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	f000 f9b7 	bl	8004ef4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	f003 0320 	and.w	r3, r3, #32
 8004b90:	2b20      	cmp	r3, #32
 8004b92:	d10e      	bne.n	8004bb2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	f003 0320 	and.w	r3, r3, #32
 8004b9e:	2b20      	cmp	r3, #32
 8004ba0:	d107      	bne.n	8004bb2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f06f 0220 	mvn.w	r2, #32
 8004baa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 feeb 	bl	8005988 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bbc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bc0:	d10f      	bne.n	8004be2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bd0:	d107      	bne.n	8004be2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 fef1 	bl	80059c4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004bf0:	d10f      	bne.n	8004c12 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004bfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c00:	d107      	bne.n	8004c12 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004c0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 fee3 	bl	80059d8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	691b      	ldr	r3, [r3, #16]
 8004c18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c20:	d10f      	bne.n	8004c42 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	68db      	ldr	r3, [r3, #12]
 8004c28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c30:	d107      	bne.n	8004c42 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 fed5 	bl	80059ec <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c50:	d10f      	bne.n	8004c72 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c60:	d107      	bne.n	8004c72 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004c6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 fec7 	bl	8005a00 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c72:	bf00      	nop
 8004c74:	3708      	adds	r7, #8
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
	...

08004c7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b086      	sub	sp, #24
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	60f8      	str	r0, [r7, #12]
 8004c84:	60b9      	str	r1, [r7, #8]
 8004c86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d101      	bne.n	8004c9a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c96:	2302      	movs	r3, #2
 8004c98:	e0ff      	b.n	8004e9a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2b14      	cmp	r3, #20
 8004ca6:	f200 80f0 	bhi.w	8004e8a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004caa:	a201      	add	r2, pc, #4	; (adr r2, 8004cb0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb0:	08004d05 	.word	0x08004d05
 8004cb4:	08004e8b 	.word	0x08004e8b
 8004cb8:	08004e8b 	.word	0x08004e8b
 8004cbc:	08004e8b 	.word	0x08004e8b
 8004cc0:	08004d45 	.word	0x08004d45
 8004cc4:	08004e8b 	.word	0x08004e8b
 8004cc8:	08004e8b 	.word	0x08004e8b
 8004ccc:	08004e8b 	.word	0x08004e8b
 8004cd0:	08004d87 	.word	0x08004d87
 8004cd4:	08004e8b 	.word	0x08004e8b
 8004cd8:	08004e8b 	.word	0x08004e8b
 8004cdc:	08004e8b 	.word	0x08004e8b
 8004ce0:	08004dc7 	.word	0x08004dc7
 8004ce4:	08004e8b 	.word	0x08004e8b
 8004ce8:	08004e8b 	.word	0x08004e8b
 8004cec:	08004e8b 	.word	0x08004e8b
 8004cf0:	08004e09 	.word	0x08004e09
 8004cf4:	08004e8b 	.word	0x08004e8b
 8004cf8:	08004e8b 	.word	0x08004e8b
 8004cfc:	08004e8b 	.word	0x08004e8b
 8004d00:	08004e49 	.word	0x08004e49
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68b9      	ldr	r1, [r7, #8]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f000 f9a4 	bl	8005058 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	699a      	ldr	r2, [r3, #24]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f042 0208 	orr.w	r2, r2, #8
 8004d1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	699a      	ldr	r2, [r3, #24]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 0204 	bic.w	r2, r2, #4
 8004d2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6999      	ldr	r1, [r3, #24]
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	691a      	ldr	r2, [r3, #16]
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	430a      	orrs	r2, r1
 8004d40:	619a      	str	r2, [r3, #24]
      break;
 8004d42:	e0a5      	b.n	8004e90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68b9      	ldr	r1, [r7, #8]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f000 fa1e 	bl	800518c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	699a      	ldr	r2, [r3, #24]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	699a      	ldr	r2, [r3, #24]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6999      	ldr	r1, [r3, #24]
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	691b      	ldr	r3, [r3, #16]
 8004d7a:	021a      	lsls	r2, r3, #8
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	430a      	orrs	r2, r1
 8004d82:	619a      	str	r2, [r3, #24]
      break;
 8004d84:	e084      	b.n	8004e90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68b9      	ldr	r1, [r7, #8]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f000 fa91 	bl	80052b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	69da      	ldr	r2, [r3, #28]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f042 0208 	orr.w	r2, r2, #8
 8004da0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	69da      	ldr	r2, [r3, #28]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f022 0204 	bic.w	r2, r2, #4
 8004db0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	69d9      	ldr	r1, [r3, #28]
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	691a      	ldr	r2, [r3, #16]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	430a      	orrs	r2, r1
 8004dc2:	61da      	str	r2, [r3, #28]
      break;
 8004dc4:	e064      	b.n	8004e90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68b9      	ldr	r1, [r7, #8]
 8004dcc:	4618      	mov	r0, r3
 8004dce:	f000 fb03 	bl	80053d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	69da      	ldr	r2, [r3, #28]
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004de0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	69da      	ldr	r2, [r3, #28]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004df0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	69d9      	ldr	r1, [r3, #28]
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	021a      	lsls	r2, r3, #8
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	430a      	orrs	r2, r1
 8004e04:	61da      	str	r2, [r3, #28]
      break;
 8004e06:	e043      	b.n	8004e90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68b9      	ldr	r1, [r7, #8]
 8004e0e:	4618      	mov	r0, r3
 8004e10:	f000 fb76 	bl	8005500 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f042 0208 	orr.w	r2, r2, #8
 8004e22:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f022 0204 	bic.w	r2, r2, #4
 8004e32:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	691a      	ldr	r2, [r3, #16]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004e46:	e023      	b.n	8004e90 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	68b9      	ldr	r1, [r7, #8]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f000 fbc0 	bl	80055d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e62:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e72:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	021a      	lsls	r2, r3, #8
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	430a      	orrs	r2, r1
 8004e86:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004e88:	e002      	b.n	8004e90 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	75fb      	strb	r3, [r7, #23]
      break;
 8004e8e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e98:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3718      	adds	r7, #24
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop

08004ea4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ee8:	bf00      	nop
 8004eea:	370c      	adds	r7, #12
 8004eec:	46bd      	mov	sp, r7
 8004eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef2:	4770      	bx	lr

08004ef4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004efc:	bf00      	nop
 8004efe:	370c      	adds	r7, #12
 8004f00:	46bd      	mov	sp, r7
 8004f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f06:	4770      	bx	lr

08004f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a46      	ldr	r2, [pc, #280]	; (8005034 <TIM_Base_SetConfig+0x12c>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d017      	beq.n	8004f50 <TIM_Base_SetConfig+0x48>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f26:	d013      	beq.n	8004f50 <TIM_Base_SetConfig+0x48>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	4a43      	ldr	r2, [pc, #268]	; (8005038 <TIM_Base_SetConfig+0x130>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d00f      	beq.n	8004f50 <TIM_Base_SetConfig+0x48>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a42      	ldr	r2, [pc, #264]	; (800503c <TIM_Base_SetConfig+0x134>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d00b      	beq.n	8004f50 <TIM_Base_SetConfig+0x48>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a41      	ldr	r2, [pc, #260]	; (8005040 <TIM_Base_SetConfig+0x138>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d007      	beq.n	8004f50 <TIM_Base_SetConfig+0x48>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a40      	ldr	r2, [pc, #256]	; (8005044 <TIM_Base_SetConfig+0x13c>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d003      	beq.n	8004f50 <TIM_Base_SetConfig+0x48>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a3f      	ldr	r2, [pc, #252]	; (8005048 <TIM_Base_SetConfig+0x140>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d108      	bne.n	8004f62 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a33      	ldr	r2, [pc, #204]	; (8005034 <TIM_Base_SetConfig+0x12c>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d023      	beq.n	8004fb2 <TIM_Base_SetConfig+0xaa>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f70:	d01f      	beq.n	8004fb2 <TIM_Base_SetConfig+0xaa>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a30      	ldr	r2, [pc, #192]	; (8005038 <TIM_Base_SetConfig+0x130>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d01b      	beq.n	8004fb2 <TIM_Base_SetConfig+0xaa>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a2f      	ldr	r2, [pc, #188]	; (800503c <TIM_Base_SetConfig+0x134>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d017      	beq.n	8004fb2 <TIM_Base_SetConfig+0xaa>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a2e      	ldr	r2, [pc, #184]	; (8005040 <TIM_Base_SetConfig+0x138>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d013      	beq.n	8004fb2 <TIM_Base_SetConfig+0xaa>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a2d      	ldr	r2, [pc, #180]	; (8005044 <TIM_Base_SetConfig+0x13c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d00f      	beq.n	8004fb2 <TIM_Base_SetConfig+0xaa>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a2d      	ldr	r2, [pc, #180]	; (800504c <TIM_Base_SetConfig+0x144>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d00b      	beq.n	8004fb2 <TIM_Base_SetConfig+0xaa>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a2c      	ldr	r2, [pc, #176]	; (8005050 <TIM_Base_SetConfig+0x148>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d007      	beq.n	8004fb2 <TIM_Base_SetConfig+0xaa>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a2b      	ldr	r2, [pc, #172]	; (8005054 <TIM_Base_SetConfig+0x14c>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d003      	beq.n	8004fb2 <TIM_Base_SetConfig+0xaa>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a26      	ldr	r2, [pc, #152]	; (8005048 <TIM_Base_SetConfig+0x140>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d108      	bne.n	8004fc4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	689a      	ldr	r2, [r3, #8]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	4a12      	ldr	r2, [pc, #72]	; (8005034 <TIM_Base_SetConfig+0x12c>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d013      	beq.n	8005018 <TIM_Base_SetConfig+0x110>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4a14      	ldr	r2, [pc, #80]	; (8005044 <TIM_Base_SetConfig+0x13c>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d00f      	beq.n	8005018 <TIM_Base_SetConfig+0x110>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	4a14      	ldr	r2, [pc, #80]	; (800504c <TIM_Base_SetConfig+0x144>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d00b      	beq.n	8005018 <TIM_Base_SetConfig+0x110>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a13      	ldr	r2, [pc, #76]	; (8005050 <TIM_Base_SetConfig+0x148>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d007      	beq.n	8005018 <TIM_Base_SetConfig+0x110>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a12      	ldr	r2, [pc, #72]	; (8005054 <TIM_Base_SetConfig+0x14c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d003      	beq.n	8005018 <TIM_Base_SetConfig+0x110>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4a0d      	ldr	r2, [pc, #52]	; (8005048 <TIM_Base_SetConfig+0x140>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d103      	bne.n	8005020 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	691a      	ldr	r2, [r3, #16]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	615a      	str	r2, [r3, #20]
}
 8005026:	bf00      	nop
 8005028:	3714      	adds	r7, #20
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	40012c00 	.word	0x40012c00
 8005038:	40000400 	.word	0x40000400
 800503c:	40000800 	.word	0x40000800
 8005040:	40000c00 	.word	0x40000c00
 8005044:	40013400 	.word	0x40013400
 8005048:	40015000 	.word	0x40015000
 800504c:	40014000 	.word	0x40014000
 8005050:	40014400 	.word	0x40014400
 8005054:	40014800 	.word	0x40014800

08005058 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005058:	b480      	push	{r7}
 800505a:	b087      	sub	sp, #28
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
 8005060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a1b      	ldr	r3, [r3, #32]
 8005066:	f023 0201 	bic.w	r2, r3, #1
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800508a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f023 0303 	bic.w	r3, r3, #3
 8005092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	4313      	orrs	r3, r2
 800509c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f023 0302 	bic.w	r3, r3, #2
 80050a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	697a      	ldr	r2, [r7, #20]
 80050ac:	4313      	orrs	r3, r2
 80050ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a30      	ldr	r2, [pc, #192]	; (8005174 <TIM_OC1_SetConfig+0x11c>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d013      	beq.n	80050e0 <TIM_OC1_SetConfig+0x88>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a2f      	ldr	r2, [pc, #188]	; (8005178 <TIM_OC1_SetConfig+0x120>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d00f      	beq.n	80050e0 <TIM_OC1_SetConfig+0x88>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a2e      	ldr	r2, [pc, #184]	; (800517c <TIM_OC1_SetConfig+0x124>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d00b      	beq.n	80050e0 <TIM_OC1_SetConfig+0x88>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a2d      	ldr	r2, [pc, #180]	; (8005180 <TIM_OC1_SetConfig+0x128>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d007      	beq.n	80050e0 <TIM_OC1_SetConfig+0x88>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a2c      	ldr	r2, [pc, #176]	; (8005184 <TIM_OC1_SetConfig+0x12c>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d003      	beq.n	80050e0 <TIM_OC1_SetConfig+0x88>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a2b      	ldr	r2, [pc, #172]	; (8005188 <TIM_OC1_SetConfig+0x130>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d10c      	bne.n	80050fa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	f023 0308 	bic.w	r3, r3, #8
 80050e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f023 0304 	bic.w	r3, r3, #4
 80050f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a1d      	ldr	r2, [pc, #116]	; (8005174 <TIM_OC1_SetConfig+0x11c>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d013      	beq.n	800512a <TIM_OC1_SetConfig+0xd2>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a1c      	ldr	r2, [pc, #112]	; (8005178 <TIM_OC1_SetConfig+0x120>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d00f      	beq.n	800512a <TIM_OC1_SetConfig+0xd2>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a1b      	ldr	r2, [pc, #108]	; (800517c <TIM_OC1_SetConfig+0x124>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d00b      	beq.n	800512a <TIM_OC1_SetConfig+0xd2>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a1a      	ldr	r2, [pc, #104]	; (8005180 <TIM_OC1_SetConfig+0x128>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d007      	beq.n	800512a <TIM_OC1_SetConfig+0xd2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a19      	ldr	r2, [pc, #100]	; (8005184 <TIM_OC1_SetConfig+0x12c>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d003      	beq.n	800512a <TIM_OC1_SetConfig+0xd2>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a18      	ldr	r2, [pc, #96]	; (8005188 <TIM_OC1_SetConfig+0x130>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d111      	bne.n	800514e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005130:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005138:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	695b      	ldr	r3, [r3, #20]
 800513e:	693a      	ldr	r2, [r7, #16]
 8005140:	4313      	orrs	r3, r2
 8005142:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	693a      	ldr	r2, [r7, #16]
 800514a:	4313      	orrs	r3, r2
 800514c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	68fa      	ldr	r2, [r7, #12]
 8005158:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	697a      	ldr	r2, [r7, #20]
 8005166:	621a      	str	r2, [r3, #32]
}
 8005168:	bf00      	nop
 800516a:	371c      	adds	r7, #28
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr
 8005174:	40012c00 	.word	0x40012c00
 8005178:	40013400 	.word	0x40013400
 800517c:	40014000 	.word	0x40014000
 8005180:	40014400 	.word	0x40014400
 8005184:	40014800 	.word	0x40014800
 8005188:	40015000 	.word	0x40015000

0800518c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800518c:	b480      	push	{r7}
 800518e:	b087      	sub	sp, #28
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	f023 0210 	bic.w	r2, r3, #16
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	021b      	lsls	r3, r3, #8
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	f023 0320 	bic.w	r3, r3, #32
 80051da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	011b      	lsls	r3, r3, #4
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a2c      	ldr	r2, [pc, #176]	; (800529c <TIM_OC2_SetConfig+0x110>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d007      	beq.n	8005200 <TIM_OC2_SetConfig+0x74>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a2b      	ldr	r2, [pc, #172]	; (80052a0 <TIM_OC2_SetConfig+0x114>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d003      	beq.n	8005200 <TIM_OC2_SetConfig+0x74>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a2a      	ldr	r2, [pc, #168]	; (80052a4 <TIM_OC2_SetConfig+0x118>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d10d      	bne.n	800521c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005206:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	011b      	lsls	r3, r3, #4
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	4313      	orrs	r3, r2
 8005212:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800521a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a1f      	ldr	r2, [pc, #124]	; (800529c <TIM_OC2_SetConfig+0x110>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d013      	beq.n	800524c <TIM_OC2_SetConfig+0xc0>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a1e      	ldr	r2, [pc, #120]	; (80052a0 <TIM_OC2_SetConfig+0x114>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d00f      	beq.n	800524c <TIM_OC2_SetConfig+0xc0>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a1e      	ldr	r2, [pc, #120]	; (80052a8 <TIM_OC2_SetConfig+0x11c>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d00b      	beq.n	800524c <TIM_OC2_SetConfig+0xc0>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a1d      	ldr	r2, [pc, #116]	; (80052ac <TIM_OC2_SetConfig+0x120>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d007      	beq.n	800524c <TIM_OC2_SetConfig+0xc0>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a1c      	ldr	r2, [pc, #112]	; (80052b0 <TIM_OC2_SetConfig+0x124>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d003      	beq.n	800524c <TIM_OC2_SetConfig+0xc0>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a17      	ldr	r2, [pc, #92]	; (80052a4 <TIM_OC2_SetConfig+0x118>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d113      	bne.n	8005274 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005252:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800525a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	4313      	orrs	r3, r2
 8005266:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	4313      	orrs	r3, r2
 8005272:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	621a      	str	r2, [r3, #32]
}
 800528e:	bf00      	nop
 8005290:	371c      	adds	r7, #28
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	40012c00 	.word	0x40012c00
 80052a0:	40013400 	.word	0x40013400
 80052a4:	40015000 	.word	0x40015000
 80052a8:	40014000 	.word	0x40014000
 80052ac:	40014400 	.word	0x40014400
 80052b0:	40014800 	.word	0x40014800

080052b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b087      	sub	sp, #28
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	69db      	ldr	r3, [r3, #28]
 80052da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f023 0303 	bic.w	r3, r3, #3
 80052ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005300:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	021b      	lsls	r3, r3, #8
 8005308:	697a      	ldr	r2, [r7, #20]
 800530a:	4313      	orrs	r3, r2
 800530c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a2b      	ldr	r2, [pc, #172]	; (80053c0 <TIM_OC3_SetConfig+0x10c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d007      	beq.n	8005326 <TIM_OC3_SetConfig+0x72>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a2a      	ldr	r2, [pc, #168]	; (80053c4 <TIM_OC3_SetConfig+0x110>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d003      	beq.n	8005326 <TIM_OC3_SetConfig+0x72>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a29      	ldr	r2, [pc, #164]	; (80053c8 <TIM_OC3_SetConfig+0x114>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d10d      	bne.n	8005342 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800532c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	021b      	lsls	r3, r3, #8
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	4313      	orrs	r3, r2
 8005338:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005340:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a1e      	ldr	r2, [pc, #120]	; (80053c0 <TIM_OC3_SetConfig+0x10c>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d013      	beq.n	8005372 <TIM_OC3_SetConfig+0xbe>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a1d      	ldr	r2, [pc, #116]	; (80053c4 <TIM_OC3_SetConfig+0x110>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d00f      	beq.n	8005372 <TIM_OC3_SetConfig+0xbe>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a1d      	ldr	r2, [pc, #116]	; (80053cc <TIM_OC3_SetConfig+0x118>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d00b      	beq.n	8005372 <TIM_OC3_SetConfig+0xbe>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a1c      	ldr	r2, [pc, #112]	; (80053d0 <TIM_OC3_SetConfig+0x11c>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d007      	beq.n	8005372 <TIM_OC3_SetConfig+0xbe>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a1b      	ldr	r2, [pc, #108]	; (80053d4 <TIM_OC3_SetConfig+0x120>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d003      	beq.n	8005372 <TIM_OC3_SetConfig+0xbe>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a16      	ldr	r2, [pc, #88]	; (80053c8 <TIM_OC3_SetConfig+0x114>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d113      	bne.n	800539a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005378:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005380:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	695b      	ldr	r3, [r3, #20]
 8005386:	011b      	lsls	r3, r3, #4
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	4313      	orrs	r3, r2
 800538c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	011b      	lsls	r3, r3, #4
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	4313      	orrs	r3, r2
 8005398:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	685a      	ldr	r2, [r3, #4]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	621a      	str	r2, [r3, #32]
}
 80053b4:	bf00      	nop
 80053b6:	371c      	adds	r7, #28
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr
 80053c0:	40012c00 	.word	0x40012c00
 80053c4:	40013400 	.word	0x40013400
 80053c8:	40015000 	.word	0x40015000
 80053cc:	40014000 	.word	0x40014000
 80053d0:	40014400 	.word	0x40014400
 80053d4:	40014800 	.word	0x40014800

080053d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053d8:	b480      	push	{r7}
 80053da:	b087      	sub	sp, #28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	6a1b      	ldr	r3, [r3, #32]
 80053e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	69db      	ldr	r3, [r3, #28]
 80053fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800540a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005412:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	021b      	lsls	r3, r3, #8
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	4313      	orrs	r3, r2
 800541e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005426:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	031b      	lsls	r3, r3, #12
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	4313      	orrs	r3, r2
 8005432:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a2c      	ldr	r2, [pc, #176]	; (80054e8 <TIM_OC4_SetConfig+0x110>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d007      	beq.n	800544c <TIM_OC4_SetConfig+0x74>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a2b      	ldr	r2, [pc, #172]	; (80054ec <TIM_OC4_SetConfig+0x114>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d003      	beq.n	800544c <TIM_OC4_SetConfig+0x74>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a2a      	ldr	r2, [pc, #168]	; (80054f0 <TIM_OC4_SetConfig+0x118>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d10d      	bne.n	8005468 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005452:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	031b      	lsls	r3, r3, #12
 800545a:	697a      	ldr	r2, [r7, #20]
 800545c:	4313      	orrs	r3, r2
 800545e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005466:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a1f      	ldr	r2, [pc, #124]	; (80054e8 <TIM_OC4_SetConfig+0x110>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d013      	beq.n	8005498 <TIM_OC4_SetConfig+0xc0>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a1e      	ldr	r2, [pc, #120]	; (80054ec <TIM_OC4_SetConfig+0x114>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d00f      	beq.n	8005498 <TIM_OC4_SetConfig+0xc0>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a1e      	ldr	r2, [pc, #120]	; (80054f4 <TIM_OC4_SetConfig+0x11c>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d00b      	beq.n	8005498 <TIM_OC4_SetConfig+0xc0>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a1d      	ldr	r2, [pc, #116]	; (80054f8 <TIM_OC4_SetConfig+0x120>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d007      	beq.n	8005498 <TIM_OC4_SetConfig+0xc0>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	4a1c      	ldr	r2, [pc, #112]	; (80054fc <TIM_OC4_SetConfig+0x124>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d003      	beq.n	8005498 <TIM_OC4_SetConfig+0xc0>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4a17      	ldr	r2, [pc, #92]	; (80054f0 <TIM_OC4_SetConfig+0x118>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d113      	bne.n	80054c0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800549e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80054a6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	695b      	ldr	r3, [r3, #20]
 80054ac:	019b      	lsls	r3, r3, #6
 80054ae:	693a      	ldr	r2, [r7, #16]
 80054b0:	4313      	orrs	r3, r2
 80054b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	019b      	lsls	r3, r3, #6
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	4313      	orrs	r3, r2
 80054be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	621a      	str	r2, [r3, #32]
}
 80054da:	bf00      	nop
 80054dc:	371c      	adds	r7, #28
 80054de:	46bd      	mov	sp, r7
 80054e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e4:	4770      	bx	lr
 80054e6:	bf00      	nop
 80054e8:	40012c00 	.word	0x40012c00
 80054ec:	40013400 	.word	0x40013400
 80054f0:	40015000 	.word	0x40015000
 80054f4:	40014000 	.word	0x40014000
 80054f8:	40014400 	.word	0x40014400
 80054fc:	40014800 	.word	0x40014800

08005500 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005500:	b480      	push	{r7}
 8005502:	b087      	sub	sp, #28
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800552e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	4313      	orrs	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005544:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	041b      	lsls	r3, r3, #16
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	4313      	orrs	r3, r2
 8005550:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a19      	ldr	r2, [pc, #100]	; (80055bc <TIM_OC5_SetConfig+0xbc>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d013      	beq.n	8005582 <TIM_OC5_SetConfig+0x82>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a18      	ldr	r2, [pc, #96]	; (80055c0 <TIM_OC5_SetConfig+0xc0>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d00f      	beq.n	8005582 <TIM_OC5_SetConfig+0x82>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a17      	ldr	r2, [pc, #92]	; (80055c4 <TIM_OC5_SetConfig+0xc4>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d00b      	beq.n	8005582 <TIM_OC5_SetConfig+0x82>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a16      	ldr	r2, [pc, #88]	; (80055c8 <TIM_OC5_SetConfig+0xc8>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d007      	beq.n	8005582 <TIM_OC5_SetConfig+0x82>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a15      	ldr	r2, [pc, #84]	; (80055cc <TIM_OC5_SetConfig+0xcc>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d003      	beq.n	8005582 <TIM_OC5_SetConfig+0x82>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a14      	ldr	r2, [pc, #80]	; (80055d0 <TIM_OC5_SetConfig+0xd0>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d109      	bne.n	8005596 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005588:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	021b      	lsls	r3, r3, #8
 8005590:	697a      	ldr	r2, [r7, #20]
 8005592:	4313      	orrs	r3, r2
 8005594:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	621a      	str	r2, [r3, #32]
}
 80055b0:	bf00      	nop
 80055b2:	371c      	adds	r7, #28
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	40012c00 	.word	0x40012c00
 80055c0:	40013400 	.word	0x40013400
 80055c4:	40014000 	.word	0x40014000
 80055c8:	40014400 	.word	0x40014400
 80055cc:	40014800 	.word	0x40014800
 80055d0:	40015000 	.word	0x40015000

080055d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b087      	sub	sp, #28
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a1b      	ldr	r3, [r3, #32]
 80055ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005602:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	021b      	lsls	r3, r3, #8
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	4313      	orrs	r3, r2
 8005612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800561a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	051b      	lsls	r3, r3, #20
 8005622:	693a      	ldr	r2, [r7, #16]
 8005624:	4313      	orrs	r3, r2
 8005626:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a1a      	ldr	r2, [pc, #104]	; (8005694 <TIM_OC6_SetConfig+0xc0>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d013      	beq.n	8005658 <TIM_OC6_SetConfig+0x84>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a19      	ldr	r2, [pc, #100]	; (8005698 <TIM_OC6_SetConfig+0xc4>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d00f      	beq.n	8005658 <TIM_OC6_SetConfig+0x84>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	4a18      	ldr	r2, [pc, #96]	; (800569c <TIM_OC6_SetConfig+0xc8>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d00b      	beq.n	8005658 <TIM_OC6_SetConfig+0x84>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a17      	ldr	r2, [pc, #92]	; (80056a0 <TIM_OC6_SetConfig+0xcc>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d007      	beq.n	8005658 <TIM_OC6_SetConfig+0x84>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a16      	ldr	r2, [pc, #88]	; (80056a4 <TIM_OC6_SetConfig+0xd0>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d003      	beq.n	8005658 <TIM_OC6_SetConfig+0x84>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a15      	ldr	r2, [pc, #84]	; (80056a8 <TIM_OC6_SetConfig+0xd4>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d109      	bne.n	800566c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800565e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	029b      	lsls	r3, r3, #10
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	4313      	orrs	r3, r2
 800566a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	685a      	ldr	r2, [r3, #4]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	621a      	str	r2, [r3, #32]
}
 8005686:	bf00      	nop
 8005688:	371c      	adds	r7, #28
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	40012c00 	.word	0x40012c00
 8005698:	40013400 	.word	0x40013400
 800569c:	40014000 	.word	0x40014000
 80056a0:	40014400 	.word	0x40014400
 80056a4:	40014800 	.word	0x40014800
 80056a8:	40015000 	.word	0x40015000

080056ac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b087      	sub	sp, #28
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	f003 031f 	and.w	r3, r3, #31
 80056be:	2201      	movs	r2, #1
 80056c0:	fa02 f303 	lsl.w	r3, r2, r3
 80056c4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6a1a      	ldr	r2, [r3, #32]
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	43db      	mvns	r3, r3
 80056ce:	401a      	ands	r2, r3
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6a1a      	ldr	r2, [r3, #32]
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	f003 031f 	and.w	r3, r3, #31
 80056de:	6879      	ldr	r1, [r7, #4]
 80056e0:	fa01 f303 	lsl.w	r3, r1, r3
 80056e4:	431a      	orrs	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	621a      	str	r2, [r3, #32]
}
 80056ea:	bf00      	nop
 80056ec:	371c      	adds	r7, #28
 80056ee:	46bd      	mov	sp, r7
 80056f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f4:	4770      	bx	lr
	...

080056f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b085      	sub	sp, #20
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
 8005700:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005708:	2b01      	cmp	r3, #1
 800570a:	d101      	bne.n	8005710 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800570c:	2302      	movs	r3, #2
 800570e:	e074      	b.n	80057fa <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2202      	movs	r2, #2
 800571c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a34      	ldr	r2, [pc, #208]	; (8005808 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d009      	beq.n	800574e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a33      	ldr	r2, [pc, #204]	; (800580c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d004      	beq.n	800574e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a31      	ldr	r2, [pc, #196]	; (8005810 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d108      	bne.n	8005760 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005754:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	68fa      	ldr	r2, [r7, #12]
 800575c:	4313      	orrs	r3, r2
 800575e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800576a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68fa      	ldr	r2, [r7, #12]
 8005772:	4313      	orrs	r3, r2
 8005774:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a21      	ldr	r2, [pc, #132]	; (8005808 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d022      	beq.n	80057ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005790:	d01d      	beq.n	80057ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a1f      	ldr	r2, [pc, #124]	; (8005814 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d018      	beq.n	80057ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a1d      	ldr	r2, [pc, #116]	; (8005818 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d013      	beq.n	80057ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a1c      	ldr	r2, [pc, #112]	; (800581c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d00e      	beq.n	80057ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a15      	ldr	r2, [pc, #84]	; (800580c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d009      	beq.n	80057ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a18      	ldr	r2, [pc, #96]	; (8005820 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d004      	beq.n	80057ce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a11      	ldr	r2, [pc, #68]	; (8005810 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d10c      	bne.n	80057e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	689b      	ldr	r3, [r3, #8]
 80057da:	68ba      	ldr	r2, [r7, #8]
 80057dc:	4313      	orrs	r3, r2
 80057de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	40012c00 	.word	0x40012c00
 800580c:	40013400 	.word	0x40013400
 8005810:	40015000 	.word	0x40015000
 8005814:	40000400 	.word	0x40000400
 8005818:	40000800 	.word	0x40000800
 800581c:	40000c00 	.word	0x40000c00
 8005820:	40014000 	.word	0x40014000

08005824 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800582e:	2300      	movs	r3, #0
 8005830:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005838:	2b01      	cmp	r3, #1
 800583a:	d101      	bne.n	8005840 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800583c:	2302      	movs	r3, #2
 800583e:	e096      	b.n	800596e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	4313      	orrs	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	4313      	orrs	r3, r2
 8005862:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	4313      	orrs	r3, r2
 8005870:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4313      	orrs	r3, r2
 800587e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	4313      	orrs	r3, r2
 800588c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	4313      	orrs	r3, r2
 800589a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a6:	4313      	orrs	r3, r2
 80058a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	699b      	ldr	r3, [r3, #24]
 80058b4:	041b      	lsls	r3, r3, #16
 80058b6:	4313      	orrs	r3, r2
 80058b8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a2f      	ldr	r2, [pc, #188]	; (800597c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d009      	beq.n	80058d8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a2d      	ldr	r2, [pc, #180]	; (8005980 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d004      	beq.n	80058d8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a2c      	ldr	r2, [pc, #176]	; (8005984 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d106      	bne.n	80058e6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	69db      	ldr	r3, [r3, #28]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a24      	ldr	r2, [pc, #144]	; (800597c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d009      	beq.n	8005904 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a22      	ldr	r2, [pc, #136]	; (8005980 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d004      	beq.n	8005904 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a21      	ldr	r2, [pc, #132]	; (8005984 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d12b      	bne.n	800595c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590e:	051b      	lsls	r3, r3, #20
 8005910:	4313      	orrs	r3, r2
 8005912:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	6a1b      	ldr	r3, [r3, #32]
 800591e:	4313      	orrs	r3, r2
 8005920:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592c:	4313      	orrs	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a11      	ldr	r2, [pc, #68]	; (800597c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d009      	beq.n	800594e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a10      	ldr	r2, [pc, #64]	; (8005980 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d004      	beq.n	800594e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a0e      	ldr	r2, [pc, #56]	; (8005984 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d106      	bne.n	800595c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005958:	4313      	orrs	r3, r2
 800595a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68fa      	ldr	r2, [r7, #12]
 8005962:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2200      	movs	r2, #0
 8005968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800596c:	2300      	movs	r3, #0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3714      	adds	r7, #20
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	40012c00 	.word	0x40012c00
 8005980:	40013400 	.word	0x40013400
 8005984:	40015000 	.word	0x40015000

08005988 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b083      	sub	sp, #12
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005a08:	bf00      	nop
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d101      	bne.n	8005a26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e042      	b.n	8005aac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d106      	bne.n	8005a3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f7fc fdad 	bl	8002598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2224      	movs	r2, #36	; 0x24
 8005a42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f022 0201 	bic.w	r2, r2, #1
 8005a54:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f000 fb64 	bl	8006124 <UART_SetConfig>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d101      	bne.n	8005a66 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e022      	b.n	8005aac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d002      	beq.n	8005a74 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 fe54 	bl	800671c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	689a      	ldr	r2, [r3, #8]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f042 0201 	orr.w	r2, r2, #1
 8005aa2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f000 fedb 	bl	8006860 <UART_CheckIdleState>
 8005aaa:	4603      	mov	r3, r0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3708      	adds	r7, #8
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b0ba      	sub	sp, #232	; 0xe8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	69db      	ldr	r3, [r3, #28]
 8005ac2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005ada:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005ade:	f640 030f 	movw	r3, #2063	; 0x80f
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005ae8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d11b      	bne.n	8005b28 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005af4:	f003 0320 	and.w	r3, r3, #32
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d015      	beq.n	8005b28 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b00:	f003 0320 	and.w	r3, r3, #32
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d105      	bne.n	8005b14 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d009      	beq.n	8005b28 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 82d6 	beq.w	80060ca <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	4798      	blx	r3
      }
      return;
 8005b26:	e2d0      	b.n	80060ca <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005b28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	f000 811f 	beq.w	8005d70 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005b32:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005b36:	4b8b      	ldr	r3, [pc, #556]	; (8005d64 <HAL_UART_IRQHandler+0x2b0>)
 8005b38:	4013      	ands	r3, r2
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d106      	bne.n	8005b4c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005b3e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005b42:	4b89      	ldr	r3, [pc, #548]	; (8005d68 <HAL_UART_IRQHandler+0x2b4>)
 8005b44:	4013      	ands	r3, r2
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f000 8112 	beq.w	8005d70 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b50:	f003 0301 	and.w	r3, r3, #1
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d011      	beq.n	8005b7c <HAL_UART_IRQHandler+0xc8>
 8005b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00b      	beq.n	8005b7c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b72:	f043 0201 	orr.w	r2, r3, #1
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b80:	f003 0302 	and.w	r3, r3, #2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d011      	beq.n	8005bac <HAL_UART_IRQHandler+0xf8>
 8005b88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00b      	beq.n	8005bac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2202      	movs	r2, #2
 8005b9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ba2:	f043 0204 	orr.w	r2, r3, #4
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bb0:	f003 0304 	and.w	r3, r3, #4
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d011      	beq.n	8005bdc <HAL_UART_IRQHandler+0x128>
 8005bb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bbc:	f003 0301 	and.w	r3, r3, #1
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00b      	beq.n	8005bdc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2204      	movs	r2, #4
 8005bca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bd2:	f043 0202 	orr.w	r2, r3, #2
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005bdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005be0:	f003 0308 	and.w	r3, r3, #8
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d017      	beq.n	8005c18 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005be8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bec:	f003 0320 	and.w	r3, r3, #32
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d105      	bne.n	8005c00 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005bf4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005bf8:	4b5a      	ldr	r3, [pc, #360]	; (8005d64 <HAL_UART_IRQHandler+0x2b0>)
 8005bfa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00b      	beq.n	8005c18 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2208      	movs	r2, #8
 8005c06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c0e:	f043 0208 	orr.w	r2, r3, #8
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d012      	beq.n	8005c4a <HAL_UART_IRQHandler+0x196>
 8005c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00c      	beq.n	8005c4a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c40:	f043 0220 	orr.w	r2, r3, #32
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f000 823c 	beq.w	80060ce <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005c56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c5a:	f003 0320 	and.w	r3, r3, #32
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d013      	beq.n	8005c8a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005c62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c66:	f003 0320 	and.w	r3, r3, #32
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d105      	bne.n	8005c7a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005c6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d007      	beq.n	8005c8a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d003      	beq.n	8005c8a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9e:	2b40      	cmp	r3, #64	; 0x40
 8005ca0:	d005      	beq.n	8005cae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005ca2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ca6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d04f      	beq.n	8005d4e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 fee9 	bl	8006a86 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cbe:	2b40      	cmp	r3, #64	; 0x40
 8005cc0:	d141      	bne.n	8005d46 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	3308      	adds	r3, #8
 8005cc8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ccc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005cd0:	e853 3f00 	ldrex	r3, [r3]
 8005cd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005cd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ce0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	3308      	adds	r3, #8
 8005cea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005cee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005cf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005cfa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005cfe:	e841 2300 	strex	r3, r2, [r1]
 8005d02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d06:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1d9      	bne.n	8005cc2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d013      	beq.n	8005d3e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d1a:	4a14      	ldr	r2, [pc, #80]	; (8005d6c <HAL_UART_IRQHandler+0x2b8>)
 8005d1c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7fd fa4d 	bl	80031c2 <HAL_DMA_Abort_IT>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d017      	beq.n	8005d5e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005d38:	4610      	mov	r0, r2
 8005d3a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d3c:	e00f      	b.n	8005d5e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f9da 	bl	80060f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d44:	e00b      	b.n	8005d5e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f9d6 	bl	80060f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d4c:	e007      	b.n	8005d5e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f000 f9d2 	bl	80060f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005d5c:	e1b7      	b.n	80060ce <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d5e:	bf00      	nop
    return;
 8005d60:	e1b5      	b.n	80060ce <HAL_UART_IRQHandler+0x61a>
 8005d62:	bf00      	nop
 8005d64:	10000001 	.word	0x10000001
 8005d68:	04000120 	.word	0x04000120
 8005d6c:	08006b53 	.word	0x08006b53

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	f040 814a 	bne.w	800600e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d7e:	f003 0310 	and.w	r3, r3, #16
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	f000 8143 	beq.w	800600e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d8c:	f003 0310 	and.w	r3, r3, #16
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 813c 	beq.w	800600e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2210      	movs	r2, #16
 8005d9c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005da8:	2b40      	cmp	r3, #64	; 0x40
 8005daa:	f040 80b5 	bne.w	8005f18 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005dba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f000 8187 	beq.w	80060d2 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005dca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	f080 817f 	bcs.w	80060d2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dda:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0320 	and.w	r3, r3, #32
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	f040 8086 	bne.w	8005efc <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005dfc:	e853 3f00 	ldrex	r3, [r3]
 8005e00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e0c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	461a      	mov	r2, r3
 8005e16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005e1e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e22:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e26:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e2a:	e841 2300 	strex	r3, r2, [r1]
 8005e2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d1da      	bne.n	8005df0 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	3308      	adds	r3, #8
 8005e40:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e44:	e853 3f00 	ldrex	r3, [r3]
 8005e48:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e4c:	f023 0301 	bic.w	r3, r3, #1
 8005e50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	3308      	adds	r3, #8
 8005e5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e5e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e62:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e64:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e66:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e6a:	e841 2300 	strex	r3, r2, [r1]
 8005e6e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1e1      	bne.n	8005e3a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	3308      	adds	r3, #8
 8005e7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e80:	e853 3f00 	ldrex	r3, [r3]
 8005e84:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	3308      	adds	r3, #8
 8005e96:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e9a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e9c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e9e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ea0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ea2:	e841 2300 	strex	r3, r2, [r1]
 8005ea6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ea8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1e3      	bne.n	8005e76 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2220      	movs	r2, #32
 8005eb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ec4:	e853 3f00 	ldrex	r3, [r3]
 8005ec8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005eca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ecc:	f023 0310 	bic.w	r3, r3, #16
 8005ed0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	461a      	mov	r2, r3
 8005eda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ede:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ee0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ee4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ee6:	e841 2300 	strex	r3, r2, [r1]
 8005eea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005eec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1e4      	bne.n	8005ebc <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	f7fd f90a 	bl	8003110 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	1ad3      	subs	r3, r2, r3
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	4619      	mov	r1, r3
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 f8fb 	bl	800610c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f16:	e0dc      	b.n	80060d2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	f000 80ce 	beq.w	80060d6 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8005f3a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	f000 80c9 	beq.w	80060d6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4c:	e853 3f00 	ldrex	r3, [r3]
 8005f50:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	461a      	mov	r2, r3
 8005f62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f66:	647b      	str	r3, [r7, #68]	; 0x44
 8005f68:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f6e:	e841 2300 	strex	r3, r2, [r1]
 8005f72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d1e4      	bne.n	8005f44 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	3308      	adds	r3, #8
 8005f80:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f84:	e853 3f00 	ldrex	r3, [r3]
 8005f88:	623b      	str	r3, [r7, #32]
   return(result);
 8005f8a:	6a3b      	ldr	r3, [r7, #32]
 8005f8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f90:	f023 0301 	bic.w	r3, r3, #1
 8005f94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	3308      	adds	r3, #8
 8005f9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005fa2:	633a      	str	r2, [r7, #48]	; 0x30
 8005fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fa6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005faa:	e841 2300 	strex	r3, r2, [r1]
 8005fae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1e1      	bne.n	8005f7a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2220      	movs	r2, #32
 8005fba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	e853 3f00 	ldrex	r3, [r3]
 8005fd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f023 0310 	bic.w	r3, r3, #16
 8005fde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005fec:	61fb      	str	r3, [r7, #28]
 8005fee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff0:	69b9      	ldr	r1, [r7, #24]
 8005ff2:	69fa      	ldr	r2, [r7, #28]
 8005ff4:	e841 2300 	strex	r3, r2, [r1]
 8005ff8:	617b      	str	r3, [r7, #20]
   return(result);
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1e4      	bne.n	8005fca <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006000:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006004:	4619      	mov	r1, r3
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f880 	bl	800610c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800600c:	e063      	b.n	80060d6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800600e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006012:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00e      	beq.n	8006038 <HAL_UART_IRQHandler+0x584>
 800601a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800601e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d008      	beq.n	8006038 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800602e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 fdcf 	bl	8006bd4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006036:	e051      	b.n	80060dc <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006038:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800603c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006040:	2b00      	cmp	r3, #0
 8006042:	d014      	beq.n	800606e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006048:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800604c:	2b00      	cmp	r3, #0
 800604e:	d105      	bne.n	800605c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006050:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006054:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d008      	beq.n	800606e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006060:	2b00      	cmp	r3, #0
 8006062:	d03a      	beq.n	80060da <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	4798      	blx	r3
    }
    return;
 800606c:	e035      	b.n	80060da <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800606e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006076:	2b00      	cmp	r3, #0
 8006078:	d009      	beq.n	800608e <HAL_UART_IRQHandler+0x5da>
 800607a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800607e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006082:	2b00      	cmp	r3, #0
 8006084:	d003      	beq.n	800608e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 fd79 	bl	8006b7e <UART_EndTransmit_IT>
    return;
 800608c:	e026      	b.n	80060dc <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800608e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006092:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006096:	2b00      	cmp	r3, #0
 8006098:	d009      	beq.n	80060ae <HAL_UART_IRQHandler+0x5fa>
 800609a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800609e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d003      	beq.n	80060ae <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fda8 	bl	8006bfc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060ac:	e016      	b.n	80060dc <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80060ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d010      	beq.n	80060dc <HAL_UART_IRQHandler+0x628>
 80060ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	da0c      	bge.n	80060dc <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 fd90 	bl	8006be8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80060c8:	e008      	b.n	80060dc <HAL_UART_IRQHandler+0x628>
      return;
 80060ca:	bf00      	nop
 80060cc:	e006      	b.n	80060dc <HAL_UART_IRQHandler+0x628>
    return;
 80060ce:	bf00      	nop
 80060d0:	e004      	b.n	80060dc <HAL_UART_IRQHandler+0x628>
      return;
 80060d2:	bf00      	nop
 80060d4:	e002      	b.n	80060dc <HAL_UART_IRQHandler+0x628>
      return;
 80060d6:	bf00      	nop
 80060d8:	e000      	b.n	80060dc <HAL_UART_IRQHandler+0x628>
    return;
 80060da:	bf00      	nop
  }
}
 80060dc:	37e8      	adds	r7, #232	; 0xe8
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop

080060e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006100:	bf00      	nop
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	460b      	mov	r3, r1
 8006116:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006118:	bf00      	nop
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006128:	b08c      	sub	sp, #48	; 0x30
 800612a:	af00      	add	r7, sp, #0
 800612c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800612e:	2300      	movs	r3, #0
 8006130:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	689a      	ldr	r2, [r3, #8]
 8006138:	697b      	ldr	r3, [r7, #20]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	431a      	orrs	r2, r3
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	431a      	orrs	r2, r3
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	69db      	ldr	r3, [r3, #28]
 8006148:	4313      	orrs	r3, r2
 800614a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	4baa      	ldr	r3, [pc, #680]	; (80063fc <UART_SetConfig+0x2d8>)
 8006154:	4013      	ands	r3, r2
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	6812      	ldr	r2, [r2, #0]
 800615a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800615c:	430b      	orrs	r3, r1
 800615e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	68da      	ldr	r2, [r3, #12]
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	430a      	orrs	r2, r1
 8006174:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a9f      	ldr	r2, [pc, #636]	; (8006400 <UART_SetConfig+0x2dc>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d004      	beq.n	8006190 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800618c:	4313      	orrs	r3, r2
 800618e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800619a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	6812      	ldr	r2, [r2, #0]
 80061a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80061a4:	430b      	orrs	r3, r1
 80061a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ae:	f023 010f 	bic.w	r1, r3, #15
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	430a      	orrs	r2, r1
 80061bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a90      	ldr	r2, [pc, #576]	; (8006404 <UART_SetConfig+0x2e0>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d125      	bne.n	8006214 <UART_SetConfig+0xf0>
 80061c8:	4b8f      	ldr	r3, [pc, #572]	; (8006408 <UART_SetConfig+0x2e4>)
 80061ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ce:	f003 0303 	and.w	r3, r3, #3
 80061d2:	2b03      	cmp	r3, #3
 80061d4:	d81a      	bhi.n	800620c <UART_SetConfig+0xe8>
 80061d6:	a201      	add	r2, pc, #4	; (adr r2, 80061dc <UART_SetConfig+0xb8>)
 80061d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061dc:	080061ed 	.word	0x080061ed
 80061e0:	080061fd 	.word	0x080061fd
 80061e4:	080061f5 	.word	0x080061f5
 80061e8:	08006205 	.word	0x08006205
 80061ec:	2301      	movs	r3, #1
 80061ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061f2:	e116      	b.n	8006422 <UART_SetConfig+0x2fe>
 80061f4:	2302      	movs	r3, #2
 80061f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061fa:	e112      	b.n	8006422 <UART_SetConfig+0x2fe>
 80061fc:	2304      	movs	r3, #4
 80061fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006202:	e10e      	b.n	8006422 <UART_SetConfig+0x2fe>
 8006204:	2308      	movs	r3, #8
 8006206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800620a:	e10a      	b.n	8006422 <UART_SetConfig+0x2fe>
 800620c:	2310      	movs	r3, #16
 800620e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006212:	e106      	b.n	8006422 <UART_SetConfig+0x2fe>
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a7c      	ldr	r2, [pc, #496]	; (800640c <UART_SetConfig+0x2e8>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d138      	bne.n	8006290 <UART_SetConfig+0x16c>
 800621e:	4b7a      	ldr	r3, [pc, #488]	; (8006408 <UART_SetConfig+0x2e4>)
 8006220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006224:	f003 030c 	and.w	r3, r3, #12
 8006228:	2b0c      	cmp	r3, #12
 800622a:	d82d      	bhi.n	8006288 <UART_SetConfig+0x164>
 800622c:	a201      	add	r2, pc, #4	; (adr r2, 8006234 <UART_SetConfig+0x110>)
 800622e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006232:	bf00      	nop
 8006234:	08006269 	.word	0x08006269
 8006238:	08006289 	.word	0x08006289
 800623c:	08006289 	.word	0x08006289
 8006240:	08006289 	.word	0x08006289
 8006244:	08006279 	.word	0x08006279
 8006248:	08006289 	.word	0x08006289
 800624c:	08006289 	.word	0x08006289
 8006250:	08006289 	.word	0x08006289
 8006254:	08006271 	.word	0x08006271
 8006258:	08006289 	.word	0x08006289
 800625c:	08006289 	.word	0x08006289
 8006260:	08006289 	.word	0x08006289
 8006264:	08006281 	.word	0x08006281
 8006268:	2300      	movs	r3, #0
 800626a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800626e:	e0d8      	b.n	8006422 <UART_SetConfig+0x2fe>
 8006270:	2302      	movs	r3, #2
 8006272:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006276:	e0d4      	b.n	8006422 <UART_SetConfig+0x2fe>
 8006278:	2304      	movs	r3, #4
 800627a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800627e:	e0d0      	b.n	8006422 <UART_SetConfig+0x2fe>
 8006280:	2308      	movs	r3, #8
 8006282:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006286:	e0cc      	b.n	8006422 <UART_SetConfig+0x2fe>
 8006288:	2310      	movs	r3, #16
 800628a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800628e:	e0c8      	b.n	8006422 <UART_SetConfig+0x2fe>
 8006290:	697b      	ldr	r3, [r7, #20]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a5e      	ldr	r2, [pc, #376]	; (8006410 <UART_SetConfig+0x2ec>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d125      	bne.n	80062e6 <UART_SetConfig+0x1c2>
 800629a:	4b5b      	ldr	r3, [pc, #364]	; (8006408 <UART_SetConfig+0x2e4>)
 800629c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80062a4:	2b30      	cmp	r3, #48	; 0x30
 80062a6:	d016      	beq.n	80062d6 <UART_SetConfig+0x1b2>
 80062a8:	2b30      	cmp	r3, #48	; 0x30
 80062aa:	d818      	bhi.n	80062de <UART_SetConfig+0x1ba>
 80062ac:	2b20      	cmp	r3, #32
 80062ae:	d00a      	beq.n	80062c6 <UART_SetConfig+0x1a2>
 80062b0:	2b20      	cmp	r3, #32
 80062b2:	d814      	bhi.n	80062de <UART_SetConfig+0x1ba>
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d002      	beq.n	80062be <UART_SetConfig+0x19a>
 80062b8:	2b10      	cmp	r3, #16
 80062ba:	d008      	beq.n	80062ce <UART_SetConfig+0x1aa>
 80062bc:	e00f      	b.n	80062de <UART_SetConfig+0x1ba>
 80062be:	2300      	movs	r3, #0
 80062c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062c4:	e0ad      	b.n	8006422 <UART_SetConfig+0x2fe>
 80062c6:	2302      	movs	r3, #2
 80062c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062cc:	e0a9      	b.n	8006422 <UART_SetConfig+0x2fe>
 80062ce:	2304      	movs	r3, #4
 80062d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062d4:	e0a5      	b.n	8006422 <UART_SetConfig+0x2fe>
 80062d6:	2308      	movs	r3, #8
 80062d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062dc:	e0a1      	b.n	8006422 <UART_SetConfig+0x2fe>
 80062de:	2310      	movs	r3, #16
 80062e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062e4:	e09d      	b.n	8006422 <UART_SetConfig+0x2fe>
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a4a      	ldr	r2, [pc, #296]	; (8006414 <UART_SetConfig+0x2f0>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d125      	bne.n	800633c <UART_SetConfig+0x218>
 80062f0:	4b45      	ldr	r3, [pc, #276]	; (8006408 <UART_SetConfig+0x2e4>)
 80062f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80062fa:	2bc0      	cmp	r3, #192	; 0xc0
 80062fc:	d016      	beq.n	800632c <UART_SetConfig+0x208>
 80062fe:	2bc0      	cmp	r3, #192	; 0xc0
 8006300:	d818      	bhi.n	8006334 <UART_SetConfig+0x210>
 8006302:	2b80      	cmp	r3, #128	; 0x80
 8006304:	d00a      	beq.n	800631c <UART_SetConfig+0x1f8>
 8006306:	2b80      	cmp	r3, #128	; 0x80
 8006308:	d814      	bhi.n	8006334 <UART_SetConfig+0x210>
 800630a:	2b00      	cmp	r3, #0
 800630c:	d002      	beq.n	8006314 <UART_SetConfig+0x1f0>
 800630e:	2b40      	cmp	r3, #64	; 0x40
 8006310:	d008      	beq.n	8006324 <UART_SetConfig+0x200>
 8006312:	e00f      	b.n	8006334 <UART_SetConfig+0x210>
 8006314:	2300      	movs	r3, #0
 8006316:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800631a:	e082      	b.n	8006422 <UART_SetConfig+0x2fe>
 800631c:	2302      	movs	r3, #2
 800631e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006322:	e07e      	b.n	8006422 <UART_SetConfig+0x2fe>
 8006324:	2304      	movs	r3, #4
 8006326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800632a:	e07a      	b.n	8006422 <UART_SetConfig+0x2fe>
 800632c:	2308      	movs	r3, #8
 800632e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006332:	e076      	b.n	8006422 <UART_SetConfig+0x2fe>
 8006334:	2310      	movs	r3, #16
 8006336:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800633a:	e072      	b.n	8006422 <UART_SetConfig+0x2fe>
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a35      	ldr	r2, [pc, #212]	; (8006418 <UART_SetConfig+0x2f4>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d12a      	bne.n	800639c <UART_SetConfig+0x278>
 8006346:	4b30      	ldr	r3, [pc, #192]	; (8006408 <UART_SetConfig+0x2e4>)
 8006348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800634c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006350:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006354:	d01a      	beq.n	800638c <UART_SetConfig+0x268>
 8006356:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800635a:	d81b      	bhi.n	8006394 <UART_SetConfig+0x270>
 800635c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006360:	d00c      	beq.n	800637c <UART_SetConfig+0x258>
 8006362:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006366:	d815      	bhi.n	8006394 <UART_SetConfig+0x270>
 8006368:	2b00      	cmp	r3, #0
 800636a:	d003      	beq.n	8006374 <UART_SetConfig+0x250>
 800636c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006370:	d008      	beq.n	8006384 <UART_SetConfig+0x260>
 8006372:	e00f      	b.n	8006394 <UART_SetConfig+0x270>
 8006374:	2300      	movs	r3, #0
 8006376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800637a:	e052      	b.n	8006422 <UART_SetConfig+0x2fe>
 800637c:	2302      	movs	r3, #2
 800637e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006382:	e04e      	b.n	8006422 <UART_SetConfig+0x2fe>
 8006384:	2304      	movs	r3, #4
 8006386:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800638a:	e04a      	b.n	8006422 <UART_SetConfig+0x2fe>
 800638c:	2308      	movs	r3, #8
 800638e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006392:	e046      	b.n	8006422 <UART_SetConfig+0x2fe>
 8006394:	2310      	movs	r3, #16
 8006396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800639a:	e042      	b.n	8006422 <UART_SetConfig+0x2fe>
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a17      	ldr	r2, [pc, #92]	; (8006400 <UART_SetConfig+0x2dc>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d13a      	bne.n	800641c <UART_SetConfig+0x2f8>
 80063a6:	4b18      	ldr	r3, [pc, #96]	; (8006408 <UART_SetConfig+0x2e4>)
 80063a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80063b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063b4:	d01a      	beq.n	80063ec <UART_SetConfig+0x2c8>
 80063b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063ba:	d81b      	bhi.n	80063f4 <UART_SetConfig+0x2d0>
 80063bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063c0:	d00c      	beq.n	80063dc <UART_SetConfig+0x2b8>
 80063c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063c6:	d815      	bhi.n	80063f4 <UART_SetConfig+0x2d0>
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d003      	beq.n	80063d4 <UART_SetConfig+0x2b0>
 80063cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063d0:	d008      	beq.n	80063e4 <UART_SetConfig+0x2c0>
 80063d2:	e00f      	b.n	80063f4 <UART_SetConfig+0x2d0>
 80063d4:	2300      	movs	r3, #0
 80063d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063da:	e022      	b.n	8006422 <UART_SetConfig+0x2fe>
 80063dc:	2302      	movs	r3, #2
 80063de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063e2:	e01e      	b.n	8006422 <UART_SetConfig+0x2fe>
 80063e4:	2304      	movs	r3, #4
 80063e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063ea:	e01a      	b.n	8006422 <UART_SetConfig+0x2fe>
 80063ec:	2308      	movs	r3, #8
 80063ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063f2:	e016      	b.n	8006422 <UART_SetConfig+0x2fe>
 80063f4:	2310      	movs	r3, #16
 80063f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063fa:	e012      	b.n	8006422 <UART_SetConfig+0x2fe>
 80063fc:	cfff69f3 	.word	0xcfff69f3
 8006400:	40008000 	.word	0x40008000
 8006404:	40013800 	.word	0x40013800
 8006408:	40021000 	.word	0x40021000
 800640c:	40004400 	.word	0x40004400
 8006410:	40004800 	.word	0x40004800
 8006414:	40004c00 	.word	0x40004c00
 8006418:	40005000 	.word	0x40005000
 800641c:	2310      	movs	r3, #16
 800641e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4aae      	ldr	r2, [pc, #696]	; (80066e0 <UART_SetConfig+0x5bc>)
 8006428:	4293      	cmp	r3, r2
 800642a:	f040 8097 	bne.w	800655c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800642e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006432:	2b08      	cmp	r3, #8
 8006434:	d823      	bhi.n	800647e <UART_SetConfig+0x35a>
 8006436:	a201      	add	r2, pc, #4	; (adr r2, 800643c <UART_SetConfig+0x318>)
 8006438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643c:	08006461 	.word	0x08006461
 8006440:	0800647f 	.word	0x0800647f
 8006444:	08006469 	.word	0x08006469
 8006448:	0800647f 	.word	0x0800647f
 800644c:	0800646f 	.word	0x0800646f
 8006450:	0800647f 	.word	0x0800647f
 8006454:	0800647f 	.word	0x0800647f
 8006458:	0800647f 	.word	0x0800647f
 800645c:	08006477 	.word	0x08006477
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006460:	f7fd fe62 	bl	8004128 <HAL_RCC_GetPCLK1Freq>
 8006464:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006466:	e010      	b.n	800648a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006468:	4b9e      	ldr	r3, [pc, #632]	; (80066e4 <UART_SetConfig+0x5c0>)
 800646a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800646c:	e00d      	b.n	800648a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800646e:	f7fd fded 	bl	800404c <HAL_RCC_GetSysClockFreq>
 8006472:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006474:	e009      	b.n	800648a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800647a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800647c:	e005      	b.n	800648a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800647e:	2300      	movs	r3, #0
 8006480:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006488:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800648a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648c:	2b00      	cmp	r3, #0
 800648e:	f000 8130 	beq.w	80066f2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006496:	4a94      	ldr	r2, [pc, #592]	; (80066e8 <UART_SetConfig+0x5c4>)
 8006498:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800649c:	461a      	mov	r2, r3
 800649e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80064a4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	685a      	ldr	r2, [r3, #4]
 80064aa:	4613      	mov	r3, r2
 80064ac:	005b      	lsls	r3, r3, #1
 80064ae:	4413      	add	r3, r2
 80064b0:	69ba      	ldr	r2, [r7, #24]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d305      	bcc.n	80064c2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064bc:	69ba      	ldr	r2, [r7, #24]
 80064be:	429a      	cmp	r2, r3
 80064c0:	d903      	bls.n	80064ca <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80064c8:	e113      	b.n	80066f2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064cc:	2200      	movs	r2, #0
 80064ce:	60bb      	str	r3, [r7, #8]
 80064d0:	60fa      	str	r2, [r7, #12]
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d6:	4a84      	ldr	r2, [pc, #528]	; (80066e8 <UART_SetConfig+0x5c4>)
 80064d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064dc:	b29b      	uxth	r3, r3
 80064de:	2200      	movs	r2, #0
 80064e0:	603b      	str	r3, [r7, #0]
 80064e2:	607a      	str	r2, [r7, #4]
 80064e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80064ec:	f7f9 fe94 	bl	8000218 <__aeabi_uldivmod>
 80064f0:	4602      	mov	r2, r0
 80064f2:	460b      	mov	r3, r1
 80064f4:	4610      	mov	r0, r2
 80064f6:	4619      	mov	r1, r3
 80064f8:	f04f 0200 	mov.w	r2, #0
 80064fc:	f04f 0300 	mov.w	r3, #0
 8006500:	020b      	lsls	r3, r1, #8
 8006502:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006506:	0202      	lsls	r2, r0, #8
 8006508:	6979      	ldr	r1, [r7, #20]
 800650a:	6849      	ldr	r1, [r1, #4]
 800650c:	0849      	lsrs	r1, r1, #1
 800650e:	2000      	movs	r0, #0
 8006510:	460c      	mov	r4, r1
 8006512:	4605      	mov	r5, r0
 8006514:	eb12 0804 	adds.w	r8, r2, r4
 8006518:	eb43 0905 	adc.w	r9, r3, r5
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	469a      	mov	sl, r3
 8006524:	4693      	mov	fp, r2
 8006526:	4652      	mov	r2, sl
 8006528:	465b      	mov	r3, fp
 800652a:	4640      	mov	r0, r8
 800652c:	4649      	mov	r1, r9
 800652e:	f7f9 fe73 	bl	8000218 <__aeabi_uldivmod>
 8006532:	4602      	mov	r2, r0
 8006534:	460b      	mov	r3, r1
 8006536:	4613      	mov	r3, r2
 8006538:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800653a:	6a3b      	ldr	r3, [r7, #32]
 800653c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006540:	d308      	bcc.n	8006554 <UART_SetConfig+0x430>
 8006542:	6a3b      	ldr	r3, [r7, #32]
 8006544:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006548:	d204      	bcs.n	8006554 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	6a3a      	ldr	r2, [r7, #32]
 8006550:	60da      	str	r2, [r3, #12]
 8006552:	e0ce      	b.n	80066f2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800655a:	e0ca      	b.n	80066f2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	69db      	ldr	r3, [r3, #28]
 8006560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006564:	d166      	bne.n	8006634 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006566:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800656a:	2b08      	cmp	r3, #8
 800656c:	d827      	bhi.n	80065be <UART_SetConfig+0x49a>
 800656e:	a201      	add	r2, pc, #4	; (adr r2, 8006574 <UART_SetConfig+0x450>)
 8006570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006574:	08006599 	.word	0x08006599
 8006578:	080065a1 	.word	0x080065a1
 800657c:	080065a9 	.word	0x080065a9
 8006580:	080065bf 	.word	0x080065bf
 8006584:	080065af 	.word	0x080065af
 8006588:	080065bf 	.word	0x080065bf
 800658c:	080065bf 	.word	0x080065bf
 8006590:	080065bf 	.word	0x080065bf
 8006594:	080065b7 	.word	0x080065b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006598:	f7fd fdc6 	bl	8004128 <HAL_RCC_GetPCLK1Freq>
 800659c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800659e:	e014      	b.n	80065ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065a0:	f7fd fdd8 	bl	8004154 <HAL_RCC_GetPCLK2Freq>
 80065a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80065a6:	e010      	b.n	80065ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065a8:	4b4e      	ldr	r3, [pc, #312]	; (80066e4 <UART_SetConfig+0x5c0>)
 80065aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80065ac:	e00d      	b.n	80065ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065ae:	f7fd fd4d 	bl	800404c <HAL_RCC_GetSysClockFreq>
 80065b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80065b4:	e009      	b.n	80065ca <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80065bc:	e005      	b.n	80065ca <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80065be:	2300      	movs	r3, #0
 80065c0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80065c2:	2301      	movs	r3, #1
 80065c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80065c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f000 8090 	beq.w	80066f2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065d6:	4a44      	ldr	r2, [pc, #272]	; (80066e8 <UART_SetConfig+0x5c4>)
 80065d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065dc:	461a      	mov	r2, r3
 80065de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80065e4:	005a      	lsls	r2, r3, #1
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	085b      	lsrs	r3, r3, #1
 80065ec:	441a      	add	r2, r3
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80065f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065f8:	6a3b      	ldr	r3, [r7, #32]
 80065fa:	2b0f      	cmp	r3, #15
 80065fc:	d916      	bls.n	800662c <UART_SetConfig+0x508>
 80065fe:	6a3b      	ldr	r3, [r7, #32]
 8006600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006604:	d212      	bcs.n	800662c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006606:	6a3b      	ldr	r3, [r7, #32]
 8006608:	b29b      	uxth	r3, r3
 800660a:	f023 030f 	bic.w	r3, r3, #15
 800660e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006610:	6a3b      	ldr	r3, [r7, #32]
 8006612:	085b      	lsrs	r3, r3, #1
 8006614:	b29b      	uxth	r3, r3
 8006616:	f003 0307 	and.w	r3, r3, #7
 800661a:	b29a      	uxth	r2, r3
 800661c:	8bfb      	ldrh	r3, [r7, #30]
 800661e:	4313      	orrs	r3, r2
 8006620:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	8bfa      	ldrh	r2, [r7, #30]
 8006628:	60da      	str	r2, [r3, #12]
 800662a:	e062      	b.n	80066f2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006632:	e05e      	b.n	80066f2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006634:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006638:	2b08      	cmp	r3, #8
 800663a:	d828      	bhi.n	800668e <UART_SetConfig+0x56a>
 800663c:	a201      	add	r2, pc, #4	; (adr r2, 8006644 <UART_SetConfig+0x520>)
 800663e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006642:	bf00      	nop
 8006644:	08006669 	.word	0x08006669
 8006648:	08006671 	.word	0x08006671
 800664c:	08006679 	.word	0x08006679
 8006650:	0800668f 	.word	0x0800668f
 8006654:	0800667f 	.word	0x0800667f
 8006658:	0800668f 	.word	0x0800668f
 800665c:	0800668f 	.word	0x0800668f
 8006660:	0800668f 	.word	0x0800668f
 8006664:	08006687 	.word	0x08006687
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006668:	f7fd fd5e 	bl	8004128 <HAL_RCC_GetPCLK1Freq>
 800666c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800666e:	e014      	b.n	800669a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006670:	f7fd fd70 	bl	8004154 <HAL_RCC_GetPCLK2Freq>
 8006674:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006676:	e010      	b.n	800669a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006678:	4b1a      	ldr	r3, [pc, #104]	; (80066e4 <UART_SetConfig+0x5c0>)
 800667a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800667c:	e00d      	b.n	800669a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800667e:	f7fd fce5 	bl	800404c <HAL_RCC_GetSysClockFreq>
 8006682:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006684:	e009      	b.n	800669a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006686:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800668a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800668c:	e005      	b.n	800669a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800668e:	2300      	movs	r3, #0
 8006690:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006692:	2301      	movs	r3, #1
 8006694:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006698:	bf00      	nop
    }

    if (pclk != 0U)
 800669a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669c:	2b00      	cmp	r3, #0
 800669e:	d028      	beq.n	80066f2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a4:	4a10      	ldr	r2, [pc, #64]	; (80066e8 <UART_SetConfig+0x5c4>)
 80066a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066aa:	461a      	mov	r2, r3
 80066ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	085b      	lsrs	r3, r3, #1
 80066b8:	441a      	add	r2, r3
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	fbb2 f3f3 	udiv	r3, r2, r3
 80066c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066c4:	6a3b      	ldr	r3, [r7, #32]
 80066c6:	2b0f      	cmp	r3, #15
 80066c8:	d910      	bls.n	80066ec <UART_SetConfig+0x5c8>
 80066ca:	6a3b      	ldr	r3, [r7, #32]
 80066cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066d0:	d20c      	bcs.n	80066ec <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80066d2:	6a3b      	ldr	r3, [r7, #32]
 80066d4:	b29a      	uxth	r2, r3
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	60da      	str	r2, [r3, #12]
 80066dc:	e009      	b.n	80066f2 <UART_SetConfig+0x5ce>
 80066de:	bf00      	nop
 80066e0:	40008000 	.word	0x40008000
 80066e4:	00f42400 	.word	0x00f42400
 80066e8:	08006ea0 	.word	0x08006ea0
      }
      else
      {
        ret = HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	2201      	movs	r2, #1
 80066f6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	2200      	movs	r2, #0
 8006706:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	2200      	movs	r2, #0
 800670c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800670e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006712:	4618      	mov	r0, r3
 8006714:	3730      	adds	r7, #48	; 0x30
 8006716:	46bd      	mov	sp, r7
 8006718:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800671c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006728:	f003 0301 	and.w	r3, r3, #1
 800672c:	2b00      	cmp	r3, #0
 800672e:	d00a      	beq.n	8006746 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	430a      	orrs	r2, r1
 8006744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800674a:	f003 0302 	and.w	r3, r3, #2
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00a      	beq.n	8006768 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	430a      	orrs	r2, r1
 8006766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800676c:	f003 0304 	and.w	r3, r3, #4
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00a      	beq.n	800678a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	430a      	orrs	r2, r1
 8006788:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800678e:	f003 0308 	and.w	r3, r3, #8
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00a      	beq.n	80067ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	685b      	ldr	r3, [r3, #4]
 800679c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	430a      	orrs	r2, r1
 80067aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b0:	f003 0310 	and.w	r3, r3, #16
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00a      	beq.n	80067ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	430a      	orrs	r2, r1
 80067cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d2:	f003 0320 	and.w	r3, r3, #32
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00a      	beq.n	80067f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	430a      	orrs	r2, r1
 80067ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d01a      	beq.n	8006832 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	430a      	orrs	r2, r1
 8006810:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006816:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800681a:	d10a      	bne.n	8006832 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	430a      	orrs	r2, r1
 8006830:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800683a:	2b00      	cmp	r3, #0
 800683c:	d00a      	beq.n	8006854 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	430a      	orrs	r2, r1
 8006852:	605a      	str	r2, [r3, #4]
  }
}
 8006854:	bf00      	nop
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b086      	sub	sp, #24
 8006864:	af02      	add	r7, sp, #8
 8006866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006870:	f7fc f946 	bl	8002b00 <HAL_GetTick>
 8006874:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0308 	and.w	r3, r3, #8
 8006880:	2b08      	cmp	r3, #8
 8006882:	d10e      	bne.n	80068a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006884:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 f82f 	bl	80068f6 <UART_WaitOnFlagUntilTimeout>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d001      	beq.n	80068a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800689e:	2303      	movs	r3, #3
 80068a0:	e025      	b.n	80068ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f003 0304 	and.w	r3, r3, #4
 80068ac:	2b04      	cmp	r3, #4
 80068ae:	d10e      	bne.n	80068ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80068b4:	9300      	str	r3, [sp, #0]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f819 	bl	80068f6 <UART_WaitOnFlagUntilTimeout>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d001      	beq.n	80068ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e00f      	b.n	80068ee <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2220      	movs	r2, #32
 80068d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2220      	movs	r2, #32
 80068da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b09c      	sub	sp, #112	; 0x70
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	60f8      	str	r0, [r7, #12]
 80068fe:	60b9      	str	r1, [r7, #8]
 8006900:	603b      	str	r3, [r7, #0]
 8006902:	4613      	mov	r3, r2
 8006904:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006906:	e0a9      	b.n	8006a5c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006908:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800690a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800690e:	f000 80a5 	beq.w	8006a5c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006912:	f7fc f8f5 	bl	8002b00 <HAL_GetTick>
 8006916:	4602      	mov	r2, r0
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800691e:	429a      	cmp	r2, r3
 8006920:	d302      	bcc.n	8006928 <UART_WaitOnFlagUntilTimeout+0x32>
 8006922:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006924:	2b00      	cmp	r3, #0
 8006926:	d140      	bne.n	80069aa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006930:	e853 3f00 	ldrex	r3, [r3]
 8006934:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006938:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800693c:	667b      	str	r3, [r7, #100]	; 0x64
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	461a      	mov	r2, r3
 8006944:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006946:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006948:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800694c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800694e:	e841 2300 	strex	r3, r2, [r1]
 8006952:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006956:	2b00      	cmp	r3, #0
 8006958:	d1e6      	bne.n	8006928 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	3308      	adds	r3, #8
 8006960:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006964:	e853 3f00 	ldrex	r3, [r3]
 8006968:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800696a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696c:	f023 0301 	bic.w	r3, r3, #1
 8006970:	663b      	str	r3, [r7, #96]	; 0x60
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3308      	adds	r3, #8
 8006978:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800697a:	64ba      	str	r2, [r7, #72]	; 0x48
 800697c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006980:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006982:	e841 2300 	strex	r3, r2, [r1]
 8006986:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1e5      	bne.n	800695a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2220      	movs	r2, #32
 8006992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2220      	movs	r2, #32
 800699a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e069      	b.n	8006a7e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0304 	and.w	r3, r3, #4
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d051      	beq.n	8006a5c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	69db      	ldr	r3, [r3, #28]
 80069be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80069c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80069c6:	d149      	bne.n	8006a5c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069d0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069da:	e853 3f00 	ldrex	r3, [r3]
 80069de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	461a      	mov	r2, r3
 80069ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80069f0:	637b      	str	r3, [r7, #52]	; 0x34
 80069f2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069f8:	e841 2300 	strex	r3, r2, [r1]
 80069fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80069fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d1e6      	bne.n	80069d2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	3308      	adds	r3, #8
 8006a0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0c:	697b      	ldr	r3, [r7, #20]
 8006a0e:	e853 3f00 	ldrex	r3, [r3]
 8006a12:	613b      	str	r3, [r7, #16]
   return(result);
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	f023 0301 	bic.w	r3, r3, #1
 8006a1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	3308      	adds	r3, #8
 8006a22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006a24:	623a      	str	r2, [r7, #32]
 8006a26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a28:	69f9      	ldr	r1, [r7, #28]
 8006a2a:	6a3a      	ldr	r2, [r7, #32]
 8006a2c:	e841 2300 	strex	r3, r2, [r1]
 8006a30:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d1e5      	bne.n	8006a04 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2220      	movs	r2, #32
 8006a3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2220      	movs	r2, #32
 8006a44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2220      	movs	r2, #32
 8006a4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e010      	b.n	8006a7e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	69da      	ldr	r2, [r3, #28]
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	4013      	ands	r3, r2
 8006a66:	68ba      	ldr	r2, [r7, #8]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	bf0c      	ite	eq
 8006a6c:	2301      	moveq	r3, #1
 8006a6e:	2300      	movne	r3, #0
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	461a      	mov	r2, r3
 8006a74:	79fb      	ldrb	r3, [r7, #7]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	f43f af46 	beq.w	8006908 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a7c:	2300      	movs	r3, #0
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3770      	adds	r7, #112	; 0x70
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}

08006a86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a86:	b480      	push	{r7}
 8006a88:	b095      	sub	sp, #84	; 0x54
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a96:	e853 3f00 	ldrex	r3, [r3]
 8006a9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aac:	643b      	str	r3, [r7, #64]	; 0x40
 8006aae:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ab2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ab4:	e841 2300 	strex	r3, r2, [r1]
 8006ab8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1e6      	bne.n	8006a8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	3308      	adds	r3, #8
 8006ac6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac8:	6a3b      	ldr	r3, [r7, #32]
 8006aca:	e853 3f00 	ldrex	r3, [r3]
 8006ace:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ad0:	69fb      	ldr	r3, [r7, #28]
 8006ad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ad6:	f023 0301 	bic.w	r3, r3, #1
 8006ada:	64bb      	str	r3, [r7, #72]	; 0x48
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	3308      	adds	r3, #8
 8006ae2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ae4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ae6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006aea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006aec:	e841 2300 	strex	r3, r2, [r1]
 8006af0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1e3      	bne.n	8006ac0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d118      	bne.n	8006b32 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	e853 3f00 	ldrex	r3, [r3]
 8006b0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	f023 0310 	bic.w	r3, r3, #16
 8006b14:	647b      	str	r3, [r7, #68]	; 0x44
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b1e:	61bb      	str	r3, [r7, #24]
 8006b20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b22:	6979      	ldr	r1, [r7, #20]
 8006b24:	69ba      	ldr	r2, [r7, #24]
 8006b26:	e841 2300 	strex	r3, r2, [r1]
 8006b2a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d1e6      	bne.n	8006b00 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2220      	movs	r2, #32
 8006b36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006b46:	bf00      	nop
 8006b48:	3754      	adds	r7, #84	; 0x54
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr

08006b52 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b084      	sub	sp, #16
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b5e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b70:	68f8      	ldr	r0, [r7, #12]
 8006b72:	f7ff fac1 	bl	80060f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b76:	bf00      	nop
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b088      	sub	sp, #32
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	e853 3f00 	ldrex	r3, [r3]
 8006b92:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b9a:	61fb      	str	r3, [r7, #28]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	61bb      	str	r3, [r7, #24]
 8006ba6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba8:	6979      	ldr	r1, [r7, #20]
 8006baa:	69ba      	ldr	r2, [r7, #24]
 8006bac:	e841 2300 	strex	r3, r2, [r1]
 8006bb0:	613b      	str	r3, [r7, #16]
   return(result);
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1e6      	bne.n	8006b86 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2220      	movs	r2, #32
 8006bbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f7ff fa8c 	bl	80060e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bcc:	bf00      	nop
 8006bce:	3720      	adds	r7, #32
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b083      	sub	sp, #12
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006bf0:	bf00      	nop
 8006bf2:	370c      	adds	r7, #12
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfa:	4770      	bx	lr

08006bfc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b083      	sub	sp, #12
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006c04:	bf00      	nop
 8006c06:	370c      	adds	r7, #12
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d101      	bne.n	8006c26 <HAL_UARTEx_DisableFifoMode+0x16>
 8006c22:	2302      	movs	r3, #2
 8006c24:	e027      	b.n	8006c76 <HAL_UARTEx_DisableFifoMode+0x66>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2201      	movs	r2, #1
 8006c2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2224      	movs	r2, #36	; 0x24
 8006c32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	681a      	ldr	r2, [r3, #0]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f022 0201 	bic.w	r2, r2, #1
 8006c4c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006c54:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2220      	movs	r2, #32
 8006c68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c74:	2300      	movs	r3, #0
}
 8006c76:	4618      	mov	r0, r3
 8006c78:	3714      	adds	r7, #20
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c80:	4770      	bx	lr

08006c82 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b084      	sub	sp, #16
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d101      	bne.n	8006c9a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006c96:	2302      	movs	r3, #2
 8006c98:	e02d      	b.n	8006cf6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2224      	movs	r2, #36	; 0x24
 8006ca6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	681a      	ldr	r2, [r3, #0]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f022 0201 	bic.w	r2, r2, #1
 8006cc0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	683a      	ldr	r2, [r7, #0]
 8006cd2:	430a      	orrs	r2, r1
 8006cd4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f850 	bl	8006d7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2220      	movs	r2, #32
 8006ce8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3710      	adds	r7, #16
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}

08006cfe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b084      	sub	sp, #16
 8006d02:	af00      	add	r7, sp, #0
 8006d04:	6078      	str	r0, [r7, #4]
 8006d06:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d101      	bne.n	8006d16 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d12:	2302      	movs	r3, #2
 8006d14:	e02d      	b.n	8006d72 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2224      	movs	r2, #36	; 0x24
 8006d22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	681a      	ldr	r2, [r3, #0]
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f022 0201 	bic.w	r2, r2, #1
 8006d3c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	683a      	ldr	r2, [r7, #0]
 8006d4e:	430a      	orrs	r2, r1
 8006d50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 f812 	bl	8006d7c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	68fa      	ldr	r2, [r7, #12]
 8006d5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2220      	movs	r2, #32
 8006d64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
	...

08006d7c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d108      	bne.n	8006d9e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006d9c:	e031      	b.n	8006e02 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006d9e:	2308      	movs	r3, #8
 8006da0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006da2:	2308      	movs	r3, #8
 8006da4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	0e5b      	lsrs	r3, r3, #25
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	f003 0307 	and.w	r3, r3, #7
 8006db4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	0f5b      	lsrs	r3, r3, #29
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	f003 0307 	and.w	r3, r3, #7
 8006dc4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006dc6:	7bbb      	ldrb	r3, [r7, #14]
 8006dc8:	7b3a      	ldrb	r2, [r7, #12]
 8006dca:	4911      	ldr	r1, [pc, #68]	; (8006e10 <UARTEx_SetNbDataToProcess+0x94>)
 8006dcc:	5c8a      	ldrb	r2, [r1, r2]
 8006dce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006dd2:	7b3a      	ldrb	r2, [r7, #12]
 8006dd4:	490f      	ldr	r1, [pc, #60]	; (8006e14 <UARTEx_SetNbDataToProcess+0x98>)
 8006dd6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006dd8:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ddc:	b29a      	uxth	r2, r3
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006de4:	7bfb      	ldrb	r3, [r7, #15]
 8006de6:	7b7a      	ldrb	r2, [r7, #13]
 8006de8:	4909      	ldr	r1, [pc, #36]	; (8006e10 <UARTEx_SetNbDataToProcess+0x94>)
 8006dea:	5c8a      	ldrb	r2, [r1, r2]
 8006dec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006df0:	7b7a      	ldrb	r2, [r7, #13]
 8006df2:	4908      	ldr	r1, [pc, #32]	; (8006e14 <UARTEx_SetNbDataToProcess+0x98>)
 8006df4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006df6:	fb93 f3f2 	sdiv	r3, r3, r2
 8006dfa:	b29a      	uxth	r2, r3
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006e02:	bf00      	nop
 8006e04:	3714      	adds	r7, #20
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr
 8006e0e:	bf00      	nop
 8006e10:	08006eb8 	.word	0x08006eb8
 8006e14:	08006ec0 	.word	0x08006ec0

08006e18 <__libc_init_array>:
 8006e18:	b570      	push	{r4, r5, r6, lr}
 8006e1a:	4d0d      	ldr	r5, [pc, #52]	; (8006e50 <__libc_init_array+0x38>)
 8006e1c:	4c0d      	ldr	r4, [pc, #52]	; (8006e54 <__libc_init_array+0x3c>)
 8006e1e:	1b64      	subs	r4, r4, r5
 8006e20:	10a4      	asrs	r4, r4, #2
 8006e22:	2600      	movs	r6, #0
 8006e24:	42a6      	cmp	r6, r4
 8006e26:	d109      	bne.n	8006e3c <__libc_init_array+0x24>
 8006e28:	4d0b      	ldr	r5, [pc, #44]	; (8006e58 <__libc_init_array+0x40>)
 8006e2a:	4c0c      	ldr	r4, [pc, #48]	; (8006e5c <__libc_init_array+0x44>)
 8006e2c:	f000 f820 	bl	8006e70 <_init>
 8006e30:	1b64      	subs	r4, r4, r5
 8006e32:	10a4      	asrs	r4, r4, #2
 8006e34:	2600      	movs	r6, #0
 8006e36:	42a6      	cmp	r6, r4
 8006e38:	d105      	bne.n	8006e46 <__libc_init_array+0x2e>
 8006e3a:	bd70      	pop	{r4, r5, r6, pc}
 8006e3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e40:	4798      	blx	r3
 8006e42:	3601      	adds	r6, #1
 8006e44:	e7ee      	b.n	8006e24 <__libc_init_array+0xc>
 8006e46:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e4a:	4798      	blx	r3
 8006e4c:	3601      	adds	r6, #1
 8006e4e:	e7f2      	b.n	8006e36 <__libc_init_array+0x1e>
 8006e50:	08006ed0 	.word	0x08006ed0
 8006e54:	08006ed0 	.word	0x08006ed0
 8006e58:	08006ed0 	.word	0x08006ed0
 8006e5c:	08006ed4 	.word	0x08006ed4

08006e60 <memset>:
 8006e60:	4402      	add	r2, r0
 8006e62:	4603      	mov	r3, r0
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d100      	bne.n	8006e6a <memset+0xa>
 8006e68:	4770      	bx	lr
 8006e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e6e:	e7f9      	b.n	8006e64 <memset+0x4>

08006e70 <_init>:
 8006e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e72:	bf00      	nop
 8006e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e76:	bc08      	pop	{r3}
 8006e78:	469e      	mov	lr, r3
 8006e7a:	4770      	bx	lr

08006e7c <_fini>:
 8006e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e7e:	bf00      	nop
 8006e80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e82:	bc08      	pop	{r3}
 8006e84:	469e      	mov	lr, r3
 8006e86:	4770      	bx	lr
